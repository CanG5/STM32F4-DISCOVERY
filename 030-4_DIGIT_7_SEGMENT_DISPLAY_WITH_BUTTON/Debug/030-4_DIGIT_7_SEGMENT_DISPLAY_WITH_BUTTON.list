
030-4_DIGIT_7_SEGMENT_DISPLAY_WITH_BUTTON.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000188  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00000ce0  08000188  08000188  00010188  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000000  08000e68  08000e68  00020010  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  3 .init_array   00000004  08000e68  08000e68  00010e68  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  4 .fini_array   00000004  08000e6c  08000e6c  00010e6c  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  5 .data         00000010  20000000  08000e70  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  6 .ccmram       00000000  10000000  10000000  00020010  2**0
                  CONTENTS
  7 .bss          000000b8  20000010  20000010  00020010  2**2
                  ALLOC
  8 ._user_heap_stack 00000400  200000c8  200000c8  00020010  2**0
                  ALLOC
  9 .ARM.attributes 00000030  00000000  00000000  00020010  2**0
                  CONTENTS, READONLY
 10 .debug_info   000047ac  00000000  00000000  00020040  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_abbrev 00000e13  00000000  00000000  000247ec  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_aranges 00000668  00000000  00000000  00025600  2**3
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_ranges 000005d0  00000000  00000000  00025c68  2**3
                  CONTENTS, READONLY, DEBUGGING
 14 .debug_line   000023e2  00000000  00000000  00026238  2**0
                  CONTENTS, READONLY, DEBUGGING
 15 .debug_str    00002206  00000000  00000000  0002861a  2**0
                  CONTENTS, READONLY, DEBUGGING
 16 .comment      0000007c  00000000  00000000  0002a820  2**0
                  CONTENTS, READONLY
 17 .debug_frame  00001a2c  00000000  00000000  0002a89c  2**2
                  CONTENTS, READONLY, DEBUGGING
 18 .stabstr      0000003f  00000000  00000000  0002c2c8  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

08000188 <__do_global_dtors_aux>:
 8000188:	b510      	push	{r4, lr}
 800018a:	4c05      	ldr	r4, [pc, #20]	; (80001a0 <__do_global_dtors_aux+0x18>)
 800018c:	7823      	ldrb	r3, [r4, #0]
 800018e:	b933      	cbnz	r3, 800019e <__do_global_dtors_aux+0x16>
 8000190:	4b04      	ldr	r3, [pc, #16]	; (80001a4 <__do_global_dtors_aux+0x1c>)
 8000192:	b113      	cbz	r3, 800019a <__do_global_dtors_aux+0x12>
 8000194:	4804      	ldr	r0, [pc, #16]	; (80001a8 <__do_global_dtors_aux+0x20>)
 8000196:	f3af 8000 	nop.w
 800019a:	2301      	movs	r3, #1
 800019c:	7023      	strb	r3, [r4, #0]
 800019e:	bd10      	pop	{r4, pc}
 80001a0:	20000010 	.word	0x20000010
 80001a4:	00000000 	.word	0x00000000
 80001a8:	08000e50 	.word	0x08000e50

080001ac <frame_dummy>:
 80001ac:	b508      	push	{r3, lr}
 80001ae:	4b03      	ldr	r3, [pc, #12]	; (80001bc <frame_dummy+0x10>)
 80001b0:	b11b      	cbz	r3, 80001ba <frame_dummy+0xe>
 80001b2:	4903      	ldr	r1, [pc, #12]	; (80001c0 <frame_dummy+0x14>)
 80001b4:	4803      	ldr	r0, [pc, #12]	; (80001c4 <frame_dummy+0x18>)
 80001b6:	f3af 8000 	nop.w
 80001ba:	bd08      	pop	{r3, pc}
 80001bc:	00000000 	.word	0x00000000
 80001c0:	20000014 	.word	0x20000014
 80001c4:	08000e50 	.word	0x08000e50

080001c8 <DAC_SetChannel1Data>:
  *            @arg DAC_Align_12b_R: 12bit right data alignment selected
  * @param  Data: Data to be loaded in the selected data holding register.
  * @retval None
  */
void DAC_SetChannel1Data(uint32_t DAC_Align, uint16_t Data)
{  
 80001c8:	b480      	push	{r7}
 80001ca:	b085      	sub	sp, #20
 80001cc:	af00      	add	r7, sp, #0
 80001ce:	6078      	str	r0, [r7, #4]
 80001d0:	460b      	mov	r3, r1
 80001d2:	807b      	strh	r3, [r7, #2]
  __IO uint32_t tmp = 0;
 80001d4:	2300      	movs	r3, #0
 80001d6:	60fb      	str	r3, [r7, #12]
  
  /* Check the parameters */
  assert_param(IS_DAC_ALIGN(DAC_Align));
  assert_param(IS_DAC_DATA(Data));
  
  tmp = (uint32_t)DAC_BASE; 
 80001d8:	4b08      	ldr	r3, [pc, #32]	; (80001fc <DAC_SetChannel1Data+0x34>)
 80001da:	60fb      	str	r3, [r7, #12]
  tmp += DHR12R1_OFFSET + DAC_Align;
 80001dc:	68fa      	ldr	r2, [r7, #12]
 80001de:	687b      	ldr	r3, [r7, #4]
 80001e0:	4413      	add	r3, r2
 80001e2:	3308      	adds	r3, #8
 80001e4:	60fb      	str	r3, [r7, #12]

  /* Set the DAC channel1 selected data holding register */
  *(__IO uint32_t *) tmp = Data;
 80001e6:	68fb      	ldr	r3, [r7, #12]
 80001e8:	461a      	mov	r2, r3
 80001ea:	887b      	ldrh	r3, [r7, #2]
 80001ec:	6013      	str	r3, [r2, #0]
}
 80001ee:	bf00      	nop
 80001f0:	3714      	adds	r7, #20
 80001f2:	46bd      	mov	sp, r7
 80001f4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80001f8:	4770      	bx	lr
 80001fa:	bf00      	nop
 80001fc:	40007400 	.word	0x40007400

08000200 <DMA_Init>:
  * @param  DMA_InitStruct: pointer to a DMA_InitTypeDef structure that contains
  *         the configuration information for the specified DMA Stream.  
  * @retval None
  */
void DMA_Init(DMA_Stream_TypeDef* DMAy_Streamx, DMA_InitTypeDef* DMA_InitStruct)
{
 8000200:	b480      	push	{r7}
 8000202:	b085      	sub	sp, #20
 8000204:	af00      	add	r7, sp, #0
 8000206:	6078      	str	r0, [r7, #4]
 8000208:	6039      	str	r1, [r7, #0]
  uint32_t tmpreg = 0;
 800020a:	2300      	movs	r3, #0
 800020c:	60fb      	str	r3, [r7, #12]
  assert_param(IS_DMA_MEMORY_BURST(DMA_InitStruct->DMA_MemoryBurst));
  assert_param(IS_DMA_PERIPHERAL_BURST(DMA_InitStruct->DMA_PeripheralBurst));

  /*------------------------- DMAy Streamx CR Configuration ------------------*/
  /* Get the DMAy_Streamx CR value */
  tmpreg = DMAy_Streamx->CR;
 800020e:	687b      	ldr	r3, [r7, #4]
 8000210:	681b      	ldr	r3, [r3, #0]
 8000212:	60fb      	str	r3, [r7, #12]

  /* Clear CHSEL, MBURST, PBURST, PL, MSIZE, PSIZE, MINC, PINC, CIRC and DIR bits */
  tmpreg &= ((uint32_t)~(DMA_SxCR_CHSEL | DMA_SxCR_MBURST | DMA_SxCR_PBURST | \
 8000214:	68fa      	ldr	r2, [r7, #12]
 8000216:	4b25      	ldr	r3, [pc, #148]	; (80002ac <DMA_Init+0xac>)
 8000218:	4013      	ands	r3, r2
 800021a:	60fb      	str	r3, [r7, #12]
  /* Set MSIZE bits according to DMA_MemoryDataSize value */
  /* Set CIRC bit according to DMA_Mode value */
  /* Set PL bits according to DMA_Priority value */
  /* Set MBURST bits according to DMA_MemoryBurst value */
  /* Set PBURST bits according to DMA_PeripheralBurst value */
  tmpreg |= DMA_InitStruct->DMA_Channel | DMA_InitStruct->DMA_DIR |
 800021c:	683b      	ldr	r3, [r7, #0]
 800021e:	681a      	ldr	r2, [r3, #0]
 8000220:	683b      	ldr	r3, [r7, #0]
 8000222:	68db      	ldr	r3, [r3, #12]
 8000224:	431a      	orrs	r2, r3
            DMA_InitStruct->DMA_PeripheralInc | DMA_InitStruct->DMA_MemoryInc |
 8000226:	683b      	ldr	r3, [r7, #0]
 8000228:	695b      	ldr	r3, [r3, #20]
  tmpreg |= DMA_InitStruct->DMA_Channel | DMA_InitStruct->DMA_DIR |
 800022a:	431a      	orrs	r2, r3
            DMA_InitStruct->DMA_PeripheralInc | DMA_InitStruct->DMA_MemoryInc |
 800022c:	683b      	ldr	r3, [r7, #0]
 800022e:	699b      	ldr	r3, [r3, #24]
 8000230:	431a      	orrs	r2, r3
            DMA_InitStruct->DMA_PeripheralDataSize | DMA_InitStruct->DMA_MemoryDataSize |
 8000232:	683b      	ldr	r3, [r7, #0]
 8000234:	69db      	ldr	r3, [r3, #28]
            DMA_InitStruct->DMA_PeripheralInc | DMA_InitStruct->DMA_MemoryInc |
 8000236:	431a      	orrs	r2, r3
            DMA_InitStruct->DMA_PeripheralDataSize | DMA_InitStruct->DMA_MemoryDataSize |
 8000238:	683b      	ldr	r3, [r7, #0]
 800023a:	6a1b      	ldr	r3, [r3, #32]
 800023c:	431a      	orrs	r2, r3
            DMA_InitStruct->DMA_Mode | DMA_InitStruct->DMA_Priority |
 800023e:	683b      	ldr	r3, [r7, #0]
 8000240:	6a5b      	ldr	r3, [r3, #36]	; 0x24
            DMA_InitStruct->DMA_PeripheralDataSize | DMA_InitStruct->DMA_MemoryDataSize |
 8000242:	431a      	orrs	r2, r3
            DMA_InitStruct->DMA_Mode | DMA_InitStruct->DMA_Priority |
 8000244:	683b      	ldr	r3, [r7, #0]
 8000246:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8000248:	431a      	orrs	r2, r3
            DMA_InitStruct->DMA_MemoryBurst | DMA_InitStruct->DMA_PeripheralBurst;
 800024a:	683b      	ldr	r3, [r7, #0]
 800024c:	6b5b      	ldr	r3, [r3, #52]	; 0x34
            DMA_InitStruct->DMA_Mode | DMA_InitStruct->DMA_Priority |
 800024e:	431a      	orrs	r2, r3
            DMA_InitStruct->DMA_MemoryBurst | DMA_InitStruct->DMA_PeripheralBurst;
 8000250:	683b      	ldr	r3, [r7, #0]
 8000252:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8000254:	4313      	orrs	r3, r2
  tmpreg |= DMA_InitStruct->DMA_Channel | DMA_InitStruct->DMA_DIR |
 8000256:	68fa      	ldr	r2, [r7, #12]
 8000258:	4313      	orrs	r3, r2
 800025a:	60fb      	str	r3, [r7, #12]

  /* Write to DMAy Streamx CR register */
  DMAy_Streamx->CR = tmpreg;
 800025c:	687b      	ldr	r3, [r7, #4]
 800025e:	68fa      	ldr	r2, [r7, #12]
 8000260:	601a      	str	r2, [r3, #0]

  /*------------------------- DMAy Streamx FCR Configuration -----------------*/
  /* Get the DMAy_Streamx FCR value */
  tmpreg = DMAy_Streamx->FCR;
 8000262:	687b      	ldr	r3, [r7, #4]
 8000264:	695b      	ldr	r3, [r3, #20]
 8000266:	60fb      	str	r3, [r7, #12]

  /* Clear DMDIS and FTH bits */
  tmpreg &= (uint32_t)~(DMA_SxFCR_DMDIS | DMA_SxFCR_FTH);
 8000268:	68fb      	ldr	r3, [r7, #12]
 800026a:	f023 0307 	bic.w	r3, r3, #7
 800026e:	60fb      	str	r3, [r7, #12]

  /* Configure DMAy Streamx FIFO: 
    Set DMDIS bits according to DMA_FIFOMode value 
    Set FTH bits according to DMA_FIFOThreshold value */
  tmpreg |= DMA_InitStruct->DMA_FIFOMode | DMA_InitStruct->DMA_FIFOThreshold;
 8000270:	683b      	ldr	r3, [r7, #0]
 8000272:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8000274:	683b      	ldr	r3, [r7, #0]
 8000276:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000278:	4313      	orrs	r3, r2
 800027a:	68fa      	ldr	r2, [r7, #12]
 800027c:	4313      	orrs	r3, r2
 800027e:	60fb      	str	r3, [r7, #12]

  /* Write to DMAy Streamx CR */
  DMAy_Streamx->FCR = tmpreg;
 8000280:	687b      	ldr	r3, [r7, #4]
 8000282:	68fa      	ldr	r2, [r7, #12]
 8000284:	615a      	str	r2, [r3, #20]

  /*------------------------- DMAy Streamx NDTR Configuration ----------------*/
  /* Write to DMAy Streamx NDTR register */
  DMAy_Streamx->NDTR = DMA_InitStruct->DMA_BufferSize;
 8000286:	683b      	ldr	r3, [r7, #0]
 8000288:	691a      	ldr	r2, [r3, #16]
 800028a:	687b      	ldr	r3, [r7, #4]
 800028c:	605a      	str	r2, [r3, #4]

  /*------------------------- DMAy Streamx PAR Configuration -----------------*/
  /* Write to DMAy Streamx PAR */
  DMAy_Streamx->PAR = DMA_InitStruct->DMA_PeripheralBaseAddr;
 800028e:	683b      	ldr	r3, [r7, #0]
 8000290:	685a      	ldr	r2, [r3, #4]
 8000292:	687b      	ldr	r3, [r7, #4]
 8000294:	609a      	str	r2, [r3, #8]

  /*------------------------- DMAy Streamx M0AR Configuration ----------------*/
  /* Write to DMAy Streamx M0AR */
  DMAy_Streamx->M0AR = DMA_InitStruct->DMA_Memory0BaseAddr;
 8000296:	683b      	ldr	r3, [r7, #0]
 8000298:	689a      	ldr	r2, [r3, #8]
 800029a:	687b      	ldr	r3, [r7, #4]
 800029c:	60da      	str	r2, [r3, #12]
}
 800029e:	bf00      	nop
 80002a0:	3714      	adds	r7, #20
 80002a2:	46bd      	mov	sp, r7
 80002a4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80002a8:	4770      	bx	lr
 80002aa:	bf00      	nop
 80002ac:	f01c803f 	.word	0xf01c803f

080002b0 <DMA_Cmd>:
  *        this single data is finished.            
  *    
  * @retval None
  */
void DMA_Cmd(DMA_Stream_TypeDef* DMAy_Streamx, FunctionalState NewState)
{
 80002b0:	b480      	push	{r7}
 80002b2:	b083      	sub	sp, #12
 80002b4:	af00      	add	r7, sp, #0
 80002b6:	6078      	str	r0, [r7, #4]
 80002b8:	460b      	mov	r3, r1
 80002ba:	70fb      	strb	r3, [r7, #3]
  /* Check the parameters */
  assert_param(IS_DMA_ALL_PERIPH(DMAy_Streamx));
  assert_param(IS_FUNCTIONAL_STATE(NewState));

  if (NewState != DISABLE)
 80002bc:	78fb      	ldrb	r3, [r7, #3]
 80002be:	2b00      	cmp	r3, #0
 80002c0:	d006      	beq.n	80002d0 <DMA_Cmd+0x20>
  {
    /* Enable the selected DMAy Streamx by setting EN bit */
    DMAy_Streamx->CR |= (uint32_t)DMA_SxCR_EN;
 80002c2:	687b      	ldr	r3, [r7, #4]
 80002c4:	681b      	ldr	r3, [r3, #0]
 80002c6:	f043 0201 	orr.w	r2, r3, #1
 80002ca:	687b      	ldr	r3, [r7, #4]
 80002cc:	601a      	str	r2, [r3, #0]
  else
  {
    /* Disable the selected DMAy Streamx by clearing EN bit */
    DMAy_Streamx->CR &= ~(uint32_t)DMA_SxCR_EN;
  }
}
 80002ce:	e005      	b.n	80002dc <DMA_Cmd+0x2c>
    DMAy_Streamx->CR &= ~(uint32_t)DMA_SxCR_EN;
 80002d0:	687b      	ldr	r3, [r7, #4]
 80002d2:	681b      	ldr	r3, [r3, #0]
 80002d4:	f023 0201 	bic.w	r2, r3, #1
 80002d8:	687b      	ldr	r3, [r7, #4]
 80002da:	601a      	str	r2, [r3, #0]
}
 80002dc:	bf00      	nop
 80002de:	370c      	adds	r7, #12
 80002e0:	46bd      	mov	sp, r7
 80002e2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80002e6:	4770      	bx	lr

080002e8 <DMA_GetCmdStatus>:
  *          of this single data is finished.  
  *      
  * @retval Current state of the DMAy Streamx (ENABLE or DISABLE).
  */
FunctionalState DMA_GetCmdStatus(DMA_Stream_TypeDef* DMAy_Streamx)
{
 80002e8:	b480      	push	{r7}
 80002ea:	b085      	sub	sp, #20
 80002ec:	af00      	add	r7, sp, #0
 80002ee:	6078      	str	r0, [r7, #4]
  FunctionalState state = DISABLE;
 80002f0:	2300      	movs	r3, #0
 80002f2:	73fb      	strb	r3, [r7, #15]

  /* Check the parameters */
  assert_param(IS_DMA_ALL_PERIPH(DMAy_Streamx));

  if ((DMAy_Streamx->CR & (uint32_t)DMA_SxCR_EN) != 0)
 80002f4:	687b      	ldr	r3, [r7, #4]
 80002f6:	681b      	ldr	r3, [r3, #0]
 80002f8:	f003 0301 	and.w	r3, r3, #1
 80002fc:	2b00      	cmp	r3, #0
 80002fe:	d002      	beq.n	8000306 <DMA_GetCmdStatus+0x1e>
  {
    /* The selected DMAy Streamx EN bit is set (DMA is still transferring) */
    state = ENABLE;
 8000300:	2301      	movs	r3, #1
 8000302:	73fb      	strb	r3, [r7, #15]
 8000304:	e001      	b.n	800030a <DMA_GetCmdStatus+0x22>
  }
  else
  {
    /* The selected DMAy Streamx EN bit is cleared (DMA is disabled and 
        all transfers are complete) */
    state = DISABLE;
 8000306:	2300      	movs	r3, #0
 8000308:	73fb      	strb	r3, [r7, #15]
  }
  return state;
 800030a:	7bfb      	ldrb	r3, [r7, #15]
}
 800030c:	4618      	mov	r0, r3
 800030e:	3714      	adds	r7, #20
 8000310:	46bd      	mov	sp, r7
 8000312:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000316:	4770      	bx	lr

08000318 <DMA_GetFlagStatus>:
  *            @arg DMA_FLAG_FEIFx:  Streamx FIFO error flag
  *         Where x can be 0 to 7 to select the DMA Stream.
  * @retval The new state of DMA_FLAG (SET or RESET).
  */
FlagStatus DMA_GetFlagStatus(DMA_Stream_TypeDef* DMAy_Streamx, uint32_t DMA_FLAG)
{
 8000318:	b480      	push	{r7}
 800031a:	b087      	sub	sp, #28
 800031c:	af00      	add	r7, sp, #0
 800031e:	6078      	str	r0, [r7, #4]
 8000320:	6039      	str	r1, [r7, #0]
  FlagStatus bitstatus = RESET;
 8000322:	2300      	movs	r3, #0
 8000324:	75fb      	strb	r3, [r7, #23]
  DMA_TypeDef* DMAy;
  uint32_t tmpreg = 0;
 8000326:	2300      	movs	r3, #0
 8000328:	60fb      	str	r3, [r7, #12]
  /* Check the parameters */
  assert_param(IS_DMA_ALL_PERIPH(DMAy_Streamx));
  assert_param(IS_DMA_GET_FLAG(DMA_FLAG));

  /* Determine the DMA to which belongs the stream */
  if (DMAy_Streamx < DMA2_Stream0)
 800032a:	687b      	ldr	r3, [r7, #4]
 800032c:	4a15      	ldr	r2, [pc, #84]	; (8000384 <DMA_GetFlagStatus+0x6c>)
 800032e:	4293      	cmp	r3, r2
 8000330:	d802      	bhi.n	8000338 <DMA_GetFlagStatus+0x20>
  {
    /* DMAy_Streamx belongs to DMA1 */
    DMAy = DMA1; 
 8000332:	4b15      	ldr	r3, [pc, #84]	; (8000388 <DMA_GetFlagStatus+0x70>)
 8000334:	613b      	str	r3, [r7, #16]
 8000336:	e001      	b.n	800033c <DMA_GetFlagStatus+0x24>
  } 
  else 
  {
    /* DMAy_Streamx belongs to DMA2 */
    DMAy = DMA2; 
 8000338:	4b14      	ldr	r3, [pc, #80]	; (800038c <DMA_GetFlagStatus+0x74>)
 800033a:	613b      	str	r3, [r7, #16]
  }

  /* Check if the flag is in HISR or LISR */
  if ((DMA_FLAG & HIGH_ISR_MASK) != (uint32_t)RESET)
 800033c:	683b      	ldr	r3, [r7, #0]
 800033e:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8000342:	2b00      	cmp	r3, #0
 8000344:	d003      	beq.n	800034e <DMA_GetFlagStatus+0x36>
  {
    /* Get DMAy HISR register value */
    tmpreg = DMAy->HISR;
 8000346:	693b      	ldr	r3, [r7, #16]
 8000348:	685b      	ldr	r3, [r3, #4]
 800034a:	60fb      	str	r3, [r7, #12]
 800034c:	e002      	b.n	8000354 <DMA_GetFlagStatus+0x3c>
  }
  else
  {
    /* Get DMAy LISR register value */
    tmpreg = DMAy->LISR;
 800034e:	693b      	ldr	r3, [r7, #16]
 8000350:	681b      	ldr	r3, [r3, #0]
 8000352:	60fb      	str	r3, [r7, #12]
  }   
 
  /* Mask the reserved bits */
  tmpreg &= (uint32_t)RESERVED_MASK;
 8000354:	68fb      	ldr	r3, [r7, #12]
 8000356:	f023 23f0 	bic.w	r3, r3, #4026593280	; 0xf000f000
 800035a:	f023 1382 	bic.w	r3, r3, #8519810	; 0x820082
 800035e:	60fb      	str	r3, [r7, #12]

  /* Check the status of the specified DMA flag */
  if ((tmpreg & DMA_FLAG) != (uint32_t)RESET)
 8000360:	68fa      	ldr	r2, [r7, #12]
 8000362:	683b      	ldr	r3, [r7, #0]
 8000364:	4013      	ands	r3, r2
 8000366:	2b00      	cmp	r3, #0
 8000368:	d002      	beq.n	8000370 <DMA_GetFlagStatus+0x58>
  {
    /* DMA_FLAG is set */
    bitstatus = SET;
 800036a:	2301      	movs	r3, #1
 800036c:	75fb      	strb	r3, [r7, #23]
 800036e:	e001      	b.n	8000374 <DMA_GetFlagStatus+0x5c>
  }
  else
  {
    /* DMA_FLAG is reset */
    bitstatus = RESET;
 8000370:	2300      	movs	r3, #0
 8000372:	75fb      	strb	r3, [r7, #23]
  }

  /* Return the DMA_FLAG status */
  return  bitstatus;
 8000374:	7dfb      	ldrb	r3, [r7, #23]
}
 8000376:	4618      	mov	r0, r3
 8000378:	371c      	adds	r7, #28
 800037a:	46bd      	mov	sp, r7
 800037c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000380:	4770      	bx	lr
 8000382:	bf00      	nop
 8000384:	4002640f 	.word	0x4002640f
 8000388:	40026000 	.word	0x40026000
 800038c:	40026400 	.word	0x40026400

08000390 <DMA_ClearFlag>:
  *            @arg DMA_FLAG_FEIFx:  Streamx FIFO error flag
  *         Where x can be 0 to 7 to select the DMA Stream.   
  * @retval None
  */
void DMA_ClearFlag(DMA_Stream_TypeDef* DMAy_Streamx, uint32_t DMA_FLAG)
{
 8000390:	b480      	push	{r7}
 8000392:	b085      	sub	sp, #20
 8000394:	af00      	add	r7, sp, #0
 8000396:	6078      	str	r0, [r7, #4]
 8000398:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_DMA_ALL_PERIPH(DMAy_Streamx));
  assert_param(IS_DMA_CLEAR_FLAG(DMA_FLAG));

  /* Determine the DMA to which belongs the stream */
  if (DMAy_Streamx < DMA2_Stream0)
 800039a:	687b      	ldr	r3, [r7, #4]
 800039c:	4a10      	ldr	r2, [pc, #64]	; (80003e0 <DMA_ClearFlag+0x50>)
 800039e:	4293      	cmp	r3, r2
 80003a0:	d802      	bhi.n	80003a8 <DMA_ClearFlag+0x18>
  {
    /* DMAy_Streamx belongs to DMA1 */
    DMAy = DMA1; 
 80003a2:	4b10      	ldr	r3, [pc, #64]	; (80003e4 <DMA_ClearFlag+0x54>)
 80003a4:	60fb      	str	r3, [r7, #12]
 80003a6:	e001      	b.n	80003ac <DMA_ClearFlag+0x1c>
  } 
  else 
  {
    /* DMAy_Streamx belongs to DMA2 */
    DMAy = DMA2; 
 80003a8:	4b0f      	ldr	r3, [pc, #60]	; (80003e8 <DMA_ClearFlag+0x58>)
 80003aa:	60fb      	str	r3, [r7, #12]
  }

  /* Check if LIFCR or HIFCR register is targeted */
  if ((DMA_FLAG & HIGH_ISR_MASK) != (uint32_t)RESET)
 80003ac:	683b      	ldr	r3, [r7, #0]
 80003ae:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 80003b2:	2b00      	cmp	r3, #0
 80003b4:	d007      	beq.n	80003c6 <DMA_ClearFlag+0x36>
  {
    /* Set DMAy HIFCR register clear flag bits */
    DMAy->HIFCR = (uint32_t)(DMA_FLAG & RESERVED_MASK);
 80003b6:	683b      	ldr	r3, [r7, #0]
 80003b8:	f023 23f0 	bic.w	r3, r3, #4026593280	; 0xf000f000
 80003bc:	f023 1382 	bic.w	r3, r3, #8519810	; 0x820082
 80003c0:	68fa      	ldr	r2, [r7, #12]
 80003c2:	60d3      	str	r3, [r2, #12]
  else 
  {
    /* Set DMAy LIFCR register clear flag bits */
    DMAy->LIFCR = (uint32_t)(DMA_FLAG & RESERVED_MASK);
  }    
}
 80003c4:	e006      	b.n	80003d4 <DMA_ClearFlag+0x44>
    DMAy->LIFCR = (uint32_t)(DMA_FLAG & RESERVED_MASK);
 80003c6:	683b      	ldr	r3, [r7, #0]
 80003c8:	f023 23f0 	bic.w	r3, r3, #4026593280	; 0xf000f000
 80003cc:	f023 1382 	bic.w	r3, r3, #8519810	; 0x820082
 80003d0:	68fa      	ldr	r2, [r7, #12]
 80003d2:	6093      	str	r3, [r2, #8]
}
 80003d4:	bf00      	nop
 80003d6:	3714      	adds	r7, #20
 80003d8:	46bd      	mov	sp, r7
 80003da:	f85d 7b04 	ldr.w	r7, [sp], #4
 80003de:	4770      	bx	lr
 80003e0:	4002640f 	.word	0x4002640f
 80003e4:	40026000 	.word	0x40026000
 80003e8:	40026400 	.word	0x40026400

080003ec <GPIO_Init>:
  * @param  GPIO_InitStruct: pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void GPIO_Init(GPIO_TypeDef* GPIOx, GPIO_InitTypeDef* GPIO_InitStruct)
{
 80003ec:	b480      	push	{r7}
 80003ee:	b087      	sub	sp, #28
 80003f0:	af00      	add	r7, sp, #0
 80003f2:	6078      	str	r0, [r7, #4]
 80003f4:	6039      	str	r1, [r7, #0]
  uint32_t pinpos = 0x00, pos = 0x00 , currentpin = 0x00;
 80003f6:	2300      	movs	r3, #0
 80003f8:	617b      	str	r3, [r7, #20]
 80003fa:	2300      	movs	r3, #0
 80003fc:	613b      	str	r3, [r7, #16]
 80003fe:	2300      	movs	r3, #0
 8000400:	60fb      	str	r3, [r7, #12]
  assert_param(IS_GPIO_MODE(GPIO_InitStruct->GPIO_Mode));
  assert_param(IS_GPIO_PUPD(GPIO_InitStruct->GPIO_PuPd));

  /* ------------------------- Configure the port pins ---------------- */
  /*-- GPIO Mode Configuration --*/
  for (pinpos = 0x00; pinpos < 0x10; pinpos++)
 8000402:	2300      	movs	r3, #0
 8000404:	617b      	str	r3, [r7, #20]
 8000406:	e076      	b.n	80004f6 <GPIO_Init+0x10a>
  {
    pos = ((uint32_t)0x01) << pinpos;
 8000408:	2201      	movs	r2, #1
 800040a:	697b      	ldr	r3, [r7, #20]
 800040c:	fa02 f303 	lsl.w	r3, r2, r3
 8000410:	613b      	str	r3, [r7, #16]
    /* Get the port pins position */
    currentpin = (GPIO_InitStruct->GPIO_Pin) & pos;
 8000412:	683b      	ldr	r3, [r7, #0]
 8000414:	681a      	ldr	r2, [r3, #0]
 8000416:	693b      	ldr	r3, [r7, #16]
 8000418:	4013      	ands	r3, r2
 800041a:	60fb      	str	r3, [r7, #12]

    if (currentpin == pos)
 800041c:	68fa      	ldr	r2, [r7, #12]
 800041e:	693b      	ldr	r3, [r7, #16]
 8000420:	429a      	cmp	r2, r3
 8000422:	d165      	bne.n	80004f0 <GPIO_Init+0x104>
    {
      GPIOx->MODER  &= ~(GPIO_MODER_MODER0 << (pinpos * 2));
 8000424:	687b      	ldr	r3, [r7, #4]
 8000426:	681a      	ldr	r2, [r3, #0]
 8000428:	697b      	ldr	r3, [r7, #20]
 800042a:	005b      	lsls	r3, r3, #1
 800042c:	2103      	movs	r1, #3
 800042e:	fa01 f303 	lsl.w	r3, r1, r3
 8000432:	43db      	mvns	r3, r3
 8000434:	401a      	ands	r2, r3
 8000436:	687b      	ldr	r3, [r7, #4]
 8000438:	601a      	str	r2, [r3, #0]
      GPIOx->MODER |= (((uint32_t)GPIO_InitStruct->GPIO_Mode) << (pinpos * 2));
 800043a:	687b      	ldr	r3, [r7, #4]
 800043c:	681a      	ldr	r2, [r3, #0]
 800043e:	683b      	ldr	r3, [r7, #0]
 8000440:	791b      	ldrb	r3, [r3, #4]
 8000442:	4619      	mov	r1, r3
 8000444:	697b      	ldr	r3, [r7, #20]
 8000446:	005b      	lsls	r3, r3, #1
 8000448:	fa01 f303 	lsl.w	r3, r1, r3
 800044c:	431a      	orrs	r2, r3
 800044e:	687b      	ldr	r3, [r7, #4]
 8000450:	601a      	str	r2, [r3, #0]

      if ((GPIO_InitStruct->GPIO_Mode == GPIO_Mode_OUT) || (GPIO_InitStruct->GPIO_Mode == GPIO_Mode_AF))
 8000452:	683b      	ldr	r3, [r7, #0]
 8000454:	791b      	ldrb	r3, [r3, #4]
 8000456:	2b01      	cmp	r3, #1
 8000458:	d003      	beq.n	8000462 <GPIO_Init+0x76>
 800045a:	683b      	ldr	r3, [r7, #0]
 800045c:	791b      	ldrb	r3, [r3, #4]
 800045e:	2b02      	cmp	r3, #2
 8000460:	d12e      	bne.n	80004c0 <GPIO_Init+0xd4>
      {
        /* Check Speed mode parameters */
        assert_param(IS_GPIO_SPEED(GPIO_InitStruct->GPIO_Speed));

        /* Speed mode configuration */
        GPIOx->OSPEEDR &= ~(GPIO_OSPEEDER_OSPEEDR0 << (pinpos * 2));
 8000462:	687b      	ldr	r3, [r7, #4]
 8000464:	689a      	ldr	r2, [r3, #8]
 8000466:	697b      	ldr	r3, [r7, #20]
 8000468:	005b      	lsls	r3, r3, #1
 800046a:	2103      	movs	r1, #3
 800046c:	fa01 f303 	lsl.w	r3, r1, r3
 8000470:	43db      	mvns	r3, r3
 8000472:	401a      	ands	r2, r3
 8000474:	687b      	ldr	r3, [r7, #4]
 8000476:	609a      	str	r2, [r3, #8]
        GPIOx->OSPEEDR |= ((uint32_t)(GPIO_InitStruct->GPIO_Speed) << (pinpos * 2));
 8000478:	687b      	ldr	r3, [r7, #4]
 800047a:	689a      	ldr	r2, [r3, #8]
 800047c:	683b      	ldr	r3, [r7, #0]
 800047e:	795b      	ldrb	r3, [r3, #5]
 8000480:	4619      	mov	r1, r3
 8000482:	697b      	ldr	r3, [r7, #20]
 8000484:	005b      	lsls	r3, r3, #1
 8000486:	fa01 f303 	lsl.w	r3, r1, r3
 800048a:	431a      	orrs	r2, r3
 800048c:	687b      	ldr	r3, [r7, #4]
 800048e:	609a      	str	r2, [r3, #8]

        /* Check Output mode parameters */
        assert_param(IS_GPIO_OTYPE(GPIO_InitStruct->GPIO_OType));

        /* Output mode configuration*/
        GPIOx->OTYPER  &= ~((GPIO_OTYPER_OT_0) << ((uint16_t)pinpos)) ;
 8000490:	687b      	ldr	r3, [r7, #4]
 8000492:	685a      	ldr	r2, [r3, #4]
 8000494:	697b      	ldr	r3, [r7, #20]
 8000496:	b29b      	uxth	r3, r3
 8000498:	4619      	mov	r1, r3
 800049a:	2301      	movs	r3, #1
 800049c:	408b      	lsls	r3, r1
 800049e:	43db      	mvns	r3, r3
 80004a0:	401a      	ands	r2, r3
 80004a2:	687b      	ldr	r3, [r7, #4]
 80004a4:	605a      	str	r2, [r3, #4]
        GPIOx->OTYPER |= (uint16_t)(((uint16_t)GPIO_InitStruct->GPIO_OType) << ((uint16_t)pinpos));
 80004a6:	687b      	ldr	r3, [r7, #4]
 80004a8:	685b      	ldr	r3, [r3, #4]
 80004aa:	683a      	ldr	r2, [r7, #0]
 80004ac:	7992      	ldrb	r2, [r2, #6]
 80004ae:	4611      	mov	r1, r2
 80004b0:	697a      	ldr	r2, [r7, #20]
 80004b2:	b292      	uxth	r2, r2
 80004b4:	fa01 f202 	lsl.w	r2, r1, r2
 80004b8:	b292      	uxth	r2, r2
 80004ba:	431a      	orrs	r2, r3
 80004bc:	687b      	ldr	r3, [r7, #4]
 80004be:	605a      	str	r2, [r3, #4]
      }

      /* Pull-up Pull down resistor configuration*/
      GPIOx->PUPDR &= ~(GPIO_PUPDR_PUPDR0 << ((uint16_t)pinpos * 2));
 80004c0:	687b      	ldr	r3, [r7, #4]
 80004c2:	68da      	ldr	r2, [r3, #12]
 80004c4:	697b      	ldr	r3, [r7, #20]
 80004c6:	b29b      	uxth	r3, r3
 80004c8:	005b      	lsls	r3, r3, #1
 80004ca:	2103      	movs	r1, #3
 80004cc:	fa01 f303 	lsl.w	r3, r1, r3
 80004d0:	43db      	mvns	r3, r3
 80004d2:	401a      	ands	r2, r3
 80004d4:	687b      	ldr	r3, [r7, #4]
 80004d6:	60da      	str	r2, [r3, #12]
      GPIOx->PUPDR |= (((uint32_t)GPIO_InitStruct->GPIO_PuPd) << (pinpos * 2));
 80004d8:	687b      	ldr	r3, [r7, #4]
 80004da:	68da      	ldr	r2, [r3, #12]
 80004dc:	683b      	ldr	r3, [r7, #0]
 80004de:	79db      	ldrb	r3, [r3, #7]
 80004e0:	4619      	mov	r1, r3
 80004e2:	697b      	ldr	r3, [r7, #20]
 80004e4:	005b      	lsls	r3, r3, #1
 80004e6:	fa01 f303 	lsl.w	r3, r1, r3
 80004ea:	431a      	orrs	r2, r3
 80004ec:	687b      	ldr	r3, [r7, #4]
 80004ee:	60da      	str	r2, [r3, #12]
  for (pinpos = 0x00; pinpos < 0x10; pinpos++)
 80004f0:	697b      	ldr	r3, [r7, #20]
 80004f2:	3301      	adds	r3, #1
 80004f4:	617b      	str	r3, [r7, #20]
 80004f6:	697b      	ldr	r3, [r7, #20]
 80004f8:	2b0f      	cmp	r3, #15
 80004fa:	d985      	bls.n	8000408 <GPIO_Init+0x1c>
    }
  }
}
 80004fc:	bf00      	nop
 80004fe:	371c      	adds	r7, #28
 8000500:	46bd      	mov	sp, r7
 8000502:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000506:	4770      	bx	lr

08000508 <GPIO_SetBits>:
  * @param  GPIO_Pin: specifies the port bits to be written.
  *          This parameter can be any combination of GPIO_Pin_x where x can be (0..15).
  * @retval None
  */
void GPIO_SetBits(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 8000508:	b480      	push	{r7}
 800050a:	b083      	sub	sp, #12
 800050c:	af00      	add	r7, sp, #0
 800050e:	6078      	str	r0, [r7, #4]
 8000510:	460b      	mov	r3, r1
 8000512:	807b      	strh	r3, [r7, #2]
  /* Check the parameters */
  assert_param(IS_GPIO_ALL_PERIPH(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  GPIOx->BSRRL = GPIO_Pin;
 8000514:	687b      	ldr	r3, [r7, #4]
 8000516:	887a      	ldrh	r2, [r7, #2]
 8000518:	831a      	strh	r2, [r3, #24]
}
 800051a:	bf00      	nop
 800051c:	370c      	adds	r7, #12
 800051e:	46bd      	mov	sp, r7
 8000520:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000524:	4770      	bx	lr

08000526 <GPIO_ResetBits>:
  * @param  GPIO_Pin: specifies the port bits to be written.
  *          This parameter can be any combination of GPIO_Pin_x where x can be (0..15).
  * @retval None
  */
void GPIO_ResetBits(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 8000526:	b480      	push	{r7}
 8000528:	b083      	sub	sp, #12
 800052a:	af00      	add	r7, sp, #0
 800052c:	6078      	str	r0, [r7, #4]
 800052e:	460b      	mov	r3, r1
 8000530:	807b      	strh	r3, [r7, #2]
  /* Check the parameters */
  assert_param(IS_GPIO_ALL_PERIPH(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  GPIOx->BSRRH = GPIO_Pin;
 8000532:	687b      	ldr	r3, [r7, #4]
 8000534:	887a      	ldrh	r2, [r7, #2]
 8000536:	835a      	strh	r2, [r3, #26]
}
 8000538:	bf00      	nop
 800053a:	370c      	adds	r7, #12
 800053c:	46bd      	mov	sp, r7
 800053e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000542:	4770      	bx	lr

08000544 <RCC_AHB1PeriphClockCmd>:
  * @param  NewState: new state of the specified peripheral clock.
  *          This parameter can be: ENABLE or DISABLE.
  * @retval None
  */
void RCC_AHB1PeriphClockCmd(uint32_t RCC_AHB1Periph, FunctionalState NewState)
{
 8000544:	b480      	push	{r7}
 8000546:	b083      	sub	sp, #12
 8000548:	af00      	add	r7, sp, #0
 800054a:	6078      	str	r0, [r7, #4]
 800054c:	460b      	mov	r3, r1
 800054e:	70fb      	strb	r3, [r7, #3]
  /* Check the parameters */
  assert_param(IS_RCC_AHB1_CLOCK_PERIPH(RCC_AHB1Periph));

  assert_param(IS_FUNCTIONAL_STATE(NewState));
  if (NewState != DISABLE)
 8000550:	78fb      	ldrb	r3, [r7, #3]
 8000552:	2b00      	cmp	r3, #0
 8000554:	d006      	beq.n	8000564 <RCC_AHB1PeriphClockCmd+0x20>
  {
    RCC->AHB1ENR |= RCC_AHB1Periph;
 8000556:	490a      	ldr	r1, [pc, #40]	; (8000580 <RCC_AHB1PeriphClockCmd+0x3c>)
 8000558:	4b09      	ldr	r3, [pc, #36]	; (8000580 <RCC_AHB1PeriphClockCmd+0x3c>)
 800055a:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 800055c:	687b      	ldr	r3, [r7, #4]
 800055e:	4313      	orrs	r3, r2
 8000560:	630b      	str	r3, [r1, #48]	; 0x30
  }
  else
  {
    RCC->AHB1ENR &= ~RCC_AHB1Periph;
  }
}
 8000562:	e006      	b.n	8000572 <RCC_AHB1PeriphClockCmd+0x2e>
    RCC->AHB1ENR &= ~RCC_AHB1Periph;
 8000564:	4906      	ldr	r1, [pc, #24]	; (8000580 <RCC_AHB1PeriphClockCmd+0x3c>)
 8000566:	4b06      	ldr	r3, [pc, #24]	; (8000580 <RCC_AHB1PeriphClockCmd+0x3c>)
 8000568:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 800056a:	687b      	ldr	r3, [r7, #4]
 800056c:	43db      	mvns	r3, r3
 800056e:	4013      	ands	r3, r2
 8000570:	630b      	str	r3, [r1, #48]	; 0x30
}
 8000572:	bf00      	nop
 8000574:	370c      	adds	r7, #12
 8000576:	46bd      	mov	sp, r7
 8000578:	f85d 7b04 	ldr.w	r7, [sp], #4
 800057c:	4770      	bx	lr
 800057e:	bf00      	nop
 8000580:	40023800 	.word	0x40023800

08000584 <SPI_I2S_SendData>:
  *         in SPI mode or 2 or 3 in I2S mode or I2Sxext for I2S full duplex mode.     
  * @param  Data: Data to be transmitted.
  * @retval None
  */
void SPI_I2S_SendData(SPI_TypeDef* SPIx, uint16_t Data)
{
 8000584:	b480      	push	{r7}
 8000586:	b083      	sub	sp, #12
 8000588:	af00      	add	r7, sp, #0
 800058a:	6078      	str	r0, [r7, #4]
 800058c:	460b      	mov	r3, r1
 800058e:	807b      	strh	r3, [r7, #2]
  /* Check the parameters */
  assert_param(IS_SPI_ALL_PERIPH_EXT(SPIx));
  
  /* Write in the DR register the data to be sent */
  SPIx->DR = Data;
 8000590:	687b      	ldr	r3, [r7, #4]
 8000592:	887a      	ldrh	r2, [r7, #2]
 8000594:	819a      	strh	r2, [r3, #12]
}
 8000596:	bf00      	nop
 8000598:	370c      	adds	r7, #12
 800059a:	46bd      	mov	sp, r7
 800059c:	f85d 7b04 	ldr.w	r7, [sp], #4
 80005a0:	4770      	bx	lr

080005a2 <SPI_I2S_GetFlagStatus>:
  *            @arg I2S_FLAG_UDR: Underrun Error flag.
  *            @arg I2S_FLAG_CHSIDE: Channel Side flag.  
  * @retval The new state of SPI_I2S_FLAG (SET or RESET).
  */
FlagStatus SPI_I2S_GetFlagStatus(SPI_TypeDef* SPIx, uint16_t SPI_I2S_FLAG)
{
 80005a2:	b480      	push	{r7}
 80005a4:	b085      	sub	sp, #20
 80005a6:	af00      	add	r7, sp, #0
 80005a8:	6078      	str	r0, [r7, #4]
 80005aa:	460b      	mov	r3, r1
 80005ac:	807b      	strh	r3, [r7, #2]
  FlagStatus bitstatus = RESET;
 80005ae:	2300      	movs	r3, #0
 80005b0:	73fb      	strb	r3, [r7, #15]
  /* Check the parameters */
  assert_param(IS_SPI_ALL_PERIPH_EXT(SPIx));
  assert_param(IS_SPI_I2S_GET_FLAG(SPI_I2S_FLAG));
  
  /* Check the status of the specified SPI flag */
  if ((SPIx->SR & SPI_I2S_FLAG) != (uint16_t)RESET)
 80005b2:	687b      	ldr	r3, [r7, #4]
 80005b4:	891b      	ldrh	r3, [r3, #8]
 80005b6:	b29a      	uxth	r2, r3
 80005b8:	887b      	ldrh	r3, [r7, #2]
 80005ba:	4013      	ands	r3, r2
 80005bc:	b29b      	uxth	r3, r3
 80005be:	2b00      	cmp	r3, #0
 80005c0:	d002      	beq.n	80005c8 <SPI_I2S_GetFlagStatus+0x26>
  {
    /* SPI_I2S_FLAG is set */
    bitstatus = SET;
 80005c2:	2301      	movs	r3, #1
 80005c4:	73fb      	strb	r3, [r7, #15]
 80005c6:	e001      	b.n	80005cc <SPI_I2S_GetFlagStatus+0x2a>
  }
  else
  {
    /* SPI_I2S_FLAG is reset */
    bitstatus = RESET;
 80005c8:	2300      	movs	r3, #0
 80005ca:	73fb      	strb	r3, [r7, #15]
  }
  /* Return the SPI_I2S_FLAG status */
  return  bitstatus;
 80005cc:	7bfb      	ldrb	r3, [r7, #15]
}
 80005ce:	4618      	mov	r0, r3
 80005d0:	3714      	adds	r7, #20
 80005d2:	46bd      	mov	sp, r7
 80005d4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80005d8:	4770      	bx	lr
	...

080005dc <Audio_MAL_IRQHandler>:
  * @brief  This function handles main Media layer interrupt. 
  * @param  None
  * @retval 0 if correct communication, else wrong communication
  */
static void Audio_MAL_IRQHandler(void)
{    
 80005dc:	b580      	push	{r7, lr}
 80005de:	af00      	add	r7, sp, #0
  uint32_t Size = AudioRemSize;
#endif /* AUDIO_MAL_MODE_NORMAL */
  
#ifdef AUDIO_MAL_DMA_IT_TC_EN
  /* Transfer complete interrupt */
  if (DMA_GetFlagStatus(AUDIO_MAL_DMA_STREAM, AUDIO_MAL_DMA_FLAG_TC) != RESET)
 80005e0:	4b38      	ldr	r3, [pc, #224]	; (80006c4 <Audio_MAL_IRQHandler+0xe8>)
 80005e2:	681a      	ldr	r2, [r3, #0]
 80005e4:	4b38      	ldr	r3, [pc, #224]	; (80006c8 <Audio_MAL_IRQHandler+0xec>)
 80005e6:	681b      	ldr	r3, [r3, #0]
 80005e8:	4619      	mov	r1, r3
 80005ea:	4610      	mov	r0, r2
 80005ec:	f7ff fe94 	bl	8000318 <DMA_GetFlagStatus>
 80005f0:	4603      	mov	r3, r0
 80005f2:	2b00      	cmp	r3, #0
 80005f4:	d064      	beq.n	80006c0 <Audio_MAL_IRQHandler+0xe4>
  {         
 #ifdef AUDIO_MAL_MODE_NORMAL
    /* Check if the end of file has been reached */
    if (AudioRemSize > 0)
 80005f6:	4b35      	ldr	r3, [pc, #212]	; (80006cc <Audio_MAL_IRQHandler+0xf0>)
 80005f8:	681b      	ldr	r3, [r3, #0]
 80005fa:	2b00      	cmp	r3, #0
 80005fc:	d04c      	beq.n	8000698 <Audio_MAL_IRQHandler+0xbc>
    {      
      /* Wait the DMA Stream to be effectively disabled */
      while (DMA_GetCmdStatus(AUDIO_MAL_DMA_STREAM) != DISABLE)
 80005fe:	bf00      	nop
 8000600:	4b30      	ldr	r3, [pc, #192]	; (80006c4 <Audio_MAL_IRQHandler+0xe8>)
 8000602:	681b      	ldr	r3, [r3, #0]
 8000604:	4618      	mov	r0, r3
 8000606:	f7ff fe6f 	bl	80002e8 <DMA_GetCmdStatus>
 800060a:	4603      	mov	r3, r0
 800060c:	2b00      	cmp	r3, #0
 800060e:	d1f7      	bne.n	8000600 <Audio_MAL_IRQHandler+0x24>
      {}
      
      /* Clear the Interrupt flag */
      DMA_ClearFlag(AUDIO_MAL_DMA_STREAM, AUDIO_MAL_DMA_FLAG_TC); 
 8000610:	4b2c      	ldr	r3, [pc, #176]	; (80006c4 <Audio_MAL_IRQHandler+0xe8>)
 8000612:	681a      	ldr	r2, [r3, #0]
 8000614:	4b2c      	ldr	r3, [pc, #176]	; (80006c8 <Audio_MAL_IRQHandler+0xec>)
 8000616:	681b      	ldr	r3, [r3, #0]
 8000618:	4619      	mov	r1, r3
 800061a:	4610      	mov	r0, r2
 800061c:	f7ff feb8 	bl	8000390 <DMA_ClearFlag>
           
      /* Re-Configure the buffer address and size */
      DMA_InitStructure.DMA_Memory0BaseAddr = (uint32_t) CurrentPos;
 8000620:	4b2b      	ldr	r3, [pc, #172]	; (80006d0 <Audio_MAL_IRQHandler+0xf4>)
 8000622:	681b      	ldr	r3, [r3, #0]
 8000624:	461a      	mov	r2, r3
 8000626:	4b2b      	ldr	r3, [pc, #172]	; (80006d4 <Audio_MAL_IRQHandler+0xf8>)
 8000628:	609a      	str	r2, [r3, #8]
      DMA_InitStructure.DMA_BufferSize = (uint32_t) (DMA_MAX(AudioRemSize));
 800062a:	4b28      	ldr	r3, [pc, #160]	; (80006cc <Audio_MAL_IRQHandler+0xf0>)
 800062c:	681b      	ldr	r3, [r3, #0]
 800062e:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8000632:	4293      	cmp	r3, r2
 8000634:	bf28      	it	cs
 8000636:	4613      	movcs	r3, r2
 8000638:	4a26      	ldr	r2, [pc, #152]	; (80006d4 <Audio_MAL_IRQHandler+0xf8>)
 800063a:	6113      	str	r3, [r2, #16]
            
      /* Configure the DMA Stream with the new parameters */
      DMA_Init(AUDIO_MAL_DMA_STREAM, &DMA_InitStructure);
 800063c:	4b21      	ldr	r3, [pc, #132]	; (80006c4 <Audio_MAL_IRQHandler+0xe8>)
 800063e:	681b      	ldr	r3, [r3, #0]
 8000640:	4924      	ldr	r1, [pc, #144]	; (80006d4 <Audio_MAL_IRQHandler+0xf8>)
 8000642:	4618      	mov	r0, r3
 8000644:	f7ff fddc 	bl	8000200 <DMA_Init>
      
      /* Enable the I2S DMA Stream*/
      DMA_Cmd(AUDIO_MAL_DMA_STREAM, ENABLE);    
 8000648:	4b1e      	ldr	r3, [pc, #120]	; (80006c4 <Audio_MAL_IRQHandler+0xe8>)
 800064a:	681b      	ldr	r3, [r3, #0]
 800064c:	2101      	movs	r1, #1
 800064e:	4618      	mov	r0, r3
 8000650:	f7ff fe2e 	bl	80002b0 <DMA_Cmd>
      
      /* Update the current pointer position */
      CurrentPos += DMA_MAX(AudioRemSize);        
 8000654:	4b1e      	ldr	r3, [pc, #120]	; (80006d0 <Audio_MAL_IRQHandler+0xf4>)
 8000656:	681a      	ldr	r2, [r3, #0]
 8000658:	4b1c      	ldr	r3, [pc, #112]	; (80006cc <Audio_MAL_IRQHandler+0xf0>)
 800065a:	681b      	ldr	r3, [r3, #0]
 800065c:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8000660:	d203      	bcs.n	800066a <Audio_MAL_IRQHandler+0x8e>
 8000662:	4b1a      	ldr	r3, [pc, #104]	; (80006cc <Audio_MAL_IRQHandler+0xf0>)
 8000664:	681b      	ldr	r3, [r3, #0]
 8000666:	005b      	lsls	r3, r3, #1
 8000668:	e000      	b.n	800066c <Audio_MAL_IRQHandler+0x90>
 800066a:	4b1b      	ldr	r3, [pc, #108]	; (80006d8 <Audio_MAL_IRQHandler+0xfc>)
 800066c:	4413      	add	r3, r2
 800066e:	4a18      	ldr	r2, [pc, #96]	; (80006d0 <Audio_MAL_IRQHandler+0xf4>)
 8000670:	6013      	str	r3, [r2, #0]
      
      /* Update the remaining number of data to be played */
      AudioRemSize -= DMA_MAX(AudioRemSize);   
 8000672:	4b16      	ldr	r3, [pc, #88]	; (80006cc <Audio_MAL_IRQHandler+0xf0>)
 8000674:	681a      	ldr	r2, [r3, #0]
 8000676:	4b15      	ldr	r3, [pc, #84]	; (80006cc <Audio_MAL_IRQHandler+0xf0>)
 8000678:	681b      	ldr	r3, [r3, #0]
 800067a:	f64f 71ff 	movw	r1, #65535	; 0xffff
 800067e:	428b      	cmp	r3, r1
 8000680:	bf28      	it	cs
 8000682:	460b      	movcs	r3, r1
 8000684:	1ad3      	subs	r3, r2, r3
 8000686:	4a11      	ldr	r2, [pc, #68]	; (80006cc <Audio_MAL_IRQHandler+0xf0>)
 8000688:	6013      	str	r3, [r2, #0]
        /* Enable the I2S DMA Stream*/
      DMA_Cmd(AUDIO_MAL_DMA_STREAM, ENABLE); 
 800068a:	4b0e      	ldr	r3, [pc, #56]	; (80006c4 <Audio_MAL_IRQHandler+0xe8>)
 800068c:	681b      	ldr	r3, [r3, #0]
 800068e:	2101      	movs	r1, #1
 8000690:	4618      	mov	r0, r3
 8000692:	f7ff fe0d 	bl	80002b0 <DMA_Cmd>
    /* Clear the Interrupt flag */
    DMA_ClearFlag(AUDIO_MAL_DMA_STREAM, AUDIO_MAL_DMA_FLAG_TE | AUDIO_MAL_DMA_FLAG_FE | \
                                        AUDIO_MAL_DMA_FLAG_DME);
  }  
#endif /* AUDIO_MAL_DMA_IT_TE_EN */
}
 8000696:	e013      	b.n	80006c0 <Audio_MAL_IRQHandler+0xe4>
      DMA_Cmd(AUDIO_MAL_DMA_STREAM, DISABLE);   
 8000698:	4b0a      	ldr	r3, [pc, #40]	; (80006c4 <Audio_MAL_IRQHandler+0xe8>)
 800069a:	681b      	ldr	r3, [r3, #0]
 800069c:	2100      	movs	r1, #0
 800069e:	4618      	mov	r0, r3
 80006a0:	f7ff fe06 	bl	80002b0 <DMA_Cmd>
      DMA_ClearFlag(AUDIO_MAL_DMA_STREAM, AUDIO_MAL_DMA_FLAG_TC);       
 80006a4:	4b07      	ldr	r3, [pc, #28]	; (80006c4 <Audio_MAL_IRQHandler+0xe8>)
 80006a6:	681a      	ldr	r2, [r3, #0]
 80006a8:	4b07      	ldr	r3, [pc, #28]	; (80006c8 <Audio_MAL_IRQHandler+0xec>)
 80006aa:	681b      	ldr	r3, [r3, #0]
 80006ac:	4619      	mov	r1, r3
 80006ae:	4610      	mov	r0, r2
 80006b0:	f7ff fe6e 	bl	8000390 <DMA_ClearFlag>
      EVAL_AUDIO_TransferComplete_CallBack((uint32_t)CurrentPos, 0);       
 80006b4:	4b06      	ldr	r3, [pc, #24]	; (80006d0 <Audio_MAL_IRQHandler+0xf4>)
 80006b6:	681b      	ldr	r3, [r3, #0]
 80006b8:	2100      	movs	r1, #0
 80006ba:	4618      	mov	r0, r3
 80006bc:	f000 fa86 	bl	8000bcc <EVAL_AUDIO_TransferComplete_CallBack>
}
 80006c0:	bf00      	nop
 80006c2:	bd80      	pop	{r7, pc}
 80006c4:	20000008 	.word	0x20000008
 80006c8:	2000000c 	.word	0x2000000c
 80006cc:	20000000 	.word	0x20000000
 80006d0:	20000044 	.word	0x20000044
 80006d4:	20000084 	.word	0x20000084
 80006d8:	0001fffe 	.word	0x0001fffe

080006dc <DMA1_Stream7_IRQHandler>:
  * @brief  This function handles main I2S interrupt. 
  * @param  None
  * @retval 0 if correct communication, else wrong communication
  */
void Audio_MAL_I2S_IRQHandler(void)
{ 
 80006dc:	b580      	push	{r7, lr}
 80006de:	af00      	add	r7, sp, #0
  Audio_MAL_IRQHandler();
 80006e0:	f7ff ff7c 	bl	80005dc <Audio_MAL_IRQHandler>
}
 80006e4:	bf00      	nop
 80006e6:	bd80      	pop	{r7, pc}

080006e8 <DMA1_Stream0_IRQHandler>:
  * @brief  This function handles main DAC interrupt. 
  * @param  None
  * @retval 0 if correct communication, else wrong communication
  */
void Audio_MAL_DAC_IRQHandler(void)
{ 
 80006e8:	b580      	push	{r7, lr}
 80006ea:	af00      	add	r7, sp, #0
  Audio_MAL_IRQHandler();
 80006ec:	f7ff ff76 	bl	80005dc <Audio_MAL_IRQHandler>
}
 80006f0:	bf00      	nop
 80006f2:	bd80      	pop	{r7, pc}

080006f4 <SPI3_IRQHandler>:
  * @brief  I2S interrupt management
  * @param  None
  * @retval None
  */
void Audio_I2S_IRQHandler(void)
{
 80006f4:	b580      	push	{r7, lr}
 80006f6:	af00      	add	r7, sp, #0
  /* Check on the I2S TXE flag */  
  if (SPI_I2S_GetFlagStatus(SPI3, SPI_I2S_FLAG_TXE) != RESET)
 80006f8:	2102      	movs	r1, #2
 80006fa:	480d      	ldr	r0, [pc, #52]	; (8000730 <SPI3_IRQHandler+0x3c>)
 80006fc:	f7ff ff51 	bl	80005a2 <SPI_I2S_GetFlagStatus>
 8000700:	4603      	mov	r3, r0
 8000702:	2b00      	cmp	r3, #0
 8000704:	d011      	beq.n	800072a <SPI3_IRQHandler+0x36>
  { 
    if (CurrAudioInterface == AUDIO_INTERFACE_DAC)
 8000706:	4b0b      	ldr	r3, [pc, #44]	; (8000734 <SPI3_IRQHandler+0x40>)
 8000708:	681b      	ldr	r3, [r3, #0]
 800070a:	2b02      	cmp	r3, #2
 800070c:	d106      	bne.n	800071c <SPI3_IRQHandler+0x28>
    {
      /* Wirte data to the DAC interface */
      DAC_SetChannel1Data(DAC_Align_12b_L, EVAL_AUDIO_GetSampleCallBack()); 
 800070e:	f000 fa68 	bl	8000be2 <EVAL_AUDIO_GetSampleCallBack>
 8000712:	4603      	mov	r3, r0
 8000714:	4619      	mov	r1, r3
 8000716:	2004      	movs	r0, #4
 8000718:	f7ff fd56 	bl	80001c8 <DAC_SetChannel1Data>
    }
    
    /* Send dummy data on I2S to avoid the underrun condition */
    SPI_I2S_SendData(CODEC_I2S, EVAL_AUDIO_GetSampleCallBack()); 
 800071c:	f000 fa61 	bl	8000be2 <EVAL_AUDIO_GetSampleCallBack>
 8000720:	4603      	mov	r3, r0
 8000722:	4619      	mov	r1, r3
 8000724:	4802      	ldr	r0, [pc, #8]	; (8000730 <SPI3_IRQHandler+0x3c>)
 8000726:	f7ff ff2d 	bl	8000584 <SPI_I2S_SendData>
  }
}
 800072a:	bf00      	nop
 800072c:	bd80      	pop	{r7, pc}
 800072e:	bf00      	nop
 8000730:	40003c00 	.word	0x40003c00
 8000734:	20000004 	.word	0x20000004

08000738 <GPIO_Config>:
int count = 0, time = 0;

GPIO_InitTypeDef GPIO_InitStruct;

void GPIO_Config()
{
 8000738:	b580      	push	{r7, lr}
 800073a:	af00      	add	r7, sp, #0
	RCC_AHB1PeriphClockCmd(RCC_AHB1Periph_GPIOA, ENABLE);
 800073c:	2101      	movs	r1, #1
 800073e:	2001      	movs	r0, #1
 8000740:	f7ff ff00 	bl	8000544 <RCC_AHB1PeriphClockCmd>
	RCC_AHB1PeriphClockCmd(RCC_AHB1Periph_GPIOC, ENABLE);
 8000744:	2101      	movs	r1, #1
 8000746:	2004      	movs	r0, #4
 8000748:	f7ff fefc 	bl	8000544 <RCC_AHB1PeriphClockCmd>
	RCC_AHB1PeriphClockCmd(RCC_AHB1Periph_GPIOD, ENABLE);
 800074c:	2101      	movs	r1, #1
 800074e:	2008      	movs	r0, #8
 8000750:	f7ff fef8 	bl	8000544 <RCC_AHB1PeriphClockCmd>

	GPIO_InitStruct.GPIO_Mode = GPIO_Mode_IN;
 8000754:	4b1d      	ldr	r3, [pc, #116]	; (80007cc <GPIO_Config+0x94>)
 8000756:	2200      	movs	r2, #0
 8000758:	711a      	strb	r2, [r3, #4]
	GPIO_InitStruct.GPIO_Pin = GPIO_Pin_1;
 800075a:	4b1c      	ldr	r3, [pc, #112]	; (80007cc <GPIO_Config+0x94>)
 800075c:	2202      	movs	r2, #2
 800075e:	601a      	str	r2, [r3, #0]
	GPIO_InitStruct.GPIO_OType = GPIO_OType_PP;
 8000760:	4b1a      	ldr	r3, [pc, #104]	; (80007cc <GPIO_Config+0x94>)
 8000762:	2200      	movs	r2, #0
 8000764:	719a      	strb	r2, [r3, #6]
	GPIO_InitStruct.GPIO_PuPd = GPIO_PuPd_DOWN;
 8000766:	4b19      	ldr	r3, [pc, #100]	; (80007cc <GPIO_Config+0x94>)
 8000768:	2202      	movs	r2, #2
 800076a:	71da      	strb	r2, [r3, #7]
	GPIO_InitStruct.GPIO_Speed = GPIO_Speed_100MHz;
 800076c:	4b17      	ldr	r3, [pc, #92]	; (80007cc <GPIO_Config+0x94>)
 800076e:	2203      	movs	r2, #3
 8000770:	715a      	strb	r2, [r3, #5]

	GPIO_Init(GPIOD, &GPIO_InitStruct);
 8000772:	4916      	ldr	r1, [pc, #88]	; (80007cc <GPIO_Config+0x94>)
 8000774:	4816      	ldr	r0, [pc, #88]	; (80007d0 <GPIO_Config+0x98>)
 8000776:	f7ff fe39 	bl	80003ec <GPIO_Init>

	GPIO_InitStruct.GPIO_Mode = GPIO_Mode_OUT;
 800077a:	4b14      	ldr	r3, [pc, #80]	; (80007cc <GPIO_Config+0x94>)
 800077c:	2201      	movs	r2, #1
 800077e:	711a      	strb	r2, [r3, #4]
	GPIO_InitStruct.GPIO_Pin = GPIO_Pin_0 | GPIO_Pin_1 |
 8000780:	4b12      	ldr	r3, [pc, #72]	; (80007cc <GPIO_Config+0x94>)
 8000782:	227f      	movs	r2, #127	; 0x7f
 8000784:	601a      	str	r2, [r3, #0]
			GPIO_Pin_2 |GPIO_Pin_3 | GPIO_Pin_4 | GPIO_Pin_5 | GPIO_Pin_6;
	GPIO_InitStruct.GPIO_OType = GPIO_OType_PP;
 8000786:	4b11      	ldr	r3, [pc, #68]	; (80007cc <GPIO_Config+0x94>)
 8000788:	2200      	movs	r2, #0
 800078a:	719a      	strb	r2, [r3, #6]
	GPIO_InitStruct.GPIO_PuPd = GPIO_PuPd_NOPULL;
 800078c:	4b0f      	ldr	r3, [pc, #60]	; (80007cc <GPIO_Config+0x94>)
 800078e:	2200      	movs	r2, #0
 8000790:	71da      	strb	r2, [r3, #7]
	GPIO_InitStruct.GPIO_Speed = GPIO_Speed_100MHz;
 8000792:	4b0e      	ldr	r3, [pc, #56]	; (80007cc <GPIO_Config+0x94>)
 8000794:	2203      	movs	r2, #3
 8000796:	715a      	strb	r2, [r3, #5]

	GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000798:	490c      	ldr	r1, [pc, #48]	; (80007cc <GPIO_Config+0x94>)
 800079a:	480e      	ldr	r0, [pc, #56]	; (80007d4 <GPIO_Config+0x9c>)
 800079c:	f7ff fe26 	bl	80003ec <GPIO_Init>

	GPIO_InitStruct.GPIO_Mode = GPIO_Mode_OUT;
 80007a0:	4b0a      	ldr	r3, [pc, #40]	; (80007cc <GPIO_Config+0x94>)
 80007a2:	2201      	movs	r2, #1
 80007a4:	711a      	strb	r2, [r3, #4]
	GPIO_InitStruct.GPIO_Pin = GPIO_Pin_6 | GPIO_Pin_7 |GPIO_Pin_8 |GPIO_Pin_9;
 80007a6:	4b09      	ldr	r3, [pc, #36]	; (80007cc <GPIO_Config+0x94>)
 80007a8:	f44f 7270 	mov.w	r2, #960	; 0x3c0
 80007ac:	601a      	str	r2, [r3, #0]
	GPIO_InitStruct.GPIO_OType = GPIO_OType_PP;
 80007ae:	4b07      	ldr	r3, [pc, #28]	; (80007cc <GPIO_Config+0x94>)
 80007b0:	2200      	movs	r2, #0
 80007b2:	719a      	strb	r2, [r3, #6]
	GPIO_InitStruct.GPIO_PuPd = GPIO_PuPd_NOPULL;
 80007b4:	4b05      	ldr	r3, [pc, #20]	; (80007cc <GPIO_Config+0x94>)
 80007b6:	2200      	movs	r2, #0
 80007b8:	71da      	strb	r2, [r3, #7]
	GPIO_InitStruct.GPIO_Speed = GPIO_Speed_100MHz;
 80007ba:	4b04      	ldr	r3, [pc, #16]	; (80007cc <GPIO_Config+0x94>)
 80007bc:	2203      	movs	r2, #3
 80007be:	715a      	strb	r2, [r3, #5]

	GPIO_Init(GPIOC, &GPIO_InitStruct);
 80007c0:	4902      	ldr	r1, [pc, #8]	; (80007cc <GPIO_Config+0x94>)
 80007c2:	4805      	ldr	r0, [pc, #20]	; (80007d8 <GPIO_Config+0xa0>)
 80007c4:	f7ff fe12 	bl	80003ec <GPIO_Init>
}
 80007c8:	bf00      	nop
 80007ca:	bd80      	pop	{r7, pc}
 80007cc:	200000c0 	.word	0x200000c0
 80007d0:	40020c00 	.word	0x40020c00
 80007d4:	40020000 	.word	0x40020000
 80007d8:	40020800 	.word	0x40020800

080007dc <delay>:

void delay(uint32_t time)
{
 80007dc:	b480      	push	{r7}
 80007de:	b083      	sub	sp, #12
 80007e0:	af00      	add	r7, sp, #0
 80007e2:	6078      	str	r0, [r7, #4]
	while(time--);
 80007e4:	bf00      	nop
 80007e6:	687b      	ldr	r3, [r7, #4]
 80007e8:	1e5a      	subs	r2, r3, #1
 80007ea:	607a      	str	r2, [r7, #4]
 80007ec:	2b00      	cmp	r3, #0
 80007ee:	d1fa      	bne.n	80007e6 <delay+0xa>
}
 80007f0:	bf00      	nop
 80007f2:	370c      	adds	r7, #12
 80007f4:	46bd      	mov	sp, r7
 80007f6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80007fa:	4770      	bx	lr

080007fc <digits>:

void digits()
{
 80007fc:	b480      	push	{r7}
 80007fe:	af00      	add	r7, sp, #0
	d1 = time % 10;
 8000800:	4b2f      	ldr	r3, [pc, #188]	; (80008c0 <digits+0xc4>)
 8000802:	6819      	ldr	r1, [r3, #0]
 8000804:	4b2f      	ldr	r3, [pc, #188]	; (80008c4 <digits+0xc8>)
 8000806:	fb83 2301 	smull	r2, r3, r3, r1
 800080a:	109a      	asrs	r2, r3, #2
 800080c:	17cb      	asrs	r3, r1, #31
 800080e:	1ad2      	subs	r2, r2, r3
 8000810:	4613      	mov	r3, r2
 8000812:	009b      	lsls	r3, r3, #2
 8000814:	4413      	add	r3, r2
 8000816:	005b      	lsls	r3, r3, #1
 8000818:	1aca      	subs	r2, r1, r3
 800081a:	4b2b      	ldr	r3, [pc, #172]	; (80008c8 <digits+0xcc>)
 800081c:	601a      	str	r2, [r3, #0]
	time /= 10;
 800081e:	4b28      	ldr	r3, [pc, #160]	; (80008c0 <digits+0xc4>)
 8000820:	681b      	ldr	r3, [r3, #0]
 8000822:	4a28      	ldr	r2, [pc, #160]	; (80008c4 <digits+0xc8>)
 8000824:	fb82 1203 	smull	r1, r2, r2, r3
 8000828:	1092      	asrs	r2, r2, #2
 800082a:	17db      	asrs	r3, r3, #31
 800082c:	1ad3      	subs	r3, r2, r3
 800082e:	4a24      	ldr	r2, [pc, #144]	; (80008c0 <digits+0xc4>)
 8000830:	6013      	str	r3, [r2, #0]
	d2 = time % 10;
 8000832:	4b23      	ldr	r3, [pc, #140]	; (80008c0 <digits+0xc4>)
 8000834:	6819      	ldr	r1, [r3, #0]
 8000836:	4b23      	ldr	r3, [pc, #140]	; (80008c4 <digits+0xc8>)
 8000838:	fb83 2301 	smull	r2, r3, r3, r1
 800083c:	109a      	asrs	r2, r3, #2
 800083e:	17cb      	asrs	r3, r1, #31
 8000840:	1ad2      	subs	r2, r2, r3
 8000842:	4613      	mov	r3, r2
 8000844:	009b      	lsls	r3, r3, #2
 8000846:	4413      	add	r3, r2
 8000848:	005b      	lsls	r3, r3, #1
 800084a:	1aca      	subs	r2, r1, r3
 800084c:	4b1f      	ldr	r3, [pc, #124]	; (80008cc <digits+0xd0>)
 800084e:	601a      	str	r2, [r3, #0]
	time /= 10;
 8000850:	4b1b      	ldr	r3, [pc, #108]	; (80008c0 <digits+0xc4>)
 8000852:	681b      	ldr	r3, [r3, #0]
 8000854:	4a1b      	ldr	r2, [pc, #108]	; (80008c4 <digits+0xc8>)
 8000856:	fb82 1203 	smull	r1, r2, r2, r3
 800085a:	1092      	asrs	r2, r2, #2
 800085c:	17db      	asrs	r3, r3, #31
 800085e:	1ad3      	subs	r3, r2, r3
 8000860:	4a17      	ldr	r2, [pc, #92]	; (80008c0 <digits+0xc4>)
 8000862:	6013      	str	r3, [r2, #0]
	d3 = time % 10;
 8000864:	4b16      	ldr	r3, [pc, #88]	; (80008c0 <digits+0xc4>)
 8000866:	6819      	ldr	r1, [r3, #0]
 8000868:	4b16      	ldr	r3, [pc, #88]	; (80008c4 <digits+0xc8>)
 800086a:	fb83 2301 	smull	r2, r3, r3, r1
 800086e:	109a      	asrs	r2, r3, #2
 8000870:	17cb      	asrs	r3, r1, #31
 8000872:	1ad2      	subs	r2, r2, r3
 8000874:	4613      	mov	r3, r2
 8000876:	009b      	lsls	r3, r3, #2
 8000878:	4413      	add	r3, r2
 800087a:	005b      	lsls	r3, r3, #1
 800087c:	1aca      	subs	r2, r1, r3
 800087e:	4b14      	ldr	r3, [pc, #80]	; (80008d0 <digits+0xd4>)
 8000880:	601a      	str	r2, [r3, #0]
	time /= 10;
 8000882:	4b0f      	ldr	r3, [pc, #60]	; (80008c0 <digits+0xc4>)
 8000884:	681b      	ldr	r3, [r3, #0]
 8000886:	4a0f      	ldr	r2, [pc, #60]	; (80008c4 <digits+0xc8>)
 8000888:	fb82 1203 	smull	r1, r2, r2, r3
 800088c:	1092      	asrs	r2, r2, #2
 800088e:	17db      	asrs	r3, r3, #31
 8000890:	1ad3      	subs	r3, r2, r3
 8000892:	4a0b      	ldr	r2, [pc, #44]	; (80008c0 <digits+0xc4>)
 8000894:	6013      	str	r3, [r2, #0]
	d4 = time % 10;
 8000896:	4b0a      	ldr	r3, [pc, #40]	; (80008c0 <digits+0xc4>)
 8000898:	6819      	ldr	r1, [r3, #0]
 800089a:	4b0a      	ldr	r3, [pc, #40]	; (80008c4 <digits+0xc8>)
 800089c:	fb83 2301 	smull	r2, r3, r3, r1
 80008a0:	109a      	asrs	r2, r3, #2
 80008a2:	17cb      	asrs	r3, r1, #31
 80008a4:	1ad2      	subs	r2, r2, r3
 80008a6:	4613      	mov	r3, r2
 80008a8:	009b      	lsls	r3, r3, #2
 80008aa:	4413      	add	r3, r2
 80008ac:	005b      	lsls	r3, r3, #1
 80008ae:	1aca      	subs	r2, r1, r3
 80008b0:	4b08      	ldr	r3, [pc, #32]	; (80008d4 <digits+0xd8>)
 80008b2:	601a      	str	r2, [r3, #0]
}
 80008b4:	bf00      	nop
 80008b6:	46bd      	mov	sp, r7
 80008b8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80008bc:	4770      	bx	lr
 80008be:	bf00      	nop
 80008c0:	20000040 	.word	0x20000040
 80008c4:	66666667 	.word	0x66666667
 80008c8:	2000002c 	.word	0x2000002c
 80008cc:	20000030 	.word	0x20000030
 80008d0:	20000034 	.word	0x20000034
 80008d4:	20000038 	.word	0x20000038

080008d8 <main>:

int main(void)
{
 80008d8:	b580      	push	{r7, lr}
 80008da:	af00      	add	r7, sp, #0
	GPIO_Config();
 80008dc:	f7ff ff2c 	bl	8000738 <GPIO_Config>
	GPIO_SetBits(GPIOC, GPIO_Pin_9);
 80008e0:	f44f 7100 	mov.w	r1, #512	; 0x200
 80008e4:	48b2      	ldr	r0, [pc, #712]	; (8000bb0 <main+0x2d8>)
 80008e6:	f7ff fe0f 	bl	8000508 <GPIO_SetBits>

	GPIO_SetBits(GPIOA, GPIO_Pin_3);
 80008ea:	2108      	movs	r1, #8
 80008ec:	48b1      	ldr	r0, [pc, #708]	; (8000bb4 <main+0x2dc>)
 80008ee:	f7ff fe0b 	bl	8000508 <GPIO_SetBits>
	GPIO_ResetBits(GPIOA, GPIO_Pin_0 | GPIO_Pin_1 |GPIO_Pin_2 | GPIO_Pin_4 | GPIO_Pin_5 | GPIO_Pin_6);
 80008f2:	2177      	movs	r1, #119	; 0x77
 80008f4:	48af      	ldr	r0, [pc, #700]	; (8000bb4 <main+0x2dc>)
 80008f6:	f7ff fe16 	bl	8000526 <GPIO_ResetBits>
  while (1)
  {
	  count++;
 80008fa:	4baf      	ldr	r3, [pc, #700]	; (8000bb8 <main+0x2e0>)
 80008fc:	681b      	ldr	r3, [r3, #0]
 80008fe:	3301      	adds	r3, #1
 8000900:	4aad      	ldr	r2, [pc, #692]	; (8000bb8 <main+0x2e0>)
 8000902:	6013      	str	r3, [r2, #0]
	  delay(1680000);
 8000904:	48ad      	ldr	r0, [pc, #692]	; (8000bbc <main+0x2e4>)
 8000906:	f7ff ff69 	bl	80007dc <delay>
	  time = count;
 800090a:	4bab      	ldr	r3, [pc, #684]	; (8000bb8 <main+0x2e0>)
 800090c:	681b      	ldr	r3, [r3, #0]
 800090e:	4aac      	ldr	r2, [pc, #688]	; (8000bc0 <main+0x2e8>)
 8000910:	6013      	str	r3, [r2, #0]
	  digits();
 8000912:	f7ff ff73 	bl	80007fc <digits>

	  switch(d1)
 8000916:	4bab      	ldr	r3, [pc, #684]	; (8000bc4 <main+0x2ec>)
 8000918:	681b      	ldr	r3, [r3, #0]
 800091a:	2b09      	cmp	r3, #9
 800091c:	f200 80a1 	bhi.w	8000a62 <main+0x18a>
 8000920:	a201      	add	r2, pc, #4	; (adr r2, 8000928 <main+0x50>)
 8000922:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8000926:	bf00      	nop
 8000928:	08000951 	.word	0x08000951
 800092c:	0800096d 	.word	0x0800096d
 8000930:	08000989 	.word	0x08000989
 8000934:	080009a5 	.word	0x080009a5
 8000938:	080009c1 	.word	0x080009c1
 800093c:	080009dd 	.word	0x080009dd
 8000940:	080009f9 	.word	0x080009f9
 8000944:	08000a15 	.word	0x08000a15
 8000948:	08000a31 	.word	0x08000a31
 800094c:	08000a47 	.word	0x08000a47
	  {
		  case 0:
		  {
			  GPIO_SetBits(GPIOC, GPIO_Pin_9);
 8000950:	f44f 7100 	mov.w	r1, #512	; 0x200
 8000954:	4896      	ldr	r0, [pc, #600]	; (8000bb0 <main+0x2d8>)
 8000956:	f7ff fdd7 	bl	8000508 <GPIO_SetBits>
			  GPIO_ResetBits(GPIOA, GPIO_Pin_0 | GPIO_Pin_1 | GPIO_Pin_2 | GPIO_Pin_4 | GPIO_Pin_5 | GPIO_Pin_6);
 800095a:	2177      	movs	r1, #119	; 0x77
 800095c:	4895      	ldr	r0, [pc, #596]	; (8000bb4 <main+0x2dc>)
 800095e:	f7ff fde2 	bl	8000526 <GPIO_ResetBits>
			  GPIO_SetBits(GPIOA, GPIO_Pin_3);
 8000962:	2108      	movs	r1, #8
 8000964:	4893      	ldr	r0, [pc, #588]	; (8000bb4 <main+0x2dc>)
 8000966:	f7ff fdcf 	bl	8000508 <GPIO_SetBits>
			  break;
 800096a:	e07a      	b.n	8000a62 <main+0x18a>
		  }
		  case 1:
		  {
			  GPIO_SetBits(GPIOC, GPIO_Pin_9);
 800096c:	f44f 7100 	mov.w	r1, #512	; 0x200
 8000970:	488f      	ldr	r0, [pc, #572]	; (8000bb0 <main+0x2d8>)
 8000972:	f7ff fdc9 	bl	8000508 <GPIO_SetBits>
			  GPIO_ResetBits(GPIOA, GPIO_Pin_2 | GPIO_Pin_6);
 8000976:	2144      	movs	r1, #68	; 0x44
 8000978:	488e      	ldr	r0, [pc, #568]	; (8000bb4 <main+0x2dc>)
 800097a:	f7ff fdd4 	bl	8000526 <GPIO_ResetBits>
			  GPIO_SetBits(GPIOA, GPIO_Pin_0 | GPIO_Pin_1 | GPIO_Pin_3 | GPIO_Pin_4 | GPIO_Pin_5);
 800097e:	213b      	movs	r1, #59	; 0x3b
 8000980:	488c      	ldr	r0, [pc, #560]	; (8000bb4 <main+0x2dc>)
 8000982:	f7ff fdc1 	bl	8000508 <GPIO_SetBits>
			  break;
 8000986:	e06c      	b.n	8000a62 <main+0x18a>
		  }
		  case 2:
		  {
			  GPIO_SetBits(GPIOC, GPIO_Pin_9);
 8000988:	f44f 7100 	mov.w	r1, #512	; 0x200
 800098c:	4888      	ldr	r0, [pc, #544]	; (8000bb0 <main+0x2d8>)
 800098e:	f7ff fdbb 	bl	8000508 <GPIO_SetBits>
			  GPIO_ResetBits(GPIOA, GPIO_Pin_0 | GPIO_Pin_1 | GPIO_Pin_3 | GPIO_Pin_4 | GPIO_Pin_6);
 8000992:	215b      	movs	r1, #91	; 0x5b
 8000994:	4887      	ldr	r0, [pc, #540]	; (8000bb4 <main+0x2dc>)
 8000996:	f7ff fdc6 	bl	8000526 <GPIO_ResetBits>
			  GPIO_SetBits(GPIOA, GPIO_Pin_2 | GPIO_Pin_5);
 800099a:	2124      	movs	r1, #36	; 0x24
 800099c:	4885      	ldr	r0, [pc, #532]	; (8000bb4 <main+0x2dc>)
 800099e:	f7ff fdb3 	bl	8000508 <GPIO_SetBits>
			  break;
 80009a2:	e05e      	b.n	8000a62 <main+0x18a>
		  }
		  case 3:
		  {
			  GPIO_SetBits(GPIOC, GPIO_Pin_9);
 80009a4:	f44f 7100 	mov.w	r1, #512	; 0x200
 80009a8:	4881      	ldr	r0, [pc, #516]	; (8000bb0 <main+0x2d8>)
 80009aa:	f7ff fdad 	bl	8000508 <GPIO_SetBits>
			  GPIO_ResetBits(GPIOA, GPIO_Pin_1 | GPIO_Pin_2 | GPIO_Pin_3 | GPIO_Pin_5 | GPIO_Pin_6);
 80009ae:	216e      	movs	r1, #110	; 0x6e
 80009b0:	4880      	ldr	r0, [pc, #512]	; (8000bb4 <main+0x2dc>)
 80009b2:	f7ff fdb8 	bl	8000526 <GPIO_ResetBits>
			  GPIO_SetBits(GPIOA, GPIO_Pin_0 | GPIO_Pin_4);
 80009b6:	2111      	movs	r1, #17
 80009b8:	487e      	ldr	r0, [pc, #504]	; (8000bb4 <main+0x2dc>)
 80009ba:	f7ff fda5 	bl	8000508 <GPIO_SetBits>
			  break;
 80009be:	e050      	b.n	8000a62 <main+0x18a>
		  }
		  case 4:
		  {
			  GPIO_SetBits(GPIOC, GPIO_Pin_9);
 80009c0:	f44f 7100 	mov.w	r1, #512	; 0x200
 80009c4:	487a      	ldr	r0, [pc, #488]	; (8000bb0 <main+0x2d8>)
 80009c6:	f7ff fd9f 	bl	8000508 <GPIO_SetBits>
			  GPIO_ResetBits(GPIOA, GPIO_Pin_2 | GPIO_Pin_3 | GPIO_Pin_4 | GPIO_Pin_6);
 80009ca:	215c      	movs	r1, #92	; 0x5c
 80009cc:	4879      	ldr	r0, [pc, #484]	; (8000bb4 <main+0x2dc>)
 80009ce:	f7ff fdaa 	bl	8000526 <GPIO_ResetBits>
			  GPIO_SetBits(GPIOA, GPIO_Pin_0 | GPIO_Pin_1 | GPIO_Pin_5);
 80009d2:	2123      	movs	r1, #35	; 0x23
 80009d4:	4877      	ldr	r0, [pc, #476]	; (8000bb4 <main+0x2dc>)
 80009d6:	f7ff fd97 	bl	8000508 <GPIO_SetBits>
			  break;
 80009da:	e042      	b.n	8000a62 <main+0x18a>
		  }
		  case 5:
		  {
			  GPIO_SetBits(GPIOC, GPIO_Pin_9);
 80009dc:	f44f 7100 	mov.w	r1, #512	; 0x200
 80009e0:	4873      	ldr	r0, [pc, #460]	; (8000bb0 <main+0x2d8>)
 80009e2:	f7ff fd91 	bl	8000508 <GPIO_SetBits>
			  GPIO_ResetBits(GPIOA, GPIO_Pin_1 | GPIO_Pin_2 | GPIO_Pin_3 | GPIO_Pin_4 | GPIO_Pin_5);
 80009e6:	213e      	movs	r1, #62	; 0x3e
 80009e8:	4872      	ldr	r0, [pc, #456]	; (8000bb4 <main+0x2dc>)
 80009ea:	f7ff fd9c 	bl	8000526 <GPIO_ResetBits>
			  GPIO_SetBits(GPIOA, GPIO_Pin_0 | GPIO_Pin_6);
 80009ee:	2141      	movs	r1, #65	; 0x41
 80009f0:	4870      	ldr	r0, [pc, #448]	; (8000bb4 <main+0x2dc>)
 80009f2:	f7ff fd89 	bl	8000508 <GPIO_SetBits>
			  break;
 80009f6:	e034      	b.n	8000a62 <main+0x18a>
		  }
		  case 6:
		  {
			  GPIO_SetBits(GPIOC, GPIO_Pin_9);
 80009f8:	f44f 7100 	mov.w	r1, #512	; 0x200
 80009fc:	486c      	ldr	r0, [pc, #432]	; (8000bb0 <main+0x2d8>)
 80009fe:	f7ff fd83 	bl	8000508 <GPIO_SetBits>
			  GPIO_ResetBits(GPIOA, GPIO_Pin_0 | GPIO_Pin_1 | GPIO_Pin_2 | GPIO_Pin_3 | GPIO_Pin_4 | GPIO_Pin_5);
 8000a02:	213f      	movs	r1, #63	; 0x3f
 8000a04:	486b      	ldr	r0, [pc, #428]	; (8000bb4 <main+0x2dc>)
 8000a06:	f7ff fd8e 	bl	8000526 <GPIO_ResetBits>
			  GPIO_SetBits(GPIOA, GPIO_Pin_6);
 8000a0a:	2140      	movs	r1, #64	; 0x40
 8000a0c:	4869      	ldr	r0, [pc, #420]	; (8000bb4 <main+0x2dc>)
 8000a0e:	f7ff fd7b 	bl	8000508 <GPIO_SetBits>
			  break;
 8000a12:	e026      	b.n	8000a62 <main+0x18a>
		  }
		  case 7:
		  {
			  GPIO_SetBits(GPIOC, GPIO_Pin_9);
 8000a14:	f44f 7100 	mov.w	r1, #512	; 0x200
 8000a18:	4865      	ldr	r0, [pc, #404]	; (8000bb0 <main+0x2d8>)
 8000a1a:	f7ff fd75 	bl	8000508 <GPIO_SetBits>
			  GPIO_ResetBits(GPIOA, GPIO_Pin_2 | GPIO_Pin_5 | GPIO_Pin_6);
 8000a1e:	2164      	movs	r1, #100	; 0x64
 8000a20:	4864      	ldr	r0, [pc, #400]	; (8000bb4 <main+0x2dc>)
 8000a22:	f7ff fd80 	bl	8000526 <GPIO_ResetBits>
			  GPIO_SetBits(GPIOA, GPIO_Pin_0 | GPIO_Pin_1 | GPIO_Pin_3 | GPIO_Pin_4);
 8000a26:	211b      	movs	r1, #27
 8000a28:	4862      	ldr	r0, [pc, #392]	; (8000bb4 <main+0x2dc>)
 8000a2a:	f7ff fd6d 	bl	8000508 <GPIO_SetBits>
			  break;
 8000a2e:	e018      	b.n	8000a62 <main+0x18a>
		  }
		  case 8:
		  {
			  GPIO_SetBits(GPIOC, GPIO_Pin_9);
 8000a30:	f44f 7100 	mov.w	r1, #512	; 0x200
 8000a34:	485e      	ldr	r0, [pc, #376]	; (8000bb0 <main+0x2d8>)
 8000a36:	f7ff fd67 	bl	8000508 <GPIO_SetBits>
			  GPIO_ResetBits(GPIOA, GPIO_Pin_All);
 8000a3a:	f64f 71ff 	movw	r1, #65535	; 0xffff
 8000a3e:	485d      	ldr	r0, [pc, #372]	; (8000bb4 <main+0x2dc>)
 8000a40:	f7ff fd71 	bl	8000526 <GPIO_ResetBits>
			  break;
 8000a44:	e00d      	b.n	8000a62 <main+0x18a>
		  }
		  case 9:
		  {
			  GPIO_SetBits(GPIOC, GPIO_Pin_9);
 8000a46:	f44f 7100 	mov.w	r1, #512	; 0x200
 8000a4a:	4859      	ldr	r0, [pc, #356]	; (8000bb0 <main+0x2d8>)
 8000a4c:	f7ff fd5c 	bl	8000508 <GPIO_SetBits>
			  GPIO_ResetBits(GPIOA, GPIO_Pin_1 | GPIO_Pin_2 | GPIO_Pin_3 | GPIO_Pin_4 | GPIO_Pin_5 | GPIO_Pin_6);
 8000a50:	217e      	movs	r1, #126	; 0x7e
 8000a52:	4858      	ldr	r0, [pc, #352]	; (8000bb4 <main+0x2dc>)
 8000a54:	f7ff fd67 	bl	8000526 <GPIO_ResetBits>
			  GPIO_SetBits(GPIOA, GPIO_Pin_0);
 8000a58:	2101      	movs	r1, #1
 8000a5a:	4856      	ldr	r0, [pc, #344]	; (8000bb4 <main+0x2dc>)
 8000a5c:	f7ff fd54 	bl	8000508 <GPIO_SetBits>
			  break;
 8000a60:	bf00      	nop
		  }
	  }

	  switch(d2)
 8000a62:	4b59      	ldr	r3, [pc, #356]	; (8000bc8 <main+0x2f0>)
 8000a64:	681b      	ldr	r3, [r3, #0]
 8000a66:	2b09      	cmp	r3, #9
 8000a68:	f63f af47 	bhi.w	80008fa <main+0x22>
 8000a6c:	a201      	add	r2, pc, #4	; (adr r2, 8000a74 <main+0x19c>)
 8000a6e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8000a72:	bf00      	nop
 8000a74:	08000a9d 	.word	0x08000a9d
 8000a78:	08000ab9 	.word	0x08000ab9
 8000a7c:	08000ad5 	.word	0x08000ad5
 8000a80:	08000af1 	.word	0x08000af1
 8000a84:	08000b0d 	.word	0x08000b0d
 8000a88:	08000b29 	.word	0x08000b29
 8000a8c:	08000b45 	.word	0x08000b45
 8000a90:	08000b61 	.word	0x08000b61
 8000a94:	08000b7d 	.word	0x08000b7d
 8000a98:	08000b93 	.word	0x08000b93
	  {
		  case 0:
		  {
			  GPIO_SetBits(GPIOC, GPIO_Pin_8);
 8000a9c:	f44f 7180 	mov.w	r1, #256	; 0x100
 8000aa0:	4843      	ldr	r0, [pc, #268]	; (8000bb0 <main+0x2d8>)
 8000aa2:	f7ff fd31 	bl	8000508 <GPIO_SetBits>
			  GPIO_ResetBits(GPIOA, GPIO_Pin_0 | GPIO_Pin_1 | GPIO_Pin_2 | GPIO_Pin_4 | GPIO_Pin_5 | GPIO_Pin_6);
 8000aa6:	2177      	movs	r1, #119	; 0x77
 8000aa8:	4842      	ldr	r0, [pc, #264]	; (8000bb4 <main+0x2dc>)
 8000aaa:	f7ff fd3c 	bl	8000526 <GPIO_ResetBits>
			  GPIO_SetBits(GPIOA, GPIO_Pin_3);
 8000aae:	2108      	movs	r1, #8
 8000ab0:	4840      	ldr	r0, [pc, #256]	; (8000bb4 <main+0x2dc>)
 8000ab2:	f7ff fd29 	bl	8000508 <GPIO_SetBits>
			  break;
 8000ab6:	e07a      	b.n	8000bae <main+0x2d6>
		  }
		  case 1:
		  {
			  GPIO_SetBits(GPIOC, GPIO_Pin_8);
 8000ab8:	f44f 7180 	mov.w	r1, #256	; 0x100
 8000abc:	483c      	ldr	r0, [pc, #240]	; (8000bb0 <main+0x2d8>)
 8000abe:	f7ff fd23 	bl	8000508 <GPIO_SetBits>
			  GPIO_ResetBits(GPIOA, GPIO_Pin_2 | GPIO_Pin_6);
 8000ac2:	2144      	movs	r1, #68	; 0x44
 8000ac4:	483b      	ldr	r0, [pc, #236]	; (8000bb4 <main+0x2dc>)
 8000ac6:	f7ff fd2e 	bl	8000526 <GPIO_ResetBits>
			  GPIO_SetBits(GPIOA, GPIO_Pin_0 | GPIO_Pin_1 | GPIO_Pin_3 | GPIO_Pin_4 | GPIO_Pin_5);
 8000aca:	213b      	movs	r1, #59	; 0x3b
 8000acc:	4839      	ldr	r0, [pc, #228]	; (8000bb4 <main+0x2dc>)
 8000ace:	f7ff fd1b 	bl	8000508 <GPIO_SetBits>
			  break;
 8000ad2:	e06c      	b.n	8000bae <main+0x2d6>
		  }
		  case 2:
		  {
			  GPIO_SetBits(GPIOC, GPIO_Pin_8);
 8000ad4:	f44f 7180 	mov.w	r1, #256	; 0x100
 8000ad8:	4835      	ldr	r0, [pc, #212]	; (8000bb0 <main+0x2d8>)
 8000ada:	f7ff fd15 	bl	8000508 <GPIO_SetBits>
			  GPIO_ResetBits(GPIOA, GPIO_Pin_0 | GPIO_Pin_1 | GPIO_Pin_3 | GPIO_Pin_4 | GPIO_Pin_6);
 8000ade:	215b      	movs	r1, #91	; 0x5b
 8000ae0:	4834      	ldr	r0, [pc, #208]	; (8000bb4 <main+0x2dc>)
 8000ae2:	f7ff fd20 	bl	8000526 <GPIO_ResetBits>
			  GPIO_SetBits(GPIOA, GPIO_Pin_2 | GPIO_Pin_5);
 8000ae6:	2124      	movs	r1, #36	; 0x24
 8000ae8:	4832      	ldr	r0, [pc, #200]	; (8000bb4 <main+0x2dc>)
 8000aea:	f7ff fd0d 	bl	8000508 <GPIO_SetBits>
			  break;
 8000aee:	e05e      	b.n	8000bae <main+0x2d6>
		  }
		  case 3:
		  {
			  GPIO_SetBits(GPIOC, GPIO_Pin_8);
 8000af0:	f44f 7180 	mov.w	r1, #256	; 0x100
 8000af4:	482e      	ldr	r0, [pc, #184]	; (8000bb0 <main+0x2d8>)
 8000af6:	f7ff fd07 	bl	8000508 <GPIO_SetBits>
			  GPIO_ResetBits(GPIOA, GPIO_Pin_1 | GPIO_Pin_2 | GPIO_Pin_3 | GPIO_Pin_5 | GPIO_Pin_6);
 8000afa:	216e      	movs	r1, #110	; 0x6e
 8000afc:	482d      	ldr	r0, [pc, #180]	; (8000bb4 <main+0x2dc>)
 8000afe:	f7ff fd12 	bl	8000526 <GPIO_ResetBits>
			  GPIO_SetBits(GPIOA, GPIO_Pin_0 | GPIO_Pin_4);
 8000b02:	2111      	movs	r1, #17
 8000b04:	482b      	ldr	r0, [pc, #172]	; (8000bb4 <main+0x2dc>)
 8000b06:	f7ff fcff 	bl	8000508 <GPIO_SetBits>
			  break;
 8000b0a:	e050      	b.n	8000bae <main+0x2d6>
		  }
		  case 4:
		  {
			  GPIO_SetBits(GPIOC, GPIO_Pin_8);
 8000b0c:	f44f 7180 	mov.w	r1, #256	; 0x100
 8000b10:	4827      	ldr	r0, [pc, #156]	; (8000bb0 <main+0x2d8>)
 8000b12:	f7ff fcf9 	bl	8000508 <GPIO_SetBits>
			  GPIO_ResetBits(GPIOA, GPIO_Pin_2 | GPIO_Pin_3 | GPIO_Pin_4 | GPIO_Pin_6);
 8000b16:	215c      	movs	r1, #92	; 0x5c
 8000b18:	4826      	ldr	r0, [pc, #152]	; (8000bb4 <main+0x2dc>)
 8000b1a:	f7ff fd04 	bl	8000526 <GPIO_ResetBits>
			  GPIO_SetBits(GPIOA, GPIO_Pin_0 | GPIO_Pin_1 | GPIO_Pin_5);
 8000b1e:	2123      	movs	r1, #35	; 0x23
 8000b20:	4824      	ldr	r0, [pc, #144]	; (8000bb4 <main+0x2dc>)
 8000b22:	f7ff fcf1 	bl	8000508 <GPIO_SetBits>
			  break;
 8000b26:	e042      	b.n	8000bae <main+0x2d6>
		  }
		  case 5:
		  {
			  GPIO_SetBits(GPIOC, GPIO_Pin_8);
 8000b28:	f44f 7180 	mov.w	r1, #256	; 0x100
 8000b2c:	4820      	ldr	r0, [pc, #128]	; (8000bb0 <main+0x2d8>)
 8000b2e:	f7ff fceb 	bl	8000508 <GPIO_SetBits>
			  GPIO_ResetBits(GPIOA, GPIO_Pin_1 | GPIO_Pin_2 | GPIO_Pin_3 | GPIO_Pin_4 | GPIO_Pin_5);
 8000b32:	213e      	movs	r1, #62	; 0x3e
 8000b34:	481f      	ldr	r0, [pc, #124]	; (8000bb4 <main+0x2dc>)
 8000b36:	f7ff fcf6 	bl	8000526 <GPIO_ResetBits>
			  GPIO_SetBits(GPIOA, GPIO_Pin_0 | GPIO_Pin_6);
 8000b3a:	2141      	movs	r1, #65	; 0x41
 8000b3c:	481d      	ldr	r0, [pc, #116]	; (8000bb4 <main+0x2dc>)
 8000b3e:	f7ff fce3 	bl	8000508 <GPIO_SetBits>
			  break;
 8000b42:	e034      	b.n	8000bae <main+0x2d6>
		  }
		  case 6:
		  {
			  GPIO_SetBits(GPIOC, GPIO_Pin_8);
 8000b44:	f44f 7180 	mov.w	r1, #256	; 0x100
 8000b48:	4819      	ldr	r0, [pc, #100]	; (8000bb0 <main+0x2d8>)
 8000b4a:	f7ff fcdd 	bl	8000508 <GPIO_SetBits>
			  GPIO_ResetBits(GPIOA, GPIO_Pin_0 | GPIO_Pin_1 | GPIO_Pin_2 | GPIO_Pin_3 | GPIO_Pin_4 | GPIO_Pin_5);
 8000b4e:	213f      	movs	r1, #63	; 0x3f
 8000b50:	4818      	ldr	r0, [pc, #96]	; (8000bb4 <main+0x2dc>)
 8000b52:	f7ff fce8 	bl	8000526 <GPIO_ResetBits>
			  GPIO_SetBits(GPIOA, GPIO_Pin_6);
 8000b56:	2140      	movs	r1, #64	; 0x40
 8000b58:	4816      	ldr	r0, [pc, #88]	; (8000bb4 <main+0x2dc>)
 8000b5a:	f7ff fcd5 	bl	8000508 <GPIO_SetBits>
			  break;
 8000b5e:	e026      	b.n	8000bae <main+0x2d6>
		  }
		  case 7:
		  {
			  GPIO_SetBits(GPIOC, GPIO_Pin_8);
 8000b60:	f44f 7180 	mov.w	r1, #256	; 0x100
 8000b64:	4812      	ldr	r0, [pc, #72]	; (8000bb0 <main+0x2d8>)
 8000b66:	f7ff fccf 	bl	8000508 <GPIO_SetBits>
			  GPIO_ResetBits(GPIOA, GPIO_Pin_2 | GPIO_Pin_5 | GPIO_Pin_6);
 8000b6a:	2164      	movs	r1, #100	; 0x64
 8000b6c:	4811      	ldr	r0, [pc, #68]	; (8000bb4 <main+0x2dc>)
 8000b6e:	f7ff fcda 	bl	8000526 <GPIO_ResetBits>
			  GPIO_SetBits(GPIOA, GPIO_Pin_0 | GPIO_Pin_1 | GPIO_Pin_3 | GPIO_Pin_4);
 8000b72:	211b      	movs	r1, #27
 8000b74:	480f      	ldr	r0, [pc, #60]	; (8000bb4 <main+0x2dc>)
 8000b76:	f7ff fcc7 	bl	8000508 <GPIO_SetBits>
			  break;
 8000b7a:	e018      	b.n	8000bae <main+0x2d6>
		  }
		  case 8:
		  {
			  GPIO_SetBits(GPIOC, GPIO_Pin_8);
 8000b7c:	f44f 7180 	mov.w	r1, #256	; 0x100
 8000b80:	480b      	ldr	r0, [pc, #44]	; (8000bb0 <main+0x2d8>)
 8000b82:	f7ff fcc1 	bl	8000508 <GPIO_SetBits>
			  GPIO_ResetBits(GPIOA, GPIO_Pin_All);
 8000b86:	f64f 71ff 	movw	r1, #65535	; 0xffff
 8000b8a:	480a      	ldr	r0, [pc, #40]	; (8000bb4 <main+0x2dc>)
 8000b8c:	f7ff fccb 	bl	8000526 <GPIO_ResetBits>
			  break;
 8000b90:	e00d      	b.n	8000bae <main+0x2d6>
		  }
		  case 9:
		  {
			  GPIO_SetBits(GPIOC, GPIO_Pin_8);
 8000b92:	f44f 7180 	mov.w	r1, #256	; 0x100
 8000b96:	4806      	ldr	r0, [pc, #24]	; (8000bb0 <main+0x2d8>)
 8000b98:	f7ff fcb6 	bl	8000508 <GPIO_SetBits>
			  GPIO_ResetBits(GPIOA, GPIO_Pin_1 | GPIO_Pin_2 | GPIO_Pin_3 | GPIO_Pin_4 | GPIO_Pin_5 | GPIO_Pin_6);
 8000b9c:	217e      	movs	r1, #126	; 0x7e
 8000b9e:	4805      	ldr	r0, [pc, #20]	; (8000bb4 <main+0x2dc>)
 8000ba0:	f7ff fcc1 	bl	8000526 <GPIO_ResetBits>
			  GPIO_SetBits(GPIOA, GPIO_Pin_0);
 8000ba4:	2101      	movs	r1, #1
 8000ba6:	4803      	ldr	r0, [pc, #12]	; (8000bb4 <main+0x2dc>)
 8000ba8:	f7ff fcae 	bl	8000508 <GPIO_SetBits>
			  break;
 8000bac:	bf00      	nop
	  count++;
 8000bae:	e6a4      	b.n	80008fa <main+0x22>
 8000bb0:	40020800 	.word	0x40020800
 8000bb4:	40020000 	.word	0x40020000
 8000bb8:	2000003c 	.word	0x2000003c
 8000bbc:	0019a280 	.word	0x0019a280
 8000bc0:	20000040 	.word	0x20000040
 8000bc4:	2000002c 	.word	0x2000002c
 8000bc8:	20000030 	.word	0x20000030

08000bcc <EVAL_AUDIO_TransferComplete_CallBack>:
	  }
  }
}

void EVAL_AUDIO_TransferComplete_CallBack(uint32_t pBuffer, uint32_t Size)
{
 8000bcc:	b480      	push	{r7}
 8000bce:	b083      	sub	sp, #12
 8000bd0:	af00      	add	r7, sp, #0
 8000bd2:	6078      	str	r0, [r7, #4]
 8000bd4:	6039      	str	r1, [r7, #0]
  /* TODO, implement your code here */
  return;
 8000bd6:	bf00      	nop
}
 8000bd8:	370c      	adds	r7, #12
 8000bda:	46bd      	mov	sp, r7
 8000bdc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000be0:	4770      	bx	lr

08000be2 <EVAL_AUDIO_GetSampleCallBack>:

uint16_t EVAL_AUDIO_GetSampleCallBack(void)
{
 8000be2:	b480      	push	{r7}
 8000be4:	af00      	add	r7, sp, #0
  /* TODO, implement your code here */
  return -1;
 8000be6:	f64f 73ff 	movw	r3, #65535	; 0xffff
}
 8000bea:	4618      	mov	r0, r3
 8000bec:	46bd      	mov	sp, r7
 8000bee:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000bf2:	4770      	bx	lr

08000bf4 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack    /* Atollic update: set stack pointer */
 8000bf4:	f8df d034 	ldr.w	sp, [pc, #52]	; 8000c2c <LoopFillZerobss+0x14>

/* Copy the data segment initializers from flash to SRAM */  
  movs  r1, #0
 8000bf8:	2100      	movs	r1, #0
  b  LoopCopyDataInit
 8000bfa:	e003      	b.n	8000c04 <LoopCopyDataInit>

08000bfc <CopyDataInit>:

CopyDataInit:
  ldr  r3, =_sidata
 8000bfc:	4b0c      	ldr	r3, [pc, #48]	; (8000c30 <LoopFillZerobss+0x18>)
  ldr  r3, [r3, r1]
 8000bfe:	585b      	ldr	r3, [r3, r1]
  str  r3, [r0, r1]
 8000c00:	5043      	str	r3, [r0, r1]
  adds  r1, r1, #4
 8000c02:	3104      	adds	r1, #4

08000c04 <LoopCopyDataInit>:
    
LoopCopyDataInit:
  ldr  r0, =_sdata
 8000c04:	480b      	ldr	r0, [pc, #44]	; (8000c34 <LoopFillZerobss+0x1c>)
  ldr  r3, =_edata
 8000c06:	4b0c      	ldr	r3, [pc, #48]	; (8000c38 <LoopFillZerobss+0x20>)
  adds  r2, r0, r1
 8000c08:	1842      	adds	r2, r0, r1
  cmp  r2, r3
 8000c0a:	429a      	cmp	r2, r3
  bcc  CopyDataInit
 8000c0c:	d3f6      	bcc.n	8000bfc <CopyDataInit>
  ldr  r2, =_sbss
 8000c0e:	4a0b      	ldr	r2, [pc, #44]	; (8000c3c <LoopFillZerobss+0x24>)
  b  LoopFillZerobss
 8000c10:	e002      	b.n	8000c18 <LoopFillZerobss>

08000c12 <FillZerobss>:
/* Zero fill the bss segment. */  
FillZerobss:
  movs  r3, #0
 8000c12:	2300      	movs	r3, #0
  str  r3, [r2], #4
 8000c14:	f842 3b04 	str.w	r3, [r2], #4

08000c18 <LoopFillZerobss>:
    
LoopFillZerobss:
  ldr  r3, = _ebss
 8000c18:	4b09      	ldr	r3, [pc, #36]	; (8000c40 <LoopFillZerobss+0x28>)
  cmp  r2, r3
 8000c1a:	429a      	cmp	r2, r3
  bcc  FillZerobss
 8000c1c:	d3f9      	bcc.n	8000c12 <FillZerobss>

/* Call the clock system intitialization function.*/
  bl  SystemInit   
 8000c1e:	f000 f841 	bl	8000ca4 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 8000c22:	f000 f8f1 	bl	8000e08 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 8000c26:	f7ff fe57 	bl	80008d8 <main>
  bx  lr    
 8000c2a:	4770      	bx	lr
  ldr   sp, =_estack    /* Atollic update: set stack pointer */
 8000c2c:	20020000 	.word	0x20020000
  ldr  r3, =_sidata
 8000c30:	08000e70 	.word	0x08000e70
  ldr  r0, =_sdata
 8000c34:	20000000 	.word	0x20000000
  ldr  r3, =_edata
 8000c38:	20000010 	.word	0x20000010
  ldr  r2, =_sbss
 8000c3c:	20000010 	.word	0x20000010
  ldr  r3, = _ebss
 8000c40:	200000c8 	.word	0x200000c8

08000c44 <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8000c44:	e7fe      	b.n	8000c44 <ADC_IRQHandler>

08000c46 <NMI_Handler>:
  * @brief   This function handles NMI exception.
  * @param  None
  * @retval None
  */
void NMI_Handler(void)
{
 8000c46:	b480      	push	{r7}
 8000c48:	af00      	add	r7, sp, #0
}
 8000c4a:	bf00      	nop
 8000c4c:	46bd      	mov	sp, r7
 8000c4e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000c52:	4770      	bx	lr

08000c54 <HardFault_Handler>:
  * @brief  This function handles Hard Fault exception.
  * @param  None
  * @retval None
  */
void HardFault_Handler(void)
{
 8000c54:	b480      	push	{r7}
 8000c56:	af00      	add	r7, sp, #0
  /* Go to infinite loop when Hard Fault exception occurs */
  while (1)
 8000c58:	e7fe      	b.n	8000c58 <HardFault_Handler+0x4>

08000c5a <MemManage_Handler>:
  * @brief  This function handles Memory Manage exception.
  * @param  None
  * @retval None
  */
void MemManage_Handler(void)
{
 8000c5a:	b480      	push	{r7}
 8000c5c:	af00      	add	r7, sp, #0
  /* Go to infinite loop when Memory Manage exception occurs */
  while (1)
 8000c5e:	e7fe      	b.n	8000c5e <MemManage_Handler+0x4>

08000c60 <BusFault_Handler>:
  * @brief  This function handles Bus Fault exception.
  * @param  None
  * @retval None
  */
void BusFault_Handler(void)
{
 8000c60:	b480      	push	{r7}
 8000c62:	af00      	add	r7, sp, #0
  /* Go to infinite loop when Bus Fault exception occurs */
  while (1)
 8000c64:	e7fe      	b.n	8000c64 <BusFault_Handler+0x4>

08000c66 <UsageFault_Handler>:
  * @brief  This function handles Usage Fault exception.
  * @param  None
  * @retval None
  */
void UsageFault_Handler(void)
{
 8000c66:	b480      	push	{r7}
 8000c68:	af00      	add	r7, sp, #0
  /* Go to infinite loop when Usage Fault exception occurs */
  while (1)
 8000c6a:	e7fe      	b.n	8000c6a <UsageFault_Handler+0x4>

08000c6c <SVC_Handler>:
  * @brief  This function handles SVCall exception.
  * @param  None
  * @retval None
  */
void SVC_Handler(void)
{
 8000c6c:	b480      	push	{r7}
 8000c6e:	af00      	add	r7, sp, #0
}
 8000c70:	bf00      	nop
 8000c72:	46bd      	mov	sp, r7
 8000c74:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000c78:	4770      	bx	lr

08000c7a <DebugMon_Handler>:
  * @brief  This function handles Debug Monitor exception.
  * @param  None
  * @retval None
  */
void DebugMon_Handler(void)
{
 8000c7a:	b480      	push	{r7}
 8000c7c:	af00      	add	r7, sp, #0
}
 8000c7e:	bf00      	nop
 8000c80:	46bd      	mov	sp, r7
 8000c82:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000c86:	4770      	bx	lr

08000c88 <PendSV_Handler>:
  * @brief  This function handles PendSVC exception.
  * @param  None
  * @retval None
  */
void PendSV_Handler(void)
{
 8000c88:	b480      	push	{r7}
 8000c8a:	af00      	add	r7, sp, #0
}
 8000c8c:	bf00      	nop
 8000c8e:	46bd      	mov	sp, r7
 8000c90:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000c94:	4770      	bx	lr

08000c96 <SysTick_Handler>:
  * @brief  This function handles SysTick Handler.
  * @param  None
  * @retval None
  */
void SysTick_Handler(void)
{
 8000c96:	b480      	push	{r7}
 8000c98:	af00      	add	r7, sp, #0
/*  TimingDelay_Decrement(); */
}
 8000c9a:	bf00      	nop
 8000c9c:	46bd      	mov	sp, r7
 8000c9e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000ca2:	4770      	bx	lr

08000ca4 <SystemInit>:
  *         SystemFrequency variable.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8000ca4:	b580      	push	{r7, lr}
 8000ca6:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
	SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8000ca8:	4a16      	ldr	r2, [pc, #88]	; (8000d04 <SystemInit+0x60>)
 8000caa:	4b16      	ldr	r3, [pc, #88]	; (8000d04 <SystemInit+0x60>)
 8000cac:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8000cb0:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8000cb4:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88
  #endif

  /* Reset the RCC clock configuration to the default reset state ------------*/
  /* Set HSION bit */
  RCC->CR |= (uint32_t)0x00000001;
 8000cb8:	4a13      	ldr	r2, [pc, #76]	; (8000d08 <SystemInit+0x64>)
 8000cba:	4b13      	ldr	r3, [pc, #76]	; (8000d08 <SystemInit+0x64>)
 8000cbc:	681b      	ldr	r3, [r3, #0]
 8000cbe:	f043 0301 	orr.w	r3, r3, #1
 8000cc2:	6013      	str	r3, [r2, #0]

  /* Reset CFGR register */
  RCC->CFGR = 0x00000000;
 8000cc4:	4b10      	ldr	r3, [pc, #64]	; (8000d08 <SystemInit+0x64>)
 8000cc6:	2200      	movs	r2, #0
 8000cc8:	609a      	str	r2, [r3, #8]

  /* Reset HSEON, CSSON and PLLON bits */
  RCC->CR &= (uint32_t)0xFEF6FFFF;
 8000cca:	4a0f      	ldr	r2, [pc, #60]	; (8000d08 <SystemInit+0x64>)
 8000ccc:	4b0e      	ldr	r3, [pc, #56]	; (8000d08 <SystemInit+0x64>)
 8000cce:	681b      	ldr	r3, [r3, #0]
 8000cd0:	f023 7384 	bic.w	r3, r3, #17301504	; 0x1080000
 8000cd4:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8000cd8:	6013      	str	r3, [r2, #0]

  /* Reset PLLCFGR register */
  RCC->PLLCFGR = 0x24003010;
 8000cda:	4b0b      	ldr	r3, [pc, #44]	; (8000d08 <SystemInit+0x64>)
 8000cdc:	4a0b      	ldr	r2, [pc, #44]	; (8000d0c <SystemInit+0x68>)
 8000cde:	605a      	str	r2, [r3, #4]

  /* Reset HSEBYP bit */
  RCC->CR &= (uint32_t)0xFFFBFFFF;
 8000ce0:	4a09      	ldr	r2, [pc, #36]	; (8000d08 <SystemInit+0x64>)
 8000ce2:	4b09      	ldr	r3, [pc, #36]	; (8000d08 <SystemInit+0x64>)
 8000ce4:	681b      	ldr	r3, [r3, #0]
 8000ce6:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8000cea:	6013      	str	r3, [r2, #0]

  /* Disable all interrupts */
  RCC->CIR = 0x00000000;
 8000cec:	4b06      	ldr	r3, [pc, #24]	; (8000d08 <SystemInit+0x64>)
 8000cee:	2200      	movs	r2, #0
 8000cf0:	60da      	str	r2, [r3, #12]
  SystemInit_ExtMemCtl(); 
#endif /* DATA_IN_ExtSRAM */
         
  /* Configure the System clock source, PLL Multiplier and Divider factors, 
     AHB/APBx prescalers and Flash settings ----------------------------------*/
  SetSysClock();
 8000cf2:	f000 f80d 	bl	8000d10 <SetSysClock>

  /* Configure the Vector Table location add offset address ------------------*/
#ifdef VECT_TAB_SRAM
  SCB->VTOR = SRAM_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#else
  SCB->VTOR = FLASH_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal FLASH */
 8000cf6:	4b03      	ldr	r3, [pc, #12]	; (8000d04 <SystemInit+0x60>)
 8000cf8:	f04f 6200 	mov.w	r2, #134217728	; 0x8000000
 8000cfc:	609a      	str	r2, [r3, #8]
#endif
}
 8000cfe:	bf00      	nop
 8000d00:	bd80      	pop	{r7, pc}
 8000d02:	bf00      	nop
 8000d04:	e000ed00 	.word	0xe000ed00
 8000d08:	40023800 	.word	0x40023800
 8000d0c:	24003010 	.word	0x24003010

08000d10 <SetSysClock>:
  *         is reset to the default reset state (done in SystemInit() function).   
  * @param  None
  * @retval None
  */
static void SetSysClock(void)
{
 8000d10:	b480      	push	{r7}
 8000d12:	b083      	sub	sp, #12
 8000d14:	af00      	add	r7, sp, #0
/******************************************************************************/
/*            PLL (clocked by HSE) used as System clock source                */
/******************************************************************************/
  __IO uint32_t StartUpCounter = 0, HSEStatus = 0;
 8000d16:	2300      	movs	r3, #0
 8000d18:	607b      	str	r3, [r7, #4]
 8000d1a:	2300      	movs	r3, #0
 8000d1c:	603b      	str	r3, [r7, #0]
  
  /* Enable HSE */
  RCC->CR |= ((uint32_t)RCC_CR_HSEON);
 8000d1e:	4a36      	ldr	r2, [pc, #216]	; (8000df8 <SetSysClock+0xe8>)
 8000d20:	4b35      	ldr	r3, [pc, #212]	; (8000df8 <SetSysClock+0xe8>)
 8000d22:	681b      	ldr	r3, [r3, #0]
 8000d24:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8000d28:	6013      	str	r3, [r2, #0]
 
  /* Wait till HSE is ready and if Time out is reached exit */
  do
  {
    HSEStatus = RCC->CR & RCC_CR_HSERDY;
 8000d2a:	4b33      	ldr	r3, [pc, #204]	; (8000df8 <SetSysClock+0xe8>)
 8000d2c:	681b      	ldr	r3, [r3, #0]
 8000d2e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8000d32:	603b      	str	r3, [r7, #0]
    StartUpCounter++;
 8000d34:	687b      	ldr	r3, [r7, #4]
 8000d36:	3301      	adds	r3, #1
 8000d38:	607b      	str	r3, [r7, #4]
  } while((HSEStatus == 0) && (StartUpCounter != HSE_STARTUP_TIMEOUT));
 8000d3a:	683b      	ldr	r3, [r7, #0]
 8000d3c:	2b00      	cmp	r3, #0
 8000d3e:	d103      	bne.n	8000d48 <SetSysClock+0x38>
 8000d40:	687b      	ldr	r3, [r7, #4]
 8000d42:	f5b3 6fa0 	cmp.w	r3, #1280	; 0x500
 8000d46:	d1f0      	bne.n	8000d2a <SetSysClock+0x1a>

  if ((RCC->CR & RCC_CR_HSERDY) != RESET)
 8000d48:	4b2b      	ldr	r3, [pc, #172]	; (8000df8 <SetSysClock+0xe8>)
 8000d4a:	681b      	ldr	r3, [r3, #0]
 8000d4c:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8000d50:	2b00      	cmp	r3, #0
 8000d52:	d002      	beq.n	8000d5a <SetSysClock+0x4a>
  {
    HSEStatus = (uint32_t)0x01;
 8000d54:	2301      	movs	r3, #1
 8000d56:	603b      	str	r3, [r7, #0]
 8000d58:	e001      	b.n	8000d5e <SetSysClock+0x4e>
  }
  else
  {
    HSEStatus = (uint32_t)0x00;
 8000d5a:	2300      	movs	r3, #0
 8000d5c:	603b      	str	r3, [r7, #0]
  }

  if (HSEStatus == (uint32_t)0x01)
 8000d5e:	683b      	ldr	r3, [r7, #0]
 8000d60:	2b01      	cmp	r3, #1
 8000d62:	d142      	bne.n	8000dea <SetSysClock+0xda>
  {
    /* Enable high performance mode, System frequency up to 168 MHz */
    RCC->APB1ENR |= RCC_APB1ENR_PWREN;
 8000d64:	4a24      	ldr	r2, [pc, #144]	; (8000df8 <SetSysClock+0xe8>)
 8000d66:	4b24      	ldr	r3, [pc, #144]	; (8000df8 <SetSysClock+0xe8>)
 8000d68:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000d6a:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8000d6e:	6413      	str	r3, [r2, #64]	; 0x40
    PWR->CR |= PWR_CR_PMODE;  
 8000d70:	4a22      	ldr	r2, [pc, #136]	; (8000dfc <SetSysClock+0xec>)
 8000d72:	4b22      	ldr	r3, [pc, #136]	; (8000dfc <SetSysClock+0xec>)
 8000d74:	681b      	ldr	r3, [r3, #0]
 8000d76:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8000d7a:	6013      	str	r3, [r2, #0]

    /* HCLK = SYSCLK / 1*/
    RCC->CFGR |= RCC_CFGR_HPRE_DIV1;
 8000d7c:	4a1e      	ldr	r2, [pc, #120]	; (8000df8 <SetSysClock+0xe8>)
 8000d7e:	4b1e      	ldr	r3, [pc, #120]	; (8000df8 <SetSysClock+0xe8>)
 8000d80:	689b      	ldr	r3, [r3, #8]
 8000d82:	6093      	str	r3, [r2, #8]
      
    /* PCLK2 = HCLK / 2*/
    RCC->CFGR |= RCC_CFGR_PPRE2_DIV2;
 8000d84:	4a1c      	ldr	r2, [pc, #112]	; (8000df8 <SetSysClock+0xe8>)
 8000d86:	4b1c      	ldr	r3, [pc, #112]	; (8000df8 <SetSysClock+0xe8>)
 8000d88:	689b      	ldr	r3, [r3, #8]
 8000d8a:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8000d8e:	6093      	str	r3, [r2, #8]
    
    /* PCLK1 = HCLK / 4*/
    RCC->CFGR |= RCC_CFGR_PPRE1_DIV4;
 8000d90:	4a19      	ldr	r2, [pc, #100]	; (8000df8 <SetSysClock+0xe8>)
 8000d92:	4b19      	ldr	r3, [pc, #100]	; (8000df8 <SetSysClock+0xe8>)
 8000d94:	689b      	ldr	r3, [r3, #8]
 8000d96:	f443 53a0 	orr.w	r3, r3, #5120	; 0x1400
 8000d9a:	6093      	str	r3, [r2, #8]

    /* Configure the main PLL */
    RCC->PLLCFGR = PLL_M | (PLL_N << 6) | (((PLL_P >> 1) -1) << 16) |
 8000d9c:	4b16      	ldr	r3, [pc, #88]	; (8000df8 <SetSysClock+0xe8>)
 8000d9e:	4a18      	ldr	r2, [pc, #96]	; (8000e00 <SetSysClock+0xf0>)
 8000da0:	605a      	str	r2, [r3, #4]
                   (RCC_PLLCFGR_PLLSRC_HSE) | (PLL_Q << 24);

    /* Enable the main PLL */
    RCC->CR |= RCC_CR_PLLON;
 8000da2:	4a15      	ldr	r2, [pc, #84]	; (8000df8 <SetSysClock+0xe8>)
 8000da4:	4b14      	ldr	r3, [pc, #80]	; (8000df8 <SetSysClock+0xe8>)
 8000da6:	681b      	ldr	r3, [r3, #0]
 8000da8:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8000dac:	6013      	str	r3, [r2, #0]

    /* Wait till the main PLL is ready */
    while((RCC->CR & RCC_CR_PLLRDY) == 0)
 8000dae:	bf00      	nop
 8000db0:	4b11      	ldr	r3, [pc, #68]	; (8000df8 <SetSysClock+0xe8>)
 8000db2:	681b      	ldr	r3, [r3, #0]
 8000db4:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8000db8:	2b00      	cmp	r3, #0
 8000dba:	d0f9      	beq.n	8000db0 <SetSysClock+0xa0>
    {
    }
   
    /* Configure Flash prefetch, Instruction cache, Data cache and wait state */
    FLASH->ACR = FLASH_ACR_ICEN |FLASH_ACR_DCEN |FLASH_ACR_LATENCY_5WS;
 8000dbc:	4b11      	ldr	r3, [pc, #68]	; (8000e04 <SetSysClock+0xf4>)
 8000dbe:	f240 6205 	movw	r2, #1541	; 0x605
 8000dc2:	601a      	str	r2, [r3, #0]

    /* Select the main PLL as system clock source */
    RCC->CFGR &= (uint32_t)((uint32_t)~(RCC_CFGR_SW));
 8000dc4:	4a0c      	ldr	r2, [pc, #48]	; (8000df8 <SetSysClock+0xe8>)
 8000dc6:	4b0c      	ldr	r3, [pc, #48]	; (8000df8 <SetSysClock+0xe8>)
 8000dc8:	689b      	ldr	r3, [r3, #8]
 8000dca:	f023 0303 	bic.w	r3, r3, #3
 8000dce:	6093      	str	r3, [r2, #8]
    RCC->CFGR |= RCC_CFGR_SW_PLL;
 8000dd0:	4a09      	ldr	r2, [pc, #36]	; (8000df8 <SetSysClock+0xe8>)
 8000dd2:	4b09      	ldr	r3, [pc, #36]	; (8000df8 <SetSysClock+0xe8>)
 8000dd4:	689b      	ldr	r3, [r3, #8]
 8000dd6:	f043 0302 	orr.w	r3, r3, #2
 8000dda:	6093      	str	r3, [r2, #8]

    /* Wait till the main PLL is used as system clock source */
    while ((RCC->CFGR & (uint32_t)RCC_CFGR_SWS ) != RCC_CFGR_SWS_PLL);
 8000ddc:	bf00      	nop
 8000dde:	4b06      	ldr	r3, [pc, #24]	; (8000df8 <SetSysClock+0xe8>)
 8000de0:	689b      	ldr	r3, [r3, #8]
 8000de2:	f003 030c 	and.w	r3, r3, #12
 8000de6:	2b08      	cmp	r3, #8
 8000de8:	d1f9      	bne.n	8000dde <SetSysClock+0xce>
  else
  { /* If HSE fails to start-up, the application will have wrong clock
         configuration. User can add here some code to deal with this error */
  }

}
 8000dea:	bf00      	nop
 8000dec:	370c      	adds	r7, #12
 8000dee:	46bd      	mov	sp, r7
 8000df0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000df4:	4770      	bx	lr
 8000df6:	bf00      	nop
 8000df8:	40023800 	.word	0x40023800
 8000dfc:	40007000 	.word	0x40007000
 8000e00:	07405408 	.word	0x07405408
 8000e04:	40023c00 	.word	0x40023c00

08000e08 <__libc_init_array>:
 8000e08:	b570      	push	{r4, r5, r6, lr}
 8000e0a:	4e0d      	ldr	r6, [pc, #52]	; (8000e40 <__libc_init_array+0x38>)
 8000e0c:	4c0d      	ldr	r4, [pc, #52]	; (8000e44 <__libc_init_array+0x3c>)
 8000e0e:	1ba4      	subs	r4, r4, r6
 8000e10:	10a4      	asrs	r4, r4, #2
 8000e12:	2500      	movs	r5, #0
 8000e14:	42a5      	cmp	r5, r4
 8000e16:	d109      	bne.n	8000e2c <__libc_init_array+0x24>
 8000e18:	4e0b      	ldr	r6, [pc, #44]	; (8000e48 <__libc_init_array+0x40>)
 8000e1a:	4c0c      	ldr	r4, [pc, #48]	; (8000e4c <__libc_init_array+0x44>)
 8000e1c:	f000 f818 	bl	8000e50 <_init>
 8000e20:	1ba4      	subs	r4, r4, r6
 8000e22:	10a4      	asrs	r4, r4, #2
 8000e24:	2500      	movs	r5, #0
 8000e26:	42a5      	cmp	r5, r4
 8000e28:	d105      	bne.n	8000e36 <__libc_init_array+0x2e>
 8000e2a:	bd70      	pop	{r4, r5, r6, pc}
 8000e2c:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 8000e30:	4798      	blx	r3
 8000e32:	3501      	adds	r5, #1
 8000e34:	e7ee      	b.n	8000e14 <__libc_init_array+0xc>
 8000e36:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 8000e3a:	4798      	blx	r3
 8000e3c:	3501      	adds	r5, #1
 8000e3e:	e7f2      	b.n	8000e26 <__libc_init_array+0x1e>
 8000e40:	08000e68 	.word	0x08000e68
 8000e44:	08000e68 	.word	0x08000e68
 8000e48:	08000e68 	.word	0x08000e68
 8000e4c:	08000e6c 	.word	0x08000e6c

08000e50 <_init>:
 8000e50:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8000e52:	bf00      	nop
 8000e54:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8000e56:	bc08      	pop	{r3}
 8000e58:	469e      	mov	lr, r3
 8000e5a:	4770      	bx	lr

08000e5c <_fini>:
 8000e5c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8000e5e:	bf00      	nop
 8000e60:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8000e62:	bc08      	pop	{r3}
 8000e64:	469e      	mov	lr, r3
 8000e66:	4770      	bx	lr
