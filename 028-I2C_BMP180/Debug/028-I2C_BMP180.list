
028-I2C_BMP180.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000188  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         000037ec  08000188  08000188  00010188  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000048  08003978  08003978  00013978  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .init_array   00000004  080039c0  080039c0  000139c0  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  4 .fini_array   00000004  080039c4  080039c4  000139c4  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  5 .data         00000098  20000000  080039c8  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  6 .ccmram       00000000  10000000  10000000  00020098  2**0
                  CONTENTS
  7 .bss          00000124  20000098  20000098  00020098  2**2
                  ALLOC
  8 ._user_heap_stack 00000400  200001bc  200001bc  00020098  2**0
                  ALLOC
  9 .ARM.attributes 00000030  00000000  00000000  00020098  2**0
                  CONTENTS, READONLY
 10 .debug_info   00007c9e  00000000  00000000  000200c8  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_abbrev 000015c5  00000000  00000000  00027d66  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_aranges 000008f0  00000000  00000000  00029330  2**3
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_ranges 00000818  00000000  00000000  00029c20  2**3
                  CONTENTS, READONLY, DEBUGGING
 14 .debug_line   000033d1  00000000  00000000  0002a438  2**0
                  CONTENTS, READONLY, DEBUGGING
 15 .debug_str    00002fe8  00000000  00000000  0002d809  2**0
                  CONTENTS, READONLY, DEBUGGING
 16 .comment      0000007c  00000000  00000000  000307f1  2**0
                  CONTENTS, READONLY
 17 .debug_frame  00002904  00000000  00000000  00030870  2**2
                  CONTENTS, READONLY, DEBUGGING
 18 .stabstr      0000003f  00000000  00000000  00033174  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

08000188 <__do_global_dtors_aux>:
 8000188:	b510      	push	{r4, lr}
 800018a:	4c05      	ldr	r4, [pc, #20]	; (80001a0 <__do_global_dtors_aux+0x18>)
 800018c:	7823      	ldrb	r3, [r4, #0]
 800018e:	b933      	cbnz	r3, 800019e <__do_global_dtors_aux+0x16>
 8000190:	4b04      	ldr	r3, [pc, #16]	; (80001a4 <__do_global_dtors_aux+0x1c>)
 8000192:	b113      	cbz	r3, 800019a <__do_global_dtors_aux+0x12>
 8000194:	4804      	ldr	r0, [pc, #16]	; (80001a8 <__do_global_dtors_aux+0x20>)
 8000196:	f3af 8000 	nop.w
 800019a:	2301      	movs	r3, #1
 800019c:	7023      	strb	r3, [r4, #0]
 800019e:	bd10      	pop	{r4, pc}
 80001a0:	20000098 	.word	0x20000098
 80001a4:	00000000 	.word	0x00000000
 80001a8:	0800395c 	.word	0x0800395c

080001ac <frame_dummy>:
 80001ac:	b508      	push	{r3, lr}
 80001ae:	4b03      	ldr	r3, [pc, #12]	; (80001bc <frame_dummy+0x10>)
 80001b0:	b11b      	cbz	r3, 80001ba <frame_dummy+0xe>
 80001b2:	4903      	ldr	r1, [pc, #12]	; (80001c0 <frame_dummy+0x14>)
 80001b4:	4803      	ldr	r0, [pc, #12]	; (80001c4 <frame_dummy+0x18>)
 80001b6:	f3af 8000 	nop.w
 80001ba:	bd08      	pop	{r3, pc}
 80001bc:	00000000 	.word	0x00000000
 80001c0:	2000009c 	.word	0x2000009c
 80001c4:	0800395c 	.word	0x0800395c

080001c8 <__aeabi_drsub>:
 80001c8:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000
 80001cc:	e002      	b.n	80001d4 <__adddf3>
 80001ce:	bf00      	nop

080001d0 <__aeabi_dsub>:
 80001d0:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000

080001d4 <__adddf3>:
 80001d4:	b530      	push	{r4, r5, lr}
 80001d6:	ea4f 0441 	mov.w	r4, r1, lsl #1
 80001da:	ea4f 0543 	mov.w	r5, r3, lsl #1
 80001de:	ea94 0f05 	teq	r4, r5
 80001e2:	bf08      	it	eq
 80001e4:	ea90 0f02 	teqeq	r0, r2
 80001e8:	bf1f      	itttt	ne
 80001ea:	ea54 0c00 	orrsne.w	ip, r4, r0
 80001ee:	ea55 0c02 	orrsne.w	ip, r5, r2
 80001f2:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 80001f6:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80001fa:	f000 80e2 	beq.w	80003c2 <__adddf3+0x1ee>
 80001fe:	ea4f 5454 	mov.w	r4, r4, lsr #21
 8000202:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 8000206:	bfb8      	it	lt
 8000208:	426d      	neglt	r5, r5
 800020a:	dd0c      	ble.n	8000226 <__adddf3+0x52>
 800020c:	442c      	add	r4, r5
 800020e:	ea80 0202 	eor.w	r2, r0, r2
 8000212:	ea81 0303 	eor.w	r3, r1, r3
 8000216:	ea82 0000 	eor.w	r0, r2, r0
 800021a:	ea83 0101 	eor.w	r1, r3, r1
 800021e:	ea80 0202 	eor.w	r2, r0, r2
 8000222:	ea81 0303 	eor.w	r3, r1, r3
 8000226:	2d36      	cmp	r5, #54	; 0x36
 8000228:	bf88      	it	hi
 800022a:	bd30      	pophi	{r4, r5, pc}
 800022c:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8000230:	ea4f 3101 	mov.w	r1, r1, lsl #12
 8000234:	f44f 1c80 	mov.w	ip, #1048576	; 0x100000
 8000238:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 800023c:	d002      	beq.n	8000244 <__adddf3+0x70>
 800023e:	4240      	negs	r0, r0
 8000240:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000244:	f013 4f00 	tst.w	r3, #2147483648	; 0x80000000
 8000248:	ea4f 3303 	mov.w	r3, r3, lsl #12
 800024c:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 8000250:	d002      	beq.n	8000258 <__adddf3+0x84>
 8000252:	4252      	negs	r2, r2
 8000254:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000258:	ea94 0f05 	teq	r4, r5
 800025c:	f000 80a7 	beq.w	80003ae <__adddf3+0x1da>
 8000260:	f1a4 0401 	sub.w	r4, r4, #1
 8000264:	f1d5 0e20 	rsbs	lr, r5, #32
 8000268:	db0d      	blt.n	8000286 <__adddf3+0xb2>
 800026a:	fa02 fc0e 	lsl.w	ip, r2, lr
 800026e:	fa22 f205 	lsr.w	r2, r2, r5
 8000272:	1880      	adds	r0, r0, r2
 8000274:	f141 0100 	adc.w	r1, r1, #0
 8000278:	fa03 f20e 	lsl.w	r2, r3, lr
 800027c:	1880      	adds	r0, r0, r2
 800027e:	fa43 f305 	asr.w	r3, r3, r5
 8000282:	4159      	adcs	r1, r3
 8000284:	e00e      	b.n	80002a4 <__adddf3+0xd0>
 8000286:	f1a5 0520 	sub.w	r5, r5, #32
 800028a:	f10e 0e20 	add.w	lr, lr, #32
 800028e:	2a01      	cmp	r2, #1
 8000290:	fa03 fc0e 	lsl.w	ip, r3, lr
 8000294:	bf28      	it	cs
 8000296:	f04c 0c02 	orrcs.w	ip, ip, #2
 800029a:	fa43 f305 	asr.w	r3, r3, r5
 800029e:	18c0      	adds	r0, r0, r3
 80002a0:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 80002a4:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80002a8:	d507      	bpl.n	80002ba <__adddf3+0xe6>
 80002aa:	f04f 0e00 	mov.w	lr, #0
 80002ae:	f1dc 0c00 	rsbs	ip, ip, #0
 80002b2:	eb7e 0000 	sbcs.w	r0, lr, r0
 80002b6:	eb6e 0101 	sbc.w	r1, lr, r1
 80002ba:	f5b1 1f80 	cmp.w	r1, #1048576	; 0x100000
 80002be:	d31b      	bcc.n	80002f8 <__adddf3+0x124>
 80002c0:	f5b1 1f00 	cmp.w	r1, #2097152	; 0x200000
 80002c4:	d30c      	bcc.n	80002e0 <__adddf3+0x10c>
 80002c6:	0849      	lsrs	r1, r1, #1
 80002c8:	ea5f 0030 	movs.w	r0, r0, rrx
 80002cc:	ea4f 0c3c 	mov.w	ip, ip, rrx
 80002d0:	f104 0401 	add.w	r4, r4, #1
 80002d4:	ea4f 5244 	mov.w	r2, r4, lsl #21
 80002d8:	f512 0f80 	cmn.w	r2, #4194304	; 0x400000
 80002dc:	f080 809a 	bcs.w	8000414 <__adddf3+0x240>
 80002e0:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 80002e4:	bf08      	it	eq
 80002e6:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80002ea:	f150 0000 	adcs.w	r0, r0, #0
 80002ee:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80002f2:	ea41 0105 	orr.w	r1, r1, r5
 80002f6:	bd30      	pop	{r4, r5, pc}
 80002f8:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 80002fc:	4140      	adcs	r0, r0
 80002fe:	eb41 0101 	adc.w	r1, r1, r1
 8000302:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000306:	f1a4 0401 	sub.w	r4, r4, #1
 800030a:	d1e9      	bne.n	80002e0 <__adddf3+0x10c>
 800030c:	f091 0f00 	teq	r1, #0
 8000310:	bf04      	itt	eq
 8000312:	4601      	moveq	r1, r0
 8000314:	2000      	moveq	r0, #0
 8000316:	fab1 f381 	clz	r3, r1
 800031a:	bf08      	it	eq
 800031c:	3320      	addeq	r3, #32
 800031e:	f1a3 030b 	sub.w	r3, r3, #11
 8000322:	f1b3 0220 	subs.w	r2, r3, #32
 8000326:	da0c      	bge.n	8000342 <__adddf3+0x16e>
 8000328:	320c      	adds	r2, #12
 800032a:	dd08      	ble.n	800033e <__adddf3+0x16a>
 800032c:	f102 0c14 	add.w	ip, r2, #20
 8000330:	f1c2 020c 	rsb	r2, r2, #12
 8000334:	fa01 f00c 	lsl.w	r0, r1, ip
 8000338:	fa21 f102 	lsr.w	r1, r1, r2
 800033c:	e00c      	b.n	8000358 <__adddf3+0x184>
 800033e:	f102 0214 	add.w	r2, r2, #20
 8000342:	bfd8      	it	le
 8000344:	f1c2 0c20 	rsble	ip, r2, #32
 8000348:	fa01 f102 	lsl.w	r1, r1, r2
 800034c:	fa20 fc0c 	lsr.w	ip, r0, ip
 8000350:	bfdc      	itt	le
 8000352:	ea41 010c 	orrle.w	r1, r1, ip
 8000356:	4090      	lslle	r0, r2
 8000358:	1ae4      	subs	r4, r4, r3
 800035a:	bfa2      	ittt	ge
 800035c:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 8000360:	4329      	orrge	r1, r5
 8000362:	bd30      	popge	{r4, r5, pc}
 8000364:	ea6f 0404 	mvn.w	r4, r4
 8000368:	3c1f      	subs	r4, #31
 800036a:	da1c      	bge.n	80003a6 <__adddf3+0x1d2>
 800036c:	340c      	adds	r4, #12
 800036e:	dc0e      	bgt.n	800038e <__adddf3+0x1ba>
 8000370:	f104 0414 	add.w	r4, r4, #20
 8000374:	f1c4 0220 	rsb	r2, r4, #32
 8000378:	fa20 f004 	lsr.w	r0, r0, r4
 800037c:	fa01 f302 	lsl.w	r3, r1, r2
 8000380:	ea40 0003 	orr.w	r0, r0, r3
 8000384:	fa21 f304 	lsr.w	r3, r1, r4
 8000388:	ea45 0103 	orr.w	r1, r5, r3
 800038c:	bd30      	pop	{r4, r5, pc}
 800038e:	f1c4 040c 	rsb	r4, r4, #12
 8000392:	f1c4 0220 	rsb	r2, r4, #32
 8000396:	fa20 f002 	lsr.w	r0, r0, r2
 800039a:	fa01 f304 	lsl.w	r3, r1, r4
 800039e:	ea40 0003 	orr.w	r0, r0, r3
 80003a2:	4629      	mov	r1, r5
 80003a4:	bd30      	pop	{r4, r5, pc}
 80003a6:	fa21 f004 	lsr.w	r0, r1, r4
 80003aa:	4629      	mov	r1, r5
 80003ac:	bd30      	pop	{r4, r5, pc}
 80003ae:	f094 0f00 	teq	r4, #0
 80003b2:	f483 1380 	eor.w	r3, r3, #1048576	; 0x100000
 80003b6:	bf06      	itte	eq
 80003b8:	f481 1180 	eoreq.w	r1, r1, #1048576	; 0x100000
 80003bc:	3401      	addeq	r4, #1
 80003be:	3d01      	subne	r5, #1
 80003c0:	e74e      	b.n	8000260 <__adddf3+0x8c>
 80003c2:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80003c6:	bf18      	it	ne
 80003c8:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80003cc:	d029      	beq.n	8000422 <__adddf3+0x24e>
 80003ce:	ea94 0f05 	teq	r4, r5
 80003d2:	bf08      	it	eq
 80003d4:	ea90 0f02 	teqeq	r0, r2
 80003d8:	d005      	beq.n	80003e6 <__adddf3+0x212>
 80003da:	ea54 0c00 	orrs.w	ip, r4, r0
 80003de:	bf04      	itt	eq
 80003e0:	4619      	moveq	r1, r3
 80003e2:	4610      	moveq	r0, r2
 80003e4:	bd30      	pop	{r4, r5, pc}
 80003e6:	ea91 0f03 	teq	r1, r3
 80003ea:	bf1e      	ittt	ne
 80003ec:	2100      	movne	r1, #0
 80003ee:	2000      	movne	r0, #0
 80003f0:	bd30      	popne	{r4, r5, pc}
 80003f2:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 80003f6:	d105      	bne.n	8000404 <__adddf3+0x230>
 80003f8:	0040      	lsls	r0, r0, #1
 80003fa:	4149      	adcs	r1, r1
 80003fc:	bf28      	it	cs
 80003fe:	f041 4100 	orrcs.w	r1, r1, #2147483648	; 0x80000000
 8000402:	bd30      	pop	{r4, r5, pc}
 8000404:	f514 0480 	adds.w	r4, r4, #4194304	; 0x400000
 8000408:	bf3c      	itt	cc
 800040a:	f501 1180 	addcc.w	r1, r1, #1048576	; 0x100000
 800040e:	bd30      	popcc	{r4, r5, pc}
 8000410:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000414:	f045 41fe 	orr.w	r1, r5, #2130706432	; 0x7f000000
 8000418:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 800041c:	f04f 0000 	mov.w	r0, #0
 8000420:	bd30      	pop	{r4, r5, pc}
 8000422:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 8000426:	bf1a      	itte	ne
 8000428:	4619      	movne	r1, r3
 800042a:	4610      	movne	r0, r2
 800042c:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 8000430:	bf1c      	itt	ne
 8000432:	460b      	movne	r3, r1
 8000434:	4602      	movne	r2, r0
 8000436:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 800043a:	bf06      	itte	eq
 800043c:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 8000440:	ea91 0f03 	teqeq	r1, r3
 8000444:	f441 2100 	orrne.w	r1, r1, #524288	; 0x80000
 8000448:	bd30      	pop	{r4, r5, pc}
 800044a:	bf00      	nop

0800044c <__aeabi_ui2d>:
 800044c:	f090 0f00 	teq	r0, #0
 8000450:	bf04      	itt	eq
 8000452:	2100      	moveq	r1, #0
 8000454:	4770      	bxeq	lr
 8000456:	b530      	push	{r4, r5, lr}
 8000458:	f44f 6480 	mov.w	r4, #1024	; 0x400
 800045c:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000460:	f04f 0500 	mov.w	r5, #0
 8000464:	f04f 0100 	mov.w	r1, #0
 8000468:	e750      	b.n	800030c <__adddf3+0x138>
 800046a:	bf00      	nop

0800046c <__aeabi_i2d>:
 800046c:	f090 0f00 	teq	r0, #0
 8000470:	bf04      	itt	eq
 8000472:	2100      	moveq	r1, #0
 8000474:	4770      	bxeq	lr
 8000476:	b530      	push	{r4, r5, lr}
 8000478:	f44f 6480 	mov.w	r4, #1024	; 0x400
 800047c:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000480:	f010 4500 	ands.w	r5, r0, #2147483648	; 0x80000000
 8000484:	bf48      	it	mi
 8000486:	4240      	negmi	r0, r0
 8000488:	f04f 0100 	mov.w	r1, #0
 800048c:	e73e      	b.n	800030c <__adddf3+0x138>
 800048e:	bf00      	nop

08000490 <__aeabi_f2d>:
 8000490:	0042      	lsls	r2, r0, #1
 8000492:	ea4f 01e2 	mov.w	r1, r2, asr #3
 8000496:	ea4f 0131 	mov.w	r1, r1, rrx
 800049a:	ea4f 7002 	mov.w	r0, r2, lsl #28
 800049e:	bf1f      	itttt	ne
 80004a0:	f012 437f 	andsne.w	r3, r2, #4278190080	; 0xff000000
 80004a4:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
 80004a8:	f081 5160 	eorne.w	r1, r1, #939524096	; 0x38000000
 80004ac:	4770      	bxne	lr
 80004ae:	f092 0f00 	teq	r2, #0
 80004b2:	bf14      	ite	ne
 80004b4:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
 80004b8:	4770      	bxeq	lr
 80004ba:	b530      	push	{r4, r5, lr}
 80004bc:	f44f 7460 	mov.w	r4, #896	; 0x380
 80004c0:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80004c4:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 80004c8:	e720      	b.n	800030c <__adddf3+0x138>
 80004ca:	bf00      	nop

080004cc <__aeabi_ul2d>:
 80004cc:	ea50 0201 	orrs.w	r2, r0, r1
 80004d0:	bf08      	it	eq
 80004d2:	4770      	bxeq	lr
 80004d4:	b530      	push	{r4, r5, lr}
 80004d6:	f04f 0500 	mov.w	r5, #0
 80004da:	e00a      	b.n	80004f2 <__aeabi_l2d+0x16>

080004dc <__aeabi_l2d>:
 80004dc:	ea50 0201 	orrs.w	r2, r0, r1
 80004e0:	bf08      	it	eq
 80004e2:	4770      	bxeq	lr
 80004e4:	b530      	push	{r4, r5, lr}
 80004e6:	f011 4500 	ands.w	r5, r1, #2147483648	; 0x80000000
 80004ea:	d502      	bpl.n	80004f2 <__aeabi_l2d+0x16>
 80004ec:	4240      	negs	r0, r0
 80004ee:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80004f2:	f44f 6480 	mov.w	r4, #1024	; 0x400
 80004f6:	f104 0432 	add.w	r4, r4, #50	; 0x32
 80004fa:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 80004fe:	f43f aedc 	beq.w	80002ba <__adddf3+0xe6>
 8000502:	f04f 0203 	mov.w	r2, #3
 8000506:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 800050a:	bf18      	it	ne
 800050c:	3203      	addne	r2, #3
 800050e:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 8000512:	bf18      	it	ne
 8000514:	3203      	addne	r2, #3
 8000516:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 800051a:	f1c2 0320 	rsb	r3, r2, #32
 800051e:	fa00 fc03 	lsl.w	ip, r0, r3
 8000522:	fa20 f002 	lsr.w	r0, r0, r2
 8000526:	fa01 fe03 	lsl.w	lr, r1, r3
 800052a:	ea40 000e 	orr.w	r0, r0, lr
 800052e:	fa21 f102 	lsr.w	r1, r1, r2
 8000532:	4414      	add	r4, r2
 8000534:	e6c1      	b.n	80002ba <__adddf3+0xe6>
 8000536:	bf00      	nop

08000538 <__aeabi_dmul>:
 8000538:	b570      	push	{r4, r5, r6, lr}
 800053a:	f04f 0cff 	mov.w	ip, #255	; 0xff
 800053e:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 8000542:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 8000546:	bf1d      	ittte	ne
 8000548:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 800054c:	ea94 0f0c 	teqne	r4, ip
 8000550:	ea95 0f0c 	teqne	r5, ip
 8000554:	f000 f8de 	bleq	8000714 <__aeabi_dmul+0x1dc>
 8000558:	442c      	add	r4, r5
 800055a:	ea81 0603 	eor.w	r6, r1, r3
 800055e:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 8000562:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 8000566:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 800056a:	bf18      	it	ne
 800056c:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 8000570:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000574:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8000578:	d038      	beq.n	80005ec <__aeabi_dmul+0xb4>
 800057a:	fba0 ce02 	umull	ip, lr, r0, r2
 800057e:	f04f 0500 	mov.w	r5, #0
 8000582:	fbe1 e502 	umlal	lr, r5, r1, r2
 8000586:	f006 4200 	and.w	r2, r6, #2147483648	; 0x80000000
 800058a:	fbe0 e503 	umlal	lr, r5, r0, r3
 800058e:	f04f 0600 	mov.w	r6, #0
 8000592:	fbe1 5603 	umlal	r5, r6, r1, r3
 8000596:	f09c 0f00 	teq	ip, #0
 800059a:	bf18      	it	ne
 800059c:	f04e 0e01 	orrne.w	lr, lr, #1
 80005a0:	f1a4 04ff 	sub.w	r4, r4, #255	; 0xff
 80005a4:	f5b6 7f00 	cmp.w	r6, #512	; 0x200
 80005a8:	f564 7440 	sbc.w	r4, r4, #768	; 0x300
 80005ac:	d204      	bcs.n	80005b8 <__aeabi_dmul+0x80>
 80005ae:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 80005b2:	416d      	adcs	r5, r5
 80005b4:	eb46 0606 	adc.w	r6, r6, r6
 80005b8:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 80005bc:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 80005c0:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 80005c4:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 80005c8:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 80005cc:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 80005d0:	bf88      	it	hi
 80005d2:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 80005d6:	d81e      	bhi.n	8000616 <__aeabi_dmul+0xde>
 80005d8:	f1be 4f00 	cmp.w	lr, #2147483648	; 0x80000000
 80005dc:	bf08      	it	eq
 80005de:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 80005e2:	f150 0000 	adcs.w	r0, r0, #0
 80005e6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80005ea:	bd70      	pop	{r4, r5, r6, pc}
 80005ec:	f006 4600 	and.w	r6, r6, #2147483648	; 0x80000000
 80005f0:	ea46 0101 	orr.w	r1, r6, r1
 80005f4:	ea40 0002 	orr.w	r0, r0, r2
 80005f8:	ea81 0103 	eor.w	r1, r1, r3
 80005fc:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 8000600:	bfc2      	ittt	gt
 8000602:	ebd4 050c 	rsbsgt	r5, r4, ip
 8000606:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 800060a:	bd70      	popgt	{r4, r5, r6, pc}
 800060c:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000610:	f04f 0e00 	mov.w	lr, #0
 8000614:	3c01      	subs	r4, #1
 8000616:	f300 80ab 	bgt.w	8000770 <__aeabi_dmul+0x238>
 800061a:	f114 0f36 	cmn.w	r4, #54	; 0x36
 800061e:	bfde      	ittt	le
 8000620:	2000      	movle	r0, #0
 8000622:	f001 4100 	andle.w	r1, r1, #2147483648	; 0x80000000
 8000626:	bd70      	pople	{r4, r5, r6, pc}
 8000628:	f1c4 0400 	rsb	r4, r4, #0
 800062c:	3c20      	subs	r4, #32
 800062e:	da35      	bge.n	800069c <__aeabi_dmul+0x164>
 8000630:	340c      	adds	r4, #12
 8000632:	dc1b      	bgt.n	800066c <__aeabi_dmul+0x134>
 8000634:	f104 0414 	add.w	r4, r4, #20
 8000638:	f1c4 0520 	rsb	r5, r4, #32
 800063c:	fa00 f305 	lsl.w	r3, r0, r5
 8000640:	fa20 f004 	lsr.w	r0, r0, r4
 8000644:	fa01 f205 	lsl.w	r2, r1, r5
 8000648:	ea40 0002 	orr.w	r0, r0, r2
 800064c:	f001 4200 	and.w	r2, r1, #2147483648	; 0x80000000
 8000650:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 8000654:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 8000658:	fa21 f604 	lsr.w	r6, r1, r4
 800065c:	eb42 0106 	adc.w	r1, r2, r6
 8000660:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000664:	bf08      	it	eq
 8000666:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800066a:	bd70      	pop	{r4, r5, r6, pc}
 800066c:	f1c4 040c 	rsb	r4, r4, #12
 8000670:	f1c4 0520 	rsb	r5, r4, #32
 8000674:	fa00 f304 	lsl.w	r3, r0, r4
 8000678:	fa20 f005 	lsr.w	r0, r0, r5
 800067c:	fa01 f204 	lsl.w	r2, r1, r4
 8000680:	ea40 0002 	orr.w	r0, r0, r2
 8000684:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000688:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 800068c:	f141 0100 	adc.w	r1, r1, #0
 8000690:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000694:	bf08      	it	eq
 8000696:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800069a:	bd70      	pop	{r4, r5, r6, pc}
 800069c:	f1c4 0520 	rsb	r5, r4, #32
 80006a0:	fa00 f205 	lsl.w	r2, r0, r5
 80006a4:	ea4e 0e02 	orr.w	lr, lr, r2
 80006a8:	fa20 f304 	lsr.w	r3, r0, r4
 80006ac:	fa01 f205 	lsl.w	r2, r1, r5
 80006b0:	ea43 0302 	orr.w	r3, r3, r2
 80006b4:	fa21 f004 	lsr.w	r0, r1, r4
 80006b8:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 80006bc:	fa21 f204 	lsr.w	r2, r1, r4
 80006c0:	ea20 0002 	bic.w	r0, r0, r2
 80006c4:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 80006c8:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 80006cc:	bf08      	it	eq
 80006ce:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 80006d2:	bd70      	pop	{r4, r5, r6, pc}
 80006d4:	f094 0f00 	teq	r4, #0
 80006d8:	d10f      	bne.n	80006fa <__aeabi_dmul+0x1c2>
 80006da:	f001 4600 	and.w	r6, r1, #2147483648	; 0x80000000
 80006de:	0040      	lsls	r0, r0, #1
 80006e0:	eb41 0101 	adc.w	r1, r1, r1
 80006e4:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 80006e8:	bf08      	it	eq
 80006ea:	3c01      	subeq	r4, #1
 80006ec:	d0f7      	beq.n	80006de <__aeabi_dmul+0x1a6>
 80006ee:	ea41 0106 	orr.w	r1, r1, r6
 80006f2:	f095 0f00 	teq	r5, #0
 80006f6:	bf18      	it	ne
 80006f8:	4770      	bxne	lr
 80006fa:	f003 4600 	and.w	r6, r3, #2147483648	; 0x80000000
 80006fe:	0052      	lsls	r2, r2, #1
 8000700:	eb43 0303 	adc.w	r3, r3, r3
 8000704:	f413 1f80 	tst.w	r3, #1048576	; 0x100000
 8000708:	bf08      	it	eq
 800070a:	3d01      	subeq	r5, #1
 800070c:	d0f7      	beq.n	80006fe <__aeabi_dmul+0x1c6>
 800070e:	ea43 0306 	orr.w	r3, r3, r6
 8000712:	4770      	bx	lr
 8000714:	ea94 0f0c 	teq	r4, ip
 8000718:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 800071c:	bf18      	it	ne
 800071e:	ea95 0f0c 	teqne	r5, ip
 8000722:	d00c      	beq.n	800073e <__aeabi_dmul+0x206>
 8000724:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000728:	bf18      	it	ne
 800072a:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800072e:	d1d1      	bne.n	80006d4 <__aeabi_dmul+0x19c>
 8000730:	ea81 0103 	eor.w	r1, r1, r3
 8000734:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000738:	f04f 0000 	mov.w	r0, #0
 800073c:	bd70      	pop	{r4, r5, r6, pc}
 800073e:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000742:	bf06      	itte	eq
 8000744:	4610      	moveq	r0, r2
 8000746:	4619      	moveq	r1, r3
 8000748:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800074c:	d019      	beq.n	8000782 <__aeabi_dmul+0x24a>
 800074e:	ea94 0f0c 	teq	r4, ip
 8000752:	d102      	bne.n	800075a <__aeabi_dmul+0x222>
 8000754:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 8000758:	d113      	bne.n	8000782 <__aeabi_dmul+0x24a>
 800075a:	ea95 0f0c 	teq	r5, ip
 800075e:	d105      	bne.n	800076c <__aeabi_dmul+0x234>
 8000760:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 8000764:	bf1c      	itt	ne
 8000766:	4610      	movne	r0, r2
 8000768:	4619      	movne	r1, r3
 800076a:	d10a      	bne.n	8000782 <__aeabi_dmul+0x24a>
 800076c:	ea81 0103 	eor.w	r1, r1, r3
 8000770:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000774:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000778:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 800077c:	f04f 0000 	mov.w	r0, #0
 8000780:	bd70      	pop	{r4, r5, r6, pc}
 8000782:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000786:	f441 0178 	orr.w	r1, r1, #16252928	; 0xf80000
 800078a:	bd70      	pop	{r4, r5, r6, pc}

0800078c <__aeabi_ddiv>:
 800078c:	b570      	push	{r4, r5, r6, lr}
 800078e:	f04f 0cff 	mov.w	ip, #255	; 0xff
 8000792:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 8000796:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 800079a:	bf1d      	ittte	ne
 800079c:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 80007a0:	ea94 0f0c 	teqne	r4, ip
 80007a4:	ea95 0f0c 	teqne	r5, ip
 80007a8:	f000 f8a7 	bleq	80008fa <__aeabi_ddiv+0x16e>
 80007ac:	eba4 0405 	sub.w	r4, r4, r5
 80007b0:	ea81 0e03 	eor.w	lr, r1, r3
 80007b4:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 80007b8:	ea4f 3101 	mov.w	r1, r1, lsl #12
 80007bc:	f000 8088 	beq.w	80008d0 <__aeabi_ddiv+0x144>
 80007c0:	ea4f 3303 	mov.w	r3, r3, lsl #12
 80007c4:	f04f 5580 	mov.w	r5, #268435456	; 0x10000000
 80007c8:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 80007cc:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 80007d0:	ea4f 2202 	mov.w	r2, r2, lsl #8
 80007d4:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 80007d8:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 80007dc:	ea4f 2600 	mov.w	r6, r0, lsl #8
 80007e0:	f00e 4100 	and.w	r1, lr, #2147483648	; 0x80000000
 80007e4:	429d      	cmp	r5, r3
 80007e6:	bf08      	it	eq
 80007e8:	4296      	cmpeq	r6, r2
 80007ea:	f144 04fd 	adc.w	r4, r4, #253	; 0xfd
 80007ee:	f504 7440 	add.w	r4, r4, #768	; 0x300
 80007f2:	d202      	bcs.n	80007fa <__aeabi_ddiv+0x6e>
 80007f4:	085b      	lsrs	r3, r3, #1
 80007f6:	ea4f 0232 	mov.w	r2, r2, rrx
 80007fa:	1ab6      	subs	r6, r6, r2
 80007fc:	eb65 0503 	sbc.w	r5, r5, r3
 8000800:	085b      	lsrs	r3, r3, #1
 8000802:	ea4f 0232 	mov.w	r2, r2, rrx
 8000806:	f44f 1080 	mov.w	r0, #1048576	; 0x100000
 800080a:	f44f 2c00 	mov.w	ip, #524288	; 0x80000
 800080e:	ebb6 0e02 	subs.w	lr, r6, r2
 8000812:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000816:	bf22      	ittt	cs
 8000818:	1ab6      	subcs	r6, r6, r2
 800081a:	4675      	movcs	r5, lr
 800081c:	ea40 000c 	orrcs.w	r0, r0, ip
 8000820:	085b      	lsrs	r3, r3, #1
 8000822:	ea4f 0232 	mov.w	r2, r2, rrx
 8000826:	ebb6 0e02 	subs.w	lr, r6, r2
 800082a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800082e:	bf22      	ittt	cs
 8000830:	1ab6      	subcs	r6, r6, r2
 8000832:	4675      	movcs	r5, lr
 8000834:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 8000838:	085b      	lsrs	r3, r3, #1
 800083a:	ea4f 0232 	mov.w	r2, r2, rrx
 800083e:	ebb6 0e02 	subs.w	lr, r6, r2
 8000842:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000846:	bf22      	ittt	cs
 8000848:	1ab6      	subcs	r6, r6, r2
 800084a:	4675      	movcs	r5, lr
 800084c:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 8000850:	085b      	lsrs	r3, r3, #1
 8000852:	ea4f 0232 	mov.w	r2, r2, rrx
 8000856:	ebb6 0e02 	subs.w	lr, r6, r2
 800085a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800085e:	bf22      	ittt	cs
 8000860:	1ab6      	subcs	r6, r6, r2
 8000862:	4675      	movcs	r5, lr
 8000864:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 8000868:	ea55 0e06 	orrs.w	lr, r5, r6
 800086c:	d018      	beq.n	80008a0 <__aeabi_ddiv+0x114>
 800086e:	ea4f 1505 	mov.w	r5, r5, lsl #4
 8000872:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 8000876:	ea4f 1606 	mov.w	r6, r6, lsl #4
 800087a:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 800087e:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 8000882:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 8000886:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 800088a:	d1c0      	bne.n	800080e <__aeabi_ddiv+0x82>
 800088c:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000890:	d10b      	bne.n	80008aa <__aeabi_ddiv+0x11e>
 8000892:	ea41 0100 	orr.w	r1, r1, r0
 8000896:	f04f 0000 	mov.w	r0, #0
 800089a:	f04f 4c00 	mov.w	ip, #2147483648	; 0x80000000
 800089e:	e7b6      	b.n	800080e <__aeabi_ddiv+0x82>
 80008a0:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 80008a4:	bf04      	itt	eq
 80008a6:	4301      	orreq	r1, r0
 80008a8:	2000      	moveq	r0, #0
 80008aa:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 80008ae:	bf88      	it	hi
 80008b0:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 80008b4:	f63f aeaf 	bhi.w	8000616 <__aeabi_dmul+0xde>
 80008b8:	ebb5 0c03 	subs.w	ip, r5, r3
 80008bc:	bf04      	itt	eq
 80008be:	ebb6 0c02 	subseq.w	ip, r6, r2
 80008c2:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80008c6:	f150 0000 	adcs.w	r0, r0, #0
 80008ca:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80008ce:	bd70      	pop	{r4, r5, r6, pc}
 80008d0:	f00e 4e00 	and.w	lr, lr, #2147483648	; 0x80000000
 80008d4:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 80008d8:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 80008dc:	bfc2      	ittt	gt
 80008de:	ebd4 050c 	rsbsgt	r5, r4, ip
 80008e2:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80008e6:	bd70      	popgt	{r4, r5, r6, pc}
 80008e8:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80008ec:	f04f 0e00 	mov.w	lr, #0
 80008f0:	3c01      	subs	r4, #1
 80008f2:	e690      	b.n	8000616 <__aeabi_dmul+0xde>
 80008f4:	ea45 0e06 	orr.w	lr, r5, r6
 80008f8:	e68d      	b.n	8000616 <__aeabi_dmul+0xde>
 80008fa:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80008fe:	ea94 0f0c 	teq	r4, ip
 8000902:	bf08      	it	eq
 8000904:	ea95 0f0c 	teqeq	r5, ip
 8000908:	f43f af3b 	beq.w	8000782 <__aeabi_dmul+0x24a>
 800090c:	ea94 0f0c 	teq	r4, ip
 8000910:	d10a      	bne.n	8000928 <__aeabi_ddiv+0x19c>
 8000912:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 8000916:	f47f af34 	bne.w	8000782 <__aeabi_dmul+0x24a>
 800091a:	ea95 0f0c 	teq	r5, ip
 800091e:	f47f af25 	bne.w	800076c <__aeabi_dmul+0x234>
 8000922:	4610      	mov	r0, r2
 8000924:	4619      	mov	r1, r3
 8000926:	e72c      	b.n	8000782 <__aeabi_dmul+0x24a>
 8000928:	ea95 0f0c 	teq	r5, ip
 800092c:	d106      	bne.n	800093c <__aeabi_ddiv+0x1b0>
 800092e:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000932:	f43f aefd 	beq.w	8000730 <__aeabi_dmul+0x1f8>
 8000936:	4610      	mov	r0, r2
 8000938:	4619      	mov	r1, r3
 800093a:	e722      	b.n	8000782 <__aeabi_dmul+0x24a>
 800093c:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000940:	bf18      	it	ne
 8000942:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8000946:	f47f aec5 	bne.w	80006d4 <__aeabi_dmul+0x19c>
 800094a:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 800094e:	f47f af0d 	bne.w	800076c <__aeabi_dmul+0x234>
 8000952:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 8000956:	f47f aeeb 	bne.w	8000730 <__aeabi_dmul+0x1f8>
 800095a:	e712      	b.n	8000782 <__aeabi_dmul+0x24a>

0800095c <__gedf2>:
 800095c:	f04f 3cff 	mov.w	ip, #4294967295
 8000960:	e006      	b.n	8000970 <__cmpdf2+0x4>
 8000962:	bf00      	nop

08000964 <__ledf2>:
 8000964:	f04f 0c01 	mov.w	ip, #1
 8000968:	e002      	b.n	8000970 <__cmpdf2+0x4>
 800096a:	bf00      	nop

0800096c <__cmpdf2>:
 800096c:	f04f 0c01 	mov.w	ip, #1
 8000970:	f84d cd04 	str.w	ip, [sp, #-4]!
 8000974:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000978:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 800097c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000980:	bf18      	it	ne
 8000982:	ea7f 5c6c 	mvnsne.w	ip, ip, asr #21
 8000986:	d01b      	beq.n	80009c0 <__cmpdf2+0x54>
 8000988:	b001      	add	sp, #4
 800098a:	ea50 0c41 	orrs.w	ip, r0, r1, lsl #1
 800098e:	bf0c      	ite	eq
 8000990:	ea52 0c43 	orrseq.w	ip, r2, r3, lsl #1
 8000994:	ea91 0f03 	teqne	r1, r3
 8000998:	bf02      	ittt	eq
 800099a:	ea90 0f02 	teqeq	r0, r2
 800099e:	2000      	moveq	r0, #0
 80009a0:	4770      	bxeq	lr
 80009a2:	f110 0f00 	cmn.w	r0, #0
 80009a6:	ea91 0f03 	teq	r1, r3
 80009aa:	bf58      	it	pl
 80009ac:	4299      	cmppl	r1, r3
 80009ae:	bf08      	it	eq
 80009b0:	4290      	cmpeq	r0, r2
 80009b2:	bf2c      	ite	cs
 80009b4:	17d8      	asrcs	r0, r3, #31
 80009b6:	ea6f 70e3 	mvncc.w	r0, r3, asr #31
 80009ba:	f040 0001 	orr.w	r0, r0, #1
 80009be:	4770      	bx	lr
 80009c0:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 80009c4:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 80009c8:	d102      	bne.n	80009d0 <__cmpdf2+0x64>
 80009ca:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 80009ce:	d107      	bne.n	80009e0 <__cmpdf2+0x74>
 80009d0:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 80009d4:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 80009d8:	d1d6      	bne.n	8000988 <__cmpdf2+0x1c>
 80009da:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 80009de:	d0d3      	beq.n	8000988 <__cmpdf2+0x1c>
 80009e0:	f85d 0b04 	ldr.w	r0, [sp], #4
 80009e4:	4770      	bx	lr
 80009e6:	bf00      	nop

080009e8 <__aeabi_cdrcmple>:
 80009e8:	4684      	mov	ip, r0
 80009ea:	4610      	mov	r0, r2
 80009ec:	4662      	mov	r2, ip
 80009ee:	468c      	mov	ip, r1
 80009f0:	4619      	mov	r1, r3
 80009f2:	4663      	mov	r3, ip
 80009f4:	e000      	b.n	80009f8 <__aeabi_cdcmpeq>
 80009f6:	bf00      	nop

080009f8 <__aeabi_cdcmpeq>:
 80009f8:	b501      	push	{r0, lr}
 80009fa:	f7ff ffb7 	bl	800096c <__cmpdf2>
 80009fe:	2800      	cmp	r0, #0
 8000a00:	bf48      	it	mi
 8000a02:	f110 0f00 	cmnmi.w	r0, #0
 8000a06:	bd01      	pop	{r0, pc}

08000a08 <__aeabi_dcmpeq>:
 8000a08:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000a0c:	f7ff fff4 	bl	80009f8 <__aeabi_cdcmpeq>
 8000a10:	bf0c      	ite	eq
 8000a12:	2001      	moveq	r0, #1
 8000a14:	2000      	movne	r0, #0
 8000a16:	f85d fb08 	ldr.w	pc, [sp], #8
 8000a1a:	bf00      	nop

08000a1c <__aeabi_dcmplt>:
 8000a1c:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000a20:	f7ff ffea 	bl	80009f8 <__aeabi_cdcmpeq>
 8000a24:	bf34      	ite	cc
 8000a26:	2001      	movcc	r0, #1
 8000a28:	2000      	movcs	r0, #0
 8000a2a:	f85d fb08 	ldr.w	pc, [sp], #8
 8000a2e:	bf00      	nop

08000a30 <__aeabi_dcmple>:
 8000a30:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000a34:	f7ff ffe0 	bl	80009f8 <__aeabi_cdcmpeq>
 8000a38:	bf94      	ite	ls
 8000a3a:	2001      	movls	r0, #1
 8000a3c:	2000      	movhi	r0, #0
 8000a3e:	f85d fb08 	ldr.w	pc, [sp], #8
 8000a42:	bf00      	nop

08000a44 <__aeabi_dcmpge>:
 8000a44:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000a48:	f7ff ffce 	bl	80009e8 <__aeabi_cdrcmple>
 8000a4c:	bf94      	ite	ls
 8000a4e:	2001      	movls	r0, #1
 8000a50:	2000      	movhi	r0, #0
 8000a52:	f85d fb08 	ldr.w	pc, [sp], #8
 8000a56:	bf00      	nop

08000a58 <__aeabi_dcmpgt>:
 8000a58:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000a5c:	f7ff ffc4 	bl	80009e8 <__aeabi_cdrcmple>
 8000a60:	bf34      	ite	cc
 8000a62:	2001      	movcc	r0, #1
 8000a64:	2000      	movcs	r0, #0
 8000a66:	f85d fb08 	ldr.w	pc, [sp], #8
 8000a6a:	bf00      	nop

08000a6c <__aeabi_dcmpun>:
 8000a6c:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000a70:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a74:	d102      	bne.n	8000a7c <__aeabi_dcmpun+0x10>
 8000a76:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000a7a:	d10a      	bne.n	8000a92 <__aeabi_dcmpun+0x26>
 8000a7c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000a80:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a84:	d102      	bne.n	8000a8c <__aeabi_dcmpun+0x20>
 8000a86:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000a8a:	d102      	bne.n	8000a92 <__aeabi_dcmpun+0x26>
 8000a8c:	f04f 0000 	mov.w	r0, #0
 8000a90:	4770      	bx	lr
 8000a92:	f04f 0001 	mov.w	r0, #1
 8000a96:	4770      	bx	lr

08000a98 <__aeabi_d2iz>:
 8000a98:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000a9c:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
 8000aa0:	d215      	bcs.n	8000ace <__aeabi_d2iz+0x36>
 8000aa2:	d511      	bpl.n	8000ac8 <__aeabi_d2iz+0x30>
 8000aa4:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
 8000aa8:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000aac:	d912      	bls.n	8000ad4 <__aeabi_d2iz+0x3c>
 8000aae:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000ab2:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8000ab6:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000aba:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8000abe:	fa23 f002 	lsr.w	r0, r3, r2
 8000ac2:	bf18      	it	ne
 8000ac4:	4240      	negne	r0, r0
 8000ac6:	4770      	bx	lr
 8000ac8:	f04f 0000 	mov.w	r0, #0
 8000acc:	4770      	bx	lr
 8000ace:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000ad2:	d105      	bne.n	8000ae0 <__aeabi_d2iz+0x48>
 8000ad4:	f011 4000 	ands.w	r0, r1, #2147483648	; 0x80000000
 8000ad8:	bf08      	it	eq
 8000ada:	f06f 4000 	mvneq.w	r0, #2147483648	; 0x80000000
 8000ade:	4770      	bx	lr
 8000ae0:	f04f 0000 	mov.w	r0, #0
 8000ae4:	4770      	bx	lr
 8000ae6:	bf00      	nop

08000ae8 <__aeabi_d2f>:
 8000ae8:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000aec:	f1b2 43e0 	subs.w	r3, r2, #1879048192	; 0x70000000
 8000af0:	bf24      	itt	cs
 8000af2:	f5b3 1c00 	subscs.w	ip, r3, #2097152	; 0x200000
 8000af6:	f1dc 5cfe 	rsbscs	ip, ip, #532676608	; 0x1fc00000
 8000afa:	d90d      	bls.n	8000b18 <__aeabi_d2f+0x30>
 8000afc:	f001 4c00 	and.w	ip, r1, #2147483648	; 0x80000000
 8000b00:	ea4f 02c0 	mov.w	r2, r0, lsl #3
 8000b04:	ea4c 7050 	orr.w	r0, ip, r0, lsr #29
 8000b08:	f1b2 4f00 	cmp.w	r2, #2147483648	; 0x80000000
 8000b0c:	eb40 0083 	adc.w	r0, r0, r3, lsl #2
 8000b10:	bf08      	it	eq
 8000b12:	f020 0001 	biceq.w	r0, r0, #1
 8000b16:	4770      	bx	lr
 8000b18:	f011 4f80 	tst.w	r1, #1073741824	; 0x40000000
 8000b1c:	d121      	bne.n	8000b62 <__aeabi_d2f+0x7a>
 8000b1e:	f113 7238 	adds.w	r2, r3, #48234496	; 0x2e00000
 8000b22:	bfbc      	itt	lt
 8000b24:	f001 4000 	andlt.w	r0, r1, #2147483648	; 0x80000000
 8000b28:	4770      	bxlt	lr
 8000b2a:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000b2e:	ea4f 5252 	mov.w	r2, r2, lsr #21
 8000b32:	f1c2 0218 	rsb	r2, r2, #24
 8000b36:	f1c2 0c20 	rsb	ip, r2, #32
 8000b3a:	fa10 f30c 	lsls.w	r3, r0, ip
 8000b3e:	fa20 f002 	lsr.w	r0, r0, r2
 8000b42:	bf18      	it	ne
 8000b44:	f040 0001 	orrne.w	r0, r0, #1
 8000b48:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000b4c:	ea4f 23d3 	mov.w	r3, r3, lsr #11
 8000b50:	fa03 fc0c 	lsl.w	ip, r3, ip
 8000b54:	ea40 000c 	orr.w	r0, r0, ip
 8000b58:	fa23 f302 	lsr.w	r3, r3, r2
 8000b5c:	ea4f 0343 	mov.w	r3, r3, lsl #1
 8000b60:	e7cc      	b.n	8000afc <__aeabi_d2f+0x14>
 8000b62:	ea7f 5362 	mvns.w	r3, r2, asr #21
 8000b66:	d107      	bne.n	8000b78 <__aeabi_d2f+0x90>
 8000b68:	ea50 3301 	orrs.w	r3, r0, r1, lsl #12
 8000b6c:	bf1e      	ittt	ne
 8000b6e:	f04f 40fe 	movne.w	r0, #2130706432	; 0x7f000000
 8000b72:	f440 0040 	orrne.w	r0, r0, #12582912	; 0xc00000
 8000b76:	4770      	bxne	lr
 8000b78:	f001 4000 	and.w	r0, r1, #2147483648	; 0x80000000
 8000b7c:	f040 40fe 	orr.w	r0, r0, #2130706432	; 0x7f000000
 8000b80:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8000b84:	4770      	bx	lr
 8000b86:	bf00      	nop

08000b88 <DAC_SetChannel1Data>:
  *            @arg DAC_Align_12b_R: 12bit right data alignment selected
  * @param  Data: Data to be loaded in the selected data holding register.
  * @retval None
  */
void DAC_SetChannel1Data(uint32_t DAC_Align, uint16_t Data)
{  
 8000b88:	b480      	push	{r7}
 8000b8a:	b085      	sub	sp, #20
 8000b8c:	af00      	add	r7, sp, #0
 8000b8e:	6078      	str	r0, [r7, #4]
 8000b90:	460b      	mov	r3, r1
 8000b92:	807b      	strh	r3, [r7, #2]
  __IO uint32_t tmp = 0;
 8000b94:	2300      	movs	r3, #0
 8000b96:	60fb      	str	r3, [r7, #12]
  
  /* Check the parameters */
  assert_param(IS_DAC_ALIGN(DAC_Align));
  assert_param(IS_DAC_DATA(Data));
  
  tmp = (uint32_t)DAC_BASE; 
 8000b98:	4b08      	ldr	r3, [pc, #32]	; (8000bbc <DAC_SetChannel1Data+0x34>)
 8000b9a:	60fb      	str	r3, [r7, #12]
  tmp += DHR12R1_OFFSET + DAC_Align;
 8000b9c:	68fa      	ldr	r2, [r7, #12]
 8000b9e:	687b      	ldr	r3, [r7, #4]
 8000ba0:	4413      	add	r3, r2
 8000ba2:	3308      	adds	r3, #8
 8000ba4:	60fb      	str	r3, [r7, #12]

  /* Set the DAC channel1 selected data holding register */
  *(__IO uint32_t *) tmp = Data;
 8000ba6:	68fb      	ldr	r3, [r7, #12]
 8000ba8:	461a      	mov	r2, r3
 8000baa:	887b      	ldrh	r3, [r7, #2]
 8000bac:	6013      	str	r3, [r2, #0]
}
 8000bae:	bf00      	nop
 8000bb0:	3714      	adds	r7, #20
 8000bb2:	46bd      	mov	sp, r7
 8000bb4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000bb8:	4770      	bx	lr
 8000bba:	bf00      	nop
 8000bbc:	40007400 	.word	0x40007400

08000bc0 <DMA_Init>:
  * @param  DMA_InitStruct: pointer to a DMA_InitTypeDef structure that contains
  *         the configuration information for the specified DMA Stream.  
  * @retval None
  */
void DMA_Init(DMA_Stream_TypeDef* DMAy_Streamx, DMA_InitTypeDef* DMA_InitStruct)
{
 8000bc0:	b480      	push	{r7}
 8000bc2:	b085      	sub	sp, #20
 8000bc4:	af00      	add	r7, sp, #0
 8000bc6:	6078      	str	r0, [r7, #4]
 8000bc8:	6039      	str	r1, [r7, #0]
  uint32_t tmpreg = 0;
 8000bca:	2300      	movs	r3, #0
 8000bcc:	60fb      	str	r3, [r7, #12]
  assert_param(IS_DMA_MEMORY_BURST(DMA_InitStruct->DMA_MemoryBurst));
  assert_param(IS_DMA_PERIPHERAL_BURST(DMA_InitStruct->DMA_PeripheralBurst));

  /*------------------------- DMAy Streamx CR Configuration ------------------*/
  /* Get the DMAy_Streamx CR value */
  tmpreg = DMAy_Streamx->CR;
 8000bce:	687b      	ldr	r3, [r7, #4]
 8000bd0:	681b      	ldr	r3, [r3, #0]
 8000bd2:	60fb      	str	r3, [r7, #12]

  /* Clear CHSEL, MBURST, PBURST, PL, MSIZE, PSIZE, MINC, PINC, CIRC and DIR bits */
  tmpreg &= ((uint32_t)~(DMA_SxCR_CHSEL | DMA_SxCR_MBURST | DMA_SxCR_PBURST | \
 8000bd4:	68fa      	ldr	r2, [r7, #12]
 8000bd6:	4b25      	ldr	r3, [pc, #148]	; (8000c6c <DMA_Init+0xac>)
 8000bd8:	4013      	ands	r3, r2
 8000bda:	60fb      	str	r3, [r7, #12]
  /* Set MSIZE bits according to DMA_MemoryDataSize value */
  /* Set CIRC bit according to DMA_Mode value */
  /* Set PL bits according to DMA_Priority value */
  /* Set MBURST bits according to DMA_MemoryBurst value */
  /* Set PBURST bits according to DMA_PeripheralBurst value */
  tmpreg |= DMA_InitStruct->DMA_Channel | DMA_InitStruct->DMA_DIR |
 8000bdc:	683b      	ldr	r3, [r7, #0]
 8000bde:	681a      	ldr	r2, [r3, #0]
 8000be0:	683b      	ldr	r3, [r7, #0]
 8000be2:	68db      	ldr	r3, [r3, #12]
 8000be4:	431a      	orrs	r2, r3
            DMA_InitStruct->DMA_PeripheralInc | DMA_InitStruct->DMA_MemoryInc |
 8000be6:	683b      	ldr	r3, [r7, #0]
 8000be8:	695b      	ldr	r3, [r3, #20]
  tmpreg |= DMA_InitStruct->DMA_Channel | DMA_InitStruct->DMA_DIR |
 8000bea:	431a      	orrs	r2, r3
            DMA_InitStruct->DMA_PeripheralInc | DMA_InitStruct->DMA_MemoryInc |
 8000bec:	683b      	ldr	r3, [r7, #0]
 8000bee:	699b      	ldr	r3, [r3, #24]
 8000bf0:	431a      	orrs	r2, r3
            DMA_InitStruct->DMA_PeripheralDataSize | DMA_InitStruct->DMA_MemoryDataSize |
 8000bf2:	683b      	ldr	r3, [r7, #0]
 8000bf4:	69db      	ldr	r3, [r3, #28]
            DMA_InitStruct->DMA_PeripheralInc | DMA_InitStruct->DMA_MemoryInc |
 8000bf6:	431a      	orrs	r2, r3
            DMA_InitStruct->DMA_PeripheralDataSize | DMA_InitStruct->DMA_MemoryDataSize |
 8000bf8:	683b      	ldr	r3, [r7, #0]
 8000bfa:	6a1b      	ldr	r3, [r3, #32]
 8000bfc:	431a      	orrs	r2, r3
            DMA_InitStruct->DMA_Mode | DMA_InitStruct->DMA_Priority |
 8000bfe:	683b      	ldr	r3, [r7, #0]
 8000c00:	6a5b      	ldr	r3, [r3, #36]	; 0x24
            DMA_InitStruct->DMA_PeripheralDataSize | DMA_InitStruct->DMA_MemoryDataSize |
 8000c02:	431a      	orrs	r2, r3
            DMA_InitStruct->DMA_Mode | DMA_InitStruct->DMA_Priority |
 8000c04:	683b      	ldr	r3, [r7, #0]
 8000c06:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8000c08:	431a      	orrs	r2, r3
            DMA_InitStruct->DMA_MemoryBurst | DMA_InitStruct->DMA_PeripheralBurst;
 8000c0a:	683b      	ldr	r3, [r7, #0]
 8000c0c:	6b5b      	ldr	r3, [r3, #52]	; 0x34
            DMA_InitStruct->DMA_Mode | DMA_InitStruct->DMA_Priority |
 8000c0e:	431a      	orrs	r2, r3
            DMA_InitStruct->DMA_MemoryBurst | DMA_InitStruct->DMA_PeripheralBurst;
 8000c10:	683b      	ldr	r3, [r7, #0]
 8000c12:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8000c14:	4313      	orrs	r3, r2
  tmpreg |= DMA_InitStruct->DMA_Channel | DMA_InitStruct->DMA_DIR |
 8000c16:	68fa      	ldr	r2, [r7, #12]
 8000c18:	4313      	orrs	r3, r2
 8000c1a:	60fb      	str	r3, [r7, #12]

  /* Write to DMAy Streamx CR register */
  DMAy_Streamx->CR = tmpreg;
 8000c1c:	687b      	ldr	r3, [r7, #4]
 8000c1e:	68fa      	ldr	r2, [r7, #12]
 8000c20:	601a      	str	r2, [r3, #0]

  /*------------------------- DMAy Streamx FCR Configuration -----------------*/
  /* Get the DMAy_Streamx FCR value */
  tmpreg = DMAy_Streamx->FCR;
 8000c22:	687b      	ldr	r3, [r7, #4]
 8000c24:	695b      	ldr	r3, [r3, #20]
 8000c26:	60fb      	str	r3, [r7, #12]

  /* Clear DMDIS and FTH bits */
  tmpreg &= (uint32_t)~(DMA_SxFCR_DMDIS | DMA_SxFCR_FTH);
 8000c28:	68fb      	ldr	r3, [r7, #12]
 8000c2a:	f023 0307 	bic.w	r3, r3, #7
 8000c2e:	60fb      	str	r3, [r7, #12]

  /* Configure DMAy Streamx FIFO: 
    Set DMDIS bits according to DMA_FIFOMode value 
    Set FTH bits according to DMA_FIFOThreshold value */
  tmpreg |= DMA_InitStruct->DMA_FIFOMode | DMA_InitStruct->DMA_FIFOThreshold;
 8000c30:	683b      	ldr	r3, [r7, #0]
 8000c32:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8000c34:	683b      	ldr	r3, [r7, #0]
 8000c36:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000c38:	4313      	orrs	r3, r2
 8000c3a:	68fa      	ldr	r2, [r7, #12]
 8000c3c:	4313      	orrs	r3, r2
 8000c3e:	60fb      	str	r3, [r7, #12]

  /* Write to DMAy Streamx CR */
  DMAy_Streamx->FCR = tmpreg;
 8000c40:	687b      	ldr	r3, [r7, #4]
 8000c42:	68fa      	ldr	r2, [r7, #12]
 8000c44:	615a      	str	r2, [r3, #20]

  /*------------------------- DMAy Streamx NDTR Configuration ----------------*/
  /* Write to DMAy Streamx NDTR register */
  DMAy_Streamx->NDTR = DMA_InitStruct->DMA_BufferSize;
 8000c46:	683b      	ldr	r3, [r7, #0]
 8000c48:	691a      	ldr	r2, [r3, #16]
 8000c4a:	687b      	ldr	r3, [r7, #4]
 8000c4c:	605a      	str	r2, [r3, #4]

  /*------------------------- DMAy Streamx PAR Configuration -----------------*/
  /* Write to DMAy Streamx PAR */
  DMAy_Streamx->PAR = DMA_InitStruct->DMA_PeripheralBaseAddr;
 8000c4e:	683b      	ldr	r3, [r7, #0]
 8000c50:	685a      	ldr	r2, [r3, #4]
 8000c52:	687b      	ldr	r3, [r7, #4]
 8000c54:	609a      	str	r2, [r3, #8]

  /*------------------------- DMAy Streamx M0AR Configuration ----------------*/
  /* Write to DMAy Streamx M0AR */
  DMAy_Streamx->M0AR = DMA_InitStruct->DMA_Memory0BaseAddr;
 8000c56:	683b      	ldr	r3, [r7, #0]
 8000c58:	689a      	ldr	r2, [r3, #8]
 8000c5a:	687b      	ldr	r3, [r7, #4]
 8000c5c:	60da      	str	r2, [r3, #12]
}
 8000c5e:	bf00      	nop
 8000c60:	3714      	adds	r7, #20
 8000c62:	46bd      	mov	sp, r7
 8000c64:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000c68:	4770      	bx	lr
 8000c6a:	bf00      	nop
 8000c6c:	f01c803f 	.word	0xf01c803f

08000c70 <DMA_Cmd>:
  *        this single data is finished.            
  *    
  * @retval None
  */
void DMA_Cmd(DMA_Stream_TypeDef* DMAy_Streamx, FunctionalState NewState)
{
 8000c70:	b480      	push	{r7}
 8000c72:	b083      	sub	sp, #12
 8000c74:	af00      	add	r7, sp, #0
 8000c76:	6078      	str	r0, [r7, #4]
 8000c78:	460b      	mov	r3, r1
 8000c7a:	70fb      	strb	r3, [r7, #3]
  /* Check the parameters */
  assert_param(IS_DMA_ALL_PERIPH(DMAy_Streamx));
  assert_param(IS_FUNCTIONAL_STATE(NewState));

  if (NewState != DISABLE)
 8000c7c:	78fb      	ldrb	r3, [r7, #3]
 8000c7e:	2b00      	cmp	r3, #0
 8000c80:	d006      	beq.n	8000c90 <DMA_Cmd+0x20>
  {
    /* Enable the selected DMAy Streamx by setting EN bit */
    DMAy_Streamx->CR |= (uint32_t)DMA_SxCR_EN;
 8000c82:	687b      	ldr	r3, [r7, #4]
 8000c84:	681b      	ldr	r3, [r3, #0]
 8000c86:	f043 0201 	orr.w	r2, r3, #1
 8000c8a:	687b      	ldr	r3, [r7, #4]
 8000c8c:	601a      	str	r2, [r3, #0]
  else
  {
    /* Disable the selected DMAy Streamx by clearing EN bit */
    DMAy_Streamx->CR &= ~(uint32_t)DMA_SxCR_EN;
  }
}
 8000c8e:	e005      	b.n	8000c9c <DMA_Cmd+0x2c>
    DMAy_Streamx->CR &= ~(uint32_t)DMA_SxCR_EN;
 8000c90:	687b      	ldr	r3, [r7, #4]
 8000c92:	681b      	ldr	r3, [r3, #0]
 8000c94:	f023 0201 	bic.w	r2, r3, #1
 8000c98:	687b      	ldr	r3, [r7, #4]
 8000c9a:	601a      	str	r2, [r3, #0]
}
 8000c9c:	bf00      	nop
 8000c9e:	370c      	adds	r7, #12
 8000ca0:	46bd      	mov	sp, r7
 8000ca2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000ca6:	4770      	bx	lr

08000ca8 <DMA_GetCmdStatus>:
  *          of this single data is finished.  
  *      
  * @retval Current state of the DMAy Streamx (ENABLE or DISABLE).
  */
FunctionalState DMA_GetCmdStatus(DMA_Stream_TypeDef* DMAy_Streamx)
{
 8000ca8:	b480      	push	{r7}
 8000caa:	b085      	sub	sp, #20
 8000cac:	af00      	add	r7, sp, #0
 8000cae:	6078      	str	r0, [r7, #4]
  FunctionalState state = DISABLE;
 8000cb0:	2300      	movs	r3, #0
 8000cb2:	73fb      	strb	r3, [r7, #15]

  /* Check the parameters */
  assert_param(IS_DMA_ALL_PERIPH(DMAy_Streamx));

  if ((DMAy_Streamx->CR & (uint32_t)DMA_SxCR_EN) != 0)
 8000cb4:	687b      	ldr	r3, [r7, #4]
 8000cb6:	681b      	ldr	r3, [r3, #0]
 8000cb8:	f003 0301 	and.w	r3, r3, #1
 8000cbc:	2b00      	cmp	r3, #0
 8000cbe:	d002      	beq.n	8000cc6 <DMA_GetCmdStatus+0x1e>
  {
    /* The selected DMAy Streamx EN bit is set (DMA is still transferring) */
    state = ENABLE;
 8000cc0:	2301      	movs	r3, #1
 8000cc2:	73fb      	strb	r3, [r7, #15]
 8000cc4:	e001      	b.n	8000cca <DMA_GetCmdStatus+0x22>
  }
  else
  {
    /* The selected DMAy Streamx EN bit is cleared (DMA is disabled and 
        all transfers are complete) */
    state = DISABLE;
 8000cc6:	2300      	movs	r3, #0
 8000cc8:	73fb      	strb	r3, [r7, #15]
  }
  return state;
 8000cca:	7bfb      	ldrb	r3, [r7, #15]
}
 8000ccc:	4618      	mov	r0, r3
 8000cce:	3714      	adds	r7, #20
 8000cd0:	46bd      	mov	sp, r7
 8000cd2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000cd6:	4770      	bx	lr

08000cd8 <DMA_GetFlagStatus>:
  *            @arg DMA_FLAG_FEIFx:  Streamx FIFO error flag
  *         Where x can be 0 to 7 to select the DMA Stream.
  * @retval The new state of DMA_FLAG (SET or RESET).
  */
FlagStatus DMA_GetFlagStatus(DMA_Stream_TypeDef* DMAy_Streamx, uint32_t DMA_FLAG)
{
 8000cd8:	b480      	push	{r7}
 8000cda:	b087      	sub	sp, #28
 8000cdc:	af00      	add	r7, sp, #0
 8000cde:	6078      	str	r0, [r7, #4]
 8000ce0:	6039      	str	r1, [r7, #0]
  FlagStatus bitstatus = RESET;
 8000ce2:	2300      	movs	r3, #0
 8000ce4:	75fb      	strb	r3, [r7, #23]
  DMA_TypeDef* DMAy;
  uint32_t tmpreg = 0;
 8000ce6:	2300      	movs	r3, #0
 8000ce8:	60fb      	str	r3, [r7, #12]
  /* Check the parameters */
  assert_param(IS_DMA_ALL_PERIPH(DMAy_Streamx));
  assert_param(IS_DMA_GET_FLAG(DMA_FLAG));

  /* Determine the DMA to which belongs the stream */
  if (DMAy_Streamx < DMA2_Stream0)
 8000cea:	687b      	ldr	r3, [r7, #4]
 8000cec:	4a15      	ldr	r2, [pc, #84]	; (8000d44 <DMA_GetFlagStatus+0x6c>)
 8000cee:	4293      	cmp	r3, r2
 8000cf0:	d802      	bhi.n	8000cf8 <DMA_GetFlagStatus+0x20>
  {
    /* DMAy_Streamx belongs to DMA1 */
    DMAy = DMA1; 
 8000cf2:	4b15      	ldr	r3, [pc, #84]	; (8000d48 <DMA_GetFlagStatus+0x70>)
 8000cf4:	613b      	str	r3, [r7, #16]
 8000cf6:	e001      	b.n	8000cfc <DMA_GetFlagStatus+0x24>
  } 
  else 
  {
    /* DMAy_Streamx belongs to DMA2 */
    DMAy = DMA2; 
 8000cf8:	4b14      	ldr	r3, [pc, #80]	; (8000d4c <DMA_GetFlagStatus+0x74>)
 8000cfa:	613b      	str	r3, [r7, #16]
  }

  /* Check if the flag is in HISR or LISR */
  if ((DMA_FLAG & HIGH_ISR_MASK) != (uint32_t)RESET)
 8000cfc:	683b      	ldr	r3, [r7, #0]
 8000cfe:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8000d02:	2b00      	cmp	r3, #0
 8000d04:	d003      	beq.n	8000d0e <DMA_GetFlagStatus+0x36>
  {
    /* Get DMAy HISR register value */
    tmpreg = DMAy->HISR;
 8000d06:	693b      	ldr	r3, [r7, #16]
 8000d08:	685b      	ldr	r3, [r3, #4]
 8000d0a:	60fb      	str	r3, [r7, #12]
 8000d0c:	e002      	b.n	8000d14 <DMA_GetFlagStatus+0x3c>
  }
  else
  {
    /* Get DMAy LISR register value */
    tmpreg = DMAy->LISR;
 8000d0e:	693b      	ldr	r3, [r7, #16]
 8000d10:	681b      	ldr	r3, [r3, #0]
 8000d12:	60fb      	str	r3, [r7, #12]
  }   
 
  /* Mask the reserved bits */
  tmpreg &= (uint32_t)RESERVED_MASK;
 8000d14:	68fb      	ldr	r3, [r7, #12]
 8000d16:	f023 23f0 	bic.w	r3, r3, #4026593280	; 0xf000f000
 8000d1a:	f023 1382 	bic.w	r3, r3, #8519810	; 0x820082
 8000d1e:	60fb      	str	r3, [r7, #12]

  /* Check the status of the specified DMA flag */
  if ((tmpreg & DMA_FLAG) != (uint32_t)RESET)
 8000d20:	68fa      	ldr	r2, [r7, #12]
 8000d22:	683b      	ldr	r3, [r7, #0]
 8000d24:	4013      	ands	r3, r2
 8000d26:	2b00      	cmp	r3, #0
 8000d28:	d002      	beq.n	8000d30 <DMA_GetFlagStatus+0x58>
  {
    /* DMA_FLAG is set */
    bitstatus = SET;
 8000d2a:	2301      	movs	r3, #1
 8000d2c:	75fb      	strb	r3, [r7, #23]
 8000d2e:	e001      	b.n	8000d34 <DMA_GetFlagStatus+0x5c>
  }
  else
  {
    /* DMA_FLAG is reset */
    bitstatus = RESET;
 8000d30:	2300      	movs	r3, #0
 8000d32:	75fb      	strb	r3, [r7, #23]
  }

  /* Return the DMA_FLAG status */
  return  bitstatus;
 8000d34:	7dfb      	ldrb	r3, [r7, #23]
}
 8000d36:	4618      	mov	r0, r3
 8000d38:	371c      	adds	r7, #28
 8000d3a:	46bd      	mov	sp, r7
 8000d3c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000d40:	4770      	bx	lr
 8000d42:	bf00      	nop
 8000d44:	4002640f 	.word	0x4002640f
 8000d48:	40026000 	.word	0x40026000
 8000d4c:	40026400 	.word	0x40026400

08000d50 <DMA_ClearFlag>:
  *            @arg DMA_FLAG_FEIFx:  Streamx FIFO error flag
  *         Where x can be 0 to 7 to select the DMA Stream.   
  * @retval None
  */
void DMA_ClearFlag(DMA_Stream_TypeDef* DMAy_Streamx, uint32_t DMA_FLAG)
{
 8000d50:	b480      	push	{r7}
 8000d52:	b085      	sub	sp, #20
 8000d54:	af00      	add	r7, sp, #0
 8000d56:	6078      	str	r0, [r7, #4]
 8000d58:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_DMA_ALL_PERIPH(DMAy_Streamx));
  assert_param(IS_DMA_CLEAR_FLAG(DMA_FLAG));

  /* Determine the DMA to which belongs the stream */
  if (DMAy_Streamx < DMA2_Stream0)
 8000d5a:	687b      	ldr	r3, [r7, #4]
 8000d5c:	4a10      	ldr	r2, [pc, #64]	; (8000da0 <DMA_ClearFlag+0x50>)
 8000d5e:	4293      	cmp	r3, r2
 8000d60:	d802      	bhi.n	8000d68 <DMA_ClearFlag+0x18>
  {
    /* DMAy_Streamx belongs to DMA1 */
    DMAy = DMA1; 
 8000d62:	4b10      	ldr	r3, [pc, #64]	; (8000da4 <DMA_ClearFlag+0x54>)
 8000d64:	60fb      	str	r3, [r7, #12]
 8000d66:	e001      	b.n	8000d6c <DMA_ClearFlag+0x1c>
  } 
  else 
  {
    /* DMAy_Streamx belongs to DMA2 */
    DMAy = DMA2; 
 8000d68:	4b0f      	ldr	r3, [pc, #60]	; (8000da8 <DMA_ClearFlag+0x58>)
 8000d6a:	60fb      	str	r3, [r7, #12]
  }

  /* Check if LIFCR or HIFCR register is targeted */
  if ((DMA_FLAG & HIGH_ISR_MASK) != (uint32_t)RESET)
 8000d6c:	683b      	ldr	r3, [r7, #0]
 8000d6e:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8000d72:	2b00      	cmp	r3, #0
 8000d74:	d007      	beq.n	8000d86 <DMA_ClearFlag+0x36>
  {
    /* Set DMAy HIFCR register clear flag bits */
    DMAy->HIFCR = (uint32_t)(DMA_FLAG & RESERVED_MASK);
 8000d76:	683b      	ldr	r3, [r7, #0]
 8000d78:	f023 23f0 	bic.w	r3, r3, #4026593280	; 0xf000f000
 8000d7c:	f023 1382 	bic.w	r3, r3, #8519810	; 0x820082
 8000d80:	68fa      	ldr	r2, [r7, #12]
 8000d82:	60d3      	str	r3, [r2, #12]
  else 
  {
    /* Set DMAy LIFCR register clear flag bits */
    DMAy->LIFCR = (uint32_t)(DMA_FLAG & RESERVED_MASK);
  }    
}
 8000d84:	e006      	b.n	8000d94 <DMA_ClearFlag+0x44>
    DMAy->LIFCR = (uint32_t)(DMA_FLAG & RESERVED_MASK);
 8000d86:	683b      	ldr	r3, [r7, #0]
 8000d88:	f023 23f0 	bic.w	r3, r3, #4026593280	; 0xf000f000
 8000d8c:	f023 1382 	bic.w	r3, r3, #8519810	; 0x820082
 8000d90:	68fa      	ldr	r2, [r7, #12]
 8000d92:	6093      	str	r3, [r2, #8]
}
 8000d94:	bf00      	nop
 8000d96:	3714      	adds	r7, #20
 8000d98:	46bd      	mov	sp, r7
 8000d9a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000d9e:	4770      	bx	lr
 8000da0:	4002640f 	.word	0x4002640f
 8000da4:	40026000 	.word	0x40026000
 8000da8:	40026400 	.word	0x40026400

08000dac <I2C_Init>:
  * @param  I2C_InitStruct: pointer to a I2C_InitTypeDef structure that contains 
  *         the configuration information for the specified I2C peripheral.
  * @retval None
  */
void I2C_Init(I2C_TypeDef* I2Cx, I2C_InitTypeDef* I2C_InitStruct)
{
 8000dac:	b580      	push	{r7, lr}
 8000dae:	b08a      	sub	sp, #40	; 0x28
 8000db0:	af00      	add	r7, sp, #0
 8000db2:	6078      	str	r0, [r7, #4]
 8000db4:	6039      	str	r1, [r7, #0]
  uint16_t tmpreg = 0, freqrange = 0;
 8000db6:	2300      	movs	r3, #0
 8000db8:	84fb      	strh	r3, [r7, #38]	; 0x26
 8000dba:	2300      	movs	r3, #0
 8000dbc:	847b      	strh	r3, [r7, #34]	; 0x22
  uint16_t result = 0x04;
 8000dbe:	2304      	movs	r3, #4
 8000dc0:	84bb      	strh	r3, [r7, #36]	; 0x24
  uint32_t pclk1 = 8000000;
 8000dc2:	4b57      	ldr	r3, [pc, #348]	; (8000f20 <I2C_Init+0x174>)
 8000dc4:	61fb      	str	r3, [r7, #28]
  assert_param(IS_I2C_ACK_STATE(I2C_InitStruct->I2C_Ack));
  assert_param(IS_I2C_ACKNOWLEDGE_ADDRESS(I2C_InitStruct->I2C_AcknowledgedAddress));

/*---------------------------- I2Cx CR2 Configuration ------------------------*/
  /* Get the I2Cx CR2 value */
  tmpreg = I2Cx->CR2;
 8000dc6:	687b      	ldr	r3, [r7, #4]
 8000dc8:	889b      	ldrh	r3, [r3, #4]
 8000dca:	84fb      	strh	r3, [r7, #38]	; 0x26
  /* Clear frequency FREQ[5:0] bits */
  tmpreg &= (uint16_t)~((uint16_t)I2C_CR2_FREQ);
 8000dcc:	8cfb      	ldrh	r3, [r7, #38]	; 0x26
 8000dce:	f023 033f 	bic.w	r3, r3, #63	; 0x3f
 8000dd2:	84fb      	strh	r3, [r7, #38]	; 0x26
  /* Get pclk1 frequency value */
  RCC_GetClocksFreq(&rcc_clocks);
 8000dd4:	f107 030c 	add.w	r3, r7, #12
 8000dd8:	4618      	mov	r0, r3
 8000dda:	f000 f915 	bl	8001008 <RCC_GetClocksFreq>
  pclk1 = rcc_clocks.PCLK1_Frequency;
 8000dde:	697b      	ldr	r3, [r7, #20]
 8000de0:	61fb      	str	r3, [r7, #28]
  /* Set frequency bits depending on pclk1 value */
  freqrange = (uint16_t)(pclk1 / 1000000);
 8000de2:	69fb      	ldr	r3, [r7, #28]
 8000de4:	4a4f      	ldr	r2, [pc, #316]	; (8000f24 <I2C_Init+0x178>)
 8000de6:	fba2 2303 	umull	r2, r3, r2, r3
 8000dea:	0c9b      	lsrs	r3, r3, #18
 8000dec:	847b      	strh	r3, [r7, #34]	; 0x22
  tmpreg |= freqrange;
 8000dee:	8cfa      	ldrh	r2, [r7, #38]	; 0x26
 8000df0:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 8000df2:	4313      	orrs	r3, r2
 8000df4:	84fb      	strh	r3, [r7, #38]	; 0x26
  /* Write to I2Cx CR2 */
  I2Cx->CR2 = tmpreg;
 8000df6:	687b      	ldr	r3, [r7, #4]
 8000df8:	8cfa      	ldrh	r2, [r7, #38]	; 0x26
 8000dfa:	809a      	strh	r2, [r3, #4]

/*---------------------------- I2Cx CCR Configuration ------------------------*/
  /* Disable the selected I2C peripheral to configure TRISE */
  I2Cx->CR1 &= (uint16_t)~((uint16_t)I2C_CR1_PE);
 8000dfc:	687b      	ldr	r3, [r7, #4]
 8000dfe:	881b      	ldrh	r3, [r3, #0]
 8000e00:	b29b      	uxth	r3, r3
 8000e02:	f023 0301 	bic.w	r3, r3, #1
 8000e06:	b29a      	uxth	r2, r3
 8000e08:	687b      	ldr	r3, [r7, #4]
 8000e0a:	801a      	strh	r2, [r3, #0]
  /* Reset tmpreg value */
  /* Clear F/S, DUTY and CCR[11:0] bits */
  tmpreg = 0;
 8000e0c:	2300      	movs	r3, #0
 8000e0e:	84fb      	strh	r3, [r7, #38]	; 0x26

  /* Configure speed in standard mode */
  if (I2C_InitStruct->I2C_ClockSpeed <= 100000)
 8000e10:	683b      	ldr	r3, [r7, #0]
 8000e12:	681b      	ldr	r3, [r3, #0]
 8000e14:	4a44      	ldr	r2, [pc, #272]	; (8000f28 <I2C_Init+0x17c>)
 8000e16:	4293      	cmp	r3, r2
 8000e18:	d815      	bhi.n	8000e46 <I2C_Init+0x9a>
  {
    /* Standard mode speed calculate */
    result = (uint16_t)(pclk1 / (I2C_InitStruct->I2C_ClockSpeed << 1));
 8000e1a:	683b      	ldr	r3, [r7, #0]
 8000e1c:	681b      	ldr	r3, [r3, #0]
 8000e1e:	005b      	lsls	r3, r3, #1
 8000e20:	69fa      	ldr	r2, [r7, #28]
 8000e22:	fbb2 f3f3 	udiv	r3, r2, r3
 8000e26:	84bb      	strh	r3, [r7, #36]	; 0x24
    /* Test if CCR value is under 0x4*/
    if (result < 0x04)
 8000e28:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 8000e2a:	2b03      	cmp	r3, #3
 8000e2c:	d801      	bhi.n	8000e32 <I2C_Init+0x86>
    {
      /* Set minimum allowed value */
      result = 0x04;  
 8000e2e:	2304      	movs	r3, #4
 8000e30:	84bb      	strh	r3, [r7, #36]	; 0x24
    }
    /* Set speed value for standard mode */
    tmpreg |= result;	  
 8000e32:	8cfa      	ldrh	r2, [r7, #38]	; 0x26
 8000e34:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 8000e36:	4313      	orrs	r3, r2
 8000e38:	84fb      	strh	r3, [r7, #38]	; 0x26
    /* Set Maximum Rise Time for standard mode */
    I2Cx->TRISE = freqrange + 1; 
 8000e3a:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 8000e3c:	3301      	adds	r3, #1
 8000e3e:	b29a      	uxth	r2, r3
 8000e40:	687b      	ldr	r3, [r7, #4]
 8000e42:	841a      	strh	r2, [r3, #32]
 8000e44:	e040      	b.n	8000ec8 <I2C_Init+0x11c>
  /* Configure speed in fast mode */
  /* To use the I2C at 400 KHz (in fast mode), the PCLK1 frequency (I2C peripheral
     input clock) must be a multiple of 10 MHz */
  else /*(I2C_InitStruct->I2C_ClockSpeed <= 400000)*/
  {
    if (I2C_InitStruct->I2C_DutyCycle == I2C_DutyCycle_2)
 8000e46:	683b      	ldr	r3, [r7, #0]
 8000e48:	88db      	ldrh	r3, [r3, #6]
 8000e4a:	f64b 72ff 	movw	r2, #49151	; 0xbfff
 8000e4e:	4293      	cmp	r3, r2
 8000e50:	d109      	bne.n	8000e66 <I2C_Init+0xba>
    {
      /* Fast mode speed calculate: Tlow/Thigh = 2 */
      result = (uint16_t)(pclk1 / (I2C_InitStruct->I2C_ClockSpeed * 3));
 8000e52:	683b      	ldr	r3, [r7, #0]
 8000e54:	681a      	ldr	r2, [r3, #0]
 8000e56:	4613      	mov	r3, r2
 8000e58:	005b      	lsls	r3, r3, #1
 8000e5a:	4413      	add	r3, r2
 8000e5c:	69fa      	ldr	r2, [r7, #28]
 8000e5e:	fbb2 f3f3 	udiv	r3, r2, r3
 8000e62:	84bb      	strh	r3, [r7, #36]	; 0x24
 8000e64:	e00e      	b.n	8000e84 <I2C_Init+0xd8>
    }
    else /*I2C_InitStruct->I2C_DutyCycle == I2C_DutyCycle_16_9*/
    {
      /* Fast mode speed calculate: Tlow/Thigh = 16/9 */
      result = (uint16_t)(pclk1 / (I2C_InitStruct->I2C_ClockSpeed * 25));
 8000e66:	683b      	ldr	r3, [r7, #0]
 8000e68:	681a      	ldr	r2, [r3, #0]
 8000e6a:	4613      	mov	r3, r2
 8000e6c:	009b      	lsls	r3, r3, #2
 8000e6e:	4413      	add	r3, r2
 8000e70:	009a      	lsls	r2, r3, #2
 8000e72:	4413      	add	r3, r2
 8000e74:	69fa      	ldr	r2, [r7, #28]
 8000e76:	fbb2 f3f3 	udiv	r3, r2, r3
 8000e7a:	84bb      	strh	r3, [r7, #36]	; 0x24
      /* Set DUTY bit */
      result |= I2C_DutyCycle_16_9;
 8000e7c:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 8000e7e:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8000e82:	84bb      	strh	r3, [r7, #36]	; 0x24
    }

    /* Test if CCR value is under 0x1*/
    if ((result & I2C_CCR_CCR) == 0)
 8000e84:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 8000e86:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8000e8a:	2b00      	cmp	r3, #0
 8000e8c:	d103      	bne.n	8000e96 <I2C_Init+0xea>
    {
      /* Set minimum allowed value */
      result |= (uint16_t)0x0001;  
 8000e8e:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 8000e90:	f043 0301 	orr.w	r3, r3, #1
 8000e94:	84bb      	strh	r3, [r7, #36]	; 0x24
    }
    /* Set speed value and set F/S bit for fast mode */
    tmpreg |= (uint16_t)(result | I2C_CCR_FS);
 8000e96:	8cba      	ldrh	r2, [r7, #36]	; 0x24
 8000e98:	8cfb      	ldrh	r3, [r7, #38]	; 0x26
 8000e9a:	4313      	orrs	r3, r2
 8000e9c:	b29b      	uxth	r3, r3
 8000e9e:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8000ea2:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8000ea6:	84fb      	strh	r3, [r7, #38]	; 0x26
    /* Set Maximum Rise Time for fast mode */
    I2Cx->TRISE = (uint16_t)(((freqrange * (uint16_t)300) / (uint16_t)1000) + (uint16_t)1);  
 8000ea8:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 8000eaa:	f44f 7296 	mov.w	r2, #300	; 0x12c
 8000eae:	fb02 f303 	mul.w	r3, r2, r3
 8000eb2:	4a1e      	ldr	r2, [pc, #120]	; (8000f2c <I2C_Init+0x180>)
 8000eb4:	fb82 1203 	smull	r1, r2, r2, r3
 8000eb8:	1192      	asrs	r2, r2, #6
 8000eba:	17db      	asrs	r3, r3, #31
 8000ebc:	1ad3      	subs	r3, r2, r3
 8000ebe:	b29b      	uxth	r3, r3
 8000ec0:	3301      	adds	r3, #1
 8000ec2:	b29a      	uxth	r2, r3
 8000ec4:	687b      	ldr	r3, [r7, #4]
 8000ec6:	841a      	strh	r2, [r3, #32]
  }

  /* Write to I2Cx CCR */
  I2Cx->CCR = tmpreg;
 8000ec8:	687b      	ldr	r3, [r7, #4]
 8000eca:	8cfa      	ldrh	r2, [r7, #38]	; 0x26
 8000ecc:	839a      	strh	r2, [r3, #28]
  /* Enable the selected I2C peripheral */
  I2Cx->CR1 |= I2C_CR1_PE;
 8000ece:	687b      	ldr	r3, [r7, #4]
 8000ed0:	881b      	ldrh	r3, [r3, #0]
 8000ed2:	b29b      	uxth	r3, r3
 8000ed4:	f043 0301 	orr.w	r3, r3, #1
 8000ed8:	b29a      	uxth	r2, r3
 8000eda:	687b      	ldr	r3, [r7, #4]
 8000edc:	801a      	strh	r2, [r3, #0]

/*---------------------------- I2Cx CR1 Configuration ------------------------*/
  /* Get the I2Cx CR1 value */
  tmpreg = I2Cx->CR1;
 8000ede:	687b      	ldr	r3, [r7, #4]
 8000ee0:	881b      	ldrh	r3, [r3, #0]
 8000ee2:	84fb      	strh	r3, [r7, #38]	; 0x26
  /* Clear ACK, SMBTYPE and  SMBUS bits */
  tmpreg &= CR1_CLEAR_MASK;
 8000ee4:	8cfb      	ldrh	r3, [r7, #38]	; 0x26
 8000ee6:	f423 6381 	bic.w	r3, r3, #1032	; 0x408
 8000eea:	f023 0302 	bic.w	r3, r3, #2
 8000eee:	84fb      	strh	r3, [r7, #38]	; 0x26
  /* Configure I2Cx: mode and acknowledgement */
  /* Set SMBTYPE and SMBUS bits according to I2C_Mode value */
  /* Set ACK bit according to I2C_Ack value */
  tmpreg |= (uint16_t)((uint32_t)I2C_InitStruct->I2C_Mode | I2C_InitStruct->I2C_Ack);
 8000ef0:	683b      	ldr	r3, [r7, #0]
 8000ef2:	889a      	ldrh	r2, [r3, #4]
 8000ef4:	683b      	ldr	r3, [r7, #0]
 8000ef6:	895b      	ldrh	r3, [r3, #10]
 8000ef8:	4313      	orrs	r3, r2
 8000efa:	b29a      	uxth	r2, r3
 8000efc:	8cfb      	ldrh	r3, [r7, #38]	; 0x26
 8000efe:	4313      	orrs	r3, r2
 8000f00:	84fb      	strh	r3, [r7, #38]	; 0x26
  /* Write to I2Cx CR1 */
  I2Cx->CR1 = tmpreg;
 8000f02:	687b      	ldr	r3, [r7, #4]
 8000f04:	8cfa      	ldrh	r2, [r7, #38]	; 0x26
 8000f06:	801a      	strh	r2, [r3, #0]

/*---------------------------- I2Cx OAR1 Configuration -----------------------*/
  /* Set I2Cx Own Address1 and acknowledged address */
  I2Cx->OAR1 = (I2C_InitStruct->I2C_AcknowledgedAddress | I2C_InitStruct->I2C_OwnAddress1);
 8000f08:	683b      	ldr	r3, [r7, #0]
 8000f0a:	899a      	ldrh	r2, [r3, #12]
 8000f0c:	683b      	ldr	r3, [r7, #0]
 8000f0e:	891b      	ldrh	r3, [r3, #8]
 8000f10:	4313      	orrs	r3, r2
 8000f12:	b29a      	uxth	r2, r3
 8000f14:	687b      	ldr	r3, [r7, #4]
 8000f16:	811a      	strh	r2, [r3, #8]
}
 8000f18:	bf00      	nop
 8000f1a:	3728      	adds	r7, #40	; 0x28
 8000f1c:	46bd      	mov	sp, r7
 8000f1e:	bd80      	pop	{r7, pc}
 8000f20:	007a1200 	.word	0x007a1200
 8000f24:	431bde83 	.word	0x431bde83
 8000f28:	000186a0 	.word	0x000186a0
 8000f2c:	10624dd3 	.word	0x10624dd3

08000f30 <I2C_CheckEvent>:
  * @retval An ErrorStatus enumeration value:
  *           - SUCCESS: Last event is equal to the I2C_EVENT
  *           - ERROR: Last event is different from the I2C_EVENT
  */
ErrorStatus I2C_CheckEvent(I2C_TypeDef* I2Cx, uint32_t I2C_EVENT)
{
 8000f30:	b480      	push	{r7}
 8000f32:	b087      	sub	sp, #28
 8000f34:	af00      	add	r7, sp, #0
 8000f36:	6078      	str	r0, [r7, #4]
 8000f38:	6039      	str	r1, [r7, #0]
  uint32_t lastevent = 0;
 8000f3a:	2300      	movs	r3, #0
 8000f3c:	613b      	str	r3, [r7, #16]
  uint32_t flag1 = 0, flag2 = 0;
 8000f3e:	2300      	movs	r3, #0
 8000f40:	60fb      	str	r3, [r7, #12]
 8000f42:	2300      	movs	r3, #0
 8000f44:	60bb      	str	r3, [r7, #8]
  ErrorStatus status = ERROR;
 8000f46:	2300      	movs	r3, #0
 8000f48:	75fb      	strb	r3, [r7, #23]
  /* Check the parameters */
  assert_param(IS_I2C_ALL_PERIPH(I2Cx));
  assert_param(IS_I2C_EVENT(I2C_EVENT));

  /* Read the I2Cx status register */
  flag1 = I2Cx->SR1;
 8000f4a:	687b      	ldr	r3, [r7, #4]
 8000f4c:	8a9b      	ldrh	r3, [r3, #20]
 8000f4e:	b29b      	uxth	r3, r3
 8000f50:	60fb      	str	r3, [r7, #12]
  flag2 = I2Cx->SR2;
 8000f52:	687b      	ldr	r3, [r7, #4]
 8000f54:	8b1b      	ldrh	r3, [r3, #24]
 8000f56:	b29b      	uxth	r3, r3
 8000f58:	60bb      	str	r3, [r7, #8]
  flag2 = flag2 << 16;
 8000f5a:	68bb      	ldr	r3, [r7, #8]
 8000f5c:	041b      	lsls	r3, r3, #16
 8000f5e:	60bb      	str	r3, [r7, #8]

  /* Get the last event value from I2C status register */
  lastevent = (flag1 | flag2) & FLAG_MASK;
 8000f60:	68fa      	ldr	r2, [r7, #12]
 8000f62:	68bb      	ldr	r3, [r7, #8]
 8000f64:	4313      	orrs	r3, r2
 8000f66:	f023 437f 	bic.w	r3, r3, #4278190080	; 0xff000000
 8000f6a:	613b      	str	r3, [r7, #16]

  /* Check whether the last event contains the I2C_EVENT */
  if ((lastevent & I2C_EVENT) == I2C_EVENT)
 8000f6c:	693a      	ldr	r2, [r7, #16]
 8000f6e:	683b      	ldr	r3, [r7, #0]
 8000f70:	401a      	ands	r2, r3
 8000f72:	683b      	ldr	r3, [r7, #0]
 8000f74:	429a      	cmp	r2, r3
 8000f76:	d102      	bne.n	8000f7e <I2C_CheckEvent+0x4e>
  {
    /* SUCCESS: last event is equal to I2C_EVENT */
    status = SUCCESS;
 8000f78:	2301      	movs	r3, #1
 8000f7a:	75fb      	strb	r3, [r7, #23]
 8000f7c:	e001      	b.n	8000f82 <I2C_CheckEvent+0x52>
  }
  else
  {
    /* ERROR: last event is different from I2C_EVENT */
    status = ERROR;
 8000f7e:	2300      	movs	r3, #0
 8000f80:	75fb      	strb	r3, [r7, #23]
  }
  /* Return status */
  return status;
 8000f82:	7dfb      	ldrb	r3, [r7, #23]
}
 8000f84:	4618      	mov	r0, r3
 8000f86:	371c      	adds	r7, #28
 8000f88:	46bd      	mov	sp, r7
 8000f8a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000f8e:	4770      	bx	lr

08000f90 <RCC_HSEConfig>:
  *            @arg RCC_HSE_ON: turn ON the HSE oscillator
  *            @arg RCC_HSE_Bypass: HSE oscillator bypassed with external clock
  * @retval None
  */
void RCC_HSEConfig(uint8_t RCC_HSE)
{
 8000f90:	b480      	push	{r7}
 8000f92:	b083      	sub	sp, #12
 8000f94:	af00      	add	r7, sp, #0
 8000f96:	4603      	mov	r3, r0
 8000f98:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_RCC_HSE(RCC_HSE));

  /* Reset HSEON and HSEBYP bits before configuring the HSE ------------------*/
  *(__IO uint8_t *) CR_BYTE3_ADDRESS = RCC_HSE_OFF;
 8000f9a:	4b06      	ldr	r3, [pc, #24]	; (8000fb4 <RCC_HSEConfig+0x24>)
 8000f9c:	2200      	movs	r2, #0
 8000f9e:	701a      	strb	r2, [r3, #0]

  /* Set the new HSE configuration -------------------------------------------*/
  *(__IO uint8_t *) CR_BYTE3_ADDRESS = RCC_HSE;
 8000fa0:	4a04      	ldr	r2, [pc, #16]	; (8000fb4 <RCC_HSEConfig+0x24>)
 8000fa2:	79fb      	ldrb	r3, [r7, #7]
 8000fa4:	7013      	strb	r3, [r2, #0]
}
 8000fa6:	bf00      	nop
 8000fa8:	370c      	adds	r7, #12
 8000faa:	46bd      	mov	sp, r7
 8000fac:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000fb0:	4770      	bx	lr
 8000fb2:	bf00      	nop
 8000fb4:	40023802 	.word	0x40023802

08000fb8 <RCC_WaitForHSEStartUp>:
  * @retval An ErrorStatus enumeration value:
  *          - SUCCESS: HSE oscillator is stable and ready to use
  *          - ERROR: HSE oscillator not yet ready
  */
ErrorStatus RCC_WaitForHSEStartUp(void)
{
 8000fb8:	b580      	push	{r7, lr}
 8000fba:	b082      	sub	sp, #8
 8000fbc:	af00      	add	r7, sp, #0
  __IO uint32_t startupcounter = 0;
 8000fbe:	2300      	movs	r3, #0
 8000fc0:	603b      	str	r3, [r7, #0]
  ErrorStatus status = ERROR;
 8000fc2:	2300      	movs	r3, #0
 8000fc4:	71fb      	strb	r3, [r7, #7]
  FlagStatus hsestatus = RESET;
 8000fc6:	2300      	movs	r3, #0
 8000fc8:	71bb      	strb	r3, [r7, #6]
  /* Wait till HSE is ready and if Time out is reached exit */
  do
  {
    hsestatus = RCC_GetFlagStatus(RCC_FLAG_HSERDY);
 8000fca:	2031      	movs	r0, #49	; 0x31
 8000fcc:	f000 f8c4 	bl	8001158 <RCC_GetFlagStatus>
 8000fd0:	4603      	mov	r3, r0
 8000fd2:	71bb      	strb	r3, [r7, #6]
    startupcounter++;
 8000fd4:	683b      	ldr	r3, [r7, #0]
 8000fd6:	3301      	adds	r3, #1
 8000fd8:	603b      	str	r3, [r7, #0]
  } while((startupcounter != HSE_STARTUP_TIMEOUT) && (hsestatus == RESET));
 8000fda:	683b      	ldr	r3, [r7, #0]
 8000fdc:	f5b3 6fa0 	cmp.w	r3, #1280	; 0x500
 8000fe0:	d002      	beq.n	8000fe8 <RCC_WaitForHSEStartUp+0x30>
 8000fe2:	79bb      	ldrb	r3, [r7, #6]
 8000fe4:	2b00      	cmp	r3, #0
 8000fe6:	d0f0      	beq.n	8000fca <RCC_WaitForHSEStartUp+0x12>

  if (RCC_GetFlagStatus(RCC_FLAG_HSERDY) != RESET)
 8000fe8:	2031      	movs	r0, #49	; 0x31
 8000fea:	f000 f8b5 	bl	8001158 <RCC_GetFlagStatus>
 8000fee:	4603      	mov	r3, r0
 8000ff0:	2b00      	cmp	r3, #0
 8000ff2:	d002      	beq.n	8000ffa <RCC_WaitForHSEStartUp+0x42>
  {
    status = SUCCESS;
 8000ff4:	2301      	movs	r3, #1
 8000ff6:	71fb      	strb	r3, [r7, #7]
 8000ff8:	e001      	b.n	8000ffe <RCC_WaitForHSEStartUp+0x46>
  }
  else
  {
    status = ERROR;
 8000ffa:	2300      	movs	r3, #0
 8000ffc:	71fb      	strb	r3, [r7, #7]
  }
  return (status);
 8000ffe:	79fb      	ldrb	r3, [r7, #7]
}
 8001000:	4618      	mov	r0, r3
 8001002:	3708      	adds	r7, #8
 8001004:	46bd      	mov	sp, r7
 8001006:	bd80      	pop	{r7, pc}

08001008 <RCC_GetClocksFreq>:
  *         configuration based on this function will be incorrect.
  *    
  * @retval None
  */
void RCC_GetClocksFreq(RCC_ClocksTypeDef* RCC_Clocks)
{
 8001008:	b480      	push	{r7}
 800100a:	b089      	sub	sp, #36	; 0x24
 800100c:	af00      	add	r7, sp, #0
 800100e:	6078      	str	r0, [r7, #4]
  uint32_t tmp = 0, presc = 0, pllvco = 0, pllp = 2, pllsource = 0, pllm = 2;
 8001010:	2300      	movs	r3, #0
 8001012:	61bb      	str	r3, [r7, #24]
 8001014:	2300      	movs	r3, #0
 8001016:	617b      	str	r3, [r7, #20]
 8001018:	2300      	movs	r3, #0
 800101a:	61fb      	str	r3, [r7, #28]
 800101c:	2302      	movs	r3, #2
 800101e:	613b      	str	r3, [r7, #16]
 8001020:	2300      	movs	r3, #0
 8001022:	60fb      	str	r3, [r7, #12]
 8001024:	2302      	movs	r3, #2
 8001026:	60bb      	str	r3, [r7, #8]

  /* Get SYSCLK source -------------------------------------------------------*/
  tmp = RCC->CFGR & RCC_CFGR_SWS;
 8001028:	4b47      	ldr	r3, [pc, #284]	; (8001148 <RCC_GetClocksFreq+0x140>)
 800102a:	689b      	ldr	r3, [r3, #8]
 800102c:	f003 030c 	and.w	r3, r3, #12
 8001030:	61bb      	str	r3, [r7, #24]

  switch (tmp)
 8001032:	69bb      	ldr	r3, [r7, #24]
 8001034:	2b04      	cmp	r3, #4
 8001036:	d007      	beq.n	8001048 <RCC_GetClocksFreq+0x40>
 8001038:	2b08      	cmp	r3, #8
 800103a:	d009      	beq.n	8001050 <RCC_GetClocksFreq+0x48>
 800103c:	2b00      	cmp	r3, #0
 800103e:	d13d      	bne.n	80010bc <RCC_GetClocksFreq+0xb4>
  {
    case 0x00:  /* HSI used as system clock source */
      RCC_Clocks->SYSCLK_Frequency = HSI_VALUE;
 8001040:	687b      	ldr	r3, [r7, #4]
 8001042:	4a42      	ldr	r2, [pc, #264]	; (800114c <RCC_GetClocksFreq+0x144>)
 8001044:	601a      	str	r2, [r3, #0]
      break;
 8001046:	e03d      	b.n	80010c4 <RCC_GetClocksFreq+0xbc>
    case 0x04:  /* HSE used as system clock  source */
      RCC_Clocks->SYSCLK_Frequency = HSE_VALUE;
 8001048:	687b      	ldr	r3, [r7, #4]
 800104a:	4a41      	ldr	r2, [pc, #260]	; (8001150 <RCC_GetClocksFreq+0x148>)
 800104c:	601a      	str	r2, [r3, #0]
      break;
 800104e:	e039      	b.n	80010c4 <RCC_GetClocksFreq+0xbc>
    case 0x08:  /* PLL used as system clock  source */

      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
         SYSCLK = PLL_VCO / PLLP
         */    
      pllsource = (RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) >> 22;
 8001050:	4b3d      	ldr	r3, [pc, #244]	; (8001148 <RCC_GetClocksFreq+0x140>)
 8001052:	685b      	ldr	r3, [r3, #4]
 8001054:	0d9b      	lsrs	r3, r3, #22
 8001056:	f003 0301 	and.w	r3, r3, #1
 800105a:	60fb      	str	r3, [r7, #12]
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 800105c:	4b3a      	ldr	r3, [pc, #232]	; (8001148 <RCC_GetClocksFreq+0x140>)
 800105e:	685b      	ldr	r3, [r3, #4]
 8001060:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8001064:	60bb      	str	r3, [r7, #8]
      
      if (pllsource != 0)
 8001066:	68fb      	ldr	r3, [r7, #12]
 8001068:	2b00      	cmp	r3, #0
 800106a:	d00c      	beq.n	8001086 <RCC_GetClocksFreq+0x7e>
      {
        /* HSE used as PLL clock source */
        pllvco = (HSE_VALUE / pllm) * ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> 6);
 800106c:	4a38      	ldr	r2, [pc, #224]	; (8001150 <RCC_GetClocksFreq+0x148>)
 800106e:	68bb      	ldr	r3, [r7, #8]
 8001070:	fbb2 f3f3 	udiv	r3, r2, r3
 8001074:	4a34      	ldr	r2, [pc, #208]	; (8001148 <RCC_GetClocksFreq+0x140>)
 8001076:	6852      	ldr	r2, [r2, #4]
 8001078:	0992      	lsrs	r2, r2, #6
 800107a:	f3c2 0208 	ubfx	r2, r2, #0, #9
 800107e:	fb02 f303 	mul.w	r3, r2, r3
 8001082:	61fb      	str	r3, [r7, #28]
 8001084:	e00b      	b.n	800109e <RCC_GetClocksFreq+0x96>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (HSI_VALUE / pllm) * ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> 6);      
 8001086:	4a31      	ldr	r2, [pc, #196]	; (800114c <RCC_GetClocksFreq+0x144>)
 8001088:	68bb      	ldr	r3, [r7, #8]
 800108a:	fbb2 f3f3 	udiv	r3, r2, r3
 800108e:	4a2e      	ldr	r2, [pc, #184]	; (8001148 <RCC_GetClocksFreq+0x140>)
 8001090:	6852      	ldr	r2, [r2, #4]
 8001092:	0992      	lsrs	r2, r2, #6
 8001094:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8001098:	fb02 f303 	mul.w	r3, r2, r3
 800109c:	61fb      	str	r3, [r7, #28]
      }

      pllp = (((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >>16) + 1 ) *2;
 800109e:	4b2a      	ldr	r3, [pc, #168]	; (8001148 <RCC_GetClocksFreq+0x140>)
 80010a0:	685b      	ldr	r3, [r3, #4]
 80010a2:	0c1b      	lsrs	r3, r3, #16
 80010a4:	f003 0303 	and.w	r3, r3, #3
 80010a8:	3301      	adds	r3, #1
 80010aa:	005b      	lsls	r3, r3, #1
 80010ac:	613b      	str	r3, [r7, #16]
      RCC_Clocks->SYSCLK_Frequency = pllvco/pllp;
 80010ae:	69fa      	ldr	r2, [r7, #28]
 80010b0:	693b      	ldr	r3, [r7, #16]
 80010b2:	fbb2 f2f3 	udiv	r2, r2, r3
 80010b6:	687b      	ldr	r3, [r7, #4]
 80010b8:	601a      	str	r2, [r3, #0]
      break;
 80010ba:	e003      	b.n	80010c4 <RCC_GetClocksFreq+0xbc>
    default:
      RCC_Clocks->SYSCLK_Frequency = HSI_VALUE;
 80010bc:	687b      	ldr	r3, [r7, #4]
 80010be:	4a23      	ldr	r2, [pc, #140]	; (800114c <RCC_GetClocksFreq+0x144>)
 80010c0:	601a      	str	r2, [r3, #0]
      break;
 80010c2:	bf00      	nop
  }
  /* Compute HCLK, PCLK1 and PCLK2 clocks frequencies ------------------------*/

  /* Get HCLK prescaler */
  tmp = RCC->CFGR & RCC_CFGR_HPRE;
 80010c4:	4b20      	ldr	r3, [pc, #128]	; (8001148 <RCC_GetClocksFreq+0x140>)
 80010c6:	689b      	ldr	r3, [r3, #8]
 80010c8:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 80010cc:	61bb      	str	r3, [r7, #24]
  tmp = tmp >> 4;
 80010ce:	69bb      	ldr	r3, [r7, #24]
 80010d0:	091b      	lsrs	r3, r3, #4
 80010d2:	61bb      	str	r3, [r7, #24]
  presc = APBAHBPrescTable[tmp];
 80010d4:	4a1f      	ldr	r2, [pc, #124]	; (8001154 <RCC_GetClocksFreq+0x14c>)
 80010d6:	69bb      	ldr	r3, [r7, #24]
 80010d8:	4413      	add	r3, r2
 80010da:	781b      	ldrb	r3, [r3, #0]
 80010dc:	b2db      	uxtb	r3, r3
 80010de:	617b      	str	r3, [r7, #20]
  /* HCLK clock frequency */
  RCC_Clocks->HCLK_Frequency = RCC_Clocks->SYSCLK_Frequency >> presc;
 80010e0:	687b      	ldr	r3, [r7, #4]
 80010e2:	681a      	ldr	r2, [r3, #0]
 80010e4:	697b      	ldr	r3, [r7, #20]
 80010e6:	40da      	lsrs	r2, r3
 80010e8:	687b      	ldr	r3, [r7, #4]
 80010ea:	605a      	str	r2, [r3, #4]

  /* Get PCLK1 prescaler */
  tmp = RCC->CFGR & RCC_CFGR_PPRE1;
 80010ec:	4b16      	ldr	r3, [pc, #88]	; (8001148 <RCC_GetClocksFreq+0x140>)
 80010ee:	689b      	ldr	r3, [r3, #8]
 80010f0:	f403 53e0 	and.w	r3, r3, #7168	; 0x1c00
 80010f4:	61bb      	str	r3, [r7, #24]
  tmp = tmp >> 10;
 80010f6:	69bb      	ldr	r3, [r7, #24]
 80010f8:	0a9b      	lsrs	r3, r3, #10
 80010fa:	61bb      	str	r3, [r7, #24]
  presc = APBAHBPrescTable[tmp];
 80010fc:	4a15      	ldr	r2, [pc, #84]	; (8001154 <RCC_GetClocksFreq+0x14c>)
 80010fe:	69bb      	ldr	r3, [r7, #24]
 8001100:	4413      	add	r3, r2
 8001102:	781b      	ldrb	r3, [r3, #0]
 8001104:	b2db      	uxtb	r3, r3
 8001106:	617b      	str	r3, [r7, #20]
  /* PCLK1 clock frequency */
  RCC_Clocks->PCLK1_Frequency = RCC_Clocks->HCLK_Frequency >> presc;
 8001108:	687b      	ldr	r3, [r7, #4]
 800110a:	685a      	ldr	r2, [r3, #4]
 800110c:	697b      	ldr	r3, [r7, #20]
 800110e:	40da      	lsrs	r2, r3
 8001110:	687b      	ldr	r3, [r7, #4]
 8001112:	609a      	str	r2, [r3, #8]

  /* Get PCLK2 prescaler */
  tmp = RCC->CFGR & RCC_CFGR_PPRE2;
 8001114:	4b0c      	ldr	r3, [pc, #48]	; (8001148 <RCC_GetClocksFreq+0x140>)
 8001116:	689b      	ldr	r3, [r3, #8]
 8001118:	f403 4360 	and.w	r3, r3, #57344	; 0xe000
 800111c:	61bb      	str	r3, [r7, #24]
  tmp = tmp >> 13;
 800111e:	69bb      	ldr	r3, [r7, #24]
 8001120:	0b5b      	lsrs	r3, r3, #13
 8001122:	61bb      	str	r3, [r7, #24]
  presc = APBAHBPrescTable[tmp];
 8001124:	4a0b      	ldr	r2, [pc, #44]	; (8001154 <RCC_GetClocksFreq+0x14c>)
 8001126:	69bb      	ldr	r3, [r7, #24]
 8001128:	4413      	add	r3, r2
 800112a:	781b      	ldrb	r3, [r3, #0]
 800112c:	b2db      	uxtb	r3, r3
 800112e:	617b      	str	r3, [r7, #20]
  /* PCLK2 clock frequency */
  RCC_Clocks->PCLK2_Frequency = RCC_Clocks->HCLK_Frequency >> presc;
 8001130:	687b      	ldr	r3, [r7, #4]
 8001132:	685a      	ldr	r2, [r3, #4]
 8001134:	697b      	ldr	r3, [r7, #20]
 8001136:	40da      	lsrs	r2, r3
 8001138:	687b      	ldr	r3, [r7, #4]
 800113a:	60da      	str	r2, [r3, #12]
}
 800113c:	bf00      	nop
 800113e:	3724      	adds	r7, #36	; 0x24
 8001140:	46bd      	mov	sp, r7
 8001142:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001146:	4770      	bx	lr
 8001148:	40023800 	.word	0x40023800
 800114c:	00f42400 	.word	0x00f42400
 8001150:	007a1200 	.word	0x007a1200
 8001154:	20000000 	.word	0x20000000

08001158 <RCC_GetFlagStatus>:
  *            @arg RCC_FLAG_WWDGRST: Window Watchdog reset
  *            @arg RCC_FLAG_LPWRRST: Low Power reset
  * @retval The new state of RCC_FLAG (SET or RESET).
  */
FlagStatus RCC_GetFlagStatus(uint8_t RCC_FLAG)
{
 8001158:	b480      	push	{r7}
 800115a:	b087      	sub	sp, #28
 800115c:	af00      	add	r7, sp, #0
 800115e:	4603      	mov	r3, r0
 8001160:	71fb      	strb	r3, [r7, #7]
  uint32_t tmp = 0;
 8001162:	2300      	movs	r3, #0
 8001164:	60fb      	str	r3, [r7, #12]
  uint32_t statusreg = 0;
 8001166:	2300      	movs	r3, #0
 8001168:	617b      	str	r3, [r7, #20]
  FlagStatus bitstatus = RESET;
 800116a:	2300      	movs	r3, #0
 800116c:	74fb      	strb	r3, [r7, #19]

  /* Check the parameters */
  assert_param(IS_RCC_FLAG(RCC_FLAG));

  /* Get the RCC register index */
  tmp = RCC_FLAG >> 5;
 800116e:	79fb      	ldrb	r3, [r7, #7]
 8001170:	095b      	lsrs	r3, r3, #5
 8001172:	b2db      	uxtb	r3, r3
 8001174:	60fb      	str	r3, [r7, #12]
  if (tmp == 1)               /* The flag to check is in CR register */
 8001176:	68fb      	ldr	r3, [r7, #12]
 8001178:	2b01      	cmp	r3, #1
 800117a:	d103      	bne.n	8001184 <RCC_GetFlagStatus+0x2c>
  {
    statusreg = RCC->CR;
 800117c:	4b12      	ldr	r3, [pc, #72]	; (80011c8 <RCC_GetFlagStatus+0x70>)
 800117e:	681b      	ldr	r3, [r3, #0]
 8001180:	617b      	str	r3, [r7, #20]
 8001182:	e009      	b.n	8001198 <RCC_GetFlagStatus+0x40>
  }
  else if (tmp == 2)          /* The flag to check is in BDCR register */
 8001184:	68fb      	ldr	r3, [r7, #12]
 8001186:	2b02      	cmp	r3, #2
 8001188:	d103      	bne.n	8001192 <RCC_GetFlagStatus+0x3a>
  {
    statusreg = RCC->BDCR;
 800118a:	4b0f      	ldr	r3, [pc, #60]	; (80011c8 <RCC_GetFlagStatus+0x70>)
 800118c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800118e:	617b      	str	r3, [r7, #20]
 8001190:	e002      	b.n	8001198 <RCC_GetFlagStatus+0x40>
  }
  else                       /* The flag to check is in CSR register */
  {
    statusreg = RCC->CSR;
 8001192:	4b0d      	ldr	r3, [pc, #52]	; (80011c8 <RCC_GetFlagStatus+0x70>)
 8001194:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8001196:	617b      	str	r3, [r7, #20]
  }

  /* Get the flag position */
  tmp = RCC_FLAG & FLAG_MASK;
 8001198:	79fb      	ldrb	r3, [r7, #7]
 800119a:	f003 031f 	and.w	r3, r3, #31
 800119e:	60fb      	str	r3, [r7, #12]
  if ((statusreg & ((uint32_t)1 << tmp)) != (uint32_t)RESET)
 80011a0:	697a      	ldr	r2, [r7, #20]
 80011a2:	68fb      	ldr	r3, [r7, #12]
 80011a4:	fa22 f303 	lsr.w	r3, r2, r3
 80011a8:	f003 0301 	and.w	r3, r3, #1
 80011ac:	2b00      	cmp	r3, #0
 80011ae:	d002      	beq.n	80011b6 <RCC_GetFlagStatus+0x5e>
  {
    bitstatus = SET;
 80011b0:	2301      	movs	r3, #1
 80011b2:	74fb      	strb	r3, [r7, #19]
 80011b4:	e001      	b.n	80011ba <RCC_GetFlagStatus+0x62>
  }
  else
  {
    bitstatus = RESET;
 80011b6:	2300      	movs	r3, #0
 80011b8:	74fb      	strb	r3, [r7, #19]
  }
  /* Return the flag status */
  return bitstatus;
 80011ba:	7cfb      	ldrb	r3, [r7, #19]
}
 80011bc:	4618      	mov	r0, r3
 80011be:	371c      	adds	r7, #28
 80011c0:	46bd      	mov	sp, r7
 80011c2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80011c6:	4770      	bx	lr
 80011c8:	40023800 	.word	0x40023800

080011cc <SPI_I2S_SendData>:
  *         in SPI mode or 2 or 3 in I2S mode or I2Sxext for I2S full duplex mode.     
  * @param  Data: Data to be transmitted.
  * @retval None
  */
void SPI_I2S_SendData(SPI_TypeDef* SPIx, uint16_t Data)
{
 80011cc:	b480      	push	{r7}
 80011ce:	b083      	sub	sp, #12
 80011d0:	af00      	add	r7, sp, #0
 80011d2:	6078      	str	r0, [r7, #4]
 80011d4:	460b      	mov	r3, r1
 80011d6:	807b      	strh	r3, [r7, #2]
  /* Check the parameters */
  assert_param(IS_SPI_ALL_PERIPH_EXT(SPIx));
  
  /* Write in the DR register the data to be sent */
  SPIx->DR = Data;
 80011d8:	687b      	ldr	r3, [r7, #4]
 80011da:	887a      	ldrh	r2, [r7, #2]
 80011dc:	819a      	strh	r2, [r3, #12]
}
 80011de:	bf00      	nop
 80011e0:	370c      	adds	r7, #12
 80011e2:	46bd      	mov	sp, r7
 80011e4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80011e8:	4770      	bx	lr

080011ea <SPI_I2S_GetFlagStatus>:
  *            @arg I2S_FLAG_UDR: Underrun Error flag.
  *            @arg I2S_FLAG_CHSIDE: Channel Side flag.  
  * @retval The new state of SPI_I2S_FLAG (SET or RESET).
  */
FlagStatus SPI_I2S_GetFlagStatus(SPI_TypeDef* SPIx, uint16_t SPI_I2S_FLAG)
{
 80011ea:	b480      	push	{r7}
 80011ec:	b085      	sub	sp, #20
 80011ee:	af00      	add	r7, sp, #0
 80011f0:	6078      	str	r0, [r7, #4]
 80011f2:	460b      	mov	r3, r1
 80011f4:	807b      	strh	r3, [r7, #2]
  FlagStatus bitstatus = RESET;
 80011f6:	2300      	movs	r3, #0
 80011f8:	73fb      	strb	r3, [r7, #15]
  /* Check the parameters */
  assert_param(IS_SPI_ALL_PERIPH_EXT(SPIx));
  assert_param(IS_SPI_I2S_GET_FLAG(SPI_I2S_FLAG));
  
  /* Check the status of the specified SPI flag */
  if ((SPIx->SR & SPI_I2S_FLAG) != (uint16_t)RESET)
 80011fa:	687b      	ldr	r3, [r7, #4]
 80011fc:	891b      	ldrh	r3, [r3, #8]
 80011fe:	b29a      	uxth	r2, r3
 8001200:	887b      	ldrh	r3, [r7, #2]
 8001202:	4013      	ands	r3, r2
 8001204:	b29b      	uxth	r3, r3
 8001206:	2b00      	cmp	r3, #0
 8001208:	d002      	beq.n	8001210 <SPI_I2S_GetFlagStatus+0x26>
  {
    /* SPI_I2S_FLAG is set */
    bitstatus = SET;
 800120a:	2301      	movs	r3, #1
 800120c:	73fb      	strb	r3, [r7, #15]
 800120e:	e001      	b.n	8001214 <SPI_I2S_GetFlagStatus+0x2a>
  }
  else
  {
    /* SPI_I2S_FLAG is reset */
    bitstatus = RESET;
 8001210:	2300      	movs	r3, #0
 8001212:	73fb      	strb	r3, [r7, #15]
  }
  /* Return the SPI_I2S_FLAG status */
  return  bitstatus;
 8001214:	7bfb      	ldrb	r3, [r7, #15]
}
 8001216:	4618      	mov	r0, r3
 8001218:	3714      	adds	r7, #20
 800121a:	46bd      	mov	sp, r7
 800121c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001220:	4770      	bx	lr
	...

08001224 <Audio_MAL_IRQHandler>:
  * @brief  This function handles main Media layer interrupt. 
  * @param  None
  * @retval 0 if correct communication, else wrong communication
  */
static void Audio_MAL_IRQHandler(void)
{    
 8001224:	b580      	push	{r7, lr}
 8001226:	af00      	add	r7, sp, #0
  uint32_t Size = AudioRemSize;
#endif /* AUDIO_MAL_MODE_NORMAL */
  
#ifdef AUDIO_MAL_DMA_IT_TC_EN
  /* Transfer complete interrupt */
  if (DMA_GetFlagStatus(AUDIO_MAL_DMA_STREAM, AUDIO_MAL_DMA_FLAG_TC) != RESET)
 8001228:	4b38      	ldr	r3, [pc, #224]	; (800130c <Audio_MAL_IRQHandler+0xe8>)
 800122a:	681a      	ldr	r2, [r3, #0]
 800122c:	4b38      	ldr	r3, [pc, #224]	; (8001310 <Audio_MAL_IRQHandler+0xec>)
 800122e:	681b      	ldr	r3, [r3, #0]
 8001230:	4619      	mov	r1, r3
 8001232:	4610      	mov	r0, r2
 8001234:	f7ff fd50 	bl	8000cd8 <DMA_GetFlagStatus>
 8001238:	4603      	mov	r3, r0
 800123a:	2b00      	cmp	r3, #0
 800123c:	d064      	beq.n	8001308 <Audio_MAL_IRQHandler+0xe4>
  {         
 #ifdef AUDIO_MAL_MODE_NORMAL
    /* Check if the end of file has been reached */
    if (AudioRemSize > 0)
 800123e:	4b35      	ldr	r3, [pc, #212]	; (8001314 <Audio_MAL_IRQHandler+0xf0>)
 8001240:	681b      	ldr	r3, [r3, #0]
 8001242:	2b00      	cmp	r3, #0
 8001244:	d04c      	beq.n	80012e0 <Audio_MAL_IRQHandler+0xbc>
    {      
      /* Wait the DMA Stream to be effectively disabled */
      while (DMA_GetCmdStatus(AUDIO_MAL_DMA_STREAM) != DISABLE)
 8001246:	bf00      	nop
 8001248:	4b30      	ldr	r3, [pc, #192]	; (800130c <Audio_MAL_IRQHandler+0xe8>)
 800124a:	681b      	ldr	r3, [r3, #0]
 800124c:	4618      	mov	r0, r3
 800124e:	f7ff fd2b 	bl	8000ca8 <DMA_GetCmdStatus>
 8001252:	4603      	mov	r3, r0
 8001254:	2b00      	cmp	r3, #0
 8001256:	d1f7      	bne.n	8001248 <Audio_MAL_IRQHandler+0x24>
      {}
      
      /* Clear the Interrupt flag */
      DMA_ClearFlag(AUDIO_MAL_DMA_STREAM, AUDIO_MAL_DMA_FLAG_TC); 
 8001258:	4b2c      	ldr	r3, [pc, #176]	; (800130c <Audio_MAL_IRQHandler+0xe8>)
 800125a:	681a      	ldr	r2, [r3, #0]
 800125c:	4b2c      	ldr	r3, [pc, #176]	; (8001310 <Audio_MAL_IRQHandler+0xec>)
 800125e:	681b      	ldr	r3, [r3, #0]
 8001260:	4619      	mov	r1, r3
 8001262:	4610      	mov	r0, r2
 8001264:	f7ff fd74 	bl	8000d50 <DMA_ClearFlag>
           
      /* Re-Configure the buffer address and size */
      DMA_InitStructure.DMA_Memory0BaseAddr = (uint32_t) CurrentPos;
 8001268:	4b2b      	ldr	r3, [pc, #172]	; (8001318 <Audio_MAL_IRQHandler+0xf4>)
 800126a:	681b      	ldr	r3, [r3, #0]
 800126c:	461a      	mov	r2, r3
 800126e:	4b2b      	ldr	r3, [pc, #172]	; (800131c <Audio_MAL_IRQHandler+0xf8>)
 8001270:	609a      	str	r2, [r3, #8]
      DMA_InitStructure.DMA_BufferSize = (uint32_t) (DMA_MAX(AudioRemSize));
 8001272:	4b28      	ldr	r3, [pc, #160]	; (8001314 <Audio_MAL_IRQHandler+0xf0>)
 8001274:	681b      	ldr	r3, [r3, #0]
 8001276:	f64f 72ff 	movw	r2, #65535	; 0xffff
 800127a:	4293      	cmp	r3, r2
 800127c:	bf28      	it	cs
 800127e:	4613      	movcs	r3, r2
 8001280:	4a26      	ldr	r2, [pc, #152]	; (800131c <Audio_MAL_IRQHandler+0xf8>)
 8001282:	6113      	str	r3, [r2, #16]
            
      /* Configure the DMA Stream with the new parameters */
      DMA_Init(AUDIO_MAL_DMA_STREAM, &DMA_InitStructure);
 8001284:	4b21      	ldr	r3, [pc, #132]	; (800130c <Audio_MAL_IRQHandler+0xe8>)
 8001286:	681b      	ldr	r3, [r3, #0]
 8001288:	4924      	ldr	r1, [pc, #144]	; (800131c <Audio_MAL_IRQHandler+0xf8>)
 800128a:	4618      	mov	r0, r3
 800128c:	f7ff fc98 	bl	8000bc0 <DMA_Init>
      
      /* Enable the I2S DMA Stream*/
      DMA_Cmd(AUDIO_MAL_DMA_STREAM, ENABLE);    
 8001290:	4b1e      	ldr	r3, [pc, #120]	; (800130c <Audio_MAL_IRQHandler+0xe8>)
 8001292:	681b      	ldr	r3, [r3, #0]
 8001294:	2101      	movs	r1, #1
 8001296:	4618      	mov	r0, r3
 8001298:	f7ff fcea 	bl	8000c70 <DMA_Cmd>
      
      /* Update the current pointer position */
      CurrentPos += DMA_MAX(AudioRemSize);        
 800129c:	4b1e      	ldr	r3, [pc, #120]	; (8001318 <Audio_MAL_IRQHandler+0xf4>)
 800129e:	681a      	ldr	r2, [r3, #0]
 80012a0:	4b1c      	ldr	r3, [pc, #112]	; (8001314 <Audio_MAL_IRQHandler+0xf0>)
 80012a2:	681b      	ldr	r3, [r3, #0]
 80012a4:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80012a8:	d203      	bcs.n	80012b2 <Audio_MAL_IRQHandler+0x8e>
 80012aa:	4b1a      	ldr	r3, [pc, #104]	; (8001314 <Audio_MAL_IRQHandler+0xf0>)
 80012ac:	681b      	ldr	r3, [r3, #0]
 80012ae:	005b      	lsls	r3, r3, #1
 80012b0:	e000      	b.n	80012b4 <Audio_MAL_IRQHandler+0x90>
 80012b2:	4b1b      	ldr	r3, [pc, #108]	; (8001320 <Audio_MAL_IRQHandler+0xfc>)
 80012b4:	4413      	add	r3, r2
 80012b6:	4a18      	ldr	r2, [pc, #96]	; (8001318 <Audio_MAL_IRQHandler+0xf4>)
 80012b8:	6013      	str	r3, [r2, #0]
      
      /* Update the remaining number of data to be played */
      AudioRemSize -= DMA_MAX(AudioRemSize);   
 80012ba:	4b16      	ldr	r3, [pc, #88]	; (8001314 <Audio_MAL_IRQHandler+0xf0>)
 80012bc:	681a      	ldr	r2, [r3, #0]
 80012be:	4b15      	ldr	r3, [pc, #84]	; (8001314 <Audio_MAL_IRQHandler+0xf0>)
 80012c0:	681b      	ldr	r3, [r3, #0]
 80012c2:	f64f 71ff 	movw	r1, #65535	; 0xffff
 80012c6:	428b      	cmp	r3, r1
 80012c8:	bf28      	it	cs
 80012ca:	460b      	movcs	r3, r1
 80012cc:	1ad3      	subs	r3, r2, r3
 80012ce:	4a11      	ldr	r2, [pc, #68]	; (8001314 <Audio_MAL_IRQHandler+0xf0>)
 80012d0:	6013      	str	r3, [r2, #0]
        /* Enable the I2S DMA Stream*/
      DMA_Cmd(AUDIO_MAL_DMA_STREAM, ENABLE); 
 80012d2:	4b0e      	ldr	r3, [pc, #56]	; (800130c <Audio_MAL_IRQHandler+0xe8>)
 80012d4:	681b      	ldr	r3, [r3, #0]
 80012d6:	2101      	movs	r1, #1
 80012d8:	4618      	mov	r0, r3
 80012da:	f7ff fcc9 	bl	8000c70 <DMA_Cmd>
    /* Clear the Interrupt flag */
    DMA_ClearFlag(AUDIO_MAL_DMA_STREAM, AUDIO_MAL_DMA_FLAG_TE | AUDIO_MAL_DMA_FLAG_FE | \
                                        AUDIO_MAL_DMA_FLAG_DME);
  }  
#endif /* AUDIO_MAL_DMA_IT_TE_EN */
}
 80012de:	e013      	b.n	8001308 <Audio_MAL_IRQHandler+0xe4>
      DMA_Cmd(AUDIO_MAL_DMA_STREAM, DISABLE);   
 80012e0:	4b0a      	ldr	r3, [pc, #40]	; (800130c <Audio_MAL_IRQHandler+0xe8>)
 80012e2:	681b      	ldr	r3, [r3, #0]
 80012e4:	2100      	movs	r1, #0
 80012e6:	4618      	mov	r0, r3
 80012e8:	f7ff fcc2 	bl	8000c70 <DMA_Cmd>
      DMA_ClearFlag(AUDIO_MAL_DMA_STREAM, AUDIO_MAL_DMA_FLAG_TC);       
 80012ec:	4b07      	ldr	r3, [pc, #28]	; (800130c <Audio_MAL_IRQHandler+0xe8>)
 80012ee:	681a      	ldr	r2, [r3, #0]
 80012f0:	4b07      	ldr	r3, [pc, #28]	; (8001310 <Audio_MAL_IRQHandler+0xec>)
 80012f2:	681b      	ldr	r3, [r3, #0]
 80012f4:	4619      	mov	r1, r3
 80012f6:	4610      	mov	r0, r2
 80012f8:	f7ff fd2a 	bl	8000d50 <DMA_ClearFlag>
      EVAL_AUDIO_TransferComplete_CallBack((uint32_t)CurrentPos, 0);       
 80012fc:	4b06      	ldr	r3, [pc, #24]	; (8001318 <Audio_MAL_IRQHandler+0xf4>)
 80012fe:	681b      	ldr	r3, [r3, #0]
 8001300:	2100      	movs	r1, #0
 8001302:	4618      	mov	r0, r3
 8001304:	f000 f884 	bl	8001410 <EVAL_AUDIO_TransferComplete_CallBack>
}
 8001308:	bf00      	nop
 800130a:	bd80      	pop	{r7, pc}
 800130c:	20000018 	.word	0x20000018
 8001310:	2000001c 	.word	0x2000001c
 8001314:	20000010 	.word	0x20000010
 8001318:	200000e4 	.word	0x200000e4
 800131c:	20000124 	.word	0x20000124
 8001320:	0001fffe 	.word	0x0001fffe

08001324 <DMA1_Stream7_IRQHandler>:
  * @brief  This function handles main I2S interrupt. 
  * @param  None
  * @retval 0 if correct communication, else wrong communication
  */
void Audio_MAL_I2S_IRQHandler(void)
{ 
 8001324:	b580      	push	{r7, lr}
 8001326:	af00      	add	r7, sp, #0
  Audio_MAL_IRQHandler();
 8001328:	f7ff ff7c 	bl	8001224 <Audio_MAL_IRQHandler>
}
 800132c:	bf00      	nop
 800132e:	bd80      	pop	{r7, pc}

08001330 <DMA1_Stream0_IRQHandler>:
  * @brief  This function handles main DAC interrupt. 
  * @param  None
  * @retval 0 if correct communication, else wrong communication
  */
void Audio_MAL_DAC_IRQHandler(void)
{ 
 8001330:	b580      	push	{r7, lr}
 8001332:	af00      	add	r7, sp, #0
  Audio_MAL_IRQHandler();
 8001334:	f7ff ff76 	bl	8001224 <Audio_MAL_IRQHandler>
}
 8001338:	bf00      	nop
 800133a:	bd80      	pop	{r7, pc}

0800133c <SPI3_IRQHandler>:
  * @brief  I2S interrupt management
  * @param  None
  * @retval None
  */
void Audio_I2S_IRQHandler(void)
{
 800133c:	b580      	push	{r7, lr}
 800133e:	af00      	add	r7, sp, #0
  /* Check on the I2S TXE flag */  
  if (SPI_I2S_GetFlagStatus(SPI3, SPI_I2S_FLAG_TXE) != RESET)
 8001340:	2102      	movs	r1, #2
 8001342:	480d      	ldr	r0, [pc, #52]	; (8001378 <SPI3_IRQHandler+0x3c>)
 8001344:	f7ff ff51 	bl	80011ea <SPI_I2S_GetFlagStatus>
 8001348:	4603      	mov	r3, r0
 800134a:	2b00      	cmp	r3, #0
 800134c:	d011      	beq.n	8001372 <SPI3_IRQHandler+0x36>
  { 
    if (CurrAudioInterface == AUDIO_INTERFACE_DAC)
 800134e:	4b0b      	ldr	r3, [pc, #44]	; (800137c <SPI3_IRQHandler+0x40>)
 8001350:	681b      	ldr	r3, [r3, #0]
 8001352:	2b02      	cmp	r3, #2
 8001354:	d106      	bne.n	8001364 <SPI3_IRQHandler+0x28>
    {
      /* Wirte data to the DAC interface */
      DAC_SetChannel1Data(DAC_Align_12b_L, EVAL_AUDIO_GetSampleCallBack()); 
 8001356:	f000 f866 	bl	8001426 <EVAL_AUDIO_GetSampleCallBack>
 800135a:	4603      	mov	r3, r0
 800135c:	4619      	mov	r1, r3
 800135e:	2004      	movs	r0, #4
 8001360:	f7ff fc12 	bl	8000b88 <DAC_SetChannel1Data>
    }
    
    /* Send dummy data on I2S to avoid the underrun condition */
    SPI_I2S_SendData(CODEC_I2S, EVAL_AUDIO_GetSampleCallBack()); 
 8001364:	f000 f85f 	bl	8001426 <EVAL_AUDIO_GetSampleCallBack>
 8001368:	4603      	mov	r3, r0
 800136a:	4619      	mov	r1, r3
 800136c:	4802      	ldr	r0, [pc, #8]	; (8001378 <SPI3_IRQHandler+0x3c>)
 800136e:	f7ff ff2d 	bl	80011cc <SPI_I2S_SendData>
  }
}
 8001372:	bf00      	nop
 8001374:	bd80      	pop	{r7, pc}
 8001376:	bf00      	nop
 8001378:	40003c00 	.word	0x40003c00
 800137c:	20000014 	.word	0x20000014

08001380 <main>:
#include "tm_stm32f4_delay.h"
#include "tm_stm32f4_bmp180.h"

int temperature,pressure,altitude;

int main(void) {
 8001380:	b580      	push	{r7, lr}
 8001382:	b084      	sub	sp, #16
 8001384:	af00      	add	r7, sp, #0

	TM_BMP180_t BMP180_Data;

	SystemInit();
 8001386:	f000 f8a9 	bl	80014dc <SystemInit>

	TM_DELAY_Init();
 800138a:	f000 fe0f 	bl	8001fac <TM_DELAY_Init>

    if (TM_BMP180_Init(&BMP180_Data) == TM_BMP180_Result_Ok) {
 800138e:	463b      	mov	r3, r7
 8001390:	4618      	mov	r0, r3
 8001392:	f000 f955 	bl	8001640 <TM_BMP180_Init>
 8001396:	4603      	mov	r3, r0
 8001398:	2b00      	cmp	r3, #0
 800139a:	d000      	beq.n	800139e <main+0x1e>

    } else {

        while (1);
 800139c:	e7fe      	b.n	800139c <main+0x1c>
    }

	while (1) {

        TM_BMP180_StartTemperature(&BMP180_Data);
 800139e:	463b      	mov	r3, r7
 80013a0:	4618      	mov	r0, r3
 80013a2:	f000 fa8d 	bl	80018c0 <TM_BMP180_StartTemperature>

        Delay(BMP180_Data.Delay);
 80013a6:	89bb      	ldrh	r3, [r7, #12]
 80013a8:	4618      	mov	r0, r3
 80013aa:	f000 fdaf 	bl	8001f0c <Delay>

        TM_BMP180_ReadTemperature(&BMP180_Data);
 80013ae:	463b      	mov	r3, r7
 80013b0:	4618      	mov	r0, r3
 80013b2:	f000 faa3 	bl	80018fc <TM_BMP180_ReadTemperature>

        TM_BMP180_StartPressure(&BMP180_Data, TM_BMP180_Oversampling_UltraHighResolution);
 80013b6:	463b      	mov	r3, r7
 80013b8:	2103      	movs	r1, #3
 80013ba:	4618      	mov	r0, r3
 80013bc:	f000 fb16 	bl	80019ec <TM_BMP180_StartPressure>

        Delay(BMP180_Data.Delay);
 80013c0:	89bb      	ldrh	r3, [r7, #12]
 80013c2:	4618      	mov	r0, r3
 80013c4:	f000 fda2 	bl	8001f0c <Delay>

        TM_BMP180_ReadPressure(&BMP180_Data);
 80013c8:	463b      	mov	r3, r7
 80013ca:	4618      	mov	r0, r3
 80013cc:	f000 fb60 	bl	8001a90 <TM_BMP180_ReadPressure>

        temperature = BMP180_Data.Temperature;
 80013d0:	edd7 7a02 	vldr	s15, [r7, #8]
 80013d4:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 80013d8:	ee17 2a90 	vmov	r2, s15
 80013dc:	4b09      	ldr	r3, [pc, #36]	; (8001404 <main+0x84>)
 80013de:	601a      	str	r2, [r3, #0]
        pressure = BMP180_Data.Pressure;
 80013e0:	687b      	ldr	r3, [r7, #4]
 80013e2:	461a      	mov	r2, r3
 80013e4:	4b08      	ldr	r3, [pc, #32]	; (8001408 <main+0x88>)
 80013e6:	601a      	str	r2, [r3, #0]
        altitude = BMP180_Data.Altitude;
 80013e8:	edd7 7a00 	vldr	s15, [r7]
 80013ec:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 80013f0:	ee17 2a90 	vmov	r2, s15
 80013f4:	4b05      	ldr	r3, [pc, #20]	; (800140c <main+0x8c>)
 80013f6:	601a      	str	r2, [r3, #0]

        Delayms(1000);
 80013f8:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 80013fc:	f000 fd9a 	bl	8001f34 <Delayms>
        TM_BMP180_StartTemperature(&BMP180_Data);
 8001400:	e7cd      	b.n	800139e <main+0x1e>
 8001402:	bf00      	nop
 8001404:	20000160 	.word	0x20000160
 8001408:	20000164 	.word	0x20000164
 800140c:	20000168 	.word	0x20000168

08001410 <EVAL_AUDIO_TransferComplete_CallBack>:
	}
}

void EVAL_AUDIO_TransferComplete_CallBack(uint32_t pBuffer, uint32_t Size)
{
 8001410:	b480      	push	{r7}
 8001412:	b083      	sub	sp, #12
 8001414:	af00      	add	r7, sp, #0
 8001416:	6078      	str	r0, [r7, #4]
 8001418:	6039      	str	r1, [r7, #0]
  /* TODO, implement your code here */
  return;
 800141a:	bf00      	nop
}
 800141c:	370c      	adds	r7, #12
 800141e:	46bd      	mov	sp, r7
 8001420:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001424:	4770      	bx	lr

08001426 <EVAL_AUDIO_GetSampleCallBack>:

uint16_t EVAL_AUDIO_GetSampleCallBack(void)
{
 8001426:	b480      	push	{r7}
 8001428:	af00      	add	r7, sp, #0
  /* TODO, implement your code here */
  return -1;
 800142a:	f64f 73ff 	movw	r3, #65535	; 0xffff
}
 800142e:	4618      	mov	r0, r3
 8001430:	46bd      	mov	sp, r7
 8001432:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001436:	4770      	bx	lr

08001438 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack    /* Atollic update: set stack pointer */
 8001438:	f8df d034 	ldr.w	sp, [pc, #52]	; 8001470 <LoopFillZerobss+0x14>

/* Copy the data segment initializers from flash to SRAM */  
  movs  r1, #0
 800143c:	2100      	movs	r1, #0
  b  LoopCopyDataInit
 800143e:	e003      	b.n	8001448 <LoopCopyDataInit>

08001440 <CopyDataInit>:

CopyDataInit:
  ldr  r3, =_sidata
 8001440:	4b0c      	ldr	r3, [pc, #48]	; (8001474 <LoopFillZerobss+0x18>)
  ldr  r3, [r3, r1]
 8001442:	585b      	ldr	r3, [r3, r1]
  str  r3, [r0, r1]
 8001444:	5043      	str	r3, [r0, r1]
  adds  r1, r1, #4
 8001446:	3104      	adds	r1, #4

08001448 <LoopCopyDataInit>:
    
LoopCopyDataInit:
  ldr  r0, =_sdata
 8001448:	480b      	ldr	r0, [pc, #44]	; (8001478 <LoopFillZerobss+0x1c>)
  ldr  r3, =_edata
 800144a:	4b0c      	ldr	r3, [pc, #48]	; (800147c <LoopFillZerobss+0x20>)
  adds  r2, r0, r1
 800144c:	1842      	adds	r2, r0, r1
  cmp  r2, r3
 800144e:	429a      	cmp	r2, r3
  bcc  CopyDataInit
 8001450:	d3f6      	bcc.n	8001440 <CopyDataInit>
  ldr  r2, =_sbss
 8001452:	4a0b      	ldr	r2, [pc, #44]	; (8001480 <LoopFillZerobss+0x24>)
  b  LoopFillZerobss
 8001454:	e002      	b.n	800145c <LoopFillZerobss>

08001456 <FillZerobss>:
/* Zero fill the bss segment. */  
FillZerobss:
  movs  r3, #0
 8001456:	2300      	movs	r3, #0
  str  r3, [r2], #4
 8001458:	f842 3b04 	str.w	r3, [r2], #4

0800145c <LoopFillZerobss>:
    
LoopFillZerobss:
  ldr  r3, = _ebss
 800145c:	4b09      	ldr	r3, [pc, #36]	; (8001484 <LoopFillZerobss+0x28>)
  cmp  r2, r3
 800145e:	429a      	cmp	r2, r3
  bcc  FillZerobss
 8001460:	d3f9      	bcc.n	8001456 <FillZerobss>

/* Call the clock system intitialization function.*/
  bl  SystemInit   
 8001462:	f000 f83b 	bl	80014dc <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 8001466:	f001 f9eb 	bl	8002840 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 800146a:	f7ff ff89 	bl	8001380 <main>
  bx  lr    
 800146e:	4770      	bx	lr
  ldr   sp, =_estack    /* Atollic update: set stack pointer */
 8001470:	20020000 	.word	0x20020000
  ldr  r3, =_sidata
 8001474:	080039c8 	.word	0x080039c8
  ldr  r0, =_sdata
 8001478:	20000000 	.word	0x20000000
  ldr  r3, =_edata
 800147c:	20000098 	.word	0x20000098
  ldr  r2, =_sbss
 8001480:	20000098 	.word	0x20000098
  ldr  r3, = _ebss
 8001484:	200001bc 	.word	0x200001bc

08001488 <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8001488:	e7fe      	b.n	8001488 <ADC_IRQHandler>

0800148a <NMI_Handler>:
  * @brief   This function handles NMI exception.
  * @param  None
  * @retval None
  */
void NMI_Handler(void)
{
 800148a:	b480      	push	{r7}
 800148c:	af00      	add	r7, sp, #0
}
 800148e:	bf00      	nop
 8001490:	46bd      	mov	sp, r7
 8001492:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001496:	4770      	bx	lr

08001498 <HardFault_Handler>:
  * @brief  This function handles Hard Fault exception.
  * @param  None
  * @retval None
  */
void HardFault_Handler(void)
{
 8001498:	b480      	push	{r7}
 800149a:	af00      	add	r7, sp, #0
  /* Go to infinite loop when Hard Fault exception occurs */
  while (1)
 800149c:	e7fe      	b.n	800149c <HardFault_Handler+0x4>

0800149e <MemManage_Handler>:
  * @brief  This function handles Memory Manage exception.
  * @param  None
  * @retval None
  */
void MemManage_Handler(void)
{
 800149e:	b480      	push	{r7}
 80014a0:	af00      	add	r7, sp, #0
  /* Go to infinite loop when Memory Manage exception occurs */
  while (1)
 80014a2:	e7fe      	b.n	80014a2 <MemManage_Handler+0x4>

080014a4 <BusFault_Handler>:
  * @brief  This function handles Bus Fault exception.
  * @param  None
  * @retval None
  */
void BusFault_Handler(void)
{
 80014a4:	b480      	push	{r7}
 80014a6:	af00      	add	r7, sp, #0
  /* Go to infinite loop when Bus Fault exception occurs */
  while (1)
 80014a8:	e7fe      	b.n	80014a8 <BusFault_Handler+0x4>

080014aa <UsageFault_Handler>:
  * @brief  This function handles Usage Fault exception.
  * @param  None
  * @retval None
  */
void UsageFault_Handler(void)
{
 80014aa:	b480      	push	{r7}
 80014ac:	af00      	add	r7, sp, #0
  /* Go to infinite loop when Usage Fault exception occurs */
  while (1)
 80014ae:	e7fe      	b.n	80014ae <UsageFault_Handler+0x4>

080014b0 <SVC_Handler>:
  * @brief  This function handles SVCall exception.
  * @param  None
  * @retval None
  */
void SVC_Handler(void)
{
 80014b0:	b480      	push	{r7}
 80014b2:	af00      	add	r7, sp, #0
}
 80014b4:	bf00      	nop
 80014b6:	46bd      	mov	sp, r7
 80014b8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80014bc:	4770      	bx	lr

080014be <DebugMon_Handler>:
  * @brief  This function handles Debug Monitor exception.
  * @param  None
  * @retval None
  */
void DebugMon_Handler(void)
{
 80014be:	b480      	push	{r7}
 80014c0:	af00      	add	r7, sp, #0
}
 80014c2:	bf00      	nop
 80014c4:	46bd      	mov	sp, r7
 80014c6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80014ca:	4770      	bx	lr

080014cc <PendSV_Handler>:
  * @brief  This function handles PendSVC exception.
  * @param  None
  * @retval None
  */
void PendSV_Handler(void)
{
 80014cc:	b480      	push	{r7}
 80014ce:	af00      	add	r7, sp, #0
}
 80014d0:	bf00      	nop
 80014d2:	46bd      	mov	sp, r7
 80014d4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80014d8:	4770      	bx	lr
	...

080014dc <SystemInit>:
  *         SystemFrequency variable.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 80014dc:	b580      	push	{r7, lr}
 80014de:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
	SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 80014e0:	4a16      	ldr	r2, [pc, #88]	; (800153c <SystemInit+0x60>)
 80014e2:	4b16      	ldr	r3, [pc, #88]	; (800153c <SystemInit+0x60>)
 80014e4:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80014e8:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 80014ec:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88
  #endif

  /* Reset the RCC clock configuration to the default reset state ------------*/
  /* Set HSION bit */
  RCC->CR |= (uint32_t)0x00000001;
 80014f0:	4a13      	ldr	r2, [pc, #76]	; (8001540 <SystemInit+0x64>)
 80014f2:	4b13      	ldr	r3, [pc, #76]	; (8001540 <SystemInit+0x64>)
 80014f4:	681b      	ldr	r3, [r3, #0]
 80014f6:	f043 0301 	orr.w	r3, r3, #1
 80014fa:	6013      	str	r3, [r2, #0]

  /* Reset CFGR register */
  RCC->CFGR = 0x00000000;
 80014fc:	4b10      	ldr	r3, [pc, #64]	; (8001540 <SystemInit+0x64>)
 80014fe:	2200      	movs	r2, #0
 8001500:	609a      	str	r2, [r3, #8]

  /* Reset HSEON, CSSON and PLLON bits */
  RCC->CR &= (uint32_t)0xFEF6FFFF;
 8001502:	4a0f      	ldr	r2, [pc, #60]	; (8001540 <SystemInit+0x64>)
 8001504:	4b0e      	ldr	r3, [pc, #56]	; (8001540 <SystemInit+0x64>)
 8001506:	681b      	ldr	r3, [r3, #0]
 8001508:	f023 7384 	bic.w	r3, r3, #17301504	; 0x1080000
 800150c:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8001510:	6013      	str	r3, [r2, #0]

  /* Reset PLLCFGR register */
  RCC->PLLCFGR = 0x24003010;
 8001512:	4b0b      	ldr	r3, [pc, #44]	; (8001540 <SystemInit+0x64>)
 8001514:	4a0b      	ldr	r2, [pc, #44]	; (8001544 <SystemInit+0x68>)
 8001516:	605a      	str	r2, [r3, #4]

  /* Reset HSEBYP bit */
  RCC->CR &= (uint32_t)0xFFFBFFFF;
 8001518:	4a09      	ldr	r2, [pc, #36]	; (8001540 <SystemInit+0x64>)
 800151a:	4b09      	ldr	r3, [pc, #36]	; (8001540 <SystemInit+0x64>)
 800151c:	681b      	ldr	r3, [r3, #0]
 800151e:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8001522:	6013      	str	r3, [r2, #0]

  /* Disable all interrupts */
  RCC->CIR = 0x00000000;
 8001524:	4b06      	ldr	r3, [pc, #24]	; (8001540 <SystemInit+0x64>)
 8001526:	2200      	movs	r2, #0
 8001528:	60da      	str	r2, [r3, #12]
  SystemInit_ExtMemCtl(); 
#endif /* DATA_IN_ExtSRAM */
         
  /* Configure the System clock source, PLL Multiplier and Divider factors, 
     AHB/APBx prescalers and Flash settings ----------------------------------*/
  SetSysClock();
 800152a:	f000 f80d 	bl	8001548 <SetSysClock>

  /* Configure the Vector Table location add offset address ------------------*/
#ifdef VECT_TAB_SRAM
  SCB->VTOR = SRAM_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#else
  SCB->VTOR = FLASH_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal FLASH */
 800152e:	4b03      	ldr	r3, [pc, #12]	; (800153c <SystemInit+0x60>)
 8001530:	f04f 6200 	mov.w	r2, #134217728	; 0x8000000
 8001534:	609a      	str	r2, [r3, #8]
#endif
}
 8001536:	bf00      	nop
 8001538:	bd80      	pop	{r7, pc}
 800153a:	bf00      	nop
 800153c:	e000ed00 	.word	0xe000ed00
 8001540:	40023800 	.word	0x40023800
 8001544:	24003010 	.word	0x24003010

08001548 <SetSysClock>:
  *         is reset to the default reset state (done in SystemInit() function).   
  * @param  None
  * @retval None
  */
static void SetSysClock(void)
{
 8001548:	b480      	push	{r7}
 800154a:	b083      	sub	sp, #12
 800154c:	af00      	add	r7, sp, #0
/******************************************************************************/
/*            PLL (clocked by HSE) used as System clock source                */
/******************************************************************************/
  __IO uint32_t StartUpCounter = 0, HSEStatus = 0;
 800154e:	2300      	movs	r3, #0
 8001550:	607b      	str	r3, [r7, #4]
 8001552:	2300      	movs	r3, #0
 8001554:	603b      	str	r3, [r7, #0]
  
  /* Enable HSE */
  RCC->CR |= ((uint32_t)RCC_CR_HSEON);
 8001556:	4a36      	ldr	r2, [pc, #216]	; (8001630 <SetSysClock+0xe8>)
 8001558:	4b35      	ldr	r3, [pc, #212]	; (8001630 <SetSysClock+0xe8>)
 800155a:	681b      	ldr	r3, [r3, #0]
 800155c:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8001560:	6013      	str	r3, [r2, #0]
 
  /* Wait till HSE is ready and if Time out is reached exit */
  do
  {
    HSEStatus = RCC->CR & RCC_CR_HSERDY;
 8001562:	4b33      	ldr	r3, [pc, #204]	; (8001630 <SetSysClock+0xe8>)
 8001564:	681b      	ldr	r3, [r3, #0]
 8001566:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800156a:	603b      	str	r3, [r7, #0]
    StartUpCounter++;
 800156c:	687b      	ldr	r3, [r7, #4]
 800156e:	3301      	adds	r3, #1
 8001570:	607b      	str	r3, [r7, #4]
  } while((HSEStatus == 0) && (StartUpCounter != HSE_STARTUP_TIMEOUT));
 8001572:	683b      	ldr	r3, [r7, #0]
 8001574:	2b00      	cmp	r3, #0
 8001576:	d103      	bne.n	8001580 <SetSysClock+0x38>
 8001578:	687b      	ldr	r3, [r7, #4]
 800157a:	f5b3 6fa0 	cmp.w	r3, #1280	; 0x500
 800157e:	d1f0      	bne.n	8001562 <SetSysClock+0x1a>

  if ((RCC->CR & RCC_CR_HSERDY) != RESET)
 8001580:	4b2b      	ldr	r3, [pc, #172]	; (8001630 <SetSysClock+0xe8>)
 8001582:	681b      	ldr	r3, [r3, #0]
 8001584:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001588:	2b00      	cmp	r3, #0
 800158a:	d002      	beq.n	8001592 <SetSysClock+0x4a>
  {
    HSEStatus = (uint32_t)0x01;
 800158c:	2301      	movs	r3, #1
 800158e:	603b      	str	r3, [r7, #0]
 8001590:	e001      	b.n	8001596 <SetSysClock+0x4e>
  }
  else
  {
    HSEStatus = (uint32_t)0x00;
 8001592:	2300      	movs	r3, #0
 8001594:	603b      	str	r3, [r7, #0]
  }

  if (HSEStatus == (uint32_t)0x01)
 8001596:	683b      	ldr	r3, [r7, #0]
 8001598:	2b01      	cmp	r3, #1
 800159a:	d142      	bne.n	8001622 <SetSysClock+0xda>
  {
    /* Enable high performance mode, System frequency up to 168 MHz */
    RCC->APB1ENR |= RCC_APB1ENR_PWREN;
 800159c:	4a24      	ldr	r2, [pc, #144]	; (8001630 <SetSysClock+0xe8>)
 800159e:	4b24      	ldr	r3, [pc, #144]	; (8001630 <SetSysClock+0xe8>)
 80015a0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80015a2:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80015a6:	6413      	str	r3, [r2, #64]	; 0x40
    PWR->CR |= PWR_CR_PMODE;  
 80015a8:	4a22      	ldr	r2, [pc, #136]	; (8001634 <SetSysClock+0xec>)
 80015aa:	4b22      	ldr	r3, [pc, #136]	; (8001634 <SetSysClock+0xec>)
 80015ac:	681b      	ldr	r3, [r3, #0]
 80015ae:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 80015b2:	6013      	str	r3, [r2, #0]

    /* HCLK = SYSCLK / 1*/
    RCC->CFGR |= RCC_CFGR_HPRE_DIV1;
 80015b4:	4a1e      	ldr	r2, [pc, #120]	; (8001630 <SetSysClock+0xe8>)
 80015b6:	4b1e      	ldr	r3, [pc, #120]	; (8001630 <SetSysClock+0xe8>)
 80015b8:	689b      	ldr	r3, [r3, #8]
 80015ba:	6093      	str	r3, [r2, #8]
      
    /* PCLK2 = HCLK / 2*/
    RCC->CFGR |= RCC_CFGR_PPRE2_DIV2;
 80015bc:	4a1c      	ldr	r2, [pc, #112]	; (8001630 <SetSysClock+0xe8>)
 80015be:	4b1c      	ldr	r3, [pc, #112]	; (8001630 <SetSysClock+0xe8>)
 80015c0:	689b      	ldr	r3, [r3, #8]
 80015c2:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 80015c6:	6093      	str	r3, [r2, #8]
    
    /* PCLK1 = HCLK / 4*/
    RCC->CFGR |= RCC_CFGR_PPRE1_DIV4;
 80015c8:	4a19      	ldr	r2, [pc, #100]	; (8001630 <SetSysClock+0xe8>)
 80015ca:	4b19      	ldr	r3, [pc, #100]	; (8001630 <SetSysClock+0xe8>)
 80015cc:	689b      	ldr	r3, [r3, #8]
 80015ce:	f443 53a0 	orr.w	r3, r3, #5120	; 0x1400
 80015d2:	6093      	str	r3, [r2, #8]

    /* Configure the main PLL */
    RCC->PLLCFGR = PLL_M | (PLL_N << 6) | (((PLL_P >> 1) -1) << 16) |
 80015d4:	4b16      	ldr	r3, [pc, #88]	; (8001630 <SetSysClock+0xe8>)
 80015d6:	4a18      	ldr	r2, [pc, #96]	; (8001638 <SetSysClock+0xf0>)
 80015d8:	605a      	str	r2, [r3, #4]
                   (RCC_PLLCFGR_PLLSRC_HSE) | (PLL_Q << 24);

    /* Enable the main PLL */
    RCC->CR |= RCC_CR_PLLON;
 80015da:	4a15      	ldr	r2, [pc, #84]	; (8001630 <SetSysClock+0xe8>)
 80015dc:	4b14      	ldr	r3, [pc, #80]	; (8001630 <SetSysClock+0xe8>)
 80015de:	681b      	ldr	r3, [r3, #0]
 80015e0:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 80015e4:	6013      	str	r3, [r2, #0]

    /* Wait till the main PLL is ready */
    while((RCC->CR & RCC_CR_PLLRDY) == 0)
 80015e6:	bf00      	nop
 80015e8:	4b11      	ldr	r3, [pc, #68]	; (8001630 <SetSysClock+0xe8>)
 80015ea:	681b      	ldr	r3, [r3, #0]
 80015ec:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80015f0:	2b00      	cmp	r3, #0
 80015f2:	d0f9      	beq.n	80015e8 <SetSysClock+0xa0>
    {
    }
   
    /* Configure Flash prefetch, Instruction cache, Data cache and wait state */
    FLASH->ACR = FLASH_ACR_ICEN |FLASH_ACR_DCEN |FLASH_ACR_LATENCY_5WS;
 80015f4:	4b11      	ldr	r3, [pc, #68]	; (800163c <SetSysClock+0xf4>)
 80015f6:	f240 6205 	movw	r2, #1541	; 0x605
 80015fa:	601a      	str	r2, [r3, #0]

    /* Select the main PLL as system clock source */
    RCC->CFGR &= (uint32_t)((uint32_t)~(RCC_CFGR_SW));
 80015fc:	4a0c      	ldr	r2, [pc, #48]	; (8001630 <SetSysClock+0xe8>)
 80015fe:	4b0c      	ldr	r3, [pc, #48]	; (8001630 <SetSysClock+0xe8>)
 8001600:	689b      	ldr	r3, [r3, #8]
 8001602:	f023 0303 	bic.w	r3, r3, #3
 8001606:	6093      	str	r3, [r2, #8]
    RCC->CFGR |= RCC_CFGR_SW_PLL;
 8001608:	4a09      	ldr	r2, [pc, #36]	; (8001630 <SetSysClock+0xe8>)
 800160a:	4b09      	ldr	r3, [pc, #36]	; (8001630 <SetSysClock+0xe8>)
 800160c:	689b      	ldr	r3, [r3, #8]
 800160e:	f043 0302 	orr.w	r3, r3, #2
 8001612:	6093      	str	r3, [r2, #8]

    /* Wait till the main PLL is used as system clock source */
    while ((RCC->CFGR & (uint32_t)RCC_CFGR_SWS ) != RCC_CFGR_SWS_PLL);
 8001614:	bf00      	nop
 8001616:	4b06      	ldr	r3, [pc, #24]	; (8001630 <SetSysClock+0xe8>)
 8001618:	689b      	ldr	r3, [r3, #8]
 800161a:	f003 030c 	and.w	r3, r3, #12
 800161e:	2b08      	cmp	r3, #8
 8001620:	d1f9      	bne.n	8001616 <SetSysClock+0xce>
  else
  { /* If HSE fails to start-up, the application will have wrong clock
         configuration. User can add here some code to deal with this error */
  }

}
 8001622:	bf00      	nop
 8001624:	370c      	adds	r7, #12
 8001626:	46bd      	mov	sp, r7
 8001628:	f85d 7b04 	ldr.w	r7, [sp], #4
 800162c:	4770      	bx	lr
 800162e:	bf00      	nop
 8001630:	40023800 	.word	0x40023800
 8001634:	40007000 	.word	0x40007000
 8001638:	07405408 	.word	0x07405408
 800163c:	40023c00 	.word	0x40023c00

08001640 <TM_BMP180_Init>:
/* OK */
int32_t X1, X2, X3, B3, B5, B6, T, p;
uint32_t B4, B7, UP;
uint8_t lib_initialized = 0;

TM_BMP180_Result_t TM_BMP180_Init(TM_BMP180_t* BMP180_Data) {
 8001640:	b580      	push	{r7, lr}
 8001642:	b08a      	sub	sp, #40	; 0x28
 8001644:	af02      	add	r7, sp, #8
 8001646:	6078      	str	r0, [r7, #4]
	uint8_t data[22];
	uint8_t i = 0;
 8001648:	2300      	movs	r3, #0
 800164a:	77fb      	strb	r3, [r7, #31]
	
	/* Initialize I2C */
	TM_I2C_Init(BMP180_I2C, BMP180_I2C_PINSPACK, BMP180_I2C_SPEED);
 800164c:	4a8e      	ldr	r2, [pc, #568]	; (8001888 <TM_BMP180_Init+0x248>)
 800164e:	2100      	movs	r1, #0
 8001650:	488e      	ldr	r0, [pc, #568]	; (800188c <TM_BMP180_Init+0x24c>)
 8001652:	f000 fdd5 	bl	8002200 <TM_I2C_Init>
	/* Test if device is connected */
	if (!TM_I2C_IsDeviceConnected(BMP180_I2C, BMP180_I2C_ADDRESS)) {
 8001656:	21ee      	movs	r1, #238	; 0xee
 8001658:	488c      	ldr	r0, [pc, #560]	; (800188c <TM_BMP180_Init+0x24c>)
 800165a:	f001 f81b 	bl	8002694 <TM_I2C_IsDeviceConnected>
 800165e:	4603      	mov	r3, r0
 8001660:	2b00      	cmp	r3, #0
 8001662:	d101      	bne.n	8001668 <TM_BMP180_Init+0x28>
		/* Device is not connected */
		return TM_BMP180_Result_DeviceNotConnected;
 8001664:	2301      	movs	r3, #1
 8001666:	e10a      	b.n	800187e <TM_BMP180_Init+0x23e>
	}
	
	/* Get default values from EEPROM */
	/* EEPROM starts at 0xAA address, read 22 bytes */
	TM_I2C_ReadMulti(BMP180_I2C, BMP180_I2C_ADDRESS, BMP180_REGISTER_EEPROM, data, 22);
 8001668:	f107 0208 	add.w	r2, r7, #8
 800166c:	2316      	movs	r3, #22
 800166e:	9300      	str	r3, [sp, #0]
 8001670:	4613      	mov	r3, r2
 8001672:	22aa      	movs	r2, #170	; 0xaa
 8001674:	21ee      	movs	r1, #238	; 0xee
 8001676:	4885      	ldr	r0, [pc, #532]	; (800188c <TM_BMP180_Init+0x24c>)
 8001678:	f000 fe5e 	bl	8002338 <TM_I2C_ReadMulti>
	
	/* Set configuration values */
	AC1 = (int16_t)(data[i] << 8 | data[i + 1]); i += 2;
 800167c:	7ffb      	ldrb	r3, [r7, #31]
 800167e:	f107 0220 	add.w	r2, r7, #32
 8001682:	4413      	add	r3, r2
 8001684:	f813 3c18 	ldrb.w	r3, [r3, #-24]
 8001688:	021b      	lsls	r3, r3, #8
 800168a:	b21a      	sxth	r2, r3
 800168c:	7ffb      	ldrb	r3, [r7, #31]
 800168e:	3301      	adds	r3, #1
 8001690:	f107 0120 	add.w	r1, r7, #32
 8001694:	440b      	add	r3, r1
 8001696:	f813 3c18 	ldrb.w	r3, [r3, #-24]
 800169a:	b21b      	sxth	r3, r3
 800169c:	4313      	orrs	r3, r2
 800169e:	b21a      	sxth	r2, r3
 80016a0:	4b7b      	ldr	r3, [pc, #492]	; (8001890 <TM_BMP180_Init+0x250>)
 80016a2:	801a      	strh	r2, [r3, #0]
 80016a4:	7ffb      	ldrb	r3, [r7, #31]
 80016a6:	3302      	adds	r3, #2
 80016a8:	77fb      	strb	r3, [r7, #31]
	AC2 = (int16_t)(data[i] << 8 | data[i + 1]); i += 2;
 80016aa:	7ffb      	ldrb	r3, [r7, #31]
 80016ac:	f107 0220 	add.w	r2, r7, #32
 80016b0:	4413      	add	r3, r2
 80016b2:	f813 3c18 	ldrb.w	r3, [r3, #-24]
 80016b6:	021b      	lsls	r3, r3, #8
 80016b8:	b21a      	sxth	r2, r3
 80016ba:	7ffb      	ldrb	r3, [r7, #31]
 80016bc:	3301      	adds	r3, #1
 80016be:	f107 0120 	add.w	r1, r7, #32
 80016c2:	440b      	add	r3, r1
 80016c4:	f813 3c18 	ldrb.w	r3, [r3, #-24]
 80016c8:	b21b      	sxth	r3, r3
 80016ca:	4313      	orrs	r3, r2
 80016cc:	b21a      	sxth	r2, r3
 80016ce:	4b71      	ldr	r3, [pc, #452]	; (8001894 <TM_BMP180_Init+0x254>)
 80016d0:	801a      	strh	r2, [r3, #0]
 80016d2:	7ffb      	ldrb	r3, [r7, #31]
 80016d4:	3302      	adds	r3, #2
 80016d6:	77fb      	strb	r3, [r7, #31]
	AC3 = (int16_t)(data[i] << 8 | data[i + 1]); i += 2;
 80016d8:	7ffb      	ldrb	r3, [r7, #31]
 80016da:	f107 0220 	add.w	r2, r7, #32
 80016de:	4413      	add	r3, r2
 80016e0:	f813 3c18 	ldrb.w	r3, [r3, #-24]
 80016e4:	021b      	lsls	r3, r3, #8
 80016e6:	b21a      	sxth	r2, r3
 80016e8:	7ffb      	ldrb	r3, [r7, #31]
 80016ea:	3301      	adds	r3, #1
 80016ec:	f107 0120 	add.w	r1, r7, #32
 80016f0:	440b      	add	r3, r1
 80016f2:	f813 3c18 	ldrb.w	r3, [r3, #-24]
 80016f6:	b21b      	sxth	r3, r3
 80016f8:	4313      	orrs	r3, r2
 80016fa:	b21a      	sxth	r2, r3
 80016fc:	4b66      	ldr	r3, [pc, #408]	; (8001898 <TM_BMP180_Init+0x258>)
 80016fe:	801a      	strh	r2, [r3, #0]
 8001700:	7ffb      	ldrb	r3, [r7, #31]
 8001702:	3302      	adds	r3, #2
 8001704:	77fb      	strb	r3, [r7, #31]
	AC4 = (uint16_t)(data[i] << 8 | data[i + 1]); i += 2;
 8001706:	7ffb      	ldrb	r3, [r7, #31]
 8001708:	f107 0220 	add.w	r2, r7, #32
 800170c:	4413      	add	r3, r2
 800170e:	f813 3c18 	ldrb.w	r3, [r3, #-24]
 8001712:	021b      	lsls	r3, r3, #8
 8001714:	b21a      	sxth	r2, r3
 8001716:	7ffb      	ldrb	r3, [r7, #31]
 8001718:	3301      	adds	r3, #1
 800171a:	f107 0120 	add.w	r1, r7, #32
 800171e:	440b      	add	r3, r1
 8001720:	f813 3c18 	ldrb.w	r3, [r3, #-24]
 8001724:	b21b      	sxth	r3, r3
 8001726:	4313      	orrs	r3, r2
 8001728:	b21b      	sxth	r3, r3
 800172a:	b29a      	uxth	r2, r3
 800172c:	4b5b      	ldr	r3, [pc, #364]	; (800189c <TM_BMP180_Init+0x25c>)
 800172e:	801a      	strh	r2, [r3, #0]
 8001730:	7ffb      	ldrb	r3, [r7, #31]
 8001732:	3302      	adds	r3, #2
 8001734:	77fb      	strb	r3, [r7, #31]
	AC5 = (uint16_t)(data[i] << 8 | data[i + 1]); i += 2;
 8001736:	7ffb      	ldrb	r3, [r7, #31]
 8001738:	f107 0220 	add.w	r2, r7, #32
 800173c:	4413      	add	r3, r2
 800173e:	f813 3c18 	ldrb.w	r3, [r3, #-24]
 8001742:	021b      	lsls	r3, r3, #8
 8001744:	b21a      	sxth	r2, r3
 8001746:	7ffb      	ldrb	r3, [r7, #31]
 8001748:	3301      	adds	r3, #1
 800174a:	f107 0120 	add.w	r1, r7, #32
 800174e:	440b      	add	r3, r1
 8001750:	f813 3c18 	ldrb.w	r3, [r3, #-24]
 8001754:	b21b      	sxth	r3, r3
 8001756:	4313      	orrs	r3, r2
 8001758:	b21b      	sxth	r3, r3
 800175a:	b29a      	uxth	r2, r3
 800175c:	4b50      	ldr	r3, [pc, #320]	; (80018a0 <TM_BMP180_Init+0x260>)
 800175e:	801a      	strh	r2, [r3, #0]
 8001760:	7ffb      	ldrb	r3, [r7, #31]
 8001762:	3302      	adds	r3, #2
 8001764:	77fb      	strb	r3, [r7, #31]
	AC6 = (uint16_t)(data[i] << 8 | data[i + 1]); i += 2;
 8001766:	7ffb      	ldrb	r3, [r7, #31]
 8001768:	f107 0220 	add.w	r2, r7, #32
 800176c:	4413      	add	r3, r2
 800176e:	f813 3c18 	ldrb.w	r3, [r3, #-24]
 8001772:	021b      	lsls	r3, r3, #8
 8001774:	b21a      	sxth	r2, r3
 8001776:	7ffb      	ldrb	r3, [r7, #31]
 8001778:	3301      	adds	r3, #1
 800177a:	f107 0120 	add.w	r1, r7, #32
 800177e:	440b      	add	r3, r1
 8001780:	f813 3c18 	ldrb.w	r3, [r3, #-24]
 8001784:	b21b      	sxth	r3, r3
 8001786:	4313      	orrs	r3, r2
 8001788:	b21b      	sxth	r3, r3
 800178a:	b29a      	uxth	r2, r3
 800178c:	4b45      	ldr	r3, [pc, #276]	; (80018a4 <TM_BMP180_Init+0x264>)
 800178e:	801a      	strh	r2, [r3, #0]
 8001790:	7ffb      	ldrb	r3, [r7, #31]
 8001792:	3302      	adds	r3, #2
 8001794:	77fb      	strb	r3, [r7, #31]
	B1 = (int16_t)(data[i] << 8 | data[i + 1]); i += 2;
 8001796:	7ffb      	ldrb	r3, [r7, #31]
 8001798:	f107 0220 	add.w	r2, r7, #32
 800179c:	4413      	add	r3, r2
 800179e:	f813 3c18 	ldrb.w	r3, [r3, #-24]
 80017a2:	021b      	lsls	r3, r3, #8
 80017a4:	b21a      	sxth	r2, r3
 80017a6:	7ffb      	ldrb	r3, [r7, #31]
 80017a8:	3301      	adds	r3, #1
 80017aa:	f107 0120 	add.w	r1, r7, #32
 80017ae:	440b      	add	r3, r1
 80017b0:	f813 3c18 	ldrb.w	r3, [r3, #-24]
 80017b4:	b21b      	sxth	r3, r3
 80017b6:	4313      	orrs	r3, r2
 80017b8:	b21a      	sxth	r2, r3
 80017ba:	4b3b      	ldr	r3, [pc, #236]	; (80018a8 <TM_BMP180_Init+0x268>)
 80017bc:	801a      	strh	r2, [r3, #0]
 80017be:	7ffb      	ldrb	r3, [r7, #31]
 80017c0:	3302      	adds	r3, #2
 80017c2:	77fb      	strb	r3, [r7, #31]
	B2 = (int16_t)(data[i] << 8 | data[i + 1]); i += 2;
 80017c4:	7ffb      	ldrb	r3, [r7, #31]
 80017c6:	f107 0220 	add.w	r2, r7, #32
 80017ca:	4413      	add	r3, r2
 80017cc:	f813 3c18 	ldrb.w	r3, [r3, #-24]
 80017d0:	021b      	lsls	r3, r3, #8
 80017d2:	b21a      	sxth	r2, r3
 80017d4:	7ffb      	ldrb	r3, [r7, #31]
 80017d6:	3301      	adds	r3, #1
 80017d8:	f107 0120 	add.w	r1, r7, #32
 80017dc:	440b      	add	r3, r1
 80017de:	f813 3c18 	ldrb.w	r3, [r3, #-24]
 80017e2:	b21b      	sxth	r3, r3
 80017e4:	4313      	orrs	r3, r2
 80017e6:	b21a      	sxth	r2, r3
 80017e8:	4b30      	ldr	r3, [pc, #192]	; (80018ac <TM_BMP180_Init+0x26c>)
 80017ea:	801a      	strh	r2, [r3, #0]
 80017ec:	7ffb      	ldrb	r3, [r7, #31]
 80017ee:	3302      	adds	r3, #2
 80017f0:	77fb      	strb	r3, [r7, #31]
	MB = (int16_t)(data[i] << 8 | data[i + 1]); i += 2;
 80017f2:	7ffb      	ldrb	r3, [r7, #31]
 80017f4:	f107 0220 	add.w	r2, r7, #32
 80017f8:	4413      	add	r3, r2
 80017fa:	f813 3c18 	ldrb.w	r3, [r3, #-24]
 80017fe:	021b      	lsls	r3, r3, #8
 8001800:	b21a      	sxth	r2, r3
 8001802:	7ffb      	ldrb	r3, [r7, #31]
 8001804:	3301      	adds	r3, #1
 8001806:	f107 0120 	add.w	r1, r7, #32
 800180a:	440b      	add	r3, r1
 800180c:	f813 3c18 	ldrb.w	r3, [r3, #-24]
 8001810:	b21b      	sxth	r3, r3
 8001812:	4313      	orrs	r3, r2
 8001814:	b21a      	sxth	r2, r3
 8001816:	4b26      	ldr	r3, [pc, #152]	; (80018b0 <TM_BMP180_Init+0x270>)
 8001818:	801a      	strh	r2, [r3, #0]
 800181a:	7ffb      	ldrb	r3, [r7, #31]
 800181c:	3302      	adds	r3, #2
 800181e:	77fb      	strb	r3, [r7, #31]
	MC = (int16_t)(data[i] << 8 | data[i + 1]); i += 2;
 8001820:	7ffb      	ldrb	r3, [r7, #31]
 8001822:	f107 0220 	add.w	r2, r7, #32
 8001826:	4413      	add	r3, r2
 8001828:	f813 3c18 	ldrb.w	r3, [r3, #-24]
 800182c:	021b      	lsls	r3, r3, #8
 800182e:	b21a      	sxth	r2, r3
 8001830:	7ffb      	ldrb	r3, [r7, #31]
 8001832:	3301      	adds	r3, #1
 8001834:	f107 0120 	add.w	r1, r7, #32
 8001838:	440b      	add	r3, r1
 800183a:	f813 3c18 	ldrb.w	r3, [r3, #-24]
 800183e:	b21b      	sxth	r3, r3
 8001840:	4313      	orrs	r3, r2
 8001842:	b21a      	sxth	r2, r3
 8001844:	4b1b      	ldr	r3, [pc, #108]	; (80018b4 <TM_BMP180_Init+0x274>)
 8001846:	801a      	strh	r2, [r3, #0]
 8001848:	7ffb      	ldrb	r3, [r7, #31]
 800184a:	3302      	adds	r3, #2
 800184c:	77fb      	strb	r3, [r7, #31]
	MD = (int16_t)(data[i] << 8 | data[i + 1]);
 800184e:	7ffb      	ldrb	r3, [r7, #31]
 8001850:	f107 0220 	add.w	r2, r7, #32
 8001854:	4413      	add	r3, r2
 8001856:	f813 3c18 	ldrb.w	r3, [r3, #-24]
 800185a:	021b      	lsls	r3, r3, #8
 800185c:	b21a      	sxth	r2, r3
 800185e:	7ffb      	ldrb	r3, [r7, #31]
 8001860:	3301      	adds	r3, #1
 8001862:	f107 0120 	add.w	r1, r7, #32
 8001866:	440b      	add	r3, r1
 8001868:	f813 3c18 	ldrb.w	r3, [r3, #-24]
 800186c:	b21b      	sxth	r3, r3
 800186e:	4313      	orrs	r3, r2
 8001870:	b21a      	sxth	r2, r3
 8001872:	4b11      	ldr	r3, [pc, #68]	; (80018b8 <TM_BMP180_Init+0x278>)
 8001874:	801a      	strh	r2, [r3, #0]
	
	/* Initialized OK */
	lib_initialized = 1;
 8001876:	4b11      	ldr	r3, [pc, #68]	; (80018bc <TM_BMP180_Init+0x27c>)
 8001878:	2201      	movs	r2, #1
 800187a:	701a      	strb	r2, [r3, #0]
	
	/* Return OK */
	return TM_BMP180_Result_Ok;
 800187c:	2300      	movs	r3, #0
}
 800187e:	4618      	mov	r0, r3
 8001880:	3720      	adds	r7, #32
 8001882:	46bd      	mov	sp, r7
 8001884:	bd80      	pop	{r7, pc}
 8001886:	bf00      	nop
 8001888:	000186a0 	.word	0x000186a0
 800188c:	40005400 	.word	0x40005400
 8001890:	20000172 	.word	0x20000172
 8001894:	20000198 	.word	0x20000198
 8001898:	2000019a 	.word	0x2000019a
 800189c:	20000190 	.word	0x20000190
 80018a0:	20000184 	.word	0x20000184
 80018a4:	20000174 	.word	0x20000174
 80018a8:	200001ac 	.word	0x200001ac
 80018ac:	2000019c 	.word	0x2000019c
 80018b0:	20000192 	.word	0x20000192
 80018b4:	200001b4 	.word	0x200001b4
 80018b8:	20000170 	.word	0x20000170
 80018bc:	200000b4 	.word	0x200000b4

080018c0 <TM_BMP180_StartTemperature>:

TM_BMP180_Result_t TM_BMP180_StartTemperature(TM_BMP180_t* BMP180_Data) {
 80018c0:	b580      	push	{r7, lr}
 80018c2:	b082      	sub	sp, #8
 80018c4:	af00      	add	r7, sp, #0
 80018c6:	6078      	str	r0, [r7, #4]
	/* Check for library initialization */
	if (!lib_initialized) {
 80018c8:	4b0a      	ldr	r3, [pc, #40]	; (80018f4 <TM_BMP180_StartTemperature+0x34>)
 80018ca:	781b      	ldrb	r3, [r3, #0]
 80018cc:	2b00      	cmp	r3, #0
 80018ce:	d101      	bne.n	80018d4 <TM_BMP180_StartTemperature+0x14>
		return TM_BMP180_Result_LibraryNotInitialized;
 80018d0:	2302      	movs	r3, #2
 80018d2:	e00a      	b.n	80018ea <TM_BMP180_StartTemperature+0x2a>
	}
	/* Send to device */
	TM_I2C_Write(BMP180_I2C, BMP180_I2C_ADDRESS, BMP180_REGISTER_CONTROL, BMP180_COMMAND_TEMPERATURE);
 80018d4:	232e      	movs	r3, #46	; 0x2e
 80018d6:	22f4      	movs	r2, #244	; 0xf4
 80018d8:	21ee      	movs	r1, #238	; 0xee
 80018da:	4807      	ldr	r0, [pc, #28]	; (80018f8 <TM_BMP180_StartTemperature+0x38>)
 80018dc:	f000 fd6e 	bl	80023bc <TM_I2C_Write>
	/* Set minimum delay */
	BMP180_Data->Delay = BMP180_TEMPERATURE_DELAY;
 80018e0:	687b      	ldr	r3, [r7, #4]
 80018e2:	f241 1294 	movw	r2, #4500	; 0x1194
 80018e6:	819a      	strh	r2, [r3, #12]
	/* Return OK */
	return TM_BMP180_Result_Ok;
 80018e8:	2300      	movs	r3, #0
}
 80018ea:	4618      	mov	r0, r3
 80018ec:	3708      	adds	r7, #8
 80018ee:	46bd      	mov	sp, r7
 80018f0:	bd80      	pop	{r7, pc}
 80018f2:	bf00      	nop
 80018f4:	200000b4 	.word	0x200000b4
 80018f8:	40005400 	.word	0x40005400

080018fc <TM_BMP180_ReadTemperature>:

TM_BMP180_Result_t TM_BMP180_ReadTemperature(TM_BMP180_t* BMP180_Data) {
 80018fc:	b580      	push	{r7, lr}
 80018fe:	b086      	sub	sp, #24
 8001900:	af02      	add	r7, sp, #8
 8001902:	6078      	str	r0, [r7, #4]
	uint8_t data[2];
	
	/* Check for library initialization */
	if (!lib_initialized) {
 8001904:	4b2d      	ldr	r3, [pc, #180]	; (80019bc <TM_BMP180_ReadTemperature+0xc0>)
 8001906:	781b      	ldrb	r3, [r3, #0]
 8001908:	2b00      	cmp	r3, #0
 800190a:	d101      	bne.n	8001910 <TM_BMP180_ReadTemperature+0x14>
		return TM_BMP180_Result_LibraryNotInitialized;
 800190c:	2302      	movs	r3, #2
 800190e:	e050      	b.n	80019b2 <TM_BMP180_ReadTemperature+0xb6>
	}
	
	/* Read multi bytes from I2C */
	TM_I2C_ReadMulti(BMP180_I2C, BMP180_I2C_ADDRESS, BMP180_REGISTER_RESULT, data, 2);
 8001910:	f107 020c 	add.w	r2, r7, #12
 8001914:	2302      	movs	r3, #2
 8001916:	9300      	str	r3, [sp, #0]
 8001918:	4613      	mov	r3, r2
 800191a:	22f6      	movs	r2, #246	; 0xf6
 800191c:	21ee      	movs	r1, #238	; 0xee
 800191e:	4828      	ldr	r0, [pc, #160]	; (80019c0 <TM_BMP180_ReadTemperature+0xc4>)
 8001920:	f000 fd0a 	bl	8002338 <TM_I2C_ReadMulti>
	
	/* Get uncompensated temperature */
	UT = data[0] << 8 | data[1];
 8001924:	7b3b      	ldrb	r3, [r7, #12]
 8001926:	021b      	lsls	r3, r3, #8
 8001928:	b21a      	sxth	r2, r3
 800192a:	7b7b      	ldrb	r3, [r7, #13]
 800192c:	b21b      	sxth	r3, r3
 800192e:	4313      	orrs	r3, r2
 8001930:	b21b      	sxth	r3, r3
 8001932:	b29a      	uxth	r2, r3
 8001934:	4b23      	ldr	r3, [pc, #140]	; (80019c4 <TM_BMP180_ReadTemperature+0xc8>)
 8001936:	801a      	strh	r2, [r3, #0]
	
	/* Calculate true temperature */
	X1 = (UT - AC6) * AC5 * BMP180_1_32768;
 8001938:	4b22      	ldr	r3, [pc, #136]	; (80019c4 <TM_BMP180_ReadTemperature+0xc8>)
 800193a:	881b      	ldrh	r3, [r3, #0]
 800193c:	461a      	mov	r2, r3
 800193e:	4b22      	ldr	r3, [pc, #136]	; (80019c8 <TM_BMP180_ReadTemperature+0xcc>)
 8001940:	881b      	ldrh	r3, [r3, #0]
 8001942:	1ad3      	subs	r3, r2, r3
 8001944:	4a21      	ldr	r2, [pc, #132]	; (80019cc <TM_BMP180_ReadTemperature+0xd0>)
 8001946:	8812      	ldrh	r2, [r2, #0]
 8001948:	fb02 f303 	mul.w	r3, r2, r3
 800194c:	ee07 3a90 	vmov	s15, r3
 8001950:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8001954:	ed9f 7a1e 	vldr	s14, [pc, #120]	; 80019d0 <TM_BMP180_ReadTemperature+0xd4>
 8001958:	ee67 7a87 	vmul.f32	s15, s15, s14
 800195c:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8001960:	ee17 2a90 	vmov	r2, s15
 8001964:	4b1b      	ldr	r3, [pc, #108]	; (80019d4 <TM_BMP180_ReadTemperature+0xd8>)
 8001966:	601a      	str	r2, [r3, #0]
	X2 = MC * 2048 / (X1 + MD);
 8001968:	4b1b      	ldr	r3, [pc, #108]	; (80019d8 <TM_BMP180_ReadTemperature+0xdc>)
 800196a:	f9b3 3000 	ldrsh.w	r3, [r3]
 800196e:	02da      	lsls	r2, r3, #11
 8001970:	4b1a      	ldr	r3, [pc, #104]	; (80019dc <TM_BMP180_ReadTemperature+0xe0>)
 8001972:	f9b3 3000 	ldrsh.w	r3, [r3]
 8001976:	4619      	mov	r1, r3
 8001978:	4b16      	ldr	r3, [pc, #88]	; (80019d4 <TM_BMP180_ReadTemperature+0xd8>)
 800197a:	681b      	ldr	r3, [r3, #0]
 800197c:	440b      	add	r3, r1
 800197e:	fb92 f3f3 	sdiv	r3, r2, r3
 8001982:	4a17      	ldr	r2, [pc, #92]	; (80019e0 <TM_BMP180_ReadTemperature+0xe4>)
 8001984:	6013      	str	r3, [r2, #0]
	B5 = X1 + X2;
 8001986:	4b13      	ldr	r3, [pc, #76]	; (80019d4 <TM_BMP180_ReadTemperature+0xd8>)
 8001988:	681a      	ldr	r2, [r3, #0]
 800198a:	4b15      	ldr	r3, [pc, #84]	; (80019e0 <TM_BMP180_ReadTemperature+0xe4>)
 800198c:	681b      	ldr	r3, [r3, #0]
 800198e:	4413      	add	r3, r2
 8001990:	4a14      	ldr	r2, [pc, #80]	; (80019e4 <TM_BMP180_ReadTemperature+0xe8>)
 8001992:	6013      	str	r3, [r2, #0]
	
	/* Get temperature in degrees */
	BMP180_Data->Temperature = (B5 + 8) / ((float)160);
 8001994:	4b13      	ldr	r3, [pc, #76]	; (80019e4 <TM_BMP180_ReadTemperature+0xe8>)
 8001996:	681b      	ldr	r3, [r3, #0]
 8001998:	3308      	adds	r3, #8
 800199a:	ee07 3a90 	vmov	s15, r3
 800199e:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 80019a2:	eddf 6a11 	vldr	s13, [pc, #68]	; 80019e8 <TM_BMP180_ReadTemperature+0xec>
 80019a6:	eec7 7a26 	vdiv.f32	s15, s14, s13
 80019aa:	687b      	ldr	r3, [r7, #4]
 80019ac:	edc3 7a02 	vstr	s15, [r3, #8]
	
	/* Return OK */
	return TM_BMP180_Result_Ok;
 80019b0:	2300      	movs	r3, #0
}
 80019b2:	4618      	mov	r0, r3
 80019b4:	3710      	adds	r7, #16
 80019b6:	46bd      	mov	sp, r7
 80019b8:	bd80      	pop	{r7, pc}
 80019ba:	bf00      	nop
 80019bc:	200000b4 	.word	0x200000b4
 80019c0:	40005400 	.word	0x40005400
 80019c4:	2000017c 	.word	0x2000017c
 80019c8:	20000174 	.word	0x20000174
 80019cc:	20000184 	.word	0x20000184
 80019d0:	38000000 	.word	0x38000000
 80019d4:	20000194 	.word	0x20000194
 80019d8:	200001b4 	.word	0x200001b4
 80019dc:	20000170 	.word	0x20000170
 80019e0:	20000180 	.word	0x20000180
 80019e4:	2000018c 	.word	0x2000018c
 80019e8:	43200000 	.word	0x43200000

080019ec <TM_BMP180_StartPressure>:

TM_BMP180_Result_t TM_BMP180_StartPressure(TM_BMP180_t* BMP180_Data, TM_BMP180_Oversampling_t Oversampling) {
 80019ec:	b580      	push	{r7, lr}
 80019ee:	b084      	sub	sp, #16
 80019f0:	af00      	add	r7, sp, #0
 80019f2:	6078      	str	r0, [r7, #4]
 80019f4:	460b      	mov	r3, r1
 80019f6:	70fb      	strb	r3, [r7, #3]
	uint8_t command;
	
	/* Check for library initialization */
	if (!lib_initialized) {
 80019f8:	4b22      	ldr	r3, [pc, #136]	; (8001a84 <TM_BMP180_StartPressure+0x98>)
 80019fa:	781b      	ldrb	r3, [r3, #0]
 80019fc:	2b00      	cmp	r3, #0
 80019fe:	d101      	bne.n	8001a04 <TM_BMP180_StartPressure+0x18>
		return TM_BMP180_Result_LibraryNotInitialized;
 8001a00:	2302      	movs	r3, #2
 8001a02:	e03a      	b.n	8001a7a <TM_BMP180_StartPressure+0x8e>
	}
	
	switch (Oversampling) {
 8001a04:	78fb      	ldrb	r3, [r7, #3]
 8001a06:	2b03      	cmp	r3, #3
 8001a08:	d826      	bhi.n	8001a58 <TM_BMP180_StartPressure+0x6c>
 8001a0a:	a201      	add	r2, pc, #4	; (adr r2, 8001a10 <TM_BMP180_StartPressure+0x24>)
 8001a0c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8001a10:	08001a21 	.word	0x08001a21
 8001a14:	08001a2f 	.word	0x08001a2f
 8001a18:	08001a3d 	.word	0x08001a3d
 8001a1c:	08001a4b 	.word	0x08001a4b
		case TM_BMP180_Oversampling_UltraLowPower :
			command = BMP180_COMMAND_PRESSURE_0;
 8001a20:	2334      	movs	r3, #52	; 0x34
 8001a22:	73fb      	strb	r3, [r7, #15]
			BMP180_Data->Delay = BMP180_PRESSURE_0_DELAY;
 8001a24:	687b      	ldr	r3, [r7, #4]
 8001a26:	f241 1294 	movw	r2, #4500	; 0x1194
 8001a2a:	819a      	strh	r2, [r3, #12]
			break;
 8001a2c:	e01b      	b.n	8001a66 <TM_BMP180_StartPressure+0x7a>
		case TM_BMP180_Oversampling_Standard:
			command = BMP180_COMMAND_PRESSURE_1;
 8001a2e:	2374      	movs	r3, #116	; 0x74
 8001a30:	73fb      	strb	r3, [r7, #15]
			BMP180_Data->Delay = BMP180_PRESSURE_1_DELAY;
 8001a32:	687b      	ldr	r3, [r7, #4]
 8001a34:	f641 524c 	movw	r2, #7500	; 0x1d4c
 8001a38:	819a      	strh	r2, [r3, #12]
			break;
 8001a3a:	e014      	b.n	8001a66 <TM_BMP180_StartPressure+0x7a>
		case TM_BMP180_Oversampling_HighResolution:
			command = BMP180_COMMAND_PRESSURE_2;
 8001a3c:	23b4      	movs	r3, #180	; 0xb4
 8001a3e:	73fb      	strb	r3, [r7, #15]
			BMP180_Data->Delay = BMP180_PRESSURE_2_DELAY;
 8001a40:	687b      	ldr	r3, [r7, #4]
 8001a42:	f243 22c8 	movw	r2, #13000	; 0x32c8
 8001a46:	819a      	strh	r2, [r3, #12]
			break;
 8001a48:	e00d      	b.n	8001a66 <TM_BMP180_StartPressure+0x7a>
		case TM_BMP180_Oversampling_UltraHighResolution:
			command = BMP180_COMMAND_PRESSURE_3;
 8001a4a:	23f4      	movs	r3, #244	; 0xf4
 8001a4c:	73fb      	strb	r3, [r7, #15]
			BMP180_Data->Delay = BMP180_PRESSURE_3_DELAY;
 8001a4e:	687b      	ldr	r3, [r7, #4]
 8001a50:	f246 12a8 	movw	r2, #25000	; 0x61a8
 8001a54:	819a      	strh	r2, [r3, #12]
			break;
 8001a56:	e006      	b.n	8001a66 <TM_BMP180_StartPressure+0x7a>
		default:
			command = BMP180_COMMAND_PRESSURE_0;
 8001a58:	2334      	movs	r3, #52	; 0x34
 8001a5a:	73fb      	strb	r3, [r7, #15]
			BMP180_Data->Delay = BMP180_PRESSURE_0_DELAY;
 8001a5c:	687b      	ldr	r3, [r7, #4]
 8001a5e:	f241 1294 	movw	r2, #4500	; 0x1194
 8001a62:	819a      	strh	r2, [r3, #12]
			break;
 8001a64:	bf00      	nop
	}
	/* Send to device */
	TM_I2C_Write(BMP180_I2C, BMP180_I2C_ADDRESS, BMP180_REGISTER_CONTROL, command);
 8001a66:	7bfb      	ldrb	r3, [r7, #15]
 8001a68:	22f4      	movs	r2, #244	; 0xf4
 8001a6a:	21ee      	movs	r1, #238	; 0xee
 8001a6c:	4806      	ldr	r0, [pc, #24]	; (8001a88 <TM_BMP180_StartPressure+0x9c>)
 8001a6e:	f000 fca5 	bl	80023bc <TM_I2C_Write>
	/* Save selected oversampling */
	BMP180_Data->Oversampling = Oversampling;
 8001a72:	687b      	ldr	r3, [r7, #4]
 8001a74:	78fa      	ldrb	r2, [r7, #3]
 8001a76:	739a      	strb	r2, [r3, #14]
	/* Return OK */
	return TM_BMP180_Result_Ok;
 8001a78:	2300      	movs	r3, #0
}
 8001a7a:	4618      	mov	r0, r3
 8001a7c:	3710      	adds	r7, #16
 8001a7e:	46bd      	mov	sp, r7
 8001a80:	bd80      	pop	{r7, pc}
 8001a82:	bf00      	nop
 8001a84:	200000b4 	.word	0x200000b4
 8001a88:	40005400 	.word	0x40005400
 8001a8c:	00000000 	.word	0x00000000

08001a90 <TM_BMP180_ReadPressure>:

TM_BMP180_Result_t TM_BMP180_ReadPressure(TM_BMP180_t* BMP180_Data) {
 8001a90:	b590      	push	{r4, r7, lr}
 8001a92:	b087      	sub	sp, #28
 8001a94:	af02      	add	r7, sp, #8
 8001a96:	6078      	str	r0, [r7, #4]
	uint8_t data[3];
	
	/* Check for library initialization */
	if (!lib_initialized) {
 8001a98:	4b81      	ldr	r3, [pc, #516]	; (8001ca0 <TM_BMP180_ReadPressure+0x210>)
 8001a9a:	781b      	ldrb	r3, [r3, #0]
 8001a9c:	2b00      	cmp	r3, #0
 8001a9e:	d101      	bne.n	8001aa4 <TM_BMP180_ReadPressure+0x14>
		return TM_BMP180_Result_LibraryNotInitialized;
 8001aa0:	2302      	movs	r3, #2
 8001aa2:	e1c6      	b.n	8001e32 <TM_BMP180_ReadPressure+0x3a2>
	}
	
	/* Read multi bytes from I2C */
	TM_I2C_ReadMulti(BMP180_I2C, BMP180_I2C_ADDRESS, BMP180_REGISTER_RESULT, data, 3);
 8001aa4:	f107 020c 	add.w	r2, r7, #12
 8001aa8:	2303      	movs	r3, #3
 8001aaa:	9300      	str	r3, [sp, #0]
 8001aac:	4613      	mov	r3, r2
 8001aae:	22f6      	movs	r2, #246	; 0xf6
 8001ab0:	21ee      	movs	r1, #238	; 0xee
 8001ab2:	487c      	ldr	r0, [pc, #496]	; (8001ca4 <TM_BMP180_ReadPressure+0x214>)
 8001ab4:	f000 fc40 	bl	8002338 <TM_I2C_ReadMulti>
	
	/* Get uncompensated pressure */
	UP = (data[0] << 16 | data[1] << 8 | data[2]) >> (8 - (uint8_t)BMP180_Data->Oversampling);
 8001ab8:	7b3b      	ldrb	r3, [r7, #12]
 8001aba:	041a      	lsls	r2, r3, #16
 8001abc:	7b7b      	ldrb	r3, [r7, #13]
 8001abe:	021b      	lsls	r3, r3, #8
 8001ac0:	4313      	orrs	r3, r2
 8001ac2:	7bba      	ldrb	r2, [r7, #14]
 8001ac4:	431a      	orrs	r2, r3
 8001ac6:	687b      	ldr	r3, [r7, #4]
 8001ac8:	7b9b      	ldrb	r3, [r3, #14]
 8001aca:	f1c3 0308 	rsb	r3, r3, #8
 8001ace:	fa42 f303 	asr.w	r3, r2, r3
 8001ad2:	461a      	mov	r2, r3
 8001ad4:	4b74      	ldr	r3, [pc, #464]	; (8001ca8 <TM_BMP180_ReadPressure+0x218>)
 8001ad6:	601a      	str	r2, [r3, #0]

	/* Calculate true pressure */
	B6 = B5 - 4000;
 8001ad8:	4b74      	ldr	r3, [pc, #464]	; (8001cac <TM_BMP180_ReadPressure+0x21c>)
 8001ada:	681b      	ldr	r3, [r3, #0]
 8001adc:	f5a3 637a 	sub.w	r3, r3, #4000	; 0xfa0
 8001ae0:	4a73      	ldr	r2, [pc, #460]	; (8001cb0 <TM_BMP180_ReadPressure+0x220>)
 8001ae2:	6013      	str	r3, [r2, #0]
	X1 = (B2 * (B6 * B6 * BMP180_1_4096)) * BMP180_1_2048;
 8001ae4:	4b73      	ldr	r3, [pc, #460]	; (8001cb4 <TM_BMP180_ReadPressure+0x224>)
 8001ae6:	f9b3 3000 	ldrsh.w	r3, [r3]
 8001aea:	ee07 3a90 	vmov	s15, r3
 8001aee:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 8001af2:	4b6f      	ldr	r3, [pc, #444]	; (8001cb0 <TM_BMP180_ReadPressure+0x220>)
 8001af4:	681b      	ldr	r3, [r3, #0]
 8001af6:	4a6e      	ldr	r2, [pc, #440]	; (8001cb0 <TM_BMP180_ReadPressure+0x220>)
 8001af8:	6812      	ldr	r2, [r2, #0]
 8001afa:	fb02 f303 	mul.w	r3, r2, r3
 8001afe:	ee07 3a90 	vmov	s15, r3
 8001b02:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8001b06:	eddf 6a6c 	vldr	s13, [pc, #432]	; 8001cb8 <TM_BMP180_ReadPressure+0x228>
 8001b0a:	ee67 7aa6 	vmul.f32	s15, s15, s13
 8001b0e:	ee67 7a27 	vmul.f32	s15, s14, s15
 8001b12:	ed9f 7a6a 	vldr	s14, [pc, #424]	; 8001cbc <TM_BMP180_ReadPressure+0x22c>
 8001b16:	ee67 7a87 	vmul.f32	s15, s15, s14
 8001b1a:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8001b1e:	ee17 2a90 	vmov	r2, s15
 8001b22:	4b67      	ldr	r3, [pc, #412]	; (8001cc0 <TM_BMP180_ReadPressure+0x230>)
 8001b24:	601a      	str	r2, [r3, #0]
	X2 = AC2 * B6 * BMP180_1_2048;
 8001b26:	4b67      	ldr	r3, [pc, #412]	; (8001cc4 <TM_BMP180_ReadPressure+0x234>)
 8001b28:	f9b3 3000 	ldrsh.w	r3, [r3]
 8001b2c:	461a      	mov	r2, r3
 8001b2e:	4b60      	ldr	r3, [pc, #384]	; (8001cb0 <TM_BMP180_ReadPressure+0x220>)
 8001b30:	681b      	ldr	r3, [r3, #0]
 8001b32:	fb03 f302 	mul.w	r3, r3, r2
 8001b36:	ee07 3a90 	vmov	s15, r3
 8001b3a:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8001b3e:	ed9f 7a5f 	vldr	s14, [pc, #380]	; 8001cbc <TM_BMP180_ReadPressure+0x22c>
 8001b42:	ee67 7a87 	vmul.f32	s15, s15, s14
 8001b46:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8001b4a:	ee17 2a90 	vmov	r2, s15
 8001b4e:	4b5e      	ldr	r3, [pc, #376]	; (8001cc8 <TM_BMP180_ReadPressure+0x238>)
 8001b50:	601a      	str	r2, [r3, #0]
	X3 = X1 + X2;
 8001b52:	4b5b      	ldr	r3, [pc, #364]	; (8001cc0 <TM_BMP180_ReadPressure+0x230>)
 8001b54:	681a      	ldr	r2, [r3, #0]
 8001b56:	4b5c      	ldr	r3, [pc, #368]	; (8001cc8 <TM_BMP180_ReadPressure+0x238>)
 8001b58:	681b      	ldr	r3, [r3, #0]
 8001b5a:	4413      	add	r3, r2
 8001b5c:	4a5b      	ldr	r2, [pc, #364]	; (8001ccc <TM_BMP180_ReadPressure+0x23c>)
 8001b5e:	6013      	str	r3, [r2, #0]
	B3 = (((AC1 * 4 + X3) << (uint8_t)BMP180_Data->Oversampling) + 2) * 0.25;
 8001b60:	4b5b      	ldr	r3, [pc, #364]	; (8001cd0 <TM_BMP180_ReadPressure+0x240>)
 8001b62:	f9b3 3000 	ldrsh.w	r3, [r3]
 8001b66:	009a      	lsls	r2, r3, #2
 8001b68:	4b58      	ldr	r3, [pc, #352]	; (8001ccc <TM_BMP180_ReadPressure+0x23c>)
 8001b6a:	681b      	ldr	r3, [r3, #0]
 8001b6c:	4413      	add	r3, r2
 8001b6e:	687a      	ldr	r2, [r7, #4]
 8001b70:	7b92      	ldrb	r2, [r2, #14]
 8001b72:	4093      	lsls	r3, r2
 8001b74:	3302      	adds	r3, #2
 8001b76:	4618      	mov	r0, r3
 8001b78:	f7fe fc78 	bl	800046c <__aeabi_i2d>
 8001b7c:	f04f 0200 	mov.w	r2, #0
 8001b80:	4b54      	ldr	r3, [pc, #336]	; (8001cd4 <TM_BMP180_ReadPressure+0x244>)
 8001b82:	f7fe fcd9 	bl	8000538 <__aeabi_dmul>
 8001b86:	4603      	mov	r3, r0
 8001b88:	460c      	mov	r4, r1
 8001b8a:	4618      	mov	r0, r3
 8001b8c:	4621      	mov	r1, r4
 8001b8e:	f7fe ff83 	bl	8000a98 <__aeabi_d2iz>
 8001b92:	4602      	mov	r2, r0
 8001b94:	4b50      	ldr	r3, [pc, #320]	; (8001cd8 <TM_BMP180_ReadPressure+0x248>)
 8001b96:	601a      	str	r2, [r3, #0]
	X1 = AC3 * B6 * BMP180_1_8192;
 8001b98:	4b50      	ldr	r3, [pc, #320]	; (8001cdc <TM_BMP180_ReadPressure+0x24c>)
 8001b9a:	f9b3 3000 	ldrsh.w	r3, [r3]
 8001b9e:	461a      	mov	r2, r3
 8001ba0:	4b43      	ldr	r3, [pc, #268]	; (8001cb0 <TM_BMP180_ReadPressure+0x220>)
 8001ba2:	681b      	ldr	r3, [r3, #0]
 8001ba4:	fb03 f302 	mul.w	r3, r3, r2
 8001ba8:	ee07 3a90 	vmov	s15, r3
 8001bac:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8001bb0:	ed9f 7a4b 	vldr	s14, [pc, #300]	; 8001ce0 <TM_BMP180_ReadPressure+0x250>
 8001bb4:	ee67 7a87 	vmul.f32	s15, s15, s14
 8001bb8:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8001bbc:	ee17 2a90 	vmov	r2, s15
 8001bc0:	4b3f      	ldr	r3, [pc, #252]	; (8001cc0 <TM_BMP180_ReadPressure+0x230>)
 8001bc2:	601a      	str	r2, [r3, #0]
	X2 = (B1 * (B6 * B6 * BMP180_1_4096)) * BMP180_1_65536;
 8001bc4:	4b47      	ldr	r3, [pc, #284]	; (8001ce4 <TM_BMP180_ReadPressure+0x254>)
 8001bc6:	f9b3 3000 	ldrsh.w	r3, [r3]
 8001bca:	ee07 3a90 	vmov	s15, r3
 8001bce:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 8001bd2:	4b37      	ldr	r3, [pc, #220]	; (8001cb0 <TM_BMP180_ReadPressure+0x220>)
 8001bd4:	681b      	ldr	r3, [r3, #0]
 8001bd6:	4a36      	ldr	r2, [pc, #216]	; (8001cb0 <TM_BMP180_ReadPressure+0x220>)
 8001bd8:	6812      	ldr	r2, [r2, #0]
 8001bda:	fb02 f303 	mul.w	r3, r2, r3
 8001bde:	ee07 3a90 	vmov	s15, r3
 8001be2:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8001be6:	eddf 6a34 	vldr	s13, [pc, #208]	; 8001cb8 <TM_BMP180_ReadPressure+0x228>
 8001bea:	ee67 7aa6 	vmul.f32	s15, s15, s13
 8001bee:	ee67 7a27 	vmul.f32	s15, s14, s15
 8001bf2:	ed9f 7a3d 	vldr	s14, [pc, #244]	; 8001ce8 <TM_BMP180_ReadPressure+0x258>
 8001bf6:	ee67 7a87 	vmul.f32	s15, s15, s14
 8001bfa:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8001bfe:	ee17 2a90 	vmov	r2, s15
 8001c02:	4b31      	ldr	r3, [pc, #196]	; (8001cc8 <TM_BMP180_ReadPressure+0x238>)
 8001c04:	601a      	str	r2, [r3, #0]
	X3 = ((X1 + X2) + 2) * 0.25;
 8001c06:	4b2e      	ldr	r3, [pc, #184]	; (8001cc0 <TM_BMP180_ReadPressure+0x230>)
 8001c08:	681a      	ldr	r2, [r3, #0]
 8001c0a:	4b2f      	ldr	r3, [pc, #188]	; (8001cc8 <TM_BMP180_ReadPressure+0x238>)
 8001c0c:	681b      	ldr	r3, [r3, #0]
 8001c0e:	4413      	add	r3, r2
 8001c10:	3302      	adds	r3, #2
 8001c12:	4618      	mov	r0, r3
 8001c14:	f7fe fc2a 	bl	800046c <__aeabi_i2d>
 8001c18:	f04f 0200 	mov.w	r2, #0
 8001c1c:	4b2d      	ldr	r3, [pc, #180]	; (8001cd4 <TM_BMP180_ReadPressure+0x244>)
 8001c1e:	f7fe fc8b 	bl	8000538 <__aeabi_dmul>
 8001c22:	4603      	mov	r3, r0
 8001c24:	460c      	mov	r4, r1
 8001c26:	4618      	mov	r0, r3
 8001c28:	4621      	mov	r1, r4
 8001c2a:	f7fe ff35 	bl	8000a98 <__aeabi_d2iz>
 8001c2e:	4602      	mov	r2, r0
 8001c30:	4b26      	ldr	r3, [pc, #152]	; (8001ccc <TM_BMP180_ReadPressure+0x23c>)
 8001c32:	601a      	str	r2, [r3, #0]
	B4 = AC4 * (uint32_t)(X3 + 32768) * BMP180_1_32768;
 8001c34:	4b2d      	ldr	r3, [pc, #180]	; (8001cec <TM_BMP180_ReadPressure+0x25c>)
 8001c36:	881b      	ldrh	r3, [r3, #0]
 8001c38:	461a      	mov	r2, r3
 8001c3a:	4b24      	ldr	r3, [pc, #144]	; (8001ccc <TM_BMP180_ReadPressure+0x23c>)
 8001c3c:	681b      	ldr	r3, [r3, #0]
 8001c3e:	f503 4300 	add.w	r3, r3, #32768	; 0x8000
 8001c42:	fb03 f302 	mul.w	r3, r3, r2
 8001c46:	ee07 3a90 	vmov	s15, r3
 8001c4a:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8001c4e:	ed9f 7a28 	vldr	s14, [pc, #160]	; 8001cf0 <TM_BMP180_ReadPressure+0x260>
 8001c52:	ee67 7a87 	vmul.f32	s15, s15, s14
 8001c56:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8001c5a:	ee17 2a90 	vmov	r2, s15
 8001c5e:	4b25      	ldr	r3, [pc, #148]	; (8001cf4 <TM_BMP180_ReadPressure+0x264>)
 8001c60:	601a      	str	r2, [r3, #0]
	B7 = ((uint32_t)UP - B3) * (50000 >> (uint8_t)BMP180_Data->Oversampling);
 8001c62:	4b11      	ldr	r3, [pc, #68]	; (8001ca8 <TM_BMP180_ReadPressure+0x218>)
 8001c64:	681b      	ldr	r3, [r3, #0]
 8001c66:	4a1c      	ldr	r2, [pc, #112]	; (8001cd8 <TM_BMP180_ReadPressure+0x248>)
 8001c68:	6812      	ldr	r2, [r2, #0]
 8001c6a:	1a9b      	subs	r3, r3, r2
 8001c6c:	687a      	ldr	r2, [r7, #4]
 8001c6e:	7b92      	ldrb	r2, [r2, #14]
 8001c70:	4611      	mov	r1, r2
 8001c72:	f24c 3250 	movw	r2, #50000	; 0xc350
 8001c76:	410a      	asrs	r2, r1
 8001c78:	fb02 f303 	mul.w	r3, r2, r3
 8001c7c:	4a1e      	ldr	r2, [pc, #120]	; (8001cf8 <TM_BMP180_ReadPressure+0x268>)
 8001c7e:	6013      	str	r3, [r2, #0]
	if (B7 < 0x80000000) {
 8001c80:	4b1d      	ldr	r3, [pc, #116]	; (8001cf8 <TM_BMP180_ReadPressure+0x268>)
 8001c82:	681b      	ldr	r3, [r3, #0]
 8001c84:	2b00      	cmp	r3, #0
 8001c86:	db3b      	blt.n	8001d00 <TM_BMP180_ReadPressure+0x270>
		p = (B7 * 2) / B4;
 8001c88:	4b1b      	ldr	r3, [pc, #108]	; (8001cf8 <TM_BMP180_ReadPressure+0x268>)
 8001c8a:	681b      	ldr	r3, [r3, #0]
 8001c8c:	005a      	lsls	r2, r3, #1
 8001c8e:	4b19      	ldr	r3, [pc, #100]	; (8001cf4 <TM_BMP180_ReadPressure+0x264>)
 8001c90:	681b      	ldr	r3, [r3, #0]
 8001c92:	fbb2 f3f3 	udiv	r3, r2, r3
 8001c96:	461a      	mov	r2, r3
 8001c98:	4b18      	ldr	r3, [pc, #96]	; (8001cfc <TM_BMP180_ReadPressure+0x26c>)
 8001c9a:	601a      	str	r2, [r3, #0]
 8001c9c:	e03a      	b.n	8001d14 <TM_BMP180_ReadPressure+0x284>
 8001c9e:	bf00      	nop
 8001ca0:	200000b4 	.word	0x200000b4
 8001ca4:	40005400 	.word	0x40005400
 8001ca8:	200001b0 	.word	0x200001b0
 8001cac:	2000018c 	.word	0x2000018c
 8001cb0:	20000178 	.word	0x20000178
 8001cb4:	2000019c 	.word	0x2000019c
 8001cb8:	39800000 	.word	0x39800000
 8001cbc:	3a000000 	.word	0x3a000000
 8001cc0:	20000194 	.word	0x20000194
 8001cc4:	20000198 	.word	0x20000198
 8001cc8:	20000180 	.word	0x20000180
 8001ccc:	200001a0 	.word	0x200001a0
 8001cd0:	20000172 	.word	0x20000172
 8001cd4:	3fd00000 	.word	0x3fd00000
 8001cd8:	200001b8 	.word	0x200001b8
 8001cdc:	2000019a 	.word	0x2000019a
 8001ce0:	39000000 	.word	0x39000000
 8001ce4:	200001ac 	.word	0x200001ac
 8001ce8:	37800000 	.word	0x37800000
 8001cec:	20000190 	.word	0x20000190
 8001cf0:	38000000 	.word	0x38000000
 8001cf4:	200001a4 	.word	0x200001a4
 8001cf8:	200001a8 	.word	0x200001a8
 8001cfc:	2000016c 	.word	0x2000016c
	} else {
		p = (B7 / B4) * 2;
 8001d00:	4b51      	ldr	r3, [pc, #324]	; (8001e48 <TM_BMP180_ReadPressure+0x3b8>)
 8001d02:	681a      	ldr	r2, [r3, #0]
 8001d04:	4b51      	ldr	r3, [pc, #324]	; (8001e4c <TM_BMP180_ReadPressure+0x3bc>)
 8001d06:	681b      	ldr	r3, [r3, #0]
 8001d08:	fbb2 f3f3 	udiv	r3, r2, r3
 8001d0c:	005b      	lsls	r3, r3, #1
 8001d0e:	461a      	mov	r2, r3
 8001d10:	4b4f      	ldr	r3, [pc, #316]	; (8001e50 <TM_BMP180_ReadPressure+0x3c0>)
 8001d12:	601a      	str	r2, [r3, #0]
	}
	X1 = ((float)p * BMP180_1_256) * ((float)p * BMP180_1_256);
 8001d14:	4b4e      	ldr	r3, [pc, #312]	; (8001e50 <TM_BMP180_ReadPressure+0x3c0>)
 8001d16:	681b      	ldr	r3, [r3, #0]
 8001d18:	ee07 3a90 	vmov	s15, r3
 8001d1c:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8001d20:	ed9f 7a4c 	vldr	s14, [pc, #304]	; 8001e54 <TM_BMP180_ReadPressure+0x3c4>
 8001d24:	ee27 7a87 	vmul.f32	s14, s15, s14
 8001d28:	4b49      	ldr	r3, [pc, #292]	; (8001e50 <TM_BMP180_ReadPressure+0x3c0>)
 8001d2a:	681b      	ldr	r3, [r3, #0]
 8001d2c:	ee07 3a90 	vmov	s15, r3
 8001d30:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8001d34:	eddf 6a47 	vldr	s13, [pc, #284]	; 8001e54 <TM_BMP180_ReadPressure+0x3c4>
 8001d38:	ee67 7aa6 	vmul.f32	s15, s15, s13
 8001d3c:	ee67 7a27 	vmul.f32	s15, s14, s15
 8001d40:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8001d44:	ee17 2a90 	vmov	r2, s15
 8001d48:	4b43      	ldr	r3, [pc, #268]	; (8001e58 <TM_BMP180_ReadPressure+0x3c8>)
 8001d4a:	601a      	str	r2, [r3, #0]
	X1 = (X1 * 3038) * BMP180_1_65536;
 8001d4c:	4b42      	ldr	r3, [pc, #264]	; (8001e58 <TM_BMP180_ReadPressure+0x3c8>)
 8001d4e:	681b      	ldr	r3, [r3, #0]
 8001d50:	f640 32de 	movw	r2, #3038	; 0xbde
 8001d54:	fb02 f303 	mul.w	r3, r2, r3
 8001d58:	ee07 3a90 	vmov	s15, r3
 8001d5c:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8001d60:	ed9f 7a3e 	vldr	s14, [pc, #248]	; 8001e5c <TM_BMP180_ReadPressure+0x3cc>
 8001d64:	ee67 7a87 	vmul.f32	s15, s15, s14
 8001d68:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8001d6c:	ee17 2a90 	vmov	r2, s15
 8001d70:	4b39      	ldr	r3, [pc, #228]	; (8001e58 <TM_BMP180_ReadPressure+0x3c8>)
 8001d72:	601a      	str	r2, [r3, #0]
	X2 = (-7357 * p) * BMP180_1_65536;
 8001d74:	4b36      	ldr	r3, [pc, #216]	; (8001e50 <TM_BMP180_ReadPressure+0x3c0>)
 8001d76:	681b      	ldr	r3, [r3, #0]
 8001d78:	4a39      	ldr	r2, [pc, #228]	; (8001e60 <TM_BMP180_ReadPressure+0x3d0>)
 8001d7a:	fb02 f303 	mul.w	r3, r2, r3
 8001d7e:	ee07 3a90 	vmov	s15, r3
 8001d82:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8001d86:	ed9f 7a35 	vldr	s14, [pc, #212]	; 8001e5c <TM_BMP180_ReadPressure+0x3cc>
 8001d8a:	ee67 7a87 	vmul.f32	s15, s15, s14
 8001d8e:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8001d92:	ee17 2a90 	vmov	r2, s15
 8001d96:	4b33      	ldr	r3, [pc, #204]	; (8001e64 <TM_BMP180_ReadPressure+0x3d4>)
 8001d98:	601a      	str	r2, [r3, #0]
	p = p + (X1 + X2 + 3791) * BMP180_1_16;
 8001d9a:	4b2d      	ldr	r3, [pc, #180]	; (8001e50 <TM_BMP180_ReadPressure+0x3c0>)
 8001d9c:	681b      	ldr	r3, [r3, #0]
 8001d9e:	ee07 3a90 	vmov	s15, r3
 8001da2:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 8001da6:	4b2c      	ldr	r3, [pc, #176]	; (8001e58 <TM_BMP180_ReadPressure+0x3c8>)
 8001da8:	681a      	ldr	r2, [r3, #0]
 8001daa:	4b2e      	ldr	r3, [pc, #184]	; (8001e64 <TM_BMP180_ReadPressure+0x3d4>)
 8001dac:	681b      	ldr	r3, [r3, #0]
 8001dae:	4413      	add	r3, r2
 8001db0:	f603 63cf 	addw	r3, r3, #3791	; 0xecf
 8001db4:	ee07 3a90 	vmov	s15, r3
 8001db8:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8001dbc:	eddf 6a2a 	vldr	s13, [pc, #168]	; 8001e68 <TM_BMP180_ReadPressure+0x3d8>
 8001dc0:	ee67 7aa6 	vmul.f32	s15, s15, s13
 8001dc4:	ee77 7a27 	vadd.f32	s15, s14, s15
 8001dc8:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8001dcc:	ee17 2a90 	vmov	r2, s15
 8001dd0:	4b1f      	ldr	r3, [pc, #124]	; (8001e50 <TM_BMP180_ReadPressure+0x3c0>)
 8001dd2:	601a      	str	r2, [r3, #0]
	
	/* Save pressure */
	BMP180_Data->Pressure = p;
 8001dd4:	4b1e      	ldr	r3, [pc, #120]	; (8001e50 <TM_BMP180_ReadPressure+0x3c0>)
 8001dd6:	681b      	ldr	r3, [r3, #0]
 8001dd8:	461a      	mov	r2, r3
 8001dda:	687b      	ldr	r3, [r7, #4]
 8001ddc:	605a      	str	r2, [r3, #4]
	
	/* Calculate altitude */
	BMP180_Data->Altitude = (float)44330.0 * (float)((float)1.0 - (float)pow((float)p * BMP180_1_101325, 0.19029495));
 8001dde:	4b1c      	ldr	r3, [pc, #112]	; (8001e50 <TM_BMP180_ReadPressure+0x3c0>)
 8001de0:	681b      	ldr	r3, [r3, #0]
 8001de2:	ee07 3a90 	vmov	s15, r3
 8001de6:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8001dea:	ed9f 7a20 	vldr	s14, [pc, #128]	; 8001e6c <TM_BMP180_ReadPressure+0x3dc>
 8001dee:	ee67 7a87 	vmul.f32	s15, s15, s14
 8001df2:	ee17 0a90 	vmov	r0, s15
 8001df6:	f7fe fb4b 	bl	8000490 <__aeabi_f2d>
 8001dfa:	4603      	mov	r3, r0
 8001dfc:	460c      	mov	r4, r1
 8001dfe:	ed9f 1b10 	vldr	d1, [pc, #64]	; 8001e40 <TM_BMP180_ReadPressure+0x3b0>
 8001e02:	ec44 3b10 	vmov	d0, r3, r4
 8001e06:	f000 fd3f 	bl	8002888 <pow>
 8001e0a:	ec54 3b10 	vmov	r3, r4, d0
 8001e0e:	4618      	mov	r0, r3
 8001e10:	4621      	mov	r1, r4
 8001e12:	f7fe fe69 	bl	8000ae8 <__aeabi_d2f>
 8001e16:	ee07 0a10 	vmov	s14, r0
 8001e1a:	eef7 7a00 	vmov.f32	s15, #112	; 0x3f800000  1.0
 8001e1e:	ee77 7ac7 	vsub.f32	s15, s15, s14
 8001e22:	ed9f 7a13 	vldr	s14, [pc, #76]	; 8001e70 <TM_BMP180_ReadPressure+0x3e0>
 8001e26:	ee67 7a87 	vmul.f32	s15, s15, s14
 8001e2a:	687b      	ldr	r3, [r7, #4]
 8001e2c:	edc3 7a00 	vstr	s15, [r3]
	
	/* Return OK */
	return TM_BMP180_Result_Ok;
 8001e30:	2300      	movs	r3, #0
}
 8001e32:	4618      	mov	r0, r3
 8001e34:	3714      	adds	r7, #20
 8001e36:	46bd      	mov	sp, r7
 8001e38:	bd90      	pop	{r4, r7, pc}
 8001e3a:	bf00      	nop
 8001e3c:	f3af 8000 	nop.w
 8001e40:	bd6c06b9 	.word	0xbd6c06b9
 8001e44:	3fc85b95 	.word	0x3fc85b95
 8001e48:	200001a8 	.word	0x200001a8
 8001e4c:	200001a4 	.word	0x200001a4
 8001e50:	2000016c 	.word	0x2000016c
 8001e54:	3b800000 	.word	0x3b800000
 8001e58:	20000194 	.word	0x20000194
 8001e5c:	37800000 	.word	0x37800000
 8001e60:	ffffe343 	.word	0xffffe343
 8001e64:	20000180 	.word	0x20000180
 8001e68:	3d800000 	.word	0x3d800000
 8001e6c:	37259408 	.word	0x37259408
 8001e70:	472d2a00 	.word	0x472d2a00

08001e74 <NVIC_SetPriority>:

    \param [in]      IRQn  Interrupt number.
    \param [in]  priority  Priority to set.
 */
__STATIC_INLINE void NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8001e74:	b480      	push	{r7}
 8001e76:	b083      	sub	sp, #12
 8001e78:	af00      	add	r7, sp, #0
 8001e7a:	4603      	mov	r3, r0
 8001e7c:	6039      	str	r1, [r7, #0]
 8001e7e:	71fb      	strb	r3, [r7, #7]
  if(IRQn < 0) {
 8001e80:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001e84:	2b00      	cmp	r3, #0
 8001e86:	da0b      	bge.n	8001ea0 <NVIC_SetPriority+0x2c>
    SCB->SHP[((uint32_t)(IRQn) & 0xF)-4] = ((priority << (8 - __NVIC_PRIO_BITS)) & 0xff); } /* set Priority for Cortex-M  System Interrupts */
 8001e88:	490d      	ldr	r1, [pc, #52]	; (8001ec0 <NVIC_SetPriority+0x4c>)
 8001e8a:	79fb      	ldrb	r3, [r7, #7]
 8001e8c:	f003 030f 	and.w	r3, r3, #15
 8001e90:	3b04      	subs	r3, #4
 8001e92:	683a      	ldr	r2, [r7, #0]
 8001e94:	b2d2      	uxtb	r2, r2
 8001e96:	0112      	lsls	r2, r2, #4
 8001e98:	b2d2      	uxtb	r2, r2
 8001e9a:	440b      	add	r3, r1
 8001e9c:	761a      	strb	r2, [r3, #24]
  else {
    NVIC->IP[(uint32_t)(IRQn)] = ((priority << (8 - __NVIC_PRIO_BITS)) & 0xff);    }        /* set Priority for device specific Interrupts  */
}
 8001e9e:	e009      	b.n	8001eb4 <NVIC_SetPriority+0x40>
    NVIC->IP[(uint32_t)(IRQn)] = ((priority << (8 - __NVIC_PRIO_BITS)) & 0xff);    }        /* set Priority for device specific Interrupts  */
 8001ea0:	4908      	ldr	r1, [pc, #32]	; (8001ec4 <NVIC_SetPriority+0x50>)
 8001ea2:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001ea6:	683a      	ldr	r2, [r7, #0]
 8001ea8:	b2d2      	uxtb	r2, r2
 8001eaa:	0112      	lsls	r2, r2, #4
 8001eac:	b2d2      	uxtb	r2, r2
 8001eae:	440b      	add	r3, r1
 8001eb0:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
}
 8001eb4:	bf00      	nop
 8001eb6:	370c      	adds	r7, #12
 8001eb8:	46bd      	mov	sp, r7
 8001eba:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001ebe:	4770      	bx	lr
 8001ec0:	e000ed00 	.word	0xe000ed00
 8001ec4:	e000e100 	.word	0xe000e100

08001ec8 <SysTick_Config>:
    function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
    must contain a vendor-specific implementation of this function.

 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8001ec8:	b580      	push	{r7, lr}
 8001eca:	b082      	sub	sp, #8
 8001ecc:	af00      	add	r7, sp, #0
 8001ece:	6078      	str	r0, [r7, #4]
  if (ticks > SysTick_LOAD_RELOAD_Msk)  return (1);            /* Reload value impossible */
 8001ed0:	687b      	ldr	r3, [r7, #4]
 8001ed2:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8001ed6:	d301      	bcc.n	8001edc <SysTick_Config+0x14>
 8001ed8:	2301      	movs	r3, #1
 8001eda:	e011      	b.n	8001f00 <SysTick_Config+0x38>

  SysTick->LOAD  = (ticks & SysTick_LOAD_RELOAD_Msk) - 1;      /* set reload register */
 8001edc:	4a0a      	ldr	r2, [pc, #40]	; (8001f08 <SysTick_Config+0x40>)
 8001ede:	687b      	ldr	r3, [r7, #4]
 8001ee0:	f023 437f 	bic.w	r3, r3, #4278190080	; 0xff000000
 8001ee4:	3b01      	subs	r3, #1
 8001ee6:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1<<__NVIC_PRIO_BITS) - 1);  /* set Priority for Systick Interrupt */
 8001ee8:	210f      	movs	r1, #15
 8001eea:	f04f 30ff 	mov.w	r0, #4294967295
 8001eee:	f7ff ffc1 	bl	8001e74 <NVIC_SetPriority>
  SysTick->VAL   = 0;                                          /* Load the SysTick Counter Value */
 8001ef2:	4b05      	ldr	r3, [pc, #20]	; (8001f08 <SysTick_Config+0x40>)
 8001ef4:	2200      	movs	r2, #0
 8001ef6:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8001ef8:	4b03      	ldr	r3, [pc, #12]	; (8001f08 <SysTick_Config+0x40>)
 8001efa:	2207      	movs	r2, #7
 8001efc:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                    /* Enable SysTick IRQ and SysTick Timer */
  return (0);                                                  /* Function successful */
 8001efe:	2300      	movs	r3, #0
}
 8001f00:	4618      	mov	r0, r3
 8001f02:	3708      	adds	r7, #8
 8001f04:	46bd      	mov	sp, r7
 8001f06:	bd80      	pop	{r7, pc}
 8001f08:	e000e010 	.word	0xe000e010

08001f0c <Delay>:

static __IO uint32_t TM_TimingDelay = 0;
static __IO uint32_t TM_Time = 0;
uint8_t TM_DELAY_Initialized = 0;

void Delay(__IO uint32_t nTime) {
 8001f0c:	b480      	push	{r7}
 8001f0e:	b083      	sub	sp, #12
 8001f10:	af00      	add	r7, sp, #0
 8001f12:	6078      	str	r0, [r7, #4]
	TM_TimingDelay = nTime;
 8001f14:	687b      	ldr	r3, [r7, #4]
 8001f16:	4a06      	ldr	r2, [pc, #24]	; (8001f30 <Delay+0x24>)
 8001f18:	6013      	str	r3, [r2, #0]

	while (TM_TimingDelay != 0);
 8001f1a:	bf00      	nop
 8001f1c:	4b04      	ldr	r3, [pc, #16]	; (8001f30 <Delay+0x24>)
 8001f1e:	681b      	ldr	r3, [r3, #0]
 8001f20:	2b00      	cmp	r3, #0
 8001f22:	d1fb      	bne.n	8001f1c <Delay+0x10>
}
 8001f24:	bf00      	nop
 8001f26:	370c      	adds	r7, #12
 8001f28:	46bd      	mov	sp, r7
 8001f2a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001f2e:	4770      	bx	lr
 8001f30:	200000b8 	.word	0x200000b8

08001f34 <Delayms>:

void Delayms(__IO uint32_t nTime) {
 8001f34:	b480      	push	{r7}
 8001f36:	b083      	sub	sp, #12
 8001f38:	af00      	add	r7, sp, #0
 8001f3a:	6078      	str	r0, [r7, #4]
	TM_TimingDelay = 1000 * nTime;
 8001f3c:	687b      	ldr	r3, [r7, #4]
 8001f3e:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 8001f42:	fb02 f303 	mul.w	r3, r2, r3
 8001f46:	4a06      	ldr	r2, [pc, #24]	; (8001f60 <Delayms+0x2c>)
 8001f48:	6013      	str	r3, [r2, #0]

	while (TM_TimingDelay != 0);
 8001f4a:	bf00      	nop
 8001f4c:	4b04      	ldr	r3, [pc, #16]	; (8001f60 <Delayms+0x2c>)
 8001f4e:	681b      	ldr	r3, [r3, #0]
 8001f50:	2b00      	cmp	r3, #0
 8001f52:	d1fb      	bne.n	8001f4c <Delayms+0x18>
}
 8001f54:	bf00      	nop
 8001f56:	370c      	adds	r7, #12
 8001f58:	46bd      	mov	sp, r7
 8001f5a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001f5e:	4770      	bx	lr
 8001f60:	200000b8 	.word	0x200000b8

08001f64 <SysTick_Handler>:
	if (TM_TimingDelay != 0x00) {
		TM_TimingDelay--;
	}
}
#else
void SysTick_Handler(void) {
 8001f64:	b480      	push	{r7}
 8001f66:	af00      	add	r7, sp, #0
	TM_Time++;
 8001f68:	4b0d      	ldr	r3, [pc, #52]	; (8001fa0 <SysTick_Handler+0x3c>)
 8001f6a:	681b      	ldr	r3, [r3, #0]
 8001f6c:	3301      	adds	r3, #1
 8001f6e:	4a0c      	ldr	r2, [pc, #48]	; (8001fa0 <SysTick_Handler+0x3c>)
 8001f70:	6013      	str	r3, [r2, #0]
	if (TM_Time2 != 0x00) {
 8001f72:	4b0c      	ldr	r3, [pc, #48]	; (8001fa4 <SysTick_Handler+0x40>)
 8001f74:	681b      	ldr	r3, [r3, #0]
 8001f76:	2b00      	cmp	r3, #0
 8001f78:	d004      	beq.n	8001f84 <SysTick_Handler+0x20>
		TM_Time2--;
 8001f7a:	4b0a      	ldr	r3, [pc, #40]	; (8001fa4 <SysTick_Handler+0x40>)
 8001f7c:	681b      	ldr	r3, [r3, #0]
 8001f7e:	3b01      	subs	r3, #1
 8001f80:	4a08      	ldr	r2, [pc, #32]	; (8001fa4 <SysTick_Handler+0x40>)
 8001f82:	6013      	str	r3, [r2, #0]
	}
	if (TM_TimingDelay != 0x00) {
 8001f84:	4b08      	ldr	r3, [pc, #32]	; (8001fa8 <SysTick_Handler+0x44>)
 8001f86:	681b      	ldr	r3, [r3, #0]
 8001f88:	2b00      	cmp	r3, #0
 8001f8a:	d004      	beq.n	8001f96 <SysTick_Handler+0x32>
		TM_TimingDelay--;
 8001f8c:	4b06      	ldr	r3, [pc, #24]	; (8001fa8 <SysTick_Handler+0x44>)
 8001f8e:	681b      	ldr	r3, [r3, #0]
 8001f90:	3b01      	subs	r3, #1
 8001f92:	4a05      	ldr	r2, [pc, #20]	; (8001fa8 <SysTick_Handler+0x44>)
 8001f94:	6013      	str	r3, [r2, #0]
	}
}
 8001f96:	bf00      	nop
 8001f98:	46bd      	mov	sp, r7
 8001f9a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001f9e:	4770      	bx	lr
 8001fa0:	200000bc 	.word	0x200000bc
 8001fa4:	200000c0 	.word	0x200000c0
 8001fa8:	200000b8 	.word	0x200000b8

08001fac <TM_DELAY_Init>:
#endif

void TM_DELAY_Init(void) {
 8001fac:	b580      	push	{r7, lr}
 8001fae:	af00      	add	r7, sp, #0
	if (TM_DELAY_Initialized) {
 8001fb0:	4b0f      	ldr	r3, [pc, #60]	; (8001ff0 <TM_DELAY_Init+0x44>)
 8001fb2:	781b      	ldrb	r3, [r3, #0]
 8001fb4:	2b00      	cmp	r3, #0
 8001fb6:	d119      	bne.n	8001fec <TM_DELAY_Init+0x40>
		return;
	}
	RCC_HSEConfig(RCC_HSE_ON);
 8001fb8:	2001      	movs	r0, #1
 8001fba:	f7fe ffe9 	bl	8000f90 <RCC_HSEConfig>
	while (!RCC_WaitForHSEStartUp());
 8001fbe:	bf00      	nop
 8001fc0:	f7fe fffa 	bl	8000fb8 <RCC_WaitForHSEStartUp>
 8001fc4:	4603      	mov	r3, r0
 8001fc6:	2b00      	cmp	r3, #0
 8001fc8:	d0fa      	beq.n	8001fc0 <TM_DELAY_Init+0x14>
	/* Set Systick interrupt every 1us */
	if (SysTick_Config(SystemCoreClock / 1000000)) {
 8001fca:	4b0a      	ldr	r3, [pc, #40]	; (8001ff4 <TM_DELAY_Init+0x48>)
 8001fcc:	681b      	ldr	r3, [r3, #0]
 8001fce:	4a0a      	ldr	r2, [pc, #40]	; (8001ff8 <TM_DELAY_Init+0x4c>)
 8001fd0:	fba2 2303 	umull	r2, r3, r2, r3
 8001fd4:	0c9b      	lsrs	r3, r3, #18
 8001fd6:	4618      	mov	r0, r3
 8001fd8:	f7ff ff76 	bl	8001ec8 <SysTick_Config>
 8001fdc:	4603      	mov	r3, r0
 8001fde:	2b00      	cmp	r3, #0
 8001fe0:	d000      	beq.n	8001fe4 <TM_DELAY_Init+0x38>
		/* Capture error */
		while (1);
 8001fe2:	e7fe      	b.n	8001fe2 <TM_DELAY_Init+0x36>
	}
	TM_DELAY_Initialized = 1;
 8001fe4:	4b02      	ldr	r3, [pc, #8]	; (8001ff0 <TM_DELAY_Init+0x44>)
 8001fe6:	2201      	movs	r2, #1
 8001fe8:	701a      	strb	r2, [r3, #0]
 8001fea:	e000      	b.n	8001fee <TM_DELAY_Init+0x42>
		return;
 8001fec:	bf00      	nop
}
 8001fee:	bd80      	pop	{r7, pc}
 8001ff0:	200000c4 	.word	0x200000c4
 8001ff4:	20000020 	.word	0x20000020
 8001ff8:	431bde83 	.word	0x431bde83

08001ffc <TM_GPIO_InitAlternate>:
	
	/* Do initialization */
	TM_GPIO_INT_Init(GPIOx, GPIO_Pin, GPIO_Mode, GPIO_OType, GPIO_PuPd, GPIO_Speed);
}

void TM_GPIO_InitAlternate(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, TM_GPIO_OType_t GPIO_OType, TM_GPIO_PuPd_t GPIO_PuPd, TM_GPIO_Speed_t GPIO_Speed, uint8_t Alternate) {
 8001ffc:	b580      	push	{r7, lr}
 8001ffe:	b086      	sub	sp, #24
 8002000:	af02      	add	r7, sp, #8
 8002002:	6078      	str	r0, [r7, #4]
 8002004:	4608      	mov	r0, r1
 8002006:	4611      	mov	r1, r2
 8002008:	461a      	mov	r2, r3
 800200a:	4603      	mov	r3, r0
 800200c:	807b      	strh	r3, [r7, #2]
 800200e:	460b      	mov	r3, r1
 8002010:	707b      	strb	r3, [r7, #1]
 8002012:	4613      	mov	r3, r2
 8002014:	703b      	strb	r3, [r7, #0]
	uint32_t pinpos;

	/* Check input */
	if (GPIO_Pin == 0x00) {
 8002016:	887b      	ldrh	r3, [r7, #2]
 8002018:	2b00      	cmp	r3, #0
 800201a:	d03e      	beq.n	800209a <TM_GPIO_InitAlternate+0x9e>
		return;
	}
	
	/* Enable GPIOx clock */
	TM_GPIO_INT_EnableClock(GPIOx);
 800201c:	6878      	ldr	r0, [r7, #4]
 800201e:	f000 f851 	bl	80020c4 <TM_GPIO_INT_EnableClock>
	
	/* Set alternate functions for all pins */
	for (pinpos = 0; pinpos < 0x10; pinpos++) {
 8002022:	2300      	movs	r3, #0
 8002024:	60fb      	str	r3, [r7, #12]
 8002026:	e029      	b.n	800207c <TM_GPIO_InitAlternate+0x80>
		/* Check pin */
		if ((GPIO_Pin & (1 << pinpos)) == 0) {
 8002028:	887a      	ldrh	r2, [r7, #2]
 800202a:	68fb      	ldr	r3, [r7, #12]
 800202c:	fa42 f303 	asr.w	r3, r2, r3
 8002030:	f003 0301 	and.w	r3, r3, #1
 8002034:	2b00      	cmp	r3, #0
 8002036:	d01d      	beq.n	8002074 <TM_GPIO_InitAlternate+0x78>
			continue;
		}
		
		/* Set alternate function */
		GPIOx->AFR[pinpos >> 0x03] = (GPIOx->AFR[pinpos >> 0x03] & ~(0x0F << (4 * (pinpos & 0x07)))) | (Alternate << (4 * (pinpos & 0x07)));
 8002038:	68fb      	ldr	r3, [r7, #12]
 800203a:	08da      	lsrs	r2, r3, #3
 800203c:	68fb      	ldr	r3, [r7, #12]
 800203e:	08d9      	lsrs	r1, r3, #3
 8002040:	687b      	ldr	r3, [r7, #4]
 8002042:	3108      	adds	r1, #8
 8002044:	f853 3021 	ldr.w	r3, [r3, r1, lsl #2]
 8002048:	68f9      	ldr	r1, [r7, #12]
 800204a:	f001 0107 	and.w	r1, r1, #7
 800204e:	0089      	lsls	r1, r1, #2
 8002050:	200f      	movs	r0, #15
 8002052:	fa00 f101 	lsl.w	r1, r0, r1
 8002056:	43c9      	mvns	r1, r1
 8002058:	400b      	ands	r3, r1
 800205a:	7f38      	ldrb	r0, [r7, #28]
 800205c:	68f9      	ldr	r1, [r7, #12]
 800205e:	f001 0107 	and.w	r1, r1, #7
 8002062:	0089      	lsls	r1, r1, #2
 8002064:	fa00 f101 	lsl.w	r1, r0, r1
 8002068:	4319      	orrs	r1, r3
 800206a:	687b      	ldr	r3, [r7, #4]
 800206c:	3208      	adds	r2, #8
 800206e:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
 8002072:	e000      	b.n	8002076 <TM_GPIO_InitAlternate+0x7a>
			continue;
 8002074:	bf00      	nop
	for (pinpos = 0; pinpos < 0x10; pinpos++) {
 8002076:	68fb      	ldr	r3, [r7, #12]
 8002078:	3301      	adds	r3, #1
 800207a:	60fb      	str	r3, [r7, #12]
 800207c:	68fb      	ldr	r3, [r7, #12]
 800207e:	2b0f      	cmp	r3, #15
 8002080:	d9d2      	bls.n	8002028 <TM_GPIO_InitAlternate+0x2c>
	}
	
	/* Do initialization */
	TM_GPIO_INT_Init(GPIOx, GPIO_Pin, TM_GPIO_Mode_AF, GPIO_OType, GPIO_PuPd, GPIO_Speed);
 8002082:	787a      	ldrb	r2, [r7, #1]
 8002084:	8879      	ldrh	r1, [r7, #2]
 8002086:	7e3b      	ldrb	r3, [r7, #24]
 8002088:	9301      	str	r3, [sp, #4]
 800208a:	783b      	ldrb	r3, [r7, #0]
 800208c:	9300      	str	r3, [sp, #0]
 800208e:	4613      	mov	r3, r2
 8002090:	2202      	movs	r2, #2
 8002092:	6878      	ldr	r0, [r7, #4]
 8002094:	f000 f82e 	bl	80020f4 <TM_GPIO_INT_Init>
 8002098:	e000      	b.n	800209c <TM_GPIO_InitAlternate+0xa0>
		return;
 800209a:	bf00      	nop
}
 800209c:	3710      	adds	r7, #16
 800209e:	46bd      	mov	sp, r7
 80020a0:	bd80      	pop	{r7, pc}

080020a2 <TM_GPIO_GetPortSource>:
	
	/* Return source */
	return pinsource;
}

uint16_t TM_GPIO_GetPortSource(GPIO_TypeDef* GPIOx) {
 80020a2:	b480      	push	{r7}
 80020a4:	b083      	sub	sp, #12
 80020a6:	af00      	add	r7, sp, #0
 80020a8:	6078      	str	r0, [r7, #4]
	/* Get port source number */
	/* Offset from GPIOA                       Difference between 2 GPIO addresses */
	return ((uint32_t)GPIOx - (GPIOA_BASE)) / ((GPIOB_BASE) - (GPIOA_BASE));
 80020aa:	687b      	ldr	r3, [r7, #4]
 80020ac:	f103 433f 	add.w	r3, r3, #3204448256	; 0xbf000000
 80020b0:	f503 037e 	add.w	r3, r3, #16646144	; 0xfe0000
 80020b4:	0a9b      	lsrs	r3, r3, #10
 80020b6:	b29b      	uxth	r3, r3
}
 80020b8:	4618      	mov	r0, r3
 80020ba:	370c      	adds	r7, #12
 80020bc:	46bd      	mov	sp, r7
 80020be:	f85d 7b04 	ldr.w	r7, [sp], #4
 80020c2:	4770      	bx	lr

080020c4 <TM_GPIO_INT_EnableClock>:

/* Private functions */
void TM_GPIO_INT_EnableClock(GPIO_TypeDef* GPIOx) {
 80020c4:	b580      	push	{r7, lr}
 80020c6:	b082      	sub	sp, #8
 80020c8:	af00      	add	r7, sp, #0
 80020ca:	6078      	str	r0, [r7, #4]
	/* Set bit according to the 1 << portsourcenumber */
	RCC->AHB1ENR |= (1 << TM_GPIO_GetPortSource(GPIOx));
 80020cc:	6878      	ldr	r0, [r7, #4]
 80020ce:	f7ff ffe8 	bl	80020a2 <TM_GPIO_GetPortSource>
 80020d2:	4603      	mov	r3, r0
 80020d4:	461a      	mov	r2, r3
 80020d6:	2301      	movs	r3, #1
 80020d8:	fa03 f102 	lsl.w	r1, r3, r2
 80020dc:	4a04      	ldr	r2, [pc, #16]	; (80020f0 <TM_GPIO_INT_EnableClock+0x2c>)
 80020de:	4b04      	ldr	r3, [pc, #16]	; (80020f0 <TM_GPIO_INT_EnableClock+0x2c>)
 80020e0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80020e2:	430b      	orrs	r3, r1
 80020e4:	6313      	str	r3, [r2, #48]	; 0x30
}
 80020e6:	bf00      	nop
 80020e8:	3708      	adds	r7, #8
 80020ea:	46bd      	mov	sp, r7
 80020ec:	bd80      	pop	{r7, pc}
 80020ee:	bf00      	nop
 80020f0:	40023800 	.word	0x40023800

080020f4 <TM_GPIO_INT_Init>:
void TM_GPIO_INT_DisableClock(GPIO_TypeDef* GPIOx) {
	/* Clear bit according to the 1 << portsourcenumber */
	RCC->AHB1ENR &= ~(1 << TM_GPIO_GetPortSource(GPIOx));
}

void TM_GPIO_INT_Init(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, TM_GPIO_Mode_t GPIO_Mode, TM_GPIO_OType_t GPIO_OType, TM_GPIO_PuPd_t GPIO_PuPd, TM_GPIO_Speed_t GPIO_Speed) {
 80020f4:	b580      	push	{r7, lr}
 80020f6:	b084      	sub	sp, #16
 80020f8:	af00      	add	r7, sp, #0
 80020fa:	6078      	str	r0, [r7, #4]
 80020fc:	4608      	mov	r0, r1
 80020fe:	4611      	mov	r1, r2
 8002100:	461a      	mov	r2, r3
 8002102:	4603      	mov	r3, r0
 8002104:	807b      	strh	r3, [r7, #2]
 8002106:	460b      	mov	r3, r1
 8002108:	707b      	strb	r3, [r7, #1]
 800210a:	4613      	mov	r3, r2
 800210c:	703b      	strb	r3, [r7, #0]
	uint8_t pinpos;
	uint8_t ptr = TM_GPIO_GetPortSource(GPIOx);
 800210e:	6878      	ldr	r0, [r7, #4]
 8002110:	f7ff ffc7 	bl	80020a2 <TM_GPIO_GetPortSource>
 8002114:	4603      	mov	r3, r0
 8002116:	73bb      	strb	r3, [r7, #14]
	
	/* Go through all pins */
	for (pinpos = 0; pinpos < 0x10; pinpos++) {
 8002118:	2300      	movs	r3, #0
 800211a:	73fb      	strb	r3, [r7, #15]
 800211c:	e067      	b.n	80021ee <TM_GPIO_INT_Init+0xfa>
		/* Check if pin available */
		if ((GPIO_Pin & (1 << pinpos)) == 0) {
 800211e:	887a      	ldrh	r2, [r7, #2]
 8002120:	7bfb      	ldrb	r3, [r7, #15]
 8002122:	fa42 f303 	asr.w	r3, r2, r3
 8002126:	f003 0301 	and.w	r3, r3, #1
 800212a:	2b00      	cmp	r3, #0
 800212c:	d05b      	beq.n	80021e6 <TM_GPIO_INT_Init+0xf2>
			continue;
		}
		
		/* Pin is used */
		GPIO_UsedPins[ptr] |= 1 << pinpos;
 800212e:	7bbb      	ldrb	r3, [r7, #14]
 8002130:	7bba      	ldrb	r2, [r7, #14]
 8002132:	4932      	ldr	r1, [pc, #200]	; (80021fc <TM_GPIO_INT_Init+0x108>)
 8002134:	f831 2012 	ldrh.w	r2, [r1, r2, lsl #1]
 8002138:	b211      	sxth	r1, r2
 800213a:	7bfa      	ldrb	r2, [r7, #15]
 800213c:	2001      	movs	r0, #1
 800213e:	fa00 f202 	lsl.w	r2, r0, r2
 8002142:	b212      	sxth	r2, r2
 8002144:	430a      	orrs	r2, r1
 8002146:	b212      	sxth	r2, r2
 8002148:	b291      	uxth	r1, r2
 800214a:	4a2c      	ldr	r2, [pc, #176]	; (80021fc <TM_GPIO_INT_Init+0x108>)
 800214c:	f822 1013 	strh.w	r1, [r2, r3, lsl #1]
		
		/* Set GPIO PUPD register */
		GPIOx->PUPDR = (GPIOx->PUPDR & ~(0x03 << (2 * pinpos))) | ((uint32_t)(GPIO_PuPd << (2 * pinpos)));
 8002150:	687b      	ldr	r3, [r7, #4]
 8002152:	68db      	ldr	r3, [r3, #12]
 8002154:	7bfa      	ldrb	r2, [r7, #15]
 8002156:	0052      	lsls	r2, r2, #1
 8002158:	2103      	movs	r1, #3
 800215a:	fa01 f202 	lsl.w	r2, r1, r2
 800215e:	43d2      	mvns	r2, r2
 8002160:	4013      	ands	r3, r2
 8002162:	7e39      	ldrb	r1, [r7, #24]
 8002164:	7bfa      	ldrb	r2, [r7, #15]
 8002166:	0052      	lsls	r2, r2, #1
 8002168:	fa01 f202 	lsl.w	r2, r1, r2
 800216c:	431a      	orrs	r2, r3
 800216e:	687b      	ldr	r3, [r7, #4]
 8002170:	60da      	str	r2, [r3, #12]
		
		/* Set GPIO MODE register */
		GPIOx->MODER = (GPIOx->MODER & ~((uint32_t)(0x03 << (2 * pinpos)))) | ((uint32_t)(GPIO_Mode << (2 * pinpos)));
 8002172:	687b      	ldr	r3, [r7, #4]
 8002174:	681a      	ldr	r2, [r3, #0]
 8002176:	7bfb      	ldrb	r3, [r7, #15]
 8002178:	005b      	lsls	r3, r3, #1
 800217a:	2103      	movs	r1, #3
 800217c:	fa01 f303 	lsl.w	r3, r1, r3
 8002180:	43db      	mvns	r3, r3
 8002182:	4013      	ands	r3, r2
 8002184:	7879      	ldrb	r1, [r7, #1]
 8002186:	7bfa      	ldrb	r2, [r7, #15]
 8002188:	0052      	lsls	r2, r2, #1
 800218a:	fa01 f202 	lsl.w	r2, r1, r2
 800218e:	431a      	orrs	r2, r3
 8002190:	687b      	ldr	r3, [r7, #4]
 8002192:	601a      	str	r2, [r3, #0]
		
		/* Set only if output or alternate functions */
		if (GPIO_Mode == TM_GPIO_Mode_OUT || GPIO_Mode == TM_GPIO_Mode_AF) {		
 8002194:	787b      	ldrb	r3, [r7, #1]
 8002196:	2b01      	cmp	r3, #1
 8002198:	d002      	beq.n	80021a0 <TM_GPIO_INT_Init+0xac>
 800219a:	787b      	ldrb	r3, [r7, #1]
 800219c:	2b02      	cmp	r3, #2
 800219e:	d123      	bne.n	80021e8 <TM_GPIO_INT_Init+0xf4>
			/* Set GPIO OTYPE register */
			GPIOx->OTYPER = (GPIOx->OTYPER & ~(uint16_t)(0x01 << pinpos)) | ((uint16_t)(GPIO_OType << pinpos));
 80021a0:	687b      	ldr	r3, [r7, #4]
 80021a2:	685b      	ldr	r3, [r3, #4]
 80021a4:	7bfa      	ldrb	r2, [r7, #15]
 80021a6:	2101      	movs	r1, #1
 80021a8:	fa01 f202 	lsl.w	r2, r1, r2
 80021ac:	b292      	uxth	r2, r2
 80021ae:	43d2      	mvns	r2, r2
 80021b0:	4013      	ands	r3, r2
 80021b2:	7839      	ldrb	r1, [r7, #0]
 80021b4:	7bfa      	ldrb	r2, [r7, #15]
 80021b6:	fa01 f202 	lsl.w	r2, r1, r2
 80021ba:	b292      	uxth	r2, r2
 80021bc:	431a      	orrs	r2, r3
 80021be:	687b      	ldr	r3, [r7, #4]
 80021c0:	605a      	str	r2, [r3, #4]
			
			/* Set GPIO OSPEED register */
			GPIOx->OSPEEDR = (GPIOx->OSPEEDR & ~((uint32_t)(0x03 << (2 * pinpos)))) | ((uint32_t)(GPIO_Speed << (2 * pinpos)));
 80021c2:	687b      	ldr	r3, [r7, #4]
 80021c4:	689a      	ldr	r2, [r3, #8]
 80021c6:	7bfb      	ldrb	r3, [r7, #15]
 80021c8:	005b      	lsls	r3, r3, #1
 80021ca:	2103      	movs	r1, #3
 80021cc:	fa01 f303 	lsl.w	r3, r1, r3
 80021d0:	43db      	mvns	r3, r3
 80021d2:	4013      	ands	r3, r2
 80021d4:	7f39      	ldrb	r1, [r7, #28]
 80021d6:	7bfa      	ldrb	r2, [r7, #15]
 80021d8:	0052      	lsls	r2, r2, #1
 80021da:	fa01 f202 	lsl.w	r2, r1, r2
 80021de:	431a      	orrs	r2, r3
 80021e0:	687b      	ldr	r3, [r7, #4]
 80021e2:	609a      	str	r2, [r3, #8]
 80021e4:	e000      	b.n	80021e8 <TM_GPIO_INT_Init+0xf4>
			continue;
 80021e6:	bf00      	nop
	for (pinpos = 0; pinpos < 0x10; pinpos++) {
 80021e8:	7bfb      	ldrb	r3, [r7, #15]
 80021ea:	3301      	adds	r3, #1
 80021ec:	73fb      	strb	r3, [r7, #15]
 80021ee:	7bfb      	ldrb	r3, [r7, #15]
 80021f0:	2b0f      	cmp	r3, #15
 80021f2:	d994      	bls.n	800211e <TM_GPIO_INT_Init+0x2a>
		}
	}
}
 80021f4:	bf00      	nop
 80021f6:	3710      	adds	r7, #16
 80021f8:	46bd      	mov	sp, r7
 80021fa:	bd80      	pop	{r7, pc}
 80021fc:	200000c8 	.word	0x200000c8

08002200 <TM_I2C_Init>:
/* Private functions */
void TM_I2C1_INT_InitPins(TM_I2C_PinsPack_t pinspack);
void TM_I2C2_INT_InitPins(TM_I2C_PinsPack_t pinspack);
void TM_I2C3_INT_InitPins(TM_I2C_PinsPack_t pinspack);

void TM_I2C_Init(I2C_TypeDef* I2Cx, TM_I2C_PinsPack_t pinspack, uint32_t clockSpeed) {
 8002200:	b580      	push	{r7, lr}
 8002202:	b088      	sub	sp, #32
 8002204:	af00      	add	r7, sp, #0
 8002206:	60f8      	str	r0, [r7, #12]
 8002208:	460b      	mov	r3, r1
 800220a:	607a      	str	r2, [r7, #4]
 800220c:	72fb      	strb	r3, [r7, #11]
	I2C_InitTypeDef I2C_InitStruct;
	
	if (I2Cx == I2C1) {
 800220e:	68fb      	ldr	r3, [r7, #12]
 8002210:	4a44      	ldr	r2, [pc, #272]	; (8002324 <TM_I2C_Init+0x124>)
 8002212:	4293      	cmp	r3, r2
 8002214:	d121      	bne.n	800225a <TM_I2C_Init+0x5a>
		/* Enable clock */
		RCC->APB1ENR |= RCC_APB1ENR_I2C1EN;
 8002216:	4a44      	ldr	r2, [pc, #272]	; (8002328 <TM_I2C_Init+0x128>)
 8002218:	4b43      	ldr	r3, [pc, #268]	; (8002328 <TM_I2C_Init+0x128>)
 800221a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800221c:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 8002220:	6413      	str	r3, [r2, #64]	; 0x40
		
		/* Enable pins */
		TM_I2C1_INT_InitPins(pinspack);
 8002222:	7afb      	ldrb	r3, [r7, #11]
 8002224:	4618      	mov	r0, r3
 8002226:	f000 fa51 	bl	80026cc <TM_I2C1_INT_InitPins>
		
		/* Check clock, set the lowest clock your devices support on the same I2C but */
		if (clockSpeed < TM_I2C_INT_Clocks[0]) {
 800222a:	4b40      	ldr	r3, [pc, #256]	; (800232c <TM_I2C_Init+0x12c>)
 800222c:	681a      	ldr	r2, [r3, #0]
 800222e:	687b      	ldr	r3, [r7, #4]
 8002230:	429a      	cmp	r2, r3
 8002232:	d902      	bls.n	800223a <TM_I2C_Init+0x3a>
			TM_I2C_INT_Clocks[0] = clockSpeed;
 8002234:	4a3d      	ldr	r2, [pc, #244]	; (800232c <TM_I2C_Init+0x12c>)
 8002236:	687b      	ldr	r3, [r7, #4]
 8002238:	6013      	str	r3, [r2, #0]
		}
		
		/* Set values */
		I2C_InitStruct.I2C_ClockSpeed = TM_I2C_INT_Clocks[0];
 800223a:	4b3c      	ldr	r3, [pc, #240]	; (800232c <TM_I2C_Init+0x12c>)
 800223c:	681b      	ldr	r3, [r3, #0]
 800223e:	613b      	str	r3, [r7, #16]
		I2C_InitStruct.I2C_AcknowledgedAddress = TM_I2C1_ACKNOWLEDGED_ADDRESS;
 8002240:	f44f 4380 	mov.w	r3, #16384	; 0x4000
 8002244:	83bb      	strh	r3, [r7, #28]
		I2C_InitStruct.I2C_Mode = TM_I2C1_MODE;
 8002246:	2300      	movs	r3, #0
 8002248:	82bb      	strh	r3, [r7, #20]
		I2C_InitStruct.I2C_OwnAddress1 = TM_I2C1_OWN_ADDRESS;
 800224a:	2300      	movs	r3, #0
 800224c:	833b      	strh	r3, [r7, #24]
		I2C_InitStruct.I2C_Ack = TM_I2C1_ACK;
 800224e:	2300      	movs	r3, #0
 8002250:	837b      	strh	r3, [r7, #26]
		I2C_InitStruct.I2C_DutyCycle = TM_I2C1_DUTY_CYCLE;
 8002252:	f64b 73ff 	movw	r3, #49151	; 0xbfff
 8002256:	82fb      	strh	r3, [r7, #22]
 8002258:	e04a      	b.n	80022f0 <TM_I2C_Init+0xf0>
	} else if (I2Cx == I2C2) {
 800225a:	68fb      	ldr	r3, [r7, #12]
 800225c:	4a34      	ldr	r2, [pc, #208]	; (8002330 <TM_I2C_Init+0x130>)
 800225e:	4293      	cmp	r3, r2
 8002260:	d121      	bne.n	80022a6 <TM_I2C_Init+0xa6>
		/* Enable clock */
		RCC->APB1ENR |= RCC_APB1ENR_I2C2EN;
 8002262:	4a31      	ldr	r2, [pc, #196]	; (8002328 <TM_I2C_Init+0x128>)
 8002264:	4b30      	ldr	r3, [pc, #192]	; (8002328 <TM_I2C_Init+0x128>)
 8002266:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002268:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 800226c:	6413      	str	r3, [r2, #64]	; 0x40
		
		/* Enable pins */
		TM_I2C2_INT_InitPins(pinspack);
 800226e:	7afb      	ldrb	r3, [r7, #11]
 8002270:	4618      	mov	r0, r3
 8002272:	f000 fa67 	bl	8002744 <TM_I2C2_INT_InitPins>
		
		/* Check clock, set the lowest clock your devices support on the same I2C but */
		if (clockSpeed < TM_I2C_INT_Clocks[1]) {
 8002276:	4b2d      	ldr	r3, [pc, #180]	; (800232c <TM_I2C_Init+0x12c>)
 8002278:	685a      	ldr	r2, [r3, #4]
 800227a:	687b      	ldr	r3, [r7, #4]
 800227c:	429a      	cmp	r2, r3
 800227e:	d902      	bls.n	8002286 <TM_I2C_Init+0x86>
			TM_I2C_INT_Clocks[1] = clockSpeed;
 8002280:	4a2a      	ldr	r2, [pc, #168]	; (800232c <TM_I2C_Init+0x12c>)
 8002282:	687b      	ldr	r3, [r7, #4]
 8002284:	6053      	str	r3, [r2, #4]
		}
		
		/* Set values */
		I2C_InitStruct.I2C_ClockSpeed = TM_I2C_INT_Clocks[1];
 8002286:	4b29      	ldr	r3, [pc, #164]	; (800232c <TM_I2C_Init+0x12c>)
 8002288:	685b      	ldr	r3, [r3, #4]
 800228a:	613b      	str	r3, [r7, #16]
		I2C_InitStruct.I2C_AcknowledgedAddress = TM_I2C2_ACKNOWLEDGED_ADDRESS;
 800228c:	f44f 4380 	mov.w	r3, #16384	; 0x4000
 8002290:	83bb      	strh	r3, [r7, #28]
		I2C_InitStruct.I2C_Mode = TM_I2C2_MODE;
 8002292:	2300      	movs	r3, #0
 8002294:	82bb      	strh	r3, [r7, #20]
		I2C_InitStruct.I2C_OwnAddress1 = TM_I2C2_OWN_ADDRESS;
 8002296:	2300      	movs	r3, #0
 8002298:	833b      	strh	r3, [r7, #24]
		I2C_InitStruct.I2C_Ack = TM_I2C2_ACK;
 800229a:	2300      	movs	r3, #0
 800229c:	837b      	strh	r3, [r7, #26]
		I2C_InitStruct.I2C_DutyCycle = TM_I2C2_DUTY_CYCLE;
 800229e:	f64b 73ff 	movw	r3, #49151	; 0xbfff
 80022a2:	82fb      	strh	r3, [r7, #22]
 80022a4:	e024      	b.n	80022f0 <TM_I2C_Init+0xf0>
	} else if (I2Cx == I2C3) {
 80022a6:	68fb      	ldr	r3, [r7, #12]
 80022a8:	4a22      	ldr	r2, [pc, #136]	; (8002334 <TM_I2C_Init+0x134>)
 80022aa:	4293      	cmp	r3, r2
 80022ac:	d120      	bne.n	80022f0 <TM_I2C_Init+0xf0>
		/* Enable clock */
		RCC->APB1ENR |= RCC_APB1ENR_I2C3EN;
 80022ae:	4a1e      	ldr	r2, [pc, #120]	; (8002328 <TM_I2C_Init+0x128>)
 80022b0:	4b1d      	ldr	r3, [pc, #116]	; (8002328 <TM_I2C_Init+0x128>)
 80022b2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80022b4:	f443 0300 	orr.w	r3, r3, #8388608	; 0x800000
 80022b8:	6413      	str	r3, [r2, #64]	; 0x40
		
		/* Enable pins */
		TM_I2C3_INT_InitPins(pinspack);
 80022ba:	7afb      	ldrb	r3, [r7, #11]
 80022bc:	4618      	mov	r0, r3
 80022be:	f000 fa81 	bl	80027c4 <TM_I2C3_INT_InitPins>
		
		/* Check clock, set the lowest clock your devices support on the same I2C but */
		if (clockSpeed < TM_I2C_INT_Clocks[2]) {
 80022c2:	4b1a      	ldr	r3, [pc, #104]	; (800232c <TM_I2C_Init+0x12c>)
 80022c4:	689a      	ldr	r2, [r3, #8]
 80022c6:	687b      	ldr	r3, [r7, #4]
 80022c8:	429a      	cmp	r2, r3
 80022ca:	d902      	bls.n	80022d2 <TM_I2C_Init+0xd2>
			TM_I2C_INT_Clocks[2] = clockSpeed;
 80022cc:	4a17      	ldr	r2, [pc, #92]	; (800232c <TM_I2C_Init+0x12c>)
 80022ce:	687b      	ldr	r3, [r7, #4]
 80022d0:	6093      	str	r3, [r2, #8]
		}
		
		/* Set values */
		I2C_InitStruct.I2C_ClockSpeed = TM_I2C_INT_Clocks[2];
 80022d2:	4b16      	ldr	r3, [pc, #88]	; (800232c <TM_I2C_Init+0x12c>)
 80022d4:	689b      	ldr	r3, [r3, #8]
 80022d6:	613b      	str	r3, [r7, #16]
		I2C_InitStruct.I2C_AcknowledgedAddress = TM_I2C3_ACKNOWLEDGED_ADDRESS;
 80022d8:	f44f 4380 	mov.w	r3, #16384	; 0x4000
 80022dc:	83bb      	strh	r3, [r7, #28]
		I2C_InitStruct.I2C_Mode = TM_I2C3_MODE;
 80022de:	2300      	movs	r3, #0
 80022e0:	82bb      	strh	r3, [r7, #20]
		I2C_InitStruct.I2C_OwnAddress1 = TM_I2C3_OWN_ADDRESS;
 80022e2:	2300      	movs	r3, #0
 80022e4:	833b      	strh	r3, [r7, #24]
		I2C_InitStruct.I2C_Ack = TM_I2C3_ACK;
 80022e6:	2300      	movs	r3, #0
 80022e8:	837b      	strh	r3, [r7, #26]
		I2C_InitStruct.I2C_DutyCycle = TM_I2C3_DUTY_CYCLE;
 80022ea:	f64b 73ff 	movw	r3, #49151	; 0xbfff
 80022ee:	82fb      	strh	r3, [r7, #22]
	}
	
	/* Disable I2C first */
	I2Cx->CR1 &= ~I2C_CR1_PE;
 80022f0:	68fb      	ldr	r3, [r7, #12]
 80022f2:	881b      	ldrh	r3, [r3, #0]
 80022f4:	b29b      	uxth	r3, r3
 80022f6:	f023 0301 	bic.w	r3, r3, #1
 80022fa:	b29a      	uxth	r2, r3
 80022fc:	68fb      	ldr	r3, [r7, #12]
 80022fe:	801a      	strh	r2, [r3, #0]
	
	/* Initialize I2C */
	I2C_Init(I2Cx, &I2C_InitStruct);
 8002300:	f107 0310 	add.w	r3, r7, #16
 8002304:	4619      	mov	r1, r3
 8002306:	68f8      	ldr	r0, [r7, #12]
 8002308:	f7fe fd50 	bl	8000dac <I2C_Init>
	
	/* Enable I2C */
	I2Cx->CR1 |= I2C_CR1_PE;
 800230c:	68fb      	ldr	r3, [r7, #12]
 800230e:	881b      	ldrh	r3, [r3, #0]
 8002310:	b29b      	uxth	r3, r3
 8002312:	f043 0301 	orr.w	r3, r3, #1
 8002316:	b29a      	uxth	r2, r3
 8002318:	68fb      	ldr	r3, [r7, #12]
 800231a:	801a      	strh	r2, [r3, #0]
}
 800231c:	bf00      	nop
 800231e:	3720      	adds	r7, #32
 8002320:	46bd      	mov	sp, r7
 8002322:	bd80      	pop	{r7, pc}
 8002324:	40005400 	.word	0x40005400
 8002328:	40023800 	.word	0x40023800
 800232c:	20000024 	.word	0x20000024
 8002330:	40005800 	.word	0x40005800
 8002334:	40005c00 	.word	0x40005c00

08002338 <TM_I2C_ReadMulti>:
	received_data = TM_I2C_ReadNack(I2Cx);
	return received_data;
}


void TM_I2C_ReadMulti(I2C_TypeDef* I2Cx, uint8_t address, uint8_t reg, uint8_t* data, uint16_t count) {
 8002338:	b590      	push	{r4, r7, lr}
 800233a:	b087      	sub	sp, #28
 800233c:	af00      	add	r7, sp, #0
 800233e:	60f8      	str	r0, [r7, #12]
 8002340:	607b      	str	r3, [r7, #4]
 8002342:	460b      	mov	r3, r1
 8002344:	72fb      	strb	r3, [r7, #11]
 8002346:	4613      	mov	r3, r2
 8002348:	72bb      	strb	r3, [r7, #10]
	uint8_t i;
	TM_I2C_Start(I2Cx, address, I2C_TRANSMITTER_MODE, I2C_ACK_ENABLE);
 800234a:	7af9      	ldrb	r1, [r7, #11]
 800234c:	2301      	movs	r3, #1
 800234e:	2200      	movs	r2, #0
 8002350:	68f8      	ldr	r0, [r7, #12]
 8002352:	f000 f857 	bl	8002404 <TM_I2C_Start>
	TM_I2C_WriteData(I2Cx, reg);
 8002356:	7abb      	ldrb	r3, [r7, #10]
 8002358:	4619      	mov	r1, r3
 800235a:	68f8      	ldr	r0, [r7, #12]
 800235c:	f000 f8d6 	bl	800250c <TM_I2C_WriteData>
	TM_I2C_Stop(I2Cx);
 8002360:	68f8      	ldr	r0, [r7, #12]
 8002362:	f000 f963 	bl	800262c <TM_I2C_Stop>
	TM_I2C_Start(I2Cx, address, I2C_RECEIVER_MODE, I2C_ACK_ENABLE);
 8002366:	7af9      	ldrb	r1, [r7, #11]
 8002368:	2301      	movs	r3, #1
 800236a:	2201      	movs	r2, #1
 800236c:	68f8      	ldr	r0, [r7, #12]
 800236e:	f000 f849 	bl	8002404 <TM_I2C_Start>
	for (i = 0; i < count; i++) {
 8002372:	2300      	movs	r3, #0
 8002374:	75fb      	strb	r3, [r7, #23]
 8002376:	e018      	b.n	80023aa <TM_I2C_ReadMulti+0x72>
		if (i == (count - 1)) {
 8002378:	7dfa      	ldrb	r2, [r7, #23]
 800237a:	8d3b      	ldrh	r3, [r7, #40]	; 0x28
 800237c:	3b01      	subs	r3, #1
 800237e:	429a      	cmp	r2, r3
 8002380:	d108      	bne.n	8002394 <TM_I2C_ReadMulti+0x5c>
			/* Last byte */
			data[i] = TM_I2C_ReadNack(I2Cx);
 8002382:	7dfb      	ldrb	r3, [r7, #23]
 8002384:	687a      	ldr	r2, [r7, #4]
 8002386:	18d4      	adds	r4, r2, r3
 8002388:	68f8      	ldr	r0, [r7, #12]
 800238a:	f000 f917 	bl	80025bc <TM_I2C_ReadNack>
 800238e:	4603      	mov	r3, r0
 8002390:	7023      	strb	r3, [r4, #0]
 8002392:	e007      	b.n	80023a4 <TM_I2C_ReadMulti+0x6c>
		} else {
			data[i] = TM_I2C_ReadAck(I2Cx);
 8002394:	7dfb      	ldrb	r3, [r7, #23]
 8002396:	687a      	ldr	r2, [r7, #4]
 8002398:	18d4      	adds	r4, r2, r3
 800239a:	68f8      	ldr	r0, [r7, #12]
 800239c:	f000 f8de 	bl	800255c <TM_I2C_ReadAck>
 80023a0:	4603      	mov	r3, r0
 80023a2:	7023      	strb	r3, [r4, #0]
	for (i = 0; i < count; i++) {
 80023a4:	7dfb      	ldrb	r3, [r7, #23]
 80023a6:	3301      	adds	r3, #1
 80023a8:	75fb      	strb	r3, [r7, #23]
 80023aa:	7dfb      	ldrb	r3, [r7, #23]
 80023ac:	b29b      	uxth	r3, r3
 80023ae:	8d3a      	ldrh	r2, [r7, #40]	; 0x28
 80023b0:	429a      	cmp	r2, r3
 80023b2:	d8e1      	bhi.n	8002378 <TM_I2C_ReadMulti+0x40>
		}
	}
}
 80023b4:	bf00      	nop
 80023b6:	371c      	adds	r7, #28
 80023b8:	46bd      	mov	sp, r7
 80023ba:	bd90      	pop	{r4, r7, pc}

080023bc <TM_I2C_Write>:
			data[i] = TM_I2C_ReadAck(I2Cx);
		}
	}
}

void TM_I2C_Write(I2C_TypeDef* I2Cx, uint8_t address, uint8_t reg, uint8_t data) {
 80023bc:	b580      	push	{r7, lr}
 80023be:	b082      	sub	sp, #8
 80023c0:	af00      	add	r7, sp, #0
 80023c2:	6078      	str	r0, [r7, #4]
 80023c4:	4608      	mov	r0, r1
 80023c6:	4611      	mov	r1, r2
 80023c8:	461a      	mov	r2, r3
 80023ca:	4603      	mov	r3, r0
 80023cc:	70fb      	strb	r3, [r7, #3]
 80023ce:	460b      	mov	r3, r1
 80023d0:	70bb      	strb	r3, [r7, #2]
 80023d2:	4613      	mov	r3, r2
 80023d4:	707b      	strb	r3, [r7, #1]
	TM_I2C_Start(I2Cx, address, I2C_TRANSMITTER_MODE, I2C_ACK_DISABLE);
 80023d6:	78f9      	ldrb	r1, [r7, #3]
 80023d8:	2300      	movs	r3, #0
 80023da:	2200      	movs	r2, #0
 80023dc:	6878      	ldr	r0, [r7, #4]
 80023de:	f000 f811 	bl	8002404 <TM_I2C_Start>
	TM_I2C_WriteData(I2Cx, reg);
 80023e2:	78bb      	ldrb	r3, [r7, #2]
 80023e4:	4619      	mov	r1, r3
 80023e6:	6878      	ldr	r0, [r7, #4]
 80023e8:	f000 f890 	bl	800250c <TM_I2C_WriteData>
	TM_I2C_WriteData(I2Cx, data);
 80023ec:	787b      	ldrb	r3, [r7, #1]
 80023ee:	4619      	mov	r1, r3
 80023f0:	6878      	ldr	r0, [r7, #4]
 80023f2:	f000 f88b 	bl	800250c <TM_I2C_WriteData>
	TM_I2C_Stop(I2Cx);
 80023f6:	6878      	ldr	r0, [r7, #4]
 80023f8:	f000 f918 	bl	800262c <TM_I2C_Stop>
}
 80023fc:	bf00      	nop
 80023fe:	3708      	adds	r7, #8
 8002400:	46bd      	mov	sp, r7
 8002402:	bd80      	pop	{r7, pc}

08002404 <TM_I2C_Start>:
	}
	TM_I2C_Stop(I2Cx);
}

/* Private functions */
int16_t TM_I2C_Start(I2C_TypeDef* I2Cx, uint8_t address, uint8_t direction, uint8_t ack) {
 8002404:	b580      	push	{r7, lr}
 8002406:	b082      	sub	sp, #8
 8002408:	af00      	add	r7, sp, #0
 800240a:	6078      	str	r0, [r7, #4]
 800240c:	4608      	mov	r0, r1
 800240e:	4611      	mov	r1, r2
 8002410:	461a      	mov	r2, r3
 8002412:	4603      	mov	r3, r0
 8002414:	70fb      	strb	r3, [r7, #3]
 8002416:	460b      	mov	r3, r1
 8002418:	70bb      	strb	r3, [r7, #2]
 800241a:	4613      	mov	r3, r2
 800241c:	707b      	strb	r3, [r7, #1]
	/* Generate I2C start pulse */
	I2Cx->CR1 |= I2C_CR1_START;
 800241e:	687b      	ldr	r3, [r7, #4]
 8002420:	881b      	ldrh	r3, [r3, #0]
 8002422:	b29b      	uxth	r3, r3
 8002424:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8002428:	b29a      	uxth	r2, r3
 800242a:	687b      	ldr	r3, [r7, #4]
 800242c:	801a      	strh	r2, [r3, #0]
	
	/* Wait till I2C is busy */
	TM_I2C_Timeout = TM_I2C_TIMEOUT;
 800242e:	4b35      	ldr	r3, [pc, #212]	; (8002504 <TM_I2C_Start+0x100>)
 8002430:	f644 6220 	movw	r2, #20000	; 0x4e20
 8002434:	601a      	str	r2, [r3, #0]
	while (!(I2Cx->SR1 & I2C_SR1_SB)) {
 8002436:	e00a      	b.n	800244e <TM_I2C_Start+0x4a>
		if (--TM_I2C_Timeout == 0x00) {
 8002438:	4b32      	ldr	r3, [pc, #200]	; (8002504 <TM_I2C_Start+0x100>)
 800243a:	681b      	ldr	r3, [r3, #0]
 800243c:	3b01      	subs	r3, #1
 800243e:	4a31      	ldr	r2, [pc, #196]	; (8002504 <TM_I2C_Start+0x100>)
 8002440:	6013      	str	r3, [r2, #0]
 8002442:	4b30      	ldr	r3, [pc, #192]	; (8002504 <TM_I2C_Start+0x100>)
 8002444:	681b      	ldr	r3, [r3, #0]
 8002446:	2b00      	cmp	r3, #0
 8002448:	d101      	bne.n	800244e <TM_I2C_Start+0x4a>
			return 1;
 800244a:	2301      	movs	r3, #1
 800244c:	e056      	b.n	80024fc <TM_I2C_Start+0xf8>
	while (!(I2Cx->SR1 & I2C_SR1_SB)) {
 800244e:	687b      	ldr	r3, [r7, #4]
 8002450:	8a9b      	ldrh	r3, [r3, #20]
 8002452:	b29b      	uxth	r3, r3
 8002454:	f003 0301 	and.w	r3, r3, #1
 8002458:	2b00      	cmp	r3, #0
 800245a:	d0ed      	beq.n	8002438 <TM_I2C_Start+0x34>
		}
	}

	/* Enable ack if we select it */
	if (ack) {
 800245c:	787b      	ldrb	r3, [r7, #1]
 800245e:	2b00      	cmp	r3, #0
 8002460:	d007      	beq.n	8002472 <TM_I2C_Start+0x6e>
		I2Cx->CR1 |= I2C_CR1_ACK;
 8002462:	687b      	ldr	r3, [r7, #4]
 8002464:	881b      	ldrh	r3, [r3, #0]
 8002466:	b29b      	uxth	r3, r3
 8002468:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 800246c:	b29a      	uxth	r2, r3
 800246e:	687b      	ldr	r3, [r7, #4]
 8002470:	801a      	strh	r2, [r3, #0]
	}

	/* Send write/read bit */
	if (direction == I2C_TRANSMITTER_MODE) {
 8002472:	78bb      	ldrb	r3, [r7, #2]
 8002474:	2b00      	cmp	r3, #0
 8002476:	d11d      	bne.n	80024b4 <TM_I2C_Start+0xb0>
		/* Send address with zero last bit */
		I2Cx->DR = address & ~I2C_OAR1_ADD0;
 8002478:	78fb      	ldrb	r3, [r7, #3]
 800247a:	b29b      	uxth	r3, r3
 800247c:	f023 0301 	bic.w	r3, r3, #1
 8002480:	b29a      	uxth	r2, r3
 8002482:	687b      	ldr	r3, [r7, #4]
 8002484:	821a      	strh	r2, [r3, #16]
		
		/* Wait till finished */
		TM_I2C_Timeout = TM_I2C_TIMEOUT;
 8002486:	4b1f      	ldr	r3, [pc, #124]	; (8002504 <TM_I2C_Start+0x100>)
 8002488:	f644 6220 	movw	r2, #20000	; 0x4e20
 800248c:	601a      	str	r2, [r3, #0]
		while (!(I2Cx->SR1 & I2C_SR1_ADDR)) {
 800248e:	e00a      	b.n	80024a6 <TM_I2C_Start+0xa2>
			if (--TM_I2C_Timeout == 0x00) {
 8002490:	4b1c      	ldr	r3, [pc, #112]	; (8002504 <TM_I2C_Start+0x100>)
 8002492:	681b      	ldr	r3, [r3, #0]
 8002494:	3b01      	subs	r3, #1
 8002496:	4a1b      	ldr	r2, [pc, #108]	; (8002504 <TM_I2C_Start+0x100>)
 8002498:	6013      	str	r3, [r2, #0]
 800249a:	4b1a      	ldr	r3, [pc, #104]	; (8002504 <TM_I2C_Start+0x100>)
 800249c:	681b      	ldr	r3, [r3, #0]
 800249e:	2b00      	cmp	r3, #0
 80024a0:	d101      	bne.n	80024a6 <TM_I2C_Start+0xa2>
				return 1;
 80024a2:	2301      	movs	r3, #1
 80024a4:	e02a      	b.n	80024fc <TM_I2C_Start+0xf8>
		while (!(I2Cx->SR1 & I2C_SR1_ADDR)) {
 80024a6:	687b      	ldr	r3, [r7, #4]
 80024a8:	8a9b      	ldrh	r3, [r3, #20]
 80024aa:	b29b      	uxth	r3, r3
 80024ac:	f003 0302 	and.w	r3, r3, #2
 80024b0:	2b00      	cmp	r3, #0
 80024b2:	d0ed      	beq.n	8002490 <TM_I2C_Start+0x8c>
			}
		}
	}
	if (direction == I2C_RECEIVER_MODE) {
 80024b4:	78bb      	ldrb	r3, [r7, #2]
 80024b6:	2b01      	cmp	r3, #1
 80024b8:	d11d      	bne.n	80024f6 <TM_I2C_Start+0xf2>
		/* Send address with 1 last bit */
		I2Cx->DR = address | I2C_OAR1_ADD0;
 80024ba:	78fb      	ldrb	r3, [r7, #3]
 80024bc:	f043 0301 	orr.w	r3, r3, #1
 80024c0:	b2db      	uxtb	r3, r3
 80024c2:	b29a      	uxth	r2, r3
 80024c4:	687b      	ldr	r3, [r7, #4]
 80024c6:	821a      	strh	r2, [r3, #16]
		
		/* Wait till finished */
		TM_I2C_Timeout = TM_I2C_TIMEOUT;
 80024c8:	4b0e      	ldr	r3, [pc, #56]	; (8002504 <TM_I2C_Start+0x100>)
 80024ca:	f644 6220 	movw	r2, #20000	; 0x4e20
 80024ce:	601a      	str	r2, [r3, #0]
		while (!I2C_CheckEvent(I2Cx, I2C_EVENT_MASTER_RECEIVER_MODE_SELECTED)) {
 80024d0:	e00a      	b.n	80024e8 <TM_I2C_Start+0xe4>
			if (--TM_I2C_Timeout == 0x00) {
 80024d2:	4b0c      	ldr	r3, [pc, #48]	; (8002504 <TM_I2C_Start+0x100>)
 80024d4:	681b      	ldr	r3, [r3, #0]
 80024d6:	3b01      	subs	r3, #1
 80024d8:	4a0a      	ldr	r2, [pc, #40]	; (8002504 <TM_I2C_Start+0x100>)
 80024da:	6013      	str	r3, [r2, #0]
 80024dc:	4b09      	ldr	r3, [pc, #36]	; (8002504 <TM_I2C_Start+0x100>)
 80024de:	681b      	ldr	r3, [r3, #0]
 80024e0:	2b00      	cmp	r3, #0
 80024e2:	d101      	bne.n	80024e8 <TM_I2C_Start+0xe4>
				return 1;
 80024e4:	2301      	movs	r3, #1
 80024e6:	e009      	b.n	80024fc <TM_I2C_Start+0xf8>
		while (!I2C_CheckEvent(I2Cx, I2C_EVENT_MASTER_RECEIVER_MODE_SELECTED)) {
 80024e8:	4907      	ldr	r1, [pc, #28]	; (8002508 <TM_I2C_Start+0x104>)
 80024ea:	6878      	ldr	r0, [r7, #4]
 80024ec:	f7fe fd20 	bl	8000f30 <I2C_CheckEvent>
 80024f0:	4603      	mov	r3, r0
 80024f2:	2b00      	cmp	r3, #0
 80024f4:	d0ed      	beq.n	80024d2 <TM_I2C_Start+0xce>
			}
		}
	}
	
	/* Read status register to clear ADDR flag */
	I2Cx->SR2;
 80024f6:	687b      	ldr	r3, [r7, #4]
 80024f8:	8b1b      	ldrh	r3, [r3, #24]
	
	/* Return 0, everything ok */
	return 0;
 80024fa:	2300      	movs	r3, #0
}
 80024fc:	4618      	mov	r0, r3
 80024fe:	3708      	adds	r7, #8
 8002500:	46bd      	mov	sp, r7
 8002502:	bd80      	pop	{r7, pc}
 8002504:	200000e0 	.word	0x200000e0
 8002508:	00030002 	.word	0x00030002

0800250c <TM_I2C_WriteData>:

void TM_I2C_WriteData(I2C_TypeDef* I2Cx, uint8_t data) {
 800250c:	b480      	push	{r7}
 800250e:	b083      	sub	sp, #12
 8002510:	af00      	add	r7, sp, #0
 8002512:	6078      	str	r0, [r7, #4]
 8002514:	460b      	mov	r3, r1
 8002516:	70fb      	strb	r3, [r7, #3]
	/* Wait till I2C is not busy anymore */
	TM_I2C_Timeout = TM_I2C_TIMEOUT;
 8002518:	4b0f      	ldr	r3, [pc, #60]	; (8002558 <TM_I2C_WriteData+0x4c>)
 800251a:	f644 6220 	movw	r2, #20000	; 0x4e20
 800251e:	601a      	str	r2, [r3, #0]
	while (!(I2Cx->SR1 & I2C_SR1_TXE) && TM_I2C_Timeout) {
 8002520:	e004      	b.n	800252c <TM_I2C_WriteData+0x20>
		TM_I2C_Timeout--;
 8002522:	4b0d      	ldr	r3, [pc, #52]	; (8002558 <TM_I2C_WriteData+0x4c>)
 8002524:	681b      	ldr	r3, [r3, #0]
 8002526:	3b01      	subs	r3, #1
 8002528:	4a0b      	ldr	r2, [pc, #44]	; (8002558 <TM_I2C_WriteData+0x4c>)
 800252a:	6013      	str	r3, [r2, #0]
	while (!(I2Cx->SR1 & I2C_SR1_TXE) && TM_I2C_Timeout) {
 800252c:	687b      	ldr	r3, [r7, #4]
 800252e:	8a9b      	ldrh	r3, [r3, #20]
 8002530:	b29b      	uxth	r3, r3
 8002532:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8002536:	2b00      	cmp	r3, #0
 8002538:	d103      	bne.n	8002542 <TM_I2C_WriteData+0x36>
 800253a:	4b07      	ldr	r3, [pc, #28]	; (8002558 <TM_I2C_WriteData+0x4c>)
 800253c:	681b      	ldr	r3, [r3, #0]
 800253e:	2b00      	cmp	r3, #0
 8002540:	d1ef      	bne.n	8002522 <TM_I2C_WriteData+0x16>
	}
	
	/* Send I2C data */
	I2Cx->DR = data;
 8002542:	78fb      	ldrb	r3, [r7, #3]
 8002544:	b29a      	uxth	r2, r3
 8002546:	687b      	ldr	r3, [r7, #4]
 8002548:	821a      	strh	r2, [r3, #16]
}
 800254a:	bf00      	nop
 800254c:	370c      	adds	r7, #12
 800254e:	46bd      	mov	sp, r7
 8002550:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002554:	4770      	bx	lr
 8002556:	bf00      	nop
 8002558:	200000e0 	.word	0x200000e0

0800255c <TM_I2C_ReadAck>:

uint8_t TM_I2C_ReadAck(I2C_TypeDef* I2Cx) {
 800255c:	b580      	push	{r7, lr}
 800255e:	b084      	sub	sp, #16
 8002560:	af00      	add	r7, sp, #0
 8002562:	6078      	str	r0, [r7, #4]
	uint8_t data;
	
	/* Enable ACK */
	I2Cx->CR1 |= I2C_CR1_ACK;
 8002564:	687b      	ldr	r3, [r7, #4]
 8002566:	881b      	ldrh	r3, [r3, #0]
 8002568:	b29b      	uxth	r3, r3
 800256a:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 800256e:	b29a      	uxth	r2, r3
 8002570:	687b      	ldr	r3, [r7, #4]
 8002572:	801a      	strh	r2, [r3, #0]
	
	/* Wait till not received */
	TM_I2C_Timeout = TM_I2C_TIMEOUT;
 8002574:	4b0f      	ldr	r3, [pc, #60]	; (80025b4 <TM_I2C_ReadAck+0x58>)
 8002576:	f644 6220 	movw	r2, #20000	; 0x4e20
 800257a:	601a      	str	r2, [r3, #0]
	while (!I2C_CheckEvent(I2Cx, I2C_EVENT_MASTER_BYTE_RECEIVED)) {
 800257c:	e00a      	b.n	8002594 <TM_I2C_ReadAck+0x38>
		if (--TM_I2C_Timeout == 0x00) {
 800257e:	4b0d      	ldr	r3, [pc, #52]	; (80025b4 <TM_I2C_ReadAck+0x58>)
 8002580:	681b      	ldr	r3, [r3, #0]
 8002582:	3b01      	subs	r3, #1
 8002584:	4a0b      	ldr	r2, [pc, #44]	; (80025b4 <TM_I2C_ReadAck+0x58>)
 8002586:	6013      	str	r3, [r2, #0]
 8002588:	4b0a      	ldr	r3, [pc, #40]	; (80025b4 <TM_I2C_ReadAck+0x58>)
 800258a:	681b      	ldr	r3, [r3, #0]
 800258c:	2b00      	cmp	r3, #0
 800258e:	d101      	bne.n	8002594 <TM_I2C_ReadAck+0x38>
			return 1;
 8002590:	2301      	movs	r3, #1
 8002592:	e00b      	b.n	80025ac <TM_I2C_ReadAck+0x50>
	while (!I2C_CheckEvent(I2Cx, I2C_EVENT_MASTER_BYTE_RECEIVED)) {
 8002594:	4908      	ldr	r1, [pc, #32]	; (80025b8 <TM_I2C_ReadAck+0x5c>)
 8002596:	6878      	ldr	r0, [r7, #4]
 8002598:	f7fe fcca 	bl	8000f30 <I2C_CheckEvent>
 800259c:	4603      	mov	r3, r0
 800259e:	2b00      	cmp	r3, #0
 80025a0:	d0ed      	beq.n	800257e <TM_I2C_ReadAck+0x22>
		}
	}
	
	/* Read data */
	data = I2Cx->DR;
 80025a2:	687b      	ldr	r3, [r7, #4]
 80025a4:	8a1b      	ldrh	r3, [r3, #16]
 80025a6:	b29b      	uxth	r3, r3
 80025a8:	73fb      	strb	r3, [r7, #15]
	
	/* Return data */
	return data;
 80025aa:	7bfb      	ldrb	r3, [r7, #15]
}
 80025ac:	4618      	mov	r0, r3
 80025ae:	3710      	adds	r7, #16
 80025b0:	46bd      	mov	sp, r7
 80025b2:	bd80      	pop	{r7, pc}
 80025b4:	200000e0 	.word	0x200000e0
 80025b8:	00030040 	.word	0x00030040

080025bc <TM_I2C_ReadNack>:

uint8_t TM_I2C_ReadNack(I2C_TypeDef* I2Cx) {
 80025bc:	b580      	push	{r7, lr}
 80025be:	b084      	sub	sp, #16
 80025c0:	af00      	add	r7, sp, #0
 80025c2:	6078      	str	r0, [r7, #4]
	uint8_t data;
	
	/* Disable ACK */
	I2Cx->CR1 &= ~I2C_CR1_ACK;
 80025c4:	687b      	ldr	r3, [r7, #4]
 80025c6:	881b      	ldrh	r3, [r3, #0]
 80025c8:	b29b      	uxth	r3, r3
 80025ca:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 80025ce:	b29a      	uxth	r2, r3
 80025d0:	687b      	ldr	r3, [r7, #4]
 80025d2:	801a      	strh	r2, [r3, #0]
	
	/* Generate stop */
	I2Cx->CR1 |= I2C_CR1_STOP;
 80025d4:	687b      	ldr	r3, [r7, #4]
 80025d6:	881b      	ldrh	r3, [r3, #0]
 80025d8:	b29b      	uxth	r3, r3
 80025da:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 80025de:	b29a      	uxth	r2, r3
 80025e0:	687b      	ldr	r3, [r7, #4]
 80025e2:	801a      	strh	r2, [r3, #0]
	
	/* Wait till received */
	TM_I2C_Timeout = TM_I2C_TIMEOUT;
 80025e4:	4b0f      	ldr	r3, [pc, #60]	; (8002624 <TM_I2C_ReadNack+0x68>)
 80025e6:	f644 6220 	movw	r2, #20000	; 0x4e20
 80025ea:	601a      	str	r2, [r3, #0]
	while (!I2C_CheckEvent(I2Cx, I2C_EVENT_MASTER_BYTE_RECEIVED)) {
 80025ec:	e00a      	b.n	8002604 <TM_I2C_ReadNack+0x48>
		if (--TM_I2C_Timeout == 0x00) {
 80025ee:	4b0d      	ldr	r3, [pc, #52]	; (8002624 <TM_I2C_ReadNack+0x68>)
 80025f0:	681b      	ldr	r3, [r3, #0]
 80025f2:	3b01      	subs	r3, #1
 80025f4:	4a0b      	ldr	r2, [pc, #44]	; (8002624 <TM_I2C_ReadNack+0x68>)
 80025f6:	6013      	str	r3, [r2, #0]
 80025f8:	4b0a      	ldr	r3, [pc, #40]	; (8002624 <TM_I2C_ReadNack+0x68>)
 80025fa:	681b      	ldr	r3, [r3, #0]
 80025fc:	2b00      	cmp	r3, #0
 80025fe:	d101      	bne.n	8002604 <TM_I2C_ReadNack+0x48>
			return 1;
 8002600:	2301      	movs	r3, #1
 8002602:	e00b      	b.n	800261c <TM_I2C_ReadNack+0x60>
	while (!I2C_CheckEvent(I2Cx, I2C_EVENT_MASTER_BYTE_RECEIVED)) {
 8002604:	4908      	ldr	r1, [pc, #32]	; (8002628 <TM_I2C_ReadNack+0x6c>)
 8002606:	6878      	ldr	r0, [r7, #4]
 8002608:	f7fe fc92 	bl	8000f30 <I2C_CheckEvent>
 800260c:	4603      	mov	r3, r0
 800260e:	2b00      	cmp	r3, #0
 8002610:	d0ed      	beq.n	80025ee <TM_I2C_ReadNack+0x32>
		}
	}

	/* Read data */
	data = I2Cx->DR;
 8002612:	687b      	ldr	r3, [r7, #4]
 8002614:	8a1b      	ldrh	r3, [r3, #16]
 8002616:	b29b      	uxth	r3, r3
 8002618:	73fb      	strb	r3, [r7, #15]
	
	/* Return data */
	return data;
 800261a:	7bfb      	ldrb	r3, [r7, #15]
}
 800261c:	4618      	mov	r0, r3
 800261e:	3710      	adds	r7, #16
 8002620:	46bd      	mov	sp, r7
 8002622:	bd80      	pop	{r7, pc}
 8002624:	200000e0 	.word	0x200000e0
 8002628:	00030040 	.word	0x00030040

0800262c <TM_I2C_Stop>:

uint8_t TM_I2C_Stop(I2C_TypeDef* I2Cx) {
 800262c:	b480      	push	{r7}
 800262e:	b083      	sub	sp, #12
 8002630:	af00      	add	r7, sp, #0
 8002632:	6078      	str	r0, [r7, #4]
	/* Wait till transmitter not empty */
	TM_I2C_Timeout = TM_I2C_TIMEOUT;
 8002634:	4b16      	ldr	r3, [pc, #88]	; (8002690 <TM_I2C_Stop+0x64>)
 8002636:	f644 6220 	movw	r2, #20000	; 0x4e20
 800263a:	601a      	str	r2, [r3, #0]
	while (((!(I2Cx->SR1 & I2C_SR1_TXE)) || (!(I2Cx->SR1 & I2C_SR1_BTF)))) {
 800263c:	e00a      	b.n	8002654 <TM_I2C_Stop+0x28>
		if (--TM_I2C_Timeout == 0x00) {
 800263e:	4b14      	ldr	r3, [pc, #80]	; (8002690 <TM_I2C_Stop+0x64>)
 8002640:	681b      	ldr	r3, [r3, #0]
 8002642:	3b01      	subs	r3, #1
 8002644:	4a12      	ldr	r2, [pc, #72]	; (8002690 <TM_I2C_Stop+0x64>)
 8002646:	6013      	str	r3, [r2, #0]
 8002648:	4b11      	ldr	r3, [pc, #68]	; (8002690 <TM_I2C_Stop+0x64>)
 800264a:	681b      	ldr	r3, [r3, #0]
 800264c:	2b00      	cmp	r3, #0
 800264e:	d101      	bne.n	8002654 <TM_I2C_Stop+0x28>
			return 1;
 8002650:	2301      	movs	r3, #1
 8002652:	e016      	b.n	8002682 <TM_I2C_Stop+0x56>
	while (((!(I2Cx->SR1 & I2C_SR1_TXE)) || (!(I2Cx->SR1 & I2C_SR1_BTF)))) {
 8002654:	687b      	ldr	r3, [r7, #4]
 8002656:	8a9b      	ldrh	r3, [r3, #20]
 8002658:	b29b      	uxth	r3, r3
 800265a:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800265e:	2b00      	cmp	r3, #0
 8002660:	d0ed      	beq.n	800263e <TM_I2C_Stop+0x12>
 8002662:	687b      	ldr	r3, [r7, #4]
 8002664:	8a9b      	ldrh	r3, [r3, #20]
 8002666:	b29b      	uxth	r3, r3
 8002668:	f003 0304 	and.w	r3, r3, #4
 800266c:	2b00      	cmp	r3, #0
 800266e:	d0e6      	beq.n	800263e <TM_I2C_Stop+0x12>
		}
	}
	
	/* Generate stop */
	I2Cx->CR1 |= I2C_CR1_STOP;
 8002670:	687b      	ldr	r3, [r7, #4]
 8002672:	881b      	ldrh	r3, [r3, #0]
 8002674:	b29b      	uxth	r3, r3
 8002676:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 800267a:	b29a      	uxth	r2, r3
 800267c:	687b      	ldr	r3, [r7, #4]
 800267e:	801a      	strh	r2, [r3, #0]
	
	/* Return 0, everything ok */
	return 0;
 8002680:	2300      	movs	r3, #0
}
 8002682:	4618      	mov	r0, r3
 8002684:	370c      	adds	r7, #12
 8002686:	46bd      	mov	sp, r7
 8002688:	f85d 7b04 	ldr.w	r7, [sp], #4
 800268c:	4770      	bx	lr
 800268e:	bf00      	nop
 8002690:	200000e0 	.word	0x200000e0

08002694 <TM_I2C_IsDeviceConnected>:

uint8_t TM_I2C_IsDeviceConnected(I2C_TypeDef* I2Cx, uint8_t address) {
 8002694:	b580      	push	{r7, lr}
 8002696:	b084      	sub	sp, #16
 8002698:	af00      	add	r7, sp, #0
 800269a:	6078      	str	r0, [r7, #4]
 800269c:	460b      	mov	r3, r1
 800269e:	70fb      	strb	r3, [r7, #3]
	uint8_t connected = 0;
 80026a0:	2300      	movs	r3, #0
 80026a2:	73fb      	strb	r3, [r7, #15]
	/* Try to start, function will return 0 in case device will send ACK */
	if (!TM_I2C_Start(I2Cx, address, I2C_TRANSMITTER_MODE, I2C_ACK_ENABLE)) {
 80026a4:	78f9      	ldrb	r1, [r7, #3]
 80026a6:	2301      	movs	r3, #1
 80026a8:	2200      	movs	r2, #0
 80026aa:	6878      	ldr	r0, [r7, #4]
 80026ac:	f7ff feaa 	bl	8002404 <TM_I2C_Start>
 80026b0:	4603      	mov	r3, r0
 80026b2:	2b00      	cmp	r3, #0
 80026b4:	d101      	bne.n	80026ba <TM_I2C_IsDeviceConnected+0x26>
		connected = 1;
 80026b6:	2301      	movs	r3, #1
 80026b8:	73fb      	strb	r3, [r7, #15]
	}
	
	/* STOP I2C */
	TM_I2C_Stop(I2Cx);
 80026ba:	6878      	ldr	r0, [r7, #4]
 80026bc:	f7ff ffb6 	bl	800262c <TM_I2C_Stop>
	
	/* Return status */
	return connected;
 80026c0:	7bfb      	ldrb	r3, [r7, #15]
}
 80026c2:	4618      	mov	r0, r3
 80026c4:	3710      	adds	r7, #16
 80026c6:	46bd      	mov	sp, r7
 80026c8:	bd80      	pop	{r7, pc}
	...

080026cc <TM_I2C1_INT_InitPins>:

/* Private functions */
void TM_I2C1_INT_InitPins(TM_I2C_PinsPack_t pinspack) {
 80026cc:	b580      	push	{r7, lr}
 80026ce:	b084      	sub	sp, #16
 80026d0:	af02      	add	r7, sp, #8
 80026d2:	4603      	mov	r3, r0
 80026d4:	71fb      	strb	r3, [r7, #7]
	/* Init pins */
#if defined(GPIOB)
	if (pinspack == TM_I2C_PinsPack_1) {
 80026d6:	79fb      	ldrb	r3, [r7, #7]
 80026d8:	2b00      	cmp	r3, #0
 80026da:	d109      	bne.n	80026f0 <TM_I2C1_INT_InitPins+0x24>
		TM_GPIO_InitAlternate(GPIOB, GPIO_PIN_6 | GPIO_PIN_7, TM_GPIO_OType_OD, TM_GPIO_PuPd_UP, TM_GPIO_Speed_Medium, GPIO_AF_I2C1);
 80026dc:	2304      	movs	r3, #4
 80026de:	9301      	str	r3, [sp, #4]
 80026e0:	2301      	movs	r3, #1
 80026e2:	9300      	str	r3, [sp, #0]
 80026e4:	2301      	movs	r3, #1
 80026e6:	2201      	movs	r2, #1
 80026e8:	21c0      	movs	r1, #192	; 0xc0
 80026ea:	4814      	ldr	r0, [pc, #80]	; (800273c <TM_I2C1_INT_InitPins+0x70>)
 80026ec:	f7ff fc86 	bl	8001ffc <TM_GPIO_InitAlternate>
	}
#endif
#if defined(GPIOB)
	if (pinspack == TM_I2C_PinsPack_2) {
 80026f0:	79fb      	ldrb	r3, [r7, #7]
 80026f2:	2b01      	cmp	r3, #1
 80026f4:	d10a      	bne.n	800270c <TM_I2C1_INT_InitPins+0x40>
		TM_GPIO_InitAlternate(GPIOB, GPIO_PIN_8 | GPIO_PIN_9, TM_GPIO_OType_OD, TM_GPIO_PuPd_UP, TM_GPIO_Speed_Medium, GPIO_AF_I2C1);
 80026f6:	2304      	movs	r3, #4
 80026f8:	9301      	str	r3, [sp, #4]
 80026fa:	2301      	movs	r3, #1
 80026fc:	9300      	str	r3, [sp, #0]
 80026fe:	2301      	movs	r3, #1
 8002700:	2201      	movs	r2, #1
 8002702:	f44f 7140 	mov.w	r1, #768	; 0x300
 8002706:	480d      	ldr	r0, [pc, #52]	; (800273c <TM_I2C1_INT_InitPins+0x70>)
 8002708:	f7ff fc78 	bl	8001ffc <TM_GPIO_InitAlternate>
	}
#endif
#if defined(GPIOB)
	if (pinspack == TM_I2C_PinsPack_3) {
 800270c:	79fb      	ldrb	r3, [r7, #7]
 800270e:	2b02      	cmp	r3, #2
 8002710:	d10a      	bne.n	8002728 <TM_I2C1_INT_InitPins+0x5c>
		TM_GPIO_InitAlternate(GPIOB, GPIO_PIN_6 | GPIO_PIN_9, TM_GPIO_OType_OD, TM_GPIO_PuPd_UP, TM_GPIO_Speed_Medium, GPIO_AF_I2C1);
 8002712:	2304      	movs	r3, #4
 8002714:	9301      	str	r3, [sp, #4]
 8002716:	2301      	movs	r3, #1
 8002718:	9300      	str	r3, [sp, #0]
 800271a:	2301      	movs	r3, #1
 800271c:	2201      	movs	r2, #1
 800271e:	f44f 7110 	mov.w	r1, #576	; 0x240
 8002722:	4806      	ldr	r0, [pc, #24]	; (800273c <TM_I2C1_INT_InitPins+0x70>)
 8002724:	f7ff fc6a 	bl	8001ffc <TM_GPIO_InitAlternate>
	}
#endif
	if (pinspack == TM_I2C_PinsPack_Custom) {
 8002728:	79fb      	ldrb	r3, [r7, #7]
 800272a:	2b03      	cmp	r3, #3
 800272c:	d102      	bne.n	8002734 <TM_I2C1_INT_InitPins+0x68>
		/* Init custom pins, callback function */
		TM_I2C_InitCustomPinsCallback(I2C1);
 800272e:	4804      	ldr	r0, [pc, #16]	; (8002740 <TM_I2C1_INT_InitPins+0x74>)
 8002730:	f3af 8000 	nop.w
	}
}
 8002734:	bf00      	nop
 8002736:	3708      	adds	r7, #8
 8002738:	46bd      	mov	sp, r7
 800273a:	bd80      	pop	{r7, pc}
 800273c:	40020400 	.word	0x40020400
 8002740:	40005400 	.word	0x40005400

08002744 <TM_I2C2_INT_InitPins>:

void TM_I2C2_INT_InitPins(TM_I2C_PinsPack_t pinspack) {
 8002744:	b580      	push	{r7, lr}
 8002746:	b084      	sub	sp, #16
 8002748:	af02      	add	r7, sp, #8
 800274a:	4603      	mov	r3, r0
 800274c:	71fb      	strb	r3, [r7, #7]
	/* Init pins */
#if defined(GPIOB)
	if (pinspack == TM_I2C_PinsPack_1) {
 800274e:	79fb      	ldrb	r3, [r7, #7]
 8002750:	2b00      	cmp	r3, #0
 8002752:	d10a      	bne.n	800276a <TM_I2C2_INT_InitPins+0x26>
		TM_GPIO_InitAlternate(GPIOB, GPIO_PIN_10 | GPIO_PIN_11, TM_GPIO_OType_OD, TM_GPIO_PuPd_UP, TM_GPIO_Speed_Medium, GPIO_AF_I2C2);
 8002754:	2304      	movs	r3, #4
 8002756:	9301      	str	r3, [sp, #4]
 8002758:	2301      	movs	r3, #1
 800275a:	9300      	str	r3, [sp, #0]
 800275c:	2301      	movs	r3, #1
 800275e:	2201      	movs	r2, #1
 8002760:	f44f 6140 	mov.w	r1, #3072	; 0xc00
 8002764:	4813      	ldr	r0, [pc, #76]	; (80027b4 <TM_I2C2_INT_InitPins+0x70>)
 8002766:	f7ff fc49 	bl	8001ffc <TM_GPIO_InitAlternate>
	}
#endif
#if defined(GPIOF)
	if (pinspack == TM_I2C_PinsPack_2) {
 800276a:	79fb      	ldrb	r3, [r7, #7]
 800276c:	2b01      	cmp	r3, #1
 800276e:	d109      	bne.n	8002784 <TM_I2C2_INT_InitPins+0x40>
		TM_GPIO_InitAlternate(GPIOF, GPIO_PIN_0 | GPIO_PIN_1, TM_GPIO_OType_OD, TM_GPIO_PuPd_UP, TM_GPIO_Speed_Medium, GPIO_AF_I2C2);
 8002770:	2304      	movs	r3, #4
 8002772:	9301      	str	r3, [sp, #4]
 8002774:	2301      	movs	r3, #1
 8002776:	9300      	str	r3, [sp, #0]
 8002778:	2301      	movs	r3, #1
 800277a:	2201      	movs	r2, #1
 800277c:	2103      	movs	r1, #3
 800277e:	480e      	ldr	r0, [pc, #56]	; (80027b8 <TM_I2C2_INT_InitPins+0x74>)
 8002780:	f7ff fc3c 	bl	8001ffc <TM_GPIO_InitAlternate>
	}
#endif
#if defined(GPIOH)
	if (pinspack == TM_I2C_PinsPack_3) {
 8002784:	79fb      	ldrb	r3, [r7, #7]
 8002786:	2b02      	cmp	r3, #2
 8002788:	d109      	bne.n	800279e <TM_I2C2_INT_InitPins+0x5a>
		TM_GPIO_InitAlternate(GPIOH, GPIO_PIN_4 | GPIO_PIN_5, TM_GPIO_OType_OD, TM_GPIO_PuPd_UP, TM_GPIO_Speed_Medium, GPIO_AF_I2C2);
 800278a:	2304      	movs	r3, #4
 800278c:	9301      	str	r3, [sp, #4]
 800278e:	2301      	movs	r3, #1
 8002790:	9300      	str	r3, [sp, #0]
 8002792:	2301      	movs	r3, #1
 8002794:	2201      	movs	r2, #1
 8002796:	2130      	movs	r1, #48	; 0x30
 8002798:	4808      	ldr	r0, [pc, #32]	; (80027bc <TM_I2C2_INT_InitPins+0x78>)
 800279a:	f7ff fc2f 	bl	8001ffc <TM_GPIO_InitAlternate>
	}
#endif
	if (pinspack == TM_I2C_PinsPack_Custom) {
 800279e:	79fb      	ldrb	r3, [r7, #7]
 80027a0:	2b03      	cmp	r3, #3
 80027a2:	d102      	bne.n	80027aa <TM_I2C2_INT_InitPins+0x66>
		/* Init custom pins, callback function */
		TM_I2C_InitCustomPinsCallback(I2C2);
 80027a4:	4806      	ldr	r0, [pc, #24]	; (80027c0 <TM_I2C2_INT_InitPins+0x7c>)
 80027a6:	f3af 8000 	nop.w
	}
}
 80027aa:	bf00      	nop
 80027ac:	3708      	adds	r7, #8
 80027ae:	46bd      	mov	sp, r7
 80027b0:	bd80      	pop	{r7, pc}
 80027b2:	bf00      	nop
 80027b4:	40020400 	.word	0x40020400
 80027b8:	40021400 	.word	0x40021400
 80027bc:	40021c00 	.word	0x40021c00
 80027c0:	40005800 	.word	0x40005800

080027c4 <TM_I2C3_INT_InitPins>:

void TM_I2C3_INT_InitPins(TM_I2C_PinsPack_t pinspack) {
 80027c4:	b580      	push	{r7, lr}
 80027c6:	b084      	sub	sp, #16
 80027c8:	af02      	add	r7, sp, #8
 80027ca:	4603      	mov	r3, r0
 80027cc:	71fb      	strb	r3, [r7, #7]
	/* Init pins */
#if defined(GPIOA) && defined(GPIOC)
	if (pinspack == TM_I2C_PinsPack_1) {
 80027ce:	79fb      	ldrb	r3, [r7, #7]
 80027d0:	2b00      	cmp	r3, #0
 80027d2:	d115      	bne.n	8002800 <TM_I2C3_INT_InitPins+0x3c>
		TM_GPIO_InitAlternate(GPIOA, GPIO_PIN_8, TM_GPIO_OType_OD, TM_GPIO_PuPd_UP, TM_GPIO_Speed_Medium, GPIO_AF_I2C3);
 80027d4:	2304      	movs	r3, #4
 80027d6:	9301      	str	r3, [sp, #4]
 80027d8:	2301      	movs	r3, #1
 80027da:	9300      	str	r3, [sp, #0]
 80027dc:	2301      	movs	r3, #1
 80027de:	2201      	movs	r2, #1
 80027e0:	f44f 7180 	mov.w	r1, #256	; 0x100
 80027e4:	4812      	ldr	r0, [pc, #72]	; (8002830 <TM_I2C3_INT_InitPins+0x6c>)
 80027e6:	f7ff fc09 	bl	8001ffc <TM_GPIO_InitAlternate>
		TM_GPIO_InitAlternate(GPIOC, GPIO_PIN_9, TM_GPIO_OType_OD, TM_GPIO_PuPd_UP, TM_GPIO_Speed_Medium, GPIO_AF_I2C3);
 80027ea:	2304      	movs	r3, #4
 80027ec:	9301      	str	r3, [sp, #4]
 80027ee:	2301      	movs	r3, #1
 80027f0:	9300      	str	r3, [sp, #0]
 80027f2:	2301      	movs	r3, #1
 80027f4:	2201      	movs	r2, #1
 80027f6:	f44f 7100 	mov.w	r1, #512	; 0x200
 80027fa:	480e      	ldr	r0, [pc, #56]	; (8002834 <TM_I2C3_INT_InitPins+0x70>)
 80027fc:	f7ff fbfe 	bl	8001ffc <TM_GPIO_InitAlternate>
	}
#endif
#if defined(GPIOH)
	if (pinspack == TM_I2C_PinsPack_2) {
 8002800:	79fb      	ldrb	r3, [r7, #7]
 8002802:	2b01      	cmp	r3, #1
 8002804:	d10a      	bne.n	800281c <TM_I2C3_INT_InitPins+0x58>
		TM_GPIO_InitAlternate(GPIOH, GPIO_PIN_7 | GPIO_PIN_8, TM_GPIO_OType_OD, TM_GPIO_PuPd_UP, TM_GPIO_Speed_Medium, GPIO_AF_I2C3);
 8002806:	2304      	movs	r3, #4
 8002808:	9301      	str	r3, [sp, #4]
 800280a:	2301      	movs	r3, #1
 800280c:	9300      	str	r3, [sp, #0]
 800280e:	2301      	movs	r3, #1
 8002810:	2201      	movs	r2, #1
 8002812:	f44f 71c0 	mov.w	r1, #384	; 0x180
 8002816:	4808      	ldr	r0, [pc, #32]	; (8002838 <TM_I2C3_INT_InitPins+0x74>)
 8002818:	f7ff fbf0 	bl	8001ffc <TM_GPIO_InitAlternate>
	}
#endif
	if (pinspack == TM_I2C_PinsPack_Custom) {
 800281c:	79fb      	ldrb	r3, [r7, #7]
 800281e:	2b03      	cmp	r3, #3
 8002820:	d102      	bne.n	8002828 <TM_I2C3_INT_InitPins+0x64>
		/* Init custom pins, callback function */
		TM_I2C_InitCustomPinsCallback(I2C3);
 8002822:	4806      	ldr	r0, [pc, #24]	; (800283c <TM_I2C3_INT_InitPins+0x78>)
 8002824:	f3af 8000 	nop.w
	}
}
 8002828:	bf00      	nop
 800282a:	3708      	adds	r7, #8
 800282c:	46bd      	mov	sp, r7
 800282e:	bd80      	pop	{r7, pc}
 8002830:	40020000 	.word	0x40020000
 8002834:	40020800 	.word	0x40020800
 8002838:	40021c00 	.word	0x40021c00
 800283c:	40005c00 	.word	0x40005c00

08002840 <__libc_init_array>:
 8002840:	b570      	push	{r4, r5, r6, lr}
 8002842:	4e0d      	ldr	r6, [pc, #52]	; (8002878 <__libc_init_array+0x38>)
 8002844:	4c0d      	ldr	r4, [pc, #52]	; (800287c <__libc_init_array+0x3c>)
 8002846:	1ba4      	subs	r4, r4, r6
 8002848:	10a4      	asrs	r4, r4, #2
 800284a:	2500      	movs	r5, #0
 800284c:	42a5      	cmp	r5, r4
 800284e:	d109      	bne.n	8002864 <__libc_init_array+0x24>
 8002850:	4e0b      	ldr	r6, [pc, #44]	; (8002880 <__libc_init_array+0x40>)
 8002852:	4c0c      	ldr	r4, [pc, #48]	; (8002884 <__libc_init_array+0x44>)
 8002854:	f001 f882 	bl	800395c <_init>
 8002858:	1ba4      	subs	r4, r4, r6
 800285a:	10a4      	asrs	r4, r4, #2
 800285c:	2500      	movs	r5, #0
 800285e:	42a5      	cmp	r5, r4
 8002860:	d105      	bne.n	800286e <__libc_init_array+0x2e>
 8002862:	bd70      	pop	{r4, r5, r6, pc}
 8002864:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 8002868:	4798      	blx	r3
 800286a:	3501      	adds	r5, #1
 800286c:	e7ee      	b.n	800284c <__libc_init_array+0xc>
 800286e:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 8002872:	4798      	blx	r3
 8002874:	3501      	adds	r5, #1
 8002876:	e7f2      	b.n	800285e <__libc_init_array+0x1e>
 8002878:	080039c0 	.word	0x080039c0
 800287c:	080039c0 	.word	0x080039c0
 8002880:	080039c0 	.word	0x080039c0
 8002884:	080039c4 	.word	0x080039c4

08002888 <pow>:
 8002888:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800288c:	ed2d 8b04 	vpush	{d8-d9}
 8002890:	b08d      	sub	sp, #52	; 0x34
 8002892:	ec57 6b10 	vmov	r6, r7, d0
 8002896:	ec55 4b11 	vmov	r4, r5, d1
 800289a:	f000 f96d 	bl	8002b78 <__ieee754_pow>
 800289e:	4bae      	ldr	r3, [pc, #696]	; (8002b58 <pow+0x2d0>)
 80028a0:	eeb0 8a40 	vmov.f32	s16, s0
 80028a4:	eef0 8a60 	vmov.f32	s17, s1
 80028a8:	f993 9000 	ldrsb.w	r9, [r3]
 80028ac:	f1b9 3fff 	cmp.w	r9, #4294967295
 80028b0:	4698      	mov	r8, r3
 80028b2:	d05f      	beq.n	8002974 <pow+0xec>
 80028b4:	4622      	mov	r2, r4
 80028b6:	462b      	mov	r3, r5
 80028b8:	4620      	mov	r0, r4
 80028ba:	4629      	mov	r1, r5
 80028bc:	f7fe f8d6 	bl	8000a6c <__aeabi_dcmpun>
 80028c0:	4683      	mov	fp, r0
 80028c2:	2800      	cmp	r0, #0
 80028c4:	d156      	bne.n	8002974 <pow+0xec>
 80028c6:	4632      	mov	r2, r6
 80028c8:	463b      	mov	r3, r7
 80028ca:	4630      	mov	r0, r6
 80028cc:	4639      	mov	r1, r7
 80028ce:	f7fe f8cd 	bl	8000a6c <__aeabi_dcmpun>
 80028d2:	9001      	str	r0, [sp, #4]
 80028d4:	b1e8      	cbz	r0, 8002912 <pow+0x8a>
 80028d6:	2200      	movs	r2, #0
 80028d8:	2300      	movs	r3, #0
 80028da:	4620      	mov	r0, r4
 80028dc:	4629      	mov	r1, r5
 80028de:	f7fe f893 	bl	8000a08 <__aeabi_dcmpeq>
 80028e2:	2800      	cmp	r0, #0
 80028e4:	d046      	beq.n	8002974 <pow+0xec>
 80028e6:	2301      	movs	r3, #1
 80028e8:	9302      	str	r3, [sp, #8]
 80028ea:	4b9c      	ldr	r3, [pc, #624]	; (8002b5c <pow+0x2d4>)
 80028ec:	9303      	str	r3, [sp, #12]
 80028ee:	4b9c      	ldr	r3, [pc, #624]	; (8002b60 <pow+0x2d8>)
 80028f0:	f8cd b028 	str.w	fp, [sp, #40]	; 0x28
 80028f4:	2200      	movs	r2, #0
 80028f6:	f1b9 0f02 	cmp.w	r9, #2
 80028fa:	e9cd 6704 	strd	r6, r7, [sp, #16]
 80028fe:	e9cd 4506 	strd	r4, r5, [sp, #24]
 8002902:	e9cd 2308 	strd	r2, r3, [sp, #32]
 8002906:	d033      	beq.n	8002970 <pow+0xe8>
 8002908:	a802      	add	r0, sp, #8
 800290a:	f000 ff06 	bl	800371a <matherr>
 800290e:	bb48      	cbnz	r0, 8002964 <pow+0xdc>
 8002910:	e05e      	b.n	80029d0 <pow+0x148>
 8002912:	f04f 0a00 	mov.w	sl, #0
 8002916:	f04f 0b00 	mov.w	fp, #0
 800291a:	4652      	mov	r2, sl
 800291c:	465b      	mov	r3, fp
 800291e:	4630      	mov	r0, r6
 8002920:	4639      	mov	r1, r7
 8002922:	f7fe f871 	bl	8000a08 <__aeabi_dcmpeq>
 8002926:	ec4b ab19 	vmov	d9, sl, fp
 800292a:	2800      	cmp	r0, #0
 800292c:	d055      	beq.n	80029da <pow+0x152>
 800292e:	4652      	mov	r2, sl
 8002930:	465b      	mov	r3, fp
 8002932:	4620      	mov	r0, r4
 8002934:	4629      	mov	r1, r5
 8002936:	f7fe f867 	bl	8000a08 <__aeabi_dcmpeq>
 800293a:	4680      	mov	r8, r0
 800293c:	b318      	cbz	r0, 8002986 <pow+0xfe>
 800293e:	2301      	movs	r3, #1
 8002940:	9302      	str	r3, [sp, #8]
 8002942:	4b86      	ldr	r3, [pc, #536]	; (8002b5c <pow+0x2d4>)
 8002944:	9303      	str	r3, [sp, #12]
 8002946:	9b01      	ldr	r3, [sp, #4]
 8002948:	930a      	str	r3, [sp, #40]	; 0x28
 800294a:	e9cd 6704 	strd	r6, r7, [sp, #16]
 800294e:	e9cd 4506 	strd	r4, r5, [sp, #24]
 8002952:	e9cd ab08 	strd	sl, fp, [sp, #32]
 8002956:	f1b9 0f00 	cmp.w	r9, #0
 800295a:	d0d5      	beq.n	8002908 <pow+0x80>
 800295c:	4b80      	ldr	r3, [pc, #512]	; (8002b60 <pow+0x2d8>)
 800295e:	2200      	movs	r2, #0
 8002960:	e9cd 2308 	strd	r2, r3, [sp, #32]
 8002964:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8002966:	b11b      	cbz	r3, 8002970 <pow+0xe8>
 8002968:	f000 fff2 	bl	8003950 <__errno>
 800296c:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800296e:	6003      	str	r3, [r0, #0]
 8002970:	ed9d 8b08 	vldr	d8, [sp, #32]
 8002974:	eeb0 0a48 	vmov.f32	s0, s16
 8002978:	eef0 0a68 	vmov.f32	s1, s17
 800297c:	b00d      	add	sp, #52	; 0x34
 800297e:	ecbd 8b04 	vpop	{d8-d9}
 8002982:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8002986:	ec45 4b10 	vmov	d0, r4, r5
 800298a:	f000 febe 	bl	800370a <finite>
 800298e:	2800      	cmp	r0, #0
 8002990:	d0f0      	beq.n	8002974 <pow+0xec>
 8002992:	4652      	mov	r2, sl
 8002994:	465b      	mov	r3, fp
 8002996:	4620      	mov	r0, r4
 8002998:	4629      	mov	r1, r5
 800299a:	f7fe f83f 	bl	8000a1c <__aeabi_dcmplt>
 800299e:	2800      	cmp	r0, #0
 80029a0:	d0e8      	beq.n	8002974 <pow+0xec>
 80029a2:	2301      	movs	r3, #1
 80029a4:	9302      	str	r3, [sp, #8]
 80029a6:	4b6d      	ldr	r3, [pc, #436]	; (8002b5c <pow+0x2d4>)
 80029a8:	9303      	str	r3, [sp, #12]
 80029aa:	4b6b      	ldr	r3, [pc, #428]	; (8002b58 <pow+0x2d0>)
 80029ac:	f8cd 8028 	str.w	r8, [sp, #40]	; 0x28
 80029b0:	f993 3000 	ldrsb.w	r3, [r3]
 80029b4:	e9cd 6704 	strd	r6, r7, [sp, #16]
 80029b8:	e9cd 4506 	strd	r4, r5, [sp, #24]
 80029bc:	b913      	cbnz	r3, 80029c4 <pow+0x13c>
 80029be:	e9cd ab08 	strd	sl, fp, [sp, #32]
 80029c2:	e7a1      	b.n	8002908 <pow+0x80>
 80029c4:	4967      	ldr	r1, [pc, #412]	; (8002b64 <pow+0x2dc>)
 80029c6:	2000      	movs	r0, #0
 80029c8:	e9cd 0108 	strd	r0, r1, [sp, #32]
 80029cc:	2b02      	cmp	r3, #2
 80029ce:	d19b      	bne.n	8002908 <pow+0x80>
 80029d0:	f000 ffbe 	bl	8003950 <__errno>
 80029d4:	2321      	movs	r3, #33	; 0x21
 80029d6:	6003      	str	r3, [r0, #0]
 80029d8:	e7c4      	b.n	8002964 <pow+0xdc>
 80029da:	eeb0 0a48 	vmov.f32	s0, s16
 80029de:	eef0 0a68 	vmov.f32	s1, s17
 80029e2:	f000 fe92 	bl	800370a <finite>
 80029e6:	9001      	str	r0, [sp, #4]
 80029e8:	2800      	cmp	r0, #0
 80029ea:	f040 808a 	bne.w	8002b02 <pow+0x27a>
 80029ee:	ec47 6b10 	vmov	d0, r6, r7
 80029f2:	f000 fe8a 	bl	800370a <finite>
 80029f6:	2800      	cmp	r0, #0
 80029f8:	f000 8083 	beq.w	8002b02 <pow+0x27a>
 80029fc:	ec45 4b10 	vmov	d0, r4, r5
 8002a00:	f000 fe83 	bl	800370a <finite>
 8002a04:	2800      	cmp	r0, #0
 8002a06:	d07c      	beq.n	8002b02 <pow+0x27a>
 8002a08:	ec53 2b18 	vmov	r2, r3, d8
 8002a0c:	ee18 0a10 	vmov	r0, s16
 8002a10:	4619      	mov	r1, r3
 8002a12:	f7fe f82b 	bl	8000a6c <__aeabi_dcmpun>
 8002a16:	f998 9000 	ldrsb.w	r9, [r8]
 8002a1a:	4b50      	ldr	r3, [pc, #320]	; (8002b5c <pow+0x2d4>)
 8002a1c:	b1b0      	cbz	r0, 8002a4c <pow+0x1c4>
 8002a1e:	2201      	movs	r2, #1
 8002a20:	9303      	str	r3, [sp, #12]
 8002a22:	9b01      	ldr	r3, [sp, #4]
 8002a24:	9202      	str	r2, [sp, #8]
 8002a26:	930a      	str	r3, [sp, #40]	; 0x28
 8002a28:	e9cd 6704 	strd	r6, r7, [sp, #16]
 8002a2c:	e9cd 4506 	strd	r4, r5, [sp, #24]
 8002a30:	f1b9 0f00 	cmp.w	r9, #0
 8002a34:	d0c3      	beq.n	80029be <pow+0x136>
 8002a36:	4652      	mov	r2, sl
 8002a38:	465b      	mov	r3, fp
 8002a3a:	4650      	mov	r0, sl
 8002a3c:	4659      	mov	r1, fp
 8002a3e:	f7fd fea5 	bl	800078c <__aeabi_ddiv>
 8002a42:	f1b9 0f02 	cmp.w	r9, #2
 8002a46:	e9cd 0108 	strd	r0, r1, [sp, #32]
 8002a4a:	e7c0      	b.n	80029ce <pow+0x146>
 8002a4c:	2203      	movs	r2, #3
 8002a4e:	9202      	str	r2, [sp, #8]
 8002a50:	9303      	str	r3, [sp, #12]
 8002a52:	900a      	str	r0, [sp, #40]	; 0x28
 8002a54:	e9cd 6704 	strd	r6, r7, [sp, #16]
 8002a58:	e9cd 4506 	strd	r4, r5, [sp, #24]
 8002a5c:	f1b9 0f00 	cmp.w	r9, #0
 8002a60:	d12c      	bne.n	8002abc <pow+0x234>
 8002a62:	4b41      	ldr	r3, [pc, #260]	; (8002b68 <pow+0x2e0>)
 8002a64:	f04f 4260 	mov.w	r2, #3758096384	; 0xe0000000
 8002a68:	e9cd 2308 	strd	r2, r3, [sp, #32]
 8002a6c:	4630      	mov	r0, r6
 8002a6e:	4652      	mov	r2, sl
 8002a70:	465b      	mov	r3, fp
 8002a72:	4639      	mov	r1, r7
 8002a74:	f7fd ffd2 	bl	8000a1c <__aeabi_dcmplt>
 8002a78:	2800      	cmp	r0, #0
 8002a7a:	d066      	beq.n	8002b4a <pow+0x2c2>
 8002a7c:	2200      	movs	r2, #0
 8002a7e:	4b3b      	ldr	r3, [pc, #236]	; (8002b6c <pow+0x2e4>)
 8002a80:	4620      	mov	r0, r4
 8002a82:	4629      	mov	r1, r5
 8002a84:	f7fd fd58 	bl	8000538 <__aeabi_dmul>
 8002a88:	4604      	mov	r4, r0
 8002a8a:	460d      	mov	r5, r1
 8002a8c:	ec45 4b10 	vmov	d0, r4, r5
 8002a90:	f000 fe4e 	bl	8003730 <rint>
 8002a94:	4620      	mov	r0, r4
 8002a96:	ec53 2b10 	vmov	r2, r3, d0
 8002a9a:	4629      	mov	r1, r5
 8002a9c:	f7fd ffb4 	bl	8000a08 <__aeabi_dcmpeq>
 8002aa0:	b920      	cbnz	r0, 8002aac <pow+0x224>
 8002aa2:	4b33      	ldr	r3, [pc, #204]	; (8002b70 <pow+0x2e8>)
 8002aa4:	f04f 4260 	mov.w	r2, #3758096384	; 0xe0000000
 8002aa8:	e9cd 2308 	strd	r2, r3, [sp, #32]
 8002aac:	f998 3000 	ldrsb.w	r3, [r8]
 8002ab0:	2b02      	cmp	r3, #2
 8002ab2:	d14a      	bne.n	8002b4a <pow+0x2c2>
 8002ab4:	f000 ff4c 	bl	8003950 <__errno>
 8002ab8:	2322      	movs	r3, #34	; 0x22
 8002aba:	e78c      	b.n	80029d6 <pow+0x14e>
 8002abc:	4b2d      	ldr	r3, [pc, #180]	; (8002b74 <pow+0x2ec>)
 8002abe:	2200      	movs	r2, #0
 8002ac0:	e9cd 2308 	strd	r2, r3, [sp, #32]
 8002ac4:	4630      	mov	r0, r6
 8002ac6:	4652      	mov	r2, sl
 8002ac8:	465b      	mov	r3, fp
 8002aca:	4639      	mov	r1, r7
 8002acc:	f7fd ffa6 	bl	8000a1c <__aeabi_dcmplt>
 8002ad0:	2800      	cmp	r0, #0
 8002ad2:	d0eb      	beq.n	8002aac <pow+0x224>
 8002ad4:	2200      	movs	r2, #0
 8002ad6:	4b25      	ldr	r3, [pc, #148]	; (8002b6c <pow+0x2e4>)
 8002ad8:	4620      	mov	r0, r4
 8002ada:	4629      	mov	r1, r5
 8002adc:	f7fd fd2c 	bl	8000538 <__aeabi_dmul>
 8002ae0:	4604      	mov	r4, r0
 8002ae2:	460d      	mov	r5, r1
 8002ae4:	ec45 4b10 	vmov	d0, r4, r5
 8002ae8:	f000 fe22 	bl	8003730 <rint>
 8002aec:	4620      	mov	r0, r4
 8002aee:	ec53 2b10 	vmov	r2, r3, d0
 8002af2:	4629      	mov	r1, r5
 8002af4:	f7fd ff88 	bl	8000a08 <__aeabi_dcmpeq>
 8002af8:	2800      	cmp	r0, #0
 8002afa:	d1d7      	bne.n	8002aac <pow+0x224>
 8002afc:	2200      	movs	r2, #0
 8002afe:	4b19      	ldr	r3, [pc, #100]	; (8002b64 <pow+0x2dc>)
 8002b00:	e7d2      	b.n	8002aa8 <pow+0x220>
 8002b02:	2200      	movs	r2, #0
 8002b04:	2300      	movs	r3, #0
 8002b06:	ec51 0b18 	vmov	r0, r1, d8
 8002b0a:	f7fd ff7d 	bl	8000a08 <__aeabi_dcmpeq>
 8002b0e:	2800      	cmp	r0, #0
 8002b10:	f43f af30 	beq.w	8002974 <pow+0xec>
 8002b14:	ec47 6b10 	vmov	d0, r6, r7
 8002b18:	f000 fdf7 	bl	800370a <finite>
 8002b1c:	2800      	cmp	r0, #0
 8002b1e:	f43f af29 	beq.w	8002974 <pow+0xec>
 8002b22:	ec45 4b10 	vmov	d0, r4, r5
 8002b26:	f000 fdf0 	bl	800370a <finite>
 8002b2a:	2800      	cmp	r0, #0
 8002b2c:	f43f af22 	beq.w	8002974 <pow+0xec>
 8002b30:	2304      	movs	r3, #4
 8002b32:	9302      	str	r3, [sp, #8]
 8002b34:	4b09      	ldr	r3, [pc, #36]	; (8002b5c <pow+0x2d4>)
 8002b36:	9303      	str	r3, [sp, #12]
 8002b38:	2300      	movs	r3, #0
 8002b3a:	930a      	str	r3, [sp, #40]	; 0x28
 8002b3c:	e9cd 6704 	strd	r6, r7, [sp, #16]
 8002b40:	e9cd 4506 	strd	r4, r5, [sp, #24]
 8002b44:	ed8d 9b08 	vstr	d9, [sp, #32]
 8002b48:	e7b0      	b.n	8002aac <pow+0x224>
 8002b4a:	a802      	add	r0, sp, #8
 8002b4c:	f000 fde5 	bl	800371a <matherr>
 8002b50:	2800      	cmp	r0, #0
 8002b52:	f47f af07 	bne.w	8002964 <pow+0xdc>
 8002b56:	e7ad      	b.n	8002ab4 <pow+0x22c>
 8002b58:	20000030 	.word	0x20000030
 8002b5c:	08003978 	.word	0x08003978
 8002b60:	3ff00000 	.word	0x3ff00000
 8002b64:	fff00000 	.word	0xfff00000
 8002b68:	47efffff 	.word	0x47efffff
 8002b6c:	3fe00000 	.word	0x3fe00000
 8002b70:	c7efffff 	.word	0xc7efffff
 8002b74:	7ff00000 	.word	0x7ff00000

08002b78 <__ieee754_pow>:
 8002b78:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8002b7c:	b091      	sub	sp, #68	; 0x44
 8002b7e:	ed8d 1b00 	vstr	d1, [sp]
 8002b82:	e89d 0204 	ldmia.w	sp, {r2, r9}
 8002b86:	ec57 6b10 	vmov	r6, r7, d0
 8002b8a:	f029 4800 	bic.w	r8, r9, #2147483648	; 0x80000000
 8002b8e:	ea58 0302 	orrs.w	r3, r8, r2
 8002b92:	ee10 aa10 	vmov	sl, s0
 8002b96:	463d      	mov	r5, r7
 8002b98:	f000 84bd 	beq.w	8003516 <__ieee754_pow+0x99e>
 8002b9c:	4b78      	ldr	r3, [pc, #480]	; (8002d80 <__ieee754_pow+0x208>)
 8002b9e:	f027 4400 	bic.w	r4, r7, #2147483648	; 0x80000000
 8002ba2:	429c      	cmp	r4, r3
 8002ba4:	dc09      	bgt.n	8002bba <__ieee754_pow+0x42>
 8002ba6:	d103      	bne.n	8002bb0 <__ieee754_pow+0x38>
 8002ba8:	b93e      	cbnz	r6, 8002bba <__ieee754_pow+0x42>
 8002baa:	45a0      	cmp	r8, r4
 8002bac:	dc0d      	bgt.n	8002bca <__ieee754_pow+0x52>
 8002bae:	e001      	b.n	8002bb4 <__ieee754_pow+0x3c>
 8002bb0:	4598      	cmp	r8, r3
 8002bb2:	dc02      	bgt.n	8002bba <__ieee754_pow+0x42>
 8002bb4:	4598      	cmp	r8, r3
 8002bb6:	d10e      	bne.n	8002bd6 <__ieee754_pow+0x5e>
 8002bb8:	b16a      	cbz	r2, 8002bd6 <__ieee754_pow+0x5e>
 8002bba:	f104 4440 	add.w	r4, r4, #3221225472	; 0xc0000000
 8002bbe:	f504 1480 	add.w	r4, r4, #1048576	; 0x100000
 8002bc2:	ea54 030a 	orrs.w	r3, r4, sl
 8002bc6:	f000 84a6 	beq.w	8003516 <__ieee754_pow+0x99e>
 8002bca:	486e      	ldr	r0, [pc, #440]	; (8002d84 <__ieee754_pow+0x20c>)
 8002bcc:	b011      	add	sp, #68	; 0x44
 8002bce:	e8bd 4ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8002bd2:	f000 bda5 	b.w	8003720 <nan>
 8002bd6:	2d00      	cmp	r5, #0
 8002bd8:	da53      	bge.n	8002c82 <__ieee754_pow+0x10a>
 8002bda:	4b6b      	ldr	r3, [pc, #428]	; (8002d88 <__ieee754_pow+0x210>)
 8002bdc:	4598      	cmp	r8, r3
 8002bde:	dc4d      	bgt.n	8002c7c <__ieee754_pow+0x104>
 8002be0:	f1a3 7354 	sub.w	r3, r3, #55574528	; 0x3500000
 8002be4:	4598      	cmp	r8, r3
 8002be6:	dd4c      	ble.n	8002c82 <__ieee754_pow+0x10a>
 8002be8:	ea4f 5328 	mov.w	r3, r8, asr #20
 8002bec:	f2a3 33ff 	subw	r3, r3, #1023	; 0x3ff
 8002bf0:	2b14      	cmp	r3, #20
 8002bf2:	dd26      	ble.n	8002c42 <__ieee754_pow+0xca>
 8002bf4:	f1c3 0334 	rsb	r3, r3, #52	; 0x34
 8002bf8:	fa22 f103 	lsr.w	r1, r2, r3
 8002bfc:	fa01 f303 	lsl.w	r3, r1, r3
 8002c00:	429a      	cmp	r2, r3
 8002c02:	d13e      	bne.n	8002c82 <__ieee754_pow+0x10a>
 8002c04:	f001 0101 	and.w	r1, r1, #1
 8002c08:	f1c1 0b02 	rsb	fp, r1, #2
 8002c0c:	2a00      	cmp	r2, #0
 8002c0e:	d15b      	bne.n	8002cc8 <__ieee754_pow+0x150>
 8002c10:	4b5b      	ldr	r3, [pc, #364]	; (8002d80 <__ieee754_pow+0x208>)
 8002c12:	4598      	cmp	r8, r3
 8002c14:	d124      	bne.n	8002c60 <__ieee754_pow+0xe8>
 8002c16:	f104 4340 	add.w	r3, r4, #3221225472	; 0xc0000000
 8002c1a:	f503 1380 	add.w	r3, r3, #1048576	; 0x100000
 8002c1e:	ea53 030a 	orrs.w	r3, r3, sl
 8002c22:	f000 8478 	beq.w	8003516 <__ieee754_pow+0x99e>
 8002c26:	4b59      	ldr	r3, [pc, #356]	; (8002d8c <__ieee754_pow+0x214>)
 8002c28:	429c      	cmp	r4, r3
 8002c2a:	dd2d      	ble.n	8002c88 <__ieee754_pow+0x110>
 8002c2c:	f1b9 0f00 	cmp.w	r9, #0
 8002c30:	f280 8475 	bge.w	800351e <__ieee754_pow+0x9a6>
 8002c34:	2000      	movs	r0, #0
 8002c36:	2100      	movs	r1, #0
 8002c38:	ec41 0b10 	vmov	d0, r0, r1
 8002c3c:	b011      	add	sp, #68	; 0x44
 8002c3e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8002c42:	2a00      	cmp	r2, #0
 8002c44:	d13e      	bne.n	8002cc4 <__ieee754_pow+0x14c>
 8002c46:	f1c3 0314 	rsb	r3, r3, #20
 8002c4a:	fa48 f103 	asr.w	r1, r8, r3
 8002c4e:	fa01 f303 	lsl.w	r3, r1, r3
 8002c52:	4598      	cmp	r8, r3
 8002c54:	f040 846b 	bne.w	800352e <__ieee754_pow+0x9b6>
 8002c58:	f001 0101 	and.w	r1, r1, #1
 8002c5c:	f1c1 0b02 	rsb	fp, r1, #2
 8002c60:	4b4b      	ldr	r3, [pc, #300]	; (8002d90 <__ieee754_pow+0x218>)
 8002c62:	4598      	cmp	r8, r3
 8002c64:	d118      	bne.n	8002c98 <__ieee754_pow+0x120>
 8002c66:	f1b9 0f00 	cmp.w	r9, #0
 8002c6a:	f280 845c 	bge.w	8003526 <__ieee754_pow+0x9ae>
 8002c6e:	4948      	ldr	r1, [pc, #288]	; (8002d90 <__ieee754_pow+0x218>)
 8002c70:	4632      	mov	r2, r6
 8002c72:	463b      	mov	r3, r7
 8002c74:	2000      	movs	r0, #0
 8002c76:	f7fd fd89 	bl	800078c <__aeabi_ddiv>
 8002c7a:	e7dd      	b.n	8002c38 <__ieee754_pow+0xc0>
 8002c7c:	f04f 0b02 	mov.w	fp, #2
 8002c80:	e7c4      	b.n	8002c0c <__ieee754_pow+0x94>
 8002c82:	f04f 0b00 	mov.w	fp, #0
 8002c86:	e7c1      	b.n	8002c0c <__ieee754_pow+0x94>
 8002c88:	f1b9 0f00 	cmp.w	r9, #0
 8002c8c:	dad2      	bge.n	8002c34 <__ieee754_pow+0xbc>
 8002c8e:	e89d 0009 	ldmia.w	sp, {r0, r3}
 8002c92:	f103 4100 	add.w	r1, r3, #2147483648	; 0x80000000
 8002c96:	e7cf      	b.n	8002c38 <__ieee754_pow+0xc0>
 8002c98:	f1b9 4f80 	cmp.w	r9, #1073741824	; 0x40000000
 8002c9c:	d106      	bne.n	8002cac <__ieee754_pow+0x134>
 8002c9e:	4632      	mov	r2, r6
 8002ca0:	463b      	mov	r3, r7
 8002ca2:	4610      	mov	r0, r2
 8002ca4:	4619      	mov	r1, r3
 8002ca6:	f7fd fc47 	bl	8000538 <__aeabi_dmul>
 8002caa:	e7c5      	b.n	8002c38 <__ieee754_pow+0xc0>
 8002cac:	4b39      	ldr	r3, [pc, #228]	; (8002d94 <__ieee754_pow+0x21c>)
 8002cae:	4599      	cmp	r9, r3
 8002cb0:	d10a      	bne.n	8002cc8 <__ieee754_pow+0x150>
 8002cb2:	2d00      	cmp	r5, #0
 8002cb4:	db08      	blt.n	8002cc8 <__ieee754_pow+0x150>
 8002cb6:	ec47 6b10 	vmov	d0, r6, r7
 8002cba:	b011      	add	sp, #68	; 0x44
 8002cbc:	e8bd 4ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8002cc0:	f000 bc6c 	b.w	800359c <__ieee754_sqrt>
 8002cc4:	f04f 0b00 	mov.w	fp, #0
 8002cc8:	ec47 6b10 	vmov	d0, r6, r7
 8002ccc:	f000 fd16 	bl	80036fc <fabs>
 8002cd0:	ec51 0b10 	vmov	r0, r1, d0
 8002cd4:	f1ba 0f00 	cmp.w	sl, #0
 8002cd8:	d127      	bne.n	8002d2a <__ieee754_pow+0x1b2>
 8002cda:	b124      	cbz	r4, 8002ce6 <__ieee754_pow+0x16e>
 8002cdc:	4b2c      	ldr	r3, [pc, #176]	; (8002d90 <__ieee754_pow+0x218>)
 8002cde:	f025 4240 	bic.w	r2, r5, #3221225472	; 0xc0000000
 8002ce2:	429a      	cmp	r2, r3
 8002ce4:	d121      	bne.n	8002d2a <__ieee754_pow+0x1b2>
 8002ce6:	f1b9 0f00 	cmp.w	r9, #0
 8002cea:	da05      	bge.n	8002cf8 <__ieee754_pow+0x180>
 8002cec:	4602      	mov	r2, r0
 8002cee:	460b      	mov	r3, r1
 8002cf0:	2000      	movs	r0, #0
 8002cf2:	4927      	ldr	r1, [pc, #156]	; (8002d90 <__ieee754_pow+0x218>)
 8002cf4:	f7fd fd4a 	bl	800078c <__aeabi_ddiv>
 8002cf8:	2d00      	cmp	r5, #0
 8002cfa:	da9d      	bge.n	8002c38 <__ieee754_pow+0xc0>
 8002cfc:	f104 4440 	add.w	r4, r4, #3221225472	; 0xc0000000
 8002d00:	f504 1480 	add.w	r4, r4, #1048576	; 0x100000
 8002d04:	ea54 030b 	orrs.w	r3, r4, fp
 8002d08:	d108      	bne.n	8002d1c <__ieee754_pow+0x1a4>
 8002d0a:	4602      	mov	r2, r0
 8002d0c:	460b      	mov	r3, r1
 8002d0e:	4610      	mov	r0, r2
 8002d10:	4619      	mov	r1, r3
 8002d12:	f7fd fa5d 	bl	80001d0 <__aeabi_dsub>
 8002d16:	4602      	mov	r2, r0
 8002d18:	460b      	mov	r3, r1
 8002d1a:	e7ac      	b.n	8002c76 <__ieee754_pow+0xfe>
 8002d1c:	f1bb 0f01 	cmp.w	fp, #1
 8002d20:	d18a      	bne.n	8002c38 <__ieee754_pow+0xc0>
 8002d22:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 8002d26:	4619      	mov	r1, r3
 8002d28:	e786      	b.n	8002c38 <__ieee754_pow+0xc0>
 8002d2a:	0fed      	lsrs	r5, r5, #31
 8002d2c:	1e6b      	subs	r3, r5, #1
 8002d2e:	930d      	str	r3, [sp, #52]	; 0x34
 8002d30:	ea5b 0303 	orrs.w	r3, fp, r3
 8002d34:	d102      	bne.n	8002d3c <__ieee754_pow+0x1c4>
 8002d36:	4632      	mov	r2, r6
 8002d38:	463b      	mov	r3, r7
 8002d3a:	e7e8      	b.n	8002d0e <__ieee754_pow+0x196>
 8002d3c:	4b16      	ldr	r3, [pc, #88]	; (8002d98 <__ieee754_pow+0x220>)
 8002d3e:	4598      	cmp	r8, r3
 8002d40:	f340 80fe 	ble.w	8002f40 <__ieee754_pow+0x3c8>
 8002d44:	f103 7304 	add.w	r3, r3, #34603008	; 0x2100000
 8002d48:	4598      	cmp	r8, r3
 8002d4a:	dd0a      	ble.n	8002d62 <__ieee754_pow+0x1ea>
 8002d4c:	4b0f      	ldr	r3, [pc, #60]	; (8002d8c <__ieee754_pow+0x214>)
 8002d4e:	429c      	cmp	r4, r3
 8002d50:	dc0d      	bgt.n	8002d6e <__ieee754_pow+0x1f6>
 8002d52:	f1b9 0f00 	cmp.w	r9, #0
 8002d56:	f6bf af6d 	bge.w	8002c34 <__ieee754_pow+0xbc>
 8002d5a:	a307      	add	r3, pc, #28	; (adr r3, 8002d78 <__ieee754_pow+0x200>)
 8002d5c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002d60:	e79f      	b.n	8002ca2 <__ieee754_pow+0x12a>
 8002d62:	4b0e      	ldr	r3, [pc, #56]	; (8002d9c <__ieee754_pow+0x224>)
 8002d64:	429c      	cmp	r4, r3
 8002d66:	ddf4      	ble.n	8002d52 <__ieee754_pow+0x1da>
 8002d68:	4b09      	ldr	r3, [pc, #36]	; (8002d90 <__ieee754_pow+0x218>)
 8002d6a:	429c      	cmp	r4, r3
 8002d6c:	dd18      	ble.n	8002da0 <__ieee754_pow+0x228>
 8002d6e:	f1b9 0f00 	cmp.w	r9, #0
 8002d72:	dcf2      	bgt.n	8002d5a <__ieee754_pow+0x1e2>
 8002d74:	e75e      	b.n	8002c34 <__ieee754_pow+0xbc>
 8002d76:	bf00      	nop
 8002d78:	8800759c 	.word	0x8800759c
 8002d7c:	7e37e43c 	.word	0x7e37e43c
 8002d80:	7ff00000 	.word	0x7ff00000
 8002d84:	0800397b 	.word	0x0800397b
 8002d88:	433fffff 	.word	0x433fffff
 8002d8c:	3fefffff 	.word	0x3fefffff
 8002d90:	3ff00000 	.word	0x3ff00000
 8002d94:	3fe00000 	.word	0x3fe00000
 8002d98:	41e00000 	.word	0x41e00000
 8002d9c:	3feffffe 	.word	0x3feffffe
 8002da0:	2200      	movs	r2, #0
 8002da2:	4b63      	ldr	r3, [pc, #396]	; (8002f30 <__ieee754_pow+0x3b8>)
 8002da4:	f7fd fa14 	bl	80001d0 <__aeabi_dsub>
 8002da8:	a355      	add	r3, pc, #340	; (adr r3, 8002f00 <__ieee754_pow+0x388>)
 8002daa:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002dae:	4604      	mov	r4, r0
 8002db0:	460d      	mov	r5, r1
 8002db2:	f7fd fbc1 	bl	8000538 <__aeabi_dmul>
 8002db6:	a354      	add	r3, pc, #336	; (adr r3, 8002f08 <__ieee754_pow+0x390>)
 8002db8:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002dbc:	4606      	mov	r6, r0
 8002dbe:	460f      	mov	r7, r1
 8002dc0:	4620      	mov	r0, r4
 8002dc2:	4629      	mov	r1, r5
 8002dc4:	f7fd fbb8 	bl	8000538 <__aeabi_dmul>
 8002dc8:	2200      	movs	r2, #0
 8002dca:	e9cd 0102 	strd	r0, r1, [sp, #8]
 8002dce:	4b59      	ldr	r3, [pc, #356]	; (8002f34 <__ieee754_pow+0x3bc>)
 8002dd0:	4620      	mov	r0, r4
 8002dd2:	4629      	mov	r1, r5
 8002dd4:	f7fd fbb0 	bl	8000538 <__aeabi_dmul>
 8002dd8:	4602      	mov	r2, r0
 8002dda:	460b      	mov	r3, r1
 8002ddc:	a14c      	add	r1, pc, #304	; (adr r1, 8002f10 <__ieee754_pow+0x398>)
 8002dde:	e9d1 0100 	ldrd	r0, r1, [r1]
 8002de2:	f7fd f9f5 	bl	80001d0 <__aeabi_dsub>
 8002de6:	4622      	mov	r2, r4
 8002de8:	462b      	mov	r3, r5
 8002dea:	f7fd fba5 	bl	8000538 <__aeabi_dmul>
 8002dee:	4602      	mov	r2, r0
 8002df0:	460b      	mov	r3, r1
 8002df2:	2000      	movs	r0, #0
 8002df4:	4950      	ldr	r1, [pc, #320]	; (8002f38 <__ieee754_pow+0x3c0>)
 8002df6:	f7fd f9eb 	bl	80001d0 <__aeabi_dsub>
 8002dfa:	4622      	mov	r2, r4
 8002dfc:	462b      	mov	r3, r5
 8002dfe:	4680      	mov	r8, r0
 8002e00:	4689      	mov	r9, r1
 8002e02:	4620      	mov	r0, r4
 8002e04:	4629      	mov	r1, r5
 8002e06:	f7fd fb97 	bl	8000538 <__aeabi_dmul>
 8002e0a:	4602      	mov	r2, r0
 8002e0c:	460b      	mov	r3, r1
 8002e0e:	4640      	mov	r0, r8
 8002e10:	4649      	mov	r1, r9
 8002e12:	f7fd fb91 	bl	8000538 <__aeabi_dmul>
 8002e16:	a340      	add	r3, pc, #256	; (adr r3, 8002f18 <__ieee754_pow+0x3a0>)
 8002e18:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002e1c:	f7fd fb8c 	bl	8000538 <__aeabi_dmul>
 8002e20:	4602      	mov	r2, r0
 8002e22:	460b      	mov	r3, r1
 8002e24:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8002e28:	f7fd f9d2 	bl	80001d0 <__aeabi_dsub>
 8002e2c:	4602      	mov	r2, r0
 8002e2e:	460b      	mov	r3, r1
 8002e30:	4604      	mov	r4, r0
 8002e32:	460d      	mov	r5, r1
 8002e34:	4630      	mov	r0, r6
 8002e36:	4639      	mov	r1, r7
 8002e38:	f7fd f9cc 	bl	80001d4 <__adddf3>
 8002e3c:	2000      	movs	r0, #0
 8002e3e:	e9cd 0104 	strd	r0, r1, [sp, #16]
 8002e42:	4632      	mov	r2, r6
 8002e44:	463b      	mov	r3, r7
 8002e46:	f7fd f9c3 	bl	80001d0 <__aeabi_dsub>
 8002e4a:	4602      	mov	r2, r0
 8002e4c:	460b      	mov	r3, r1
 8002e4e:	4620      	mov	r0, r4
 8002e50:	4629      	mov	r1, r5
 8002e52:	f7fd f9bd 	bl	80001d0 <__aeabi_dsub>
 8002e56:	9a0d      	ldr	r2, [sp, #52]	; 0x34
 8002e58:	f10b 33ff 	add.w	r3, fp, #4294967295
 8002e5c:	4313      	orrs	r3, r2
 8002e5e:	4606      	mov	r6, r0
 8002e60:	460f      	mov	r7, r1
 8002e62:	f040 81eb 	bne.w	800323c <__ieee754_pow+0x6c4>
 8002e66:	ed9f 7b2e 	vldr	d7, [pc, #184]	; 8002f20 <__ieee754_pow+0x3a8>
 8002e6a:	e9dd 4500 	ldrd	r4, r5, [sp]
 8002e6e:	2400      	movs	r4, #0
 8002e70:	4622      	mov	r2, r4
 8002e72:	462b      	mov	r3, r5
 8002e74:	e9dd 0100 	ldrd	r0, r1, [sp]
 8002e78:	ed8d 7b02 	vstr	d7, [sp, #8]
 8002e7c:	f7fd f9a8 	bl	80001d0 <__aeabi_dsub>
 8002e80:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 8002e84:	f7fd fb58 	bl	8000538 <__aeabi_dmul>
 8002e88:	e9dd 2300 	ldrd	r2, r3, [sp]
 8002e8c:	4680      	mov	r8, r0
 8002e8e:	4689      	mov	r9, r1
 8002e90:	4630      	mov	r0, r6
 8002e92:	4639      	mov	r1, r7
 8002e94:	f7fd fb50 	bl	8000538 <__aeabi_dmul>
 8002e98:	4602      	mov	r2, r0
 8002e9a:	460b      	mov	r3, r1
 8002e9c:	4640      	mov	r0, r8
 8002e9e:	4649      	mov	r1, r9
 8002ea0:	f7fd f998 	bl	80001d4 <__adddf3>
 8002ea4:	4622      	mov	r2, r4
 8002ea6:	462b      	mov	r3, r5
 8002ea8:	4680      	mov	r8, r0
 8002eaa:	4689      	mov	r9, r1
 8002eac:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 8002eb0:	f7fd fb42 	bl	8000538 <__aeabi_dmul>
 8002eb4:	460b      	mov	r3, r1
 8002eb6:	4604      	mov	r4, r0
 8002eb8:	460d      	mov	r5, r1
 8002eba:	4602      	mov	r2, r0
 8002ebc:	4649      	mov	r1, r9
 8002ebe:	4640      	mov	r0, r8
 8002ec0:	e9cd 4500 	strd	r4, r5, [sp]
 8002ec4:	f7fd f986 	bl	80001d4 <__adddf3>
 8002ec8:	4b1c      	ldr	r3, [pc, #112]	; (8002f3c <__ieee754_pow+0x3c4>)
 8002eca:	4299      	cmp	r1, r3
 8002ecc:	4606      	mov	r6, r0
 8002ece:	460f      	mov	r7, r1
 8002ed0:	468b      	mov	fp, r1
 8002ed2:	f340 82f7 	ble.w	80034c4 <__ieee754_pow+0x94c>
 8002ed6:	f101 433f 	add.w	r3, r1, #3204448256	; 0xbf000000
 8002eda:	f503 03e0 	add.w	r3, r3, #7340032	; 0x700000
 8002ede:	4303      	orrs	r3, r0
 8002ee0:	f000 81ea 	beq.w	80032b8 <__ieee754_pow+0x740>
 8002ee4:	a310      	add	r3, pc, #64	; (adr r3, 8002f28 <__ieee754_pow+0x3b0>)
 8002ee6:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002eea:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8002eee:	f7fd fb23 	bl	8000538 <__aeabi_dmul>
 8002ef2:	a30d      	add	r3, pc, #52	; (adr r3, 8002f28 <__ieee754_pow+0x3b0>)
 8002ef4:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002ef8:	e6d5      	b.n	8002ca6 <__ieee754_pow+0x12e>
 8002efa:	bf00      	nop
 8002efc:	f3af 8000 	nop.w
 8002f00:	60000000 	.word	0x60000000
 8002f04:	3ff71547 	.word	0x3ff71547
 8002f08:	f85ddf44 	.word	0xf85ddf44
 8002f0c:	3e54ae0b 	.word	0x3e54ae0b
 8002f10:	55555555 	.word	0x55555555
 8002f14:	3fd55555 	.word	0x3fd55555
 8002f18:	652b82fe 	.word	0x652b82fe
 8002f1c:	3ff71547 	.word	0x3ff71547
 8002f20:	00000000 	.word	0x00000000
 8002f24:	bff00000 	.word	0xbff00000
 8002f28:	8800759c 	.word	0x8800759c
 8002f2c:	7e37e43c 	.word	0x7e37e43c
 8002f30:	3ff00000 	.word	0x3ff00000
 8002f34:	3fd00000 	.word	0x3fd00000
 8002f38:	3fe00000 	.word	0x3fe00000
 8002f3c:	408fffff 	.word	0x408fffff
 8002f40:	f5b4 1f80 	cmp.w	r4, #1048576	; 0x100000
 8002f44:	f04f 0200 	mov.w	r2, #0
 8002f48:	da05      	bge.n	8002f56 <__ieee754_pow+0x3de>
 8002f4a:	4bd3      	ldr	r3, [pc, #844]	; (8003298 <__ieee754_pow+0x720>)
 8002f4c:	f7fd faf4 	bl	8000538 <__aeabi_dmul>
 8002f50:	f06f 0234 	mvn.w	r2, #52	; 0x34
 8002f54:	460c      	mov	r4, r1
 8002f56:	1523      	asrs	r3, r4, #20
 8002f58:	f2a3 33ff 	subw	r3, r3, #1023	; 0x3ff
 8002f5c:	4413      	add	r3, r2
 8002f5e:	9307      	str	r3, [sp, #28]
 8002f60:	4bce      	ldr	r3, [pc, #824]	; (800329c <__ieee754_pow+0x724>)
 8002f62:	f3c4 0413 	ubfx	r4, r4, #0, #20
 8002f66:	f044 557f 	orr.w	r5, r4, #1069547520	; 0x3fc00000
 8002f6a:	429c      	cmp	r4, r3
 8002f6c:	f445 1540 	orr.w	r5, r5, #3145728	; 0x300000
 8002f70:	dd08      	ble.n	8002f84 <__ieee754_pow+0x40c>
 8002f72:	4bcb      	ldr	r3, [pc, #812]	; (80032a0 <__ieee754_pow+0x728>)
 8002f74:	429c      	cmp	r4, r3
 8002f76:	f340 815e 	ble.w	8003236 <__ieee754_pow+0x6be>
 8002f7a:	9b07      	ldr	r3, [sp, #28]
 8002f7c:	3301      	adds	r3, #1
 8002f7e:	9307      	str	r3, [sp, #28]
 8002f80:	f5a5 1580 	sub.w	r5, r5, #1048576	; 0x100000
 8002f84:	f04f 0a00 	mov.w	sl, #0
 8002f88:	ea4f 03ca 	mov.w	r3, sl, lsl #3
 8002f8c:	930c      	str	r3, [sp, #48]	; 0x30
 8002f8e:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 8002f90:	4bc4      	ldr	r3, [pc, #784]	; (80032a4 <__ieee754_pow+0x72c>)
 8002f92:	4413      	add	r3, r2
 8002f94:	ed93 7b00 	vldr	d7, [r3]
 8002f98:	4629      	mov	r1, r5
 8002f9a:	ec53 2b17 	vmov	r2, r3, d7
 8002f9e:	ed8d 7b0a 	vstr	d7, [sp, #40]	; 0x28
 8002fa2:	e9cd 0108 	strd	r0, r1, [sp, #32]
 8002fa6:	f7fd f913 	bl	80001d0 <__aeabi_dsub>
 8002faa:	e9dd 230a 	ldrd	r2, r3, [sp, #40]	; 0x28
 8002fae:	4606      	mov	r6, r0
 8002fb0:	460f      	mov	r7, r1
 8002fb2:	e9dd 0108 	ldrd	r0, r1, [sp, #32]
 8002fb6:	f7fd f90d 	bl	80001d4 <__adddf3>
 8002fba:	4602      	mov	r2, r0
 8002fbc:	460b      	mov	r3, r1
 8002fbe:	2000      	movs	r0, #0
 8002fc0:	49b9      	ldr	r1, [pc, #740]	; (80032a8 <__ieee754_pow+0x730>)
 8002fc2:	f7fd fbe3 	bl	800078c <__aeabi_ddiv>
 8002fc6:	e9cd 010e 	strd	r0, r1, [sp, #56]	; 0x38
 8002fca:	4602      	mov	r2, r0
 8002fcc:	460b      	mov	r3, r1
 8002fce:	4630      	mov	r0, r6
 8002fd0:	4639      	mov	r1, r7
 8002fd2:	f7fd fab1 	bl	8000538 <__aeabi_dmul>
 8002fd6:	e9cd 0104 	strd	r0, r1, [sp, #16]
 8002fda:	e9dd 3404 	ldrd	r3, r4, [sp, #16]
 8002fde:	e9cd 3402 	strd	r3, r4, [sp, #8]
 8002fe2:	2300      	movs	r3, #0
 8002fe4:	9302      	str	r3, [sp, #8]
 8002fe6:	e9dd 8902 	ldrd	r8, r9, [sp, #8]
 8002fea:	106d      	asrs	r5, r5, #1
 8002fec:	f045 5500 	orr.w	r5, r5, #536870912	; 0x20000000
 8002ff0:	f505 2500 	add.w	r5, r5, #524288	; 0x80000
 8002ff4:	2200      	movs	r2, #0
 8002ff6:	eb05 438a 	add.w	r3, r5, sl, lsl #18
 8002ffa:	4640      	mov	r0, r8
 8002ffc:	4649      	mov	r1, r9
 8002ffe:	4614      	mov	r4, r2
 8003000:	461d      	mov	r5, r3
 8003002:	f7fd fa99 	bl	8000538 <__aeabi_dmul>
 8003006:	4602      	mov	r2, r0
 8003008:	460b      	mov	r3, r1
 800300a:	4630      	mov	r0, r6
 800300c:	4639      	mov	r1, r7
 800300e:	f7fd f8df 	bl	80001d0 <__aeabi_dsub>
 8003012:	e9dd 230a 	ldrd	r2, r3, [sp, #40]	; 0x28
 8003016:	4606      	mov	r6, r0
 8003018:	460f      	mov	r7, r1
 800301a:	4620      	mov	r0, r4
 800301c:	4629      	mov	r1, r5
 800301e:	f7fd f8d7 	bl	80001d0 <__aeabi_dsub>
 8003022:	4602      	mov	r2, r0
 8003024:	460b      	mov	r3, r1
 8003026:	e9dd 0108 	ldrd	r0, r1, [sp, #32]
 800302a:	f7fd f8d1 	bl	80001d0 <__aeabi_dsub>
 800302e:	4642      	mov	r2, r8
 8003030:	464b      	mov	r3, r9
 8003032:	f7fd fa81 	bl	8000538 <__aeabi_dmul>
 8003036:	4602      	mov	r2, r0
 8003038:	460b      	mov	r3, r1
 800303a:	4630      	mov	r0, r6
 800303c:	4639      	mov	r1, r7
 800303e:	f7fd f8c7 	bl	80001d0 <__aeabi_dsub>
 8003042:	e9dd 230e 	ldrd	r2, r3, [sp, #56]	; 0x38
 8003046:	f7fd fa77 	bl	8000538 <__aeabi_dmul>
 800304a:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 800304e:	e9cd 0108 	strd	r0, r1, [sp, #32]
 8003052:	4610      	mov	r0, r2
 8003054:	4619      	mov	r1, r3
 8003056:	f7fd fa6f 	bl	8000538 <__aeabi_dmul>
 800305a:	a37b      	add	r3, pc, #492	; (adr r3, 8003248 <__ieee754_pow+0x6d0>)
 800305c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003060:	4604      	mov	r4, r0
 8003062:	460d      	mov	r5, r1
 8003064:	f7fd fa68 	bl	8000538 <__aeabi_dmul>
 8003068:	a379      	add	r3, pc, #484	; (adr r3, 8003250 <__ieee754_pow+0x6d8>)
 800306a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800306e:	f7fd f8b1 	bl	80001d4 <__adddf3>
 8003072:	4622      	mov	r2, r4
 8003074:	462b      	mov	r3, r5
 8003076:	f7fd fa5f 	bl	8000538 <__aeabi_dmul>
 800307a:	a377      	add	r3, pc, #476	; (adr r3, 8003258 <__ieee754_pow+0x6e0>)
 800307c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003080:	f7fd f8a8 	bl	80001d4 <__adddf3>
 8003084:	4622      	mov	r2, r4
 8003086:	462b      	mov	r3, r5
 8003088:	f7fd fa56 	bl	8000538 <__aeabi_dmul>
 800308c:	a374      	add	r3, pc, #464	; (adr r3, 8003260 <__ieee754_pow+0x6e8>)
 800308e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003092:	f7fd f89f 	bl	80001d4 <__adddf3>
 8003096:	4622      	mov	r2, r4
 8003098:	462b      	mov	r3, r5
 800309a:	f7fd fa4d 	bl	8000538 <__aeabi_dmul>
 800309e:	a372      	add	r3, pc, #456	; (adr r3, 8003268 <__ieee754_pow+0x6f0>)
 80030a0:	e9d3 2300 	ldrd	r2, r3, [r3]
 80030a4:	f7fd f896 	bl	80001d4 <__adddf3>
 80030a8:	4622      	mov	r2, r4
 80030aa:	462b      	mov	r3, r5
 80030ac:	f7fd fa44 	bl	8000538 <__aeabi_dmul>
 80030b0:	a36f      	add	r3, pc, #444	; (adr r3, 8003270 <__ieee754_pow+0x6f8>)
 80030b2:	e9d3 2300 	ldrd	r2, r3, [r3]
 80030b6:	f7fd f88d 	bl	80001d4 <__adddf3>
 80030ba:	4622      	mov	r2, r4
 80030bc:	4606      	mov	r6, r0
 80030be:	460f      	mov	r7, r1
 80030c0:	462b      	mov	r3, r5
 80030c2:	4620      	mov	r0, r4
 80030c4:	4629      	mov	r1, r5
 80030c6:	f7fd fa37 	bl	8000538 <__aeabi_dmul>
 80030ca:	4602      	mov	r2, r0
 80030cc:	460b      	mov	r3, r1
 80030ce:	4630      	mov	r0, r6
 80030d0:	4639      	mov	r1, r7
 80030d2:	f7fd fa31 	bl	8000538 <__aeabi_dmul>
 80030d6:	4642      	mov	r2, r8
 80030d8:	4604      	mov	r4, r0
 80030da:	460d      	mov	r5, r1
 80030dc:	464b      	mov	r3, r9
 80030de:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 80030e2:	f7fd f877 	bl	80001d4 <__adddf3>
 80030e6:	e9dd 2308 	ldrd	r2, r3, [sp, #32]
 80030ea:	f7fd fa25 	bl	8000538 <__aeabi_dmul>
 80030ee:	4622      	mov	r2, r4
 80030f0:	462b      	mov	r3, r5
 80030f2:	f7fd f86f 	bl	80001d4 <__adddf3>
 80030f6:	4642      	mov	r2, r8
 80030f8:	4606      	mov	r6, r0
 80030fa:	460f      	mov	r7, r1
 80030fc:	464b      	mov	r3, r9
 80030fe:	4640      	mov	r0, r8
 8003100:	4649      	mov	r1, r9
 8003102:	f7fd fa19 	bl	8000538 <__aeabi_dmul>
 8003106:	2200      	movs	r2, #0
 8003108:	4b68      	ldr	r3, [pc, #416]	; (80032ac <__ieee754_pow+0x734>)
 800310a:	e9cd 010a 	strd	r0, r1, [sp, #40]	; 0x28
 800310e:	f7fd f861 	bl	80001d4 <__adddf3>
 8003112:	4632      	mov	r2, r6
 8003114:	463b      	mov	r3, r7
 8003116:	f7fd f85d 	bl	80001d4 <__adddf3>
 800311a:	9802      	ldr	r0, [sp, #8]
 800311c:	460d      	mov	r5, r1
 800311e:	4604      	mov	r4, r0
 8003120:	4602      	mov	r2, r0
 8003122:	460b      	mov	r3, r1
 8003124:	4640      	mov	r0, r8
 8003126:	4649      	mov	r1, r9
 8003128:	f7fd fa06 	bl	8000538 <__aeabi_dmul>
 800312c:	2200      	movs	r2, #0
 800312e:	4680      	mov	r8, r0
 8003130:	4689      	mov	r9, r1
 8003132:	4b5e      	ldr	r3, [pc, #376]	; (80032ac <__ieee754_pow+0x734>)
 8003134:	4620      	mov	r0, r4
 8003136:	4629      	mov	r1, r5
 8003138:	f7fd f84a 	bl	80001d0 <__aeabi_dsub>
 800313c:	e9dd 230a 	ldrd	r2, r3, [sp, #40]	; 0x28
 8003140:	f7fd f846 	bl	80001d0 <__aeabi_dsub>
 8003144:	4602      	mov	r2, r0
 8003146:	460b      	mov	r3, r1
 8003148:	4630      	mov	r0, r6
 800314a:	4639      	mov	r1, r7
 800314c:	f7fd f840 	bl	80001d0 <__aeabi_dsub>
 8003150:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 8003154:	f7fd f9f0 	bl	8000538 <__aeabi_dmul>
 8003158:	4622      	mov	r2, r4
 800315a:	4606      	mov	r6, r0
 800315c:	460f      	mov	r7, r1
 800315e:	462b      	mov	r3, r5
 8003160:	e9dd 0108 	ldrd	r0, r1, [sp, #32]
 8003164:	f7fd f9e8 	bl	8000538 <__aeabi_dmul>
 8003168:	4602      	mov	r2, r0
 800316a:	460b      	mov	r3, r1
 800316c:	4630      	mov	r0, r6
 800316e:	4639      	mov	r1, r7
 8003170:	f7fd f830 	bl	80001d4 <__adddf3>
 8003174:	4606      	mov	r6, r0
 8003176:	460f      	mov	r7, r1
 8003178:	4602      	mov	r2, r0
 800317a:	460b      	mov	r3, r1
 800317c:	4640      	mov	r0, r8
 800317e:	4649      	mov	r1, r9
 8003180:	f7fd f828 	bl	80001d4 <__adddf3>
 8003184:	9802      	ldr	r0, [sp, #8]
 8003186:	a33c      	add	r3, pc, #240	; (adr r3, 8003278 <__ieee754_pow+0x700>)
 8003188:	e9d3 2300 	ldrd	r2, r3, [r3]
 800318c:	4604      	mov	r4, r0
 800318e:	460d      	mov	r5, r1
 8003190:	f7fd f9d2 	bl	8000538 <__aeabi_dmul>
 8003194:	4642      	mov	r2, r8
 8003196:	e9cd 0108 	strd	r0, r1, [sp, #32]
 800319a:	464b      	mov	r3, r9
 800319c:	4620      	mov	r0, r4
 800319e:	4629      	mov	r1, r5
 80031a0:	f7fd f816 	bl	80001d0 <__aeabi_dsub>
 80031a4:	4602      	mov	r2, r0
 80031a6:	460b      	mov	r3, r1
 80031a8:	4630      	mov	r0, r6
 80031aa:	4639      	mov	r1, r7
 80031ac:	f7fd f810 	bl	80001d0 <__aeabi_dsub>
 80031b0:	a333      	add	r3, pc, #204	; (adr r3, 8003280 <__ieee754_pow+0x708>)
 80031b2:	e9d3 2300 	ldrd	r2, r3, [r3]
 80031b6:	f7fd f9bf 	bl	8000538 <__aeabi_dmul>
 80031ba:	a333      	add	r3, pc, #204	; (adr r3, 8003288 <__ieee754_pow+0x710>)
 80031bc:	e9d3 2300 	ldrd	r2, r3, [r3]
 80031c0:	4606      	mov	r6, r0
 80031c2:	460f      	mov	r7, r1
 80031c4:	4620      	mov	r0, r4
 80031c6:	4629      	mov	r1, r5
 80031c8:	f7fd f9b6 	bl	8000538 <__aeabi_dmul>
 80031cc:	4602      	mov	r2, r0
 80031ce:	460b      	mov	r3, r1
 80031d0:	4630      	mov	r0, r6
 80031d2:	4639      	mov	r1, r7
 80031d4:	f7fc fffe 	bl	80001d4 <__adddf3>
 80031d8:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 80031da:	4b35      	ldr	r3, [pc, #212]	; (80032b0 <__ieee754_pow+0x738>)
 80031dc:	4413      	add	r3, r2
 80031de:	e9d3 2300 	ldrd	r2, r3, [r3]
 80031e2:	f7fc fff7 	bl	80001d4 <__adddf3>
 80031e6:	4604      	mov	r4, r0
 80031e8:	9807      	ldr	r0, [sp, #28]
 80031ea:	460d      	mov	r5, r1
 80031ec:	f7fd f93e 	bl	800046c <__aeabi_i2d>
 80031f0:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 80031f2:	4b30      	ldr	r3, [pc, #192]	; (80032b4 <__ieee754_pow+0x73c>)
 80031f4:	4413      	add	r3, r2
 80031f6:	e9d3 8900 	ldrd	r8, r9, [r3]
 80031fa:	4606      	mov	r6, r0
 80031fc:	460f      	mov	r7, r1
 80031fe:	4622      	mov	r2, r4
 8003200:	462b      	mov	r3, r5
 8003202:	e9dd 0108 	ldrd	r0, r1, [sp, #32]
 8003206:	f7fc ffe5 	bl	80001d4 <__adddf3>
 800320a:	4642      	mov	r2, r8
 800320c:	464b      	mov	r3, r9
 800320e:	f7fc ffe1 	bl	80001d4 <__adddf3>
 8003212:	4632      	mov	r2, r6
 8003214:	463b      	mov	r3, r7
 8003216:	f7fc ffdd 	bl	80001d4 <__adddf3>
 800321a:	9802      	ldr	r0, [sp, #8]
 800321c:	4632      	mov	r2, r6
 800321e:	463b      	mov	r3, r7
 8003220:	e9cd 0104 	strd	r0, r1, [sp, #16]
 8003224:	f7fc ffd4 	bl	80001d0 <__aeabi_dsub>
 8003228:	4642      	mov	r2, r8
 800322a:	464b      	mov	r3, r9
 800322c:	f7fc ffd0 	bl	80001d0 <__aeabi_dsub>
 8003230:	e9dd 2308 	ldrd	r2, r3, [sp, #32]
 8003234:	e607      	b.n	8002e46 <__ieee754_pow+0x2ce>
 8003236:	f04f 0a01 	mov.w	sl, #1
 800323a:	e6a5      	b.n	8002f88 <__ieee754_pow+0x410>
 800323c:	ed9f 7b14 	vldr	d7, [pc, #80]	; 8003290 <__ieee754_pow+0x718>
 8003240:	e613      	b.n	8002e6a <__ieee754_pow+0x2f2>
 8003242:	bf00      	nop
 8003244:	f3af 8000 	nop.w
 8003248:	4a454eef 	.word	0x4a454eef
 800324c:	3fca7e28 	.word	0x3fca7e28
 8003250:	93c9db65 	.word	0x93c9db65
 8003254:	3fcd864a 	.word	0x3fcd864a
 8003258:	a91d4101 	.word	0xa91d4101
 800325c:	3fd17460 	.word	0x3fd17460
 8003260:	518f264d 	.word	0x518f264d
 8003264:	3fd55555 	.word	0x3fd55555
 8003268:	db6fabff 	.word	0xdb6fabff
 800326c:	3fdb6db6 	.word	0x3fdb6db6
 8003270:	33333303 	.word	0x33333303
 8003274:	3fe33333 	.word	0x3fe33333
 8003278:	e0000000 	.word	0xe0000000
 800327c:	3feec709 	.word	0x3feec709
 8003280:	dc3a03fd 	.word	0xdc3a03fd
 8003284:	3feec709 	.word	0x3feec709
 8003288:	145b01f5 	.word	0x145b01f5
 800328c:	be3e2fe0 	.word	0xbe3e2fe0
 8003290:	00000000 	.word	0x00000000
 8003294:	3ff00000 	.word	0x3ff00000
 8003298:	43400000 	.word	0x43400000
 800329c:	0003988e 	.word	0x0003988e
 80032a0:	000bb679 	.word	0x000bb679
 80032a4:	08003980 	.word	0x08003980
 80032a8:	3ff00000 	.word	0x3ff00000
 80032ac:	40080000 	.word	0x40080000
 80032b0:	080039a0 	.word	0x080039a0
 80032b4:	08003990 	.word	0x08003990
 80032b8:	a3b6      	add	r3, pc, #728	; (adr r3, 8003594 <__ieee754_pow+0xa1c>)
 80032ba:	e9d3 2300 	ldrd	r2, r3, [r3]
 80032be:	4640      	mov	r0, r8
 80032c0:	4649      	mov	r1, r9
 80032c2:	f7fc ff87 	bl	80001d4 <__adddf3>
 80032c6:	4622      	mov	r2, r4
 80032c8:	e9cd 0104 	strd	r0, r1, [sp, #16]
 80032cc:	462b      	mov	r3, r5
 80032ce:	4630      	mov	r0, r6
 80032d0:	4639      	mov	r1, r7
 80032d2:	f7fc ff7d 	bl	80001d0 <__aeabi_dsub>
 80032d6:	4602      	mov	r2, r0
 80032d8:	460b      	mov	r3, r1
 80032da:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 80032de:	f7fd fbbb 	bl	8000a58 <__aeabi_dcmpgt>
 80032e2:	2800      	cmp	r0, #0
 80032e4:	f47f adfe 	bne.w	8002ee4 <__ieee754_pow+0x36c>
 80032e8:	4aa5      	ldr	r2, [pc, #660]	; (8003580 <__ieee754_pow+0xa08>)
 80032ea:	f02b 4300 	bic.w	r3, fp, #2147483648	; 0x80000000
 80032ee:	4293      	cmp	r3, r2
 80032f0:	f340 810c 	ble.w	800350c <__ieee754_pow+0x994>
 80032f4:	151b      	asrs	r3, r3, #20
 80032f6:	f44f 1a80 	mov.w	sl, #1048576	; 0x100000
 80032fa:	f2a3 33fe 	subw	r3, r3, #1022	; 0x3fe
 80032fe:	fa4a f303 	asr.w	r3, sl, r3
 8003302:	445b      	add	r3, fp
 8003304:	f3c3 520a 	ubfx	r2, r3, #20, #11
 8003308:	4e9e      	ldr	r6, [pc, #632]	; (8003584 <__ieee754_pow+0xa0c>)
 800330a:	f2a2 32ff 	subw	r2, r2, #1023	; 0x3ff
 800330e:	4116      	asrs	r6, r2
 8003310:	f3c3 0a13 	ubfx	sl, r3, #0, #20
 8003314:	2000      	movs	r0, #0
 8003316:	ea23 0106 	bic.w	r1, r3, r6
 800331a:	f1c2 0214 	rsb	r2, r2, #20
 800331e:	f44a 1a80 	orr.w	sl, sl, #1048576	; 0x100000
 8003322:	fa4a fa02 	asr.w	sl, sl, r2
 8003326:	f1bb 0f00 	cmp.w	fp, #0
 800332a:	4602      	mov	r2, r0
 800332c:	460b      	mov	r3, r1
 800332e:	4620      	mov	r0, r4
 8003330:	4629      	mov	r1, r5
 8003332:	bfb8      	it	lt
 8003334:	f1ca 0a00 	rsblt	sl, sl, #0
 8003338:	f7fc ff4a 	bl	80001d0 <__aeabi_dsub>
 800333c:	e9cd 0100 	strd	r0, r1, [sp]
 8003340:	4642      	mov	r2, r8
 8003342:	464b      	mov	r3, r9
 8003344:	e9dd 0100 	ldrd	r0, r1, [sp]
 8003348:	f7fc ff44 	bl	80001d4 <__adddf3>
 800334c:	2000      	movs	r0, #0
 800334e:	a37a      	add	r3, pc, #488	; (adr r3, 8003538 <__ieee754_pow+0x9c0>)
 8003350:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003354:	4604      	mov	r4, r0
 8003356:	460d      	mov	r5, r1
 8003358:	f7fd f8ee 	bl	8000538 <__aeabi_dmul>
 800335c:	e9dd 2300 	ldrd	r2, r3, [sp]
 8003360:	4606      	mov	r6, r0
 8003362:	460f      	mov	r7, r1
 8003364:	4620      	mov	r0, r4
 8003366:	4629      	mov	r1, r5
 8003368:	f7fc ff32 	bl	80001d0 <__aeabi_dsub>
 800336c:	4602      	mov	r2, r0
 800336e:	460b      	mov	r3, r1
 8003370:	4640      	mov	r0, r8
 8003372:	4649      	mov	r1, r9
 8003374:	f7fc ff2c 	bl	80001d0 <__aeabi_dsub>
 8003378:	a371      	add	r3, pc, #452	; (adr r3, 8003540 <__ieee754_pow+0x9c8>)
 800337a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800337e:	f7fd f8db 	bl	8000538 <__aeabi_dmul>
 8003382:	a371      	add	r3, pc, #452	; (adr r3, 8003548 <__ieee754_pow+0x9d0>)
 8003384:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003388:	4680      	mov	r8, r0
 800338a:	4689      	mov	r9, r1
 800338c:	4620      	mov	r0, r4
 800338e:	4629      	mov	r1, r5
 8003390:	f7fd f8d2 	bl	8000538 <__aeabi_dmul>
 8003394:	4602      	mov	r2, r0
 8003396:	460b      	mov	r3, r1
 8003398:	4640      	mov	r0, r8
 800339a:	4649      	mov	r1, r9
 800339c:	f7fc ff1a 	bl	80001d4 <__adddf3>
 80033a0:	4604      	mov	r4, r0
 80033a2:	460d      	mov	r5, r1
 80033a4:	4602      	mov	r2, r0
 80033a6:	460b      	mov	r3, r1
 80033a8:	4630      	mov	r0, r6
 80033aa:	4639      	mov	r1, r7
 80033ac:	f7fc ff12 	bl	80001d4 <__adddf3>
 80033b0:	4632      	mov	r2, r6
 80033b2:	463b      	mov	r3, r7
 80033b4:	4680      	mov	r8, r0
 80033b6:	4689      	mov	r9, r1
 80033b8:	f7fc ff0a 	bl	80001d0 <__aeabi_dsub>
 80033bc:	4602      	mov	r2, r0
 80033be:	460b      	mov	r3, r1
 80033c0:	4620      	mov	r0, r4
 80033c2:	4629      	mov	r1, r5
 80033c4:	f7fc ff04 	bl	80001d0 <__aeabi_dsub>
 80033c8:	4642      	mov	r2, r8
 80033ca:	4606      	mov	r6, r0
 80033cc:	460f      	mov	r7, r1
 80033ce:	464b      	mov	r3, r9
 80033d0:	4640      	mov	r0, r8
 80033d2:	4649      	mov	r1, r9
 80033d4:	f7fd f8b0 	bl	8000538 <__aeabi_dmul>
 80033d8:	a35d      	add	r3, pc, #372	; (adr r3, 8003550 <__ieee754_pow+0x9d8>)
 80033da:	e9d3 2300 	ldrd	r2, r3, [r3]
 80033de:	4604      	mov	r4, r0
 80033e0:	460d      	mov	r5, r1
 80033e2:	f7fd f8a9 	bl	8000538 <__aeabi_dmul>
 80033e6:	a35c      	add	r3, pc, #368	; (adr r3, 8003558 <__ieee754_pow+0x9e0>)
 80033e8:	e9d3 2300 	ldrd	r2, r3, [r3]
 80033ec:	f7fc fef0 	bl	80001d0 <__aeabi_dsub>
 80033f0:	4622      	mov	r2, r4
 80033f2:	462b      	mov	r3, r5
 80033f4:	f7fd f8a0 	bl	8000538 <__aeabi_dmul>
 80033f8:	a359      	add	r3, pc, #356	; (adr r3, 8003560 <__ieee754_pow+0x9e8>)
 80033fa:	e9d3 2300 	ldrd	r2, r3, [r3]
 80033fe:	f7fc fee9 	bl	80001d4 <__adddf3>
 8003402:	4622      	mov	r2, r4
 8003404:	462b      	mov	r3, r5
 8003406:	f7fd f897 	bl	8000538 <__aeabi_dmul>
 800340a:	a357      	add	r3, pc, #348	; (adr r3, 8003568 <__ieee754_pow+0x9f0>)
 800340c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003410:	f7fc fede 	bl	80001d0 <__aeabi_dsub>
 8003414:	4622      	mov	r2, r4
 8003416:	462b      	mov	r3, r5
 8003418:	f7fd f88e 	bl	8000538 <__aeabi_dmul>
 800341c:	a354      	add	r3, pc, #336	; (adr r3, 8003570 <__ieee754_pow+0x9f8>)
 800341e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003422:	f7fc fed7 	bl	80001d4 <__adddf3>
 8003426:	4622      	mov	r2, r4
 8003428:	462b      	mov	r3, r5
 800342a:	f7fd f885 	bl	8000538 <__aeabi_dmul>
 800342e:	4602      	mov	r2, r0
 8003430:	460b      	mov	r3, r1
 8003432:	4640      	mov	r0, r8
 8003434:	4649      	mov	r1, r9
 8003436:	f7fc fecb 	bl	80001d0 <__aeabi_dsub>
 800343a:	4604      	mov	r4, r0
 800343c:	460d      	mov	r5, r1
 800343e:	4602      	mov	r2, r0
 8003440:	460b      	mov	r3, r1
 8003442:	4640      	mov	r0, r8
 8003444:	4649      	mov	r1, r9
 8003446:	f7fd f877 	bl	8000538 <__aeabi_dmul>
 800344a:	2200      	movs	r2, #0
 800344c:	e9cd 0100 	strd	r0, r1, [sp]
 8003450:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 8003454:	4620      	mov	r0, r4
 8003456:	4629      	mov	r1, r5
 8003458:	f7fc feba 	bl	80001d0 <__aeabi_dsub>
 800345c:	4602      	mov	r2, r0
 800345e:	460b      	mov	r3, r1
 8003460:	e9dd 0100 	ldrd	r0, r1, [sp]
 8003464:	f7fd f992 	bl	800078c <__aeabi_ddiv>
 8003468:	4632      	mov	r2, r6
 800346a:	4604      	mov	r4, r0
 800346c:	460d      	mov	r5, r1
 800346e:	463b      	mov	r3, r7
 8003470:	4640      	mov	r0, r8
 8003472:	4649      	mov	r1, r9
 8003474:	f7fd f860 	bl	8000538 <__aeabi_dmul>
 8003478:	4632      	mov	r2, r6
 800347a:	463b      	mov	r3, r7
 800347c:	f7fc feaa 	bl	80001d4 <__adddf3>
 8003480:	4602      	mov	r2, r0
 8003482:	460b      	mov	r3, r1
 8003484:	4620      	mov	r0, r4
 8003486:	4629      	mov	r1, r5
 8003488:	f7fc fea2 	bl	80001d0 <__aeabi_dsub>
 800348c:	4642      	mov	r2, r8
 800348e:	464b      	mov	r3, r9
 8003490:	f7fc fe9e 	bl	80001d0 <__aeabi_dsub>
 8003494:	4602      	mov	r2, r0
 8003496:	460b      	mov	r3, r1
 8003498:	2000      	movs	r0, #0
 800349a:	493b      	ldr	r1, [pc, #236]	; (8003588 <__ieee754_pow+0xa10>)
 800349c:	f7fc fe98 	bl	80001d0 <__aeabi_dsub>
 80034a0:	eb01 540a 	add.w	r4, r1, sl, lsl #20
 80034a4:	f5b4 1f80 	cmp.w	r4, #1048576	; 0x100000
 80034a8:	4602      	mov	r2, r0
 80034aa:	460b      	mov	r3, r1
 80034ac:	da31      	bge.n	8003512 <__ieee754_pow+0x99a>
 80034ae:	4650      	mov	r0, sl
 80034b0:	ec43 2b10 	vmov	d0, r2, r3
 80034b4:	f000 f9c4 	bl	8003840 <scalbn>
 80034b8:	ec51 0b10 	vmov	r0, r1, d0
 80034bc:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 80034c0:	f7ff bbf1 	b.w	8002ca6 <__ieee754_pow+0x12e>
 80034c4:	4b31      	ldr	r3, [pc, #196]	; (800358c <__ieee754_pow+0xa14>)
 80034c6:	f021 4600 	bic.w	r6, r1, #2147483648	; 0x80000000
 80034ca:	429e      	cmp	r6, r3
 80034cc:	f77f af0c 	ble.w	80032e8 <__ieee754_pow+0x770>
 80034d0:	4b2f      	ldr	r3, [pc, #188]	; (8003590 <__ieee754_pow+0xa18>)
 80034d2:	440b      	add	r3, r1
 80034d4:	4303      	orrs	r3, r0
 80034d6:	d00b      	beq.n	80034f0 <__ieee754_pow+0x978>
 80034d8:	a327      	add	r3, pc, #156	; (adr r3, 8003578 <__ieee754_pow+0xa00>)
 80034da:	e9d3 2300 	ldrd	r2, r3, [r3]
 80034de:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 80034e2:	f7fd f829 	bl	8000538 <__aeabi_dmul>
 80034e6:	a324      	add	r3, pc, #144	; (adr r3, 8003578 <__ieee754_pow+0xa00>)
 80034e8:	e9d3 2300 	ldrd	r2, r3, [r3]
 80034ec:	f7ff bbdb 	b.w	8002ca6 <__ieee754_pow+0x12e>
 80034f0:	4622      	mov	r2, r4
 80034f2:	462b      	mov	r3, r5
 80034f4:	f7fc fe6c 	bl	80001d0 <__aeabi_dsub>
 80034f8:	4602      	mov	r2, r0
 80034fa:	460b      	mov	r3, r1
 80034fc:	4640      	mov	r0, r8
 80034fe:	4649      	mov	r1, r9
 8003500:	f7fd fa96 	bl	8000a30 <__aeabi_dcmple>
 8003504:	2800      	cmp	r0, #0
 8003506:	f43f aeef 	beq.w	80032e8 <__ieee754_pow+0x770>
 800350a:	e7e5      	b.n	80034d8 <__ieee754_pow+0x960>
 800350c:	f04f 0a00 	mov.w	sl, #0
 8003510:	e716      	b.n	8003340 <__ieee754_pow+0x7c8>
 8003512:	4621      	mov	r1, r4
 8003514:	e7d2      	b.n	80034bc <__ieee754_pow+0x944>
 8003516:	2000      	movs	r0, #0
 8003518:	491b      	ldr	r1, [pc, #108]	; (8003588 <__ieee754_pow+0xa10>)
 800351a:	f7ff bb8d 	b.w	8002c38 <__ieee754_pow+0xc0>
 800351e:	e9dd 0100 	ldrd	r0, r1, [sp]
 8003522:	f7ff bb89 	b.w	8002c38 <__ieee754_pow+0xc0>
 8003526:	4630      	mov	r0, r6
 8003528:	4639      	mov	r1, r7
 800352a:	f7ff bb85 	b.w	8002c38 <__ieee754_pow+0xc0>
 800352e:	4693      	mov	fp, r2
 8003530:	f7ff bb96 	b.w	8002c60 <__ieee754_pow+0xe8>
 8003534:	f3af 8000 	nop.w
 8003538:	00000000 	.word	0x00000000
 800353c:	3fe62e43 	.word	0x3fe62e43
 8003540:	fefa39ef 	.word	0xfefa39ef
 8003544:	3fe62e42 	.word	0x3fe62e42
 8003548:	0ca86c39 	.word	0x0ca86c39
 800354c:	be205c61 	.word	0xbe205c61
 8003550:	72bea4d0 	.word	0x72bea4d0
 8003554:	3e663769 	.word	0x3e663769
 8003558:	c5d26bf1 	.word	0xc5d26bf1
 800355c:	3ebbbd41 	.word	0x3ebbbd41
 8003560:	af25de2c 	.word	0xaf25de2c
 8003564:	3f11566a 	.word	0x3f11566a
 8003568:	16bebd93 	.word	0x16bebd93
 800356c:	3f66c16c 	.word	0x3f66c16c
 8003570:	5555553e 	.word	0x5555553e
 8003574:	3fc55555 	.word	0x3fc55555
 8003578:	c2f8f359 	.word	0xc2f8f359
 800357c:	01a56e1f 	.word	0x01a56e1f
 8003580:	3fe00000 	.word	0x3fe00000
 8003584:	000fffff 	.word	0x000fffff
 8003588:	3ff00000 	.word	0x3ff00000
 800358c:	4090cbff 	.word	0x4090cbff
 8003590:	3f6f3400 	.word	0x3f6f3400
 8003594:	652b82fe 	.word	0x652b82fe
 8003598:	3c971547 	.word	0x3c971547

0800359c <__ieee754_sqrt>:
 800359c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80035a0:	ec55 4b10 	vmov	r4, r5, d0
 80035a4:	4e54      	ldr	r6, [pc, #336]	; (80036f8 <__ieee754_sqrt+0x15c>)
 80035a6:	43ae      	bics	r6, r5
 80035a8:	ee10 0a10 	vmov	r0, s0
 80035ac:	462b      	mov	r3, r5
 80035ae:	462a      	mov	r2, r5
 80035b0:	4621      	mov	r1, r4
 80035b2:	d113      	bne.n	80035dc <__ieee754_sqrt+0x40>
 80035b4:	ee10 2a10 	vmov	r2, s0
 80035b8:	462b      	mov	r3, r5
 80035ba:	ee10 0a10 	vmov	r0, s0
 80035be:	4629      	mov	r1, r5
 80035c0:	f7fc ffba 	bl	8000538 <__aeabi_dmul>
 80035c4:	4602      	mov	r2, r0
 80035c6:	460b      	mov	r3, r1
 80035c8:	4620      	mov	r0, r4
 80035ca:	4629      	mov	r1, r5
 80035cc:	f7fc fe02 	bl	80001d4 <__adddf3>
 80035d0:	4604      	mov	r4, r0
 80035d2:	460d      	mov	r5, r1
 80035d4:	ec45 4b10 	vmov	d0, r4, r5
 80035d8:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 80035dc:	2d00      	cmp	r5, #0
 80035de:	dc10      	bgt.n	8003602 <__ieee754_sqrt+0x66>
 80035e0:	f025 4600 	bic.w	r6, r5, #2147483648	; 0x80000000
 80035e4:	4330      	orrs	r0, r6
 80035e6:	d0f5      	beq.n	80035d4 <__ieee754_sqrt+0x38>
 80035e8:	b15d      	cbz	r5, 8003602 <__ieee754_sqrt+0x66>
 80035ea:	ee10 2a10 	vmov	r2, s0
 80035ee:	462b      	mov	r3, r5
 80035f0:	4620      	mov	r0, r4
 80035f2:	4629      	mov	r1, r5
 80035f4:	f7fc fdec 	bl	80001d0 <__aeabi_dsub>
 80035f8:	4602      	mov	r2, r0
 80035fa:	460b      	mov	r3, r1
 80035fc:	f7fd f8c6 	bl	800078c <__aeabi_ddiv>
 8003600:	e7e6      	b.n	80035d0 <__ieee754_sqrt+0x34>
 8003602:	151b      	asrs	r3, r3, #20
 8003604:	d10c      	bne.n	8003620 <__ieee754_sqrt+0x84>
 8003606:	2a00      	cmp	r2, #0
 8003608:	d06d      	beq.n	80036e6 <__ieee754_sqrt+0x14a>
 800360a:	2000      	movs	r0, #0
 800360c:	02d6      	lsls	r6, r2, #11
 800360e:	d56e      	bpl.n	80036ee <__ieee754_sqrt+0x152>
 8003610:	1e44      	subs	r4, r0, #1
 8003612:	1b1b      	subs	r3, r3, r4
 8003614:	f1c0 0420 	rsb	r4, r0, #32
 8003618:	fa21 f404 	lsr.w	r4, r1, r4
 800361c:	4322      	orrs	r2, r4
 800361e:	4081      	lsls	r1, r0
 8003620:	f2a3 33ff 	subw	r3, r3, #1023	; 0x3ff
 8003624:	f3c2 0213 	ubfx	r2, r2, #0, #20
 8003628:	07dd      	lsls	r5, r3, #31
 800362a:	f442 1280 	orr.w	r2, r2, #1048576	; 0x100000
 800362e:	bf42      	ittt	mi
 8003630:	0052      	lslmi	r2, r2, #1
 8003632:	eb02 72d1 	addmi.w	r2, r2, r1, lsr #31
 8003636:	0049      	lslmi	r1, r1, #1
 8003638:	1058      	asrs	r0, r3, #1
 800363a:	2500      	movs	r5, #0
 800363c:	eb02 73d1 	add.w	r3, r2, r1, lsr #31
 8003640:	441a      	add	r2, r3
 8003642:	0049      	lsls	r1, r1, #1
 8003644:	2316      	movs	r3, #22
 8003646:	462c      	mov	r4, r5
 8003648:	f44f 1600 	mov.w	r6, #2097152	; 0x200000
 800364c:	19a7      	adds	r7, r4, r6
 800364e:	4297      	cmp	r7, r2
 8003650:	bfde      	ittt	le
 8003652:	1bd2      	suble	r2, r2, r7
 8003654:	19bc      	addle	r4, r7, r6
 8003656:	19ad      	addle	r5, r5, r6
 8003658:	0052      	lsls	r2, r2, #1
 800365a:	3b01      	subs	r3, #1
 800365c:	eb02 72d1 	add.w	r2, r2, r1, lsr #31
 8003660:	ea4f 0656 	mov.w	r6, r6, lsr #1
 8003664:	ea4f 0141 	mov.w	r1, r1, lsl #1
 8003668:	d1f0      	bne.n	800364c <__ieee754_sqrt+0xb0>
 800366a:	f04f 0e20 	mov.w	lr, #32
 800366e:	469c      	mov	ip, r3
 8003670:	f04f 4600 	mov.w	r6, #2147483648	; 0x80000000
 8003674:	42a2      	cmp	r2, r4
 8003676:	eb06 070c 	add.w	r7, r6, ip
 800367a:	dc02      	bgt.n	8003682 <__ieee754_sqrt+0xe6>
 800367c:	d112      	bne.n	80036a4 <__ieee754_sqrt+0x108>
 800367e:	428f      	cmp	r7, r1
 8003680:	d810      	bhi.n	80036a4 <__ieee754_sqrt+0x108>
 8003682:	2f00      	cmp	r7, #0
 8003684:	eb07 0c06 	add.w	ip, r7, r6
 8003688:	da34      	bge.n	80036f4 <__ieee754_sqrt+0x158>
 800368a:	f1bc 0f00 	cmp.w	ip, #0
 800368e:	db31      	blt.n	80036f4 <__ieee754_sqrt+0x158>
 8003690:	f104 0801 	add.w	r8, r4, #1
 8003694:	1b12      	subs	r2, r2, r4
 8003696:	428f      	cmp	r7, r1
 8003698:	bf88      	it	hi
 800369a:	f102 32ff 	addhi.w	r2, r2, #4294967295
 800369e:	1bc9      	subs	r1, r1, r7
 80036a0:	4433      	add	r3, r6
 80036a2:	4644      	mov	r4, r8
 80036a4:	eb02 77d1 	add.w	r7, r2, r1, lsr #31
 80036a8:	f1be 0e01 	subs.w	lr, lr, #1
 80036ac:	443a      	add	r2, r7
 80036ae:	ea4f 0141 	mov.w	r1, r1, lsl #1
 80036b2:	ea4f 0656 	mov.w	r6, r6, lsr #1
 80036b6:	d1dd      	bne.n	8003674 <__ieee754_sqrt+0xd8>
 80036b8:	430a      	orrs	r2, r1
 80036ba:	d006      	beq.n	80036ca <__ieee754_sqrt+0x12e>
 80036bc:	1c5c      	adds	r4, r3, #1
 80036be:	bf13      	iteet	ne
 80036c0:	3301      	addne	r3, #1
 80036c2:	3501      	addeq	r5, #1
 80036c4:	4673      	moveq	r3, lr
 80036c6:	f023 0301 	bicne.w	r3, r3, #1
 80036ca:	106a      	asrs	r2, r5, #1
 80036cc:	085b      	lsrs	r3, r3, #1
 80036ce:	07e9      	lsls	r1, r5, #31
 80036d0:	f102 527f 	add.w	r2, r2, #1069547520	; 0x3fc00000
 80036d4:	f502 1200 	add.w	r2, r2, #2097152	; 0x200000
 80036d8:	bf48      	it	mi
 80036da:	f043 4300 	orrmi.w	r3, r3, #2147483648	; 0x80000000
 80036de:	eb02 5500 	add.w	r5, r2, r0, lsl #20
 80036e2:	461c      	mov	r4, r3
 80036e4:	e776      	b.n	80035d4 <__ieee754_sqrt+0x38>
 80036e6:	0aca      	lsrs	r2, r1, #11
 80036e8:	3b15      	subs	r3, #21
 80036ea:	0549      	lsls	r1, r1, #21
 80036ec:	e78b      	b.n	8003606 <__ieee754_sqrt+0x6a>
 80036ee:	0052      	lsls	r2, r2, #1
 80036f0:	3001      	adds	r0, #1
 80036f2:	e78b      	b.n	800360c <__ieee754_sqrt+0x70>
 80036f4:	46a0      	mov	r8, r4
 80036f6:	e7cd      	b.n	8003694 <__ieee754_sqrt+0xf8>
 80036f8:	7ff00000 	.word	0x7ff00000

080036fc <fabs>:
 80036fc:	ec53 2b10 	vmov	r2, r3, d0
 8003700:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 8003704:	ec43 2b10 	vmov	d0, r2, r3
 8003708:	4770      	bx	lr

0800370a <finite>:
 800370a:	ee10 3a90 	vmov	r3, s1
 800370e:	f043 4000 	orr.w	r0, r3, #2147483648	; 0x80000000
 8003712:	f500 1080 	add.w	r0, r0, #1048576	; 0x100000
 8003716:	0fc0      	lsrs	r0, r0, #31
 8003718:	4770      	bx	lr

0800371a <matherr>:
 800371a:	2000      	movs	r0, #0
 800371c:	4770      	bx	lr
	...

08003720 <nan>:
 8003720:	ed9f 0b01 	vldr	d0, [pc, #4]	; 8003728 <nan+0x8>
 8003724:	4770      	bx	lr
 8003726:	bf00      	nop
 8003728:	00000000 	.word	0x00000000
 800372c:	7ff80000 	.word	0x7ff80000

08003730 <rint>:
 8003730:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 8003732:	ec51 0b10 	vmov	r0, r1, d0
 8003736:	f3c1 540a 	ubfx	r4, r1, #20, #11
 800373a:	f2a4 36ff 	subw	r6, r4, #1023	; 0x3ff
 800373e:	2e13      	cmp	r6, #19
 8003740:	ee10 7a10 	vmov	r7, s0
 8003744:	460b      	mov	r3, r1
 8003746:	4602      	mov	r2, r0
 8003748:	ea4f 75d1 	mov.w	r5, r1, lsr #31
 800374c:	dc58      	bgt.n	8003800 <rint+0xd0>
 800374e:	2e00      	cmp	r6, #0
 8003750:	da2b      	bge.n	80037aa <rint+0x7a>
 8003752:	f021 4200 	bic.w	r2, r1, #2147483648	; 0x80000000
 8003756:	4302      	orrs	r2, r0
 8003758:	d023      	beq.n	80037a2 <rint+0x72>
 800375a:	f3c1 0213 	ubfx	r2, r1, #0, #20
 800375e:	4302      	orrs	r2, r0
 8003760:	4251      	negs	r1, r2
 8003762:	4311      	orrs	r1, r2
 8003764:	0b09      	lsrs	r1, r1, #12
 8003766:	0c5b      	lsrs	r3, r3, #17
 8003768:	f401 2100 	and.w	r1, r1, #524288	; 0x80000
 800376c:	045b      	lsls	r3, r3, #17
 800376e:	ea41 0703 	orr.w	r7, r1, r3
 8003772:	4b31      	ldr	r3, [pc, #196]	; (8003838 <rint+0x108>)
 8003774:	eb03 03c5 	add.w	r3, r3, r5, lsl #3
 8003778:	4639      	mov	r1, r7
 800377a:	e9d3 6700 	ldrd	r6, r7, [r3]
 800377e:	ee10 0a10 	vmov	r0, s0
 8003782:	4632      	mov	r2, r6
 8003784:	463b      	mov	r3, r7
 8003786:	f7fc fd25 	bl	80001d4 <__adddf3>
 800378a:	e9cd 0100 	strd	r0, r1, [sp]
 800378e:	463b      	mov	r3, r7
 8003790:	4632      	mov	r2, r6
 8003792:	e9dd 0100 	ldrd	r0, r1, [sp]
 8003796:	f7fc fd1b 	bl	80001d0 <__aeabi_dsub>
 800379a:	f021 4300 	bic.w	r3, r1, #2147483648	; 0x80000000
 800379e:	ea43 71c5 	orr.w	r1, r3, r5, lsl #31
 80037a2:	ec41 0b10 	vmov	d0, r0, r1
 80037a6:	b003      	add	sp, #12
 80037a8:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80037aa:	4c24      	ldr	r4, [pc, #144]	; (800383c <rint+0x10c>)
 80037ac:	4134      	asrs	r4, r6
 80037ae:	ea01 0704 	and.w	r7, r1, r4
 80037b2:	4307      	orrs	r7, r0
 80037b4:	d0f5      	beq.n	80037a2 <rint+0x72>
 80037b6:	0861      	lsrs	r1, r4, #1
 80037b8:	ea03 0001 	and.w	r0, r3, r1
 80037bc:	4302      	orrs	r2, r0
 80037be:	d00b      	beq.n	80037d8 <rint+0xa8>
 80037c0:	ea23 0101 	bic.w	r1, r3, r1
 80037c4:	f44f 2380 	mov.w	r3, #262144	; 0x40000
 80037c8:	2e13      	cmp	r6, #19
 80037ca:	fa43 f306 	asr.w	r3, r3, r6
 80037ce:	bf0c      	ite	eq
 80037d0:	f04f 4200 	moveq.w	r2, #2147483648	; 0x80000000
 80037d4:	2200      	movne	r2, #0
 80037d6:	430b      	orrs	r3, r1
 80037d8:	4619      	mov	r1, r3
 80037da:	4b17      	ldr	r3, [pc, #92]	; (8003838 <rint+0x108>)
 80037dc:	eb03 05c5 	add.w	r5, r3, r5, lsl #3
 80037e0:	e9d5 4500 	ldrd	r4, r5, [r5]
 80037e4:	4610      	mov	r0, r2
 80037e6:	462b      	mov	r3, r5
 80037e8:	4622      	mov	r2, r4
 80037ea:	f7fc fcf3 	bl	80001d4 <__adddf3>
 80037ee:	e9cd 0100 	strd	r0, r1, [sp]
 80037f2:	4622      	mov	r2, r4
 80037f4:	462b      	mov	r3, r5
 80037f6:	e9dd 0100 	ldrd	r0, r1, [sp]
 80037fa:	f7fc fce9 	bl	80001d0 <__aeabi_dsub>
 80037fe:	e7d0      	b.n	80037a2 <rint+0x72>
 8003800:	2e33      	cmp	r6, #51	; 0x33
 8003802:	dd08      	ble.n	8003816 <rint+0xe6>
 8003804:	f5b6 6f80 	cmp.w	r6, #1024	; 0x400
 8003808:	d1cb      	bne.n	80037a2 <rint+0x72>
 800380a:	ee10 2a10 	vmov	r2, s0
 800380e:	460b      	mov	r3, r1
 8003810:	f7fc fce0 	bl	80001d4 <__adddf3>
 8003814:	e7c5      	b.n	80037a2 <rint+0x72>
 8003816:	f2a4 4613 	subw	r6, r4, #1043	; 0x413
 800381a:	f04f 34ff 	mov.w	r4, #4294967295
 800381e:	40f4      	lsrs	r4, r6
 8003820:	4220      	tst	r0, r4
 8003822:	d0be      	beq.n	80037a2 <rint+0x72>
 8003824:	0861      	lsrs	r1, r4, #1
 8003826:	420f      	tst	r7, r1
 8003828:	bf1f      	itttt	ne
 800382a:	f04f 4280 	movne.w	r2, #1073741824	; 0x40000000
 800382e:	ea27 0101 	bicne.w	r1, r7, r1
 8003832:	4132      	asrne	r2, r6
 8003834:	430a      	orrne	r2, r1
 8003836:	e7cf      	b.n	80037d8 <rint+0xa8>
 8003838:	080039b0 	.word	0x080039b0
 800383c:	000fffff 	.word	0x000fffff

08003840 <scalbn>:
 8003840:	b570      	push	{r4, r5, r6, lr}
 8003842:	ec55 4b10 	vmov	r4, r5, d0
 8003846:	f3c5 520a 	ubfx	r2, r5, #20, #11
 800384a:	4606      	mov	r6, r0
 800384c:	462b      	mov	r3, r5
 800384e:	b9b2      	cbnz	r2, 800387e <scalbn+0x3e>
 8003850:	f025 4300 	bic.w	r3, r5, #2147483648	; 0x80000000
 8003854:	4323      	orrs	r3, r4
 8003856:	d03c      	beq.n	80038d2 <scalbn+0x92>
 8003858:	2200      	movs	r2, #0
 800385a:	4b33      	ldr	r3, [pc, #204]	; (8003928 <scalbn+0xe8>)
 800385c:	4629      	mov	r1, r5
 800385e:	ee10 0a10 	vmov	r0, s0
 8003862:	f7fc fe69 	bl	8000538 <__aeabi_dmul>
 8003866:	4a31      	ldr	r2, [pc, #196]	; (800392c <scalbn+0xec>)
 8003868:	4296      	cmp	r6, r2
 800386a:	4604      	mov	r4, r0
 800386c:	460d      	mov	r5, r1
 800386e:	460b      	mov	r3, r1
 8003870:	da13      	bge.n	800389a <scalbn+0x5a>
 8003872:	a329      	add	r3, pc, #164	; (adr r3, 8003918 <scalbn+0xd8>)
 8003874:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003878:	f7fc fe5e 	bl	8000538 <__aeabi_dmul>
 800387c:	e00a      	b.n	8003894 <scalbn+0x54>
 800387e:	f240 71ff 	movw	r1, #2047	; 0x7ff
 8003882:	428a      	cmp	r2, r1
 8003884:	d10c      	bne.n	80038a0 <scalbn+0x60>
 8003886:	ee10 2a10 	vmov	r2, s0
 800388a:	462b      	mov	r3, r5
 800388c:	4620      	mov	r0, r4
 800388e:	4629      	mov	r1, r5
 8003890:	f7fc fca0 	bl	80001d4 <__adddf3>
 8003894:	4604      	mov	r4, r0
 8003896:	460d      	mov	r5, r1
 8003898:	e01b      	b.n	80038d2 <scalbn+0x92>
 800389a:	f3c1 520a 	ubfx	r2, r1, #20, #11
 800389e:	3a36      	subs	r2, #54	; 0x36
 80038a0:	4432      	add	r2, r6
 80038a2:	f240 71fe 	movw	r1, #2046	; 0x7fe
 80038a6:	428a      	cmp	r2, r1
 80038a8:	dd0b      	ble.n	80038c2 <scalbn+0x82>
 80038aa:	ec45 4b11 	vmov	d1, r4, r5
 80038ae:	ed9f 0b1c 	vldr	d0, [pc, #112]	; 8003920 <scalbn+0xe0>
 80038b2:	f000 f83f 	bl	8003934 <copysign>
 80038b6:	a31a      	add	r3, pc, #104	; (adr r3, 8003920 <scalbn+0xe0>)
 80038b8:	e9d3 2300 	ldrd	r2, r3, [r3]
 80038bc:	ec51 0b10 	vmov	r0, r1, d0
 80038c0:	e7da      	b.n	8003878 <scalbn+0x38>
 80038c2:	2a00      	cmp	r2, #0
 80038c4:	dd08      	ble.n	80038d8 <scalbn+0x98>
 80038c6:	f023 43ff 	bic.w	r3, r3, #2139095040	; 0x7f800000
 80038ca:	f423 03e0 	bic.w	r3, r3, #7340032	; 0x700000
 80038ce:	ea43 5502 	orr.w	r5, r3, r2, lsl #20
 80038d2:	ec45 4b10 	vmov	d0, r4, r5
 80038d6:	bd70      	pop	{r4, r5, r6, pc}
 80038d8:	f112 0f35 	cmn.w	r2, #53	; 0x35
 80038dc:	da0d      	bge.n	80038fa <scalbn+0xba>
 80038de:	f24c 3350 	movw	r3, #50000	; 0xc350
 80038e2:	429e      	cmp	r6, r3
 80038e4:	ec45 4b11 	vmov	d1, r4, r5
 80038e8:	dce1      	bgt.n	80038ae <scalbn+0x6e>
 80038ea:	ed9f 0b0b 	vldr	d0, [pc, #44]	; 8003918 <scalbn+0xd8>
 80038ee:	f000 f821 	bl	8003934 <copysign>
 80038f2:	a309      	add	r3, pc, #36	; (adr r3, 8003918 <scalbn+0xd8>)
 80038f4:	e9d3 2300 	ldrd	r2, r3, [r3]
 80038f8:	e7e0      	b.n	80038bc <scalbn+0x7c>
 80038fa:	f023 43ff 	bic.w	r3, r3, #2139095040	; 0x7f800000
 80038fe:	3236      	adds	r2, #54	; 0x36
 8003900:	f423 03e0 	bic.w	r3, r3, #7340032	; 0x700000
 8003904:	ea43 5502 	orr.w	r5, r3, r2, lsl #20
 8003908:	4620      	mov	r0, r4
 800390a:	4629      	mov	r1, r5
 800390c:	2200      	movs	r2, #0
 800390e:	4b08      	ldr	r3, [pc, #32]	; (8003930 <scalbn+0xf0>)
 8003910:	e7b2      	b.n	8003878 <scalbn+0x38>
 8003912:	bf00      	nop
 8003914:	f3af 8000 	nop.w
 8003918:	c2f8f359 	.word	0xc2f8f359
 800391c:	01a56e1f 	.word	0x01a56e1f
 8003920:	8800759c 	.word	0x8800759c
 8003924:	7e37e43c 	.word	0x7e37e43c
 8003928:	43500000 	.word	0x43500000
 800392c:	ffff3cb0 	.word	0xffff3cb0
 8003930:	3c900000 	.word	0x3c900000

08003934 <copysign>:
 8003934:	ec53 2b10 	vmov	r2, r3, d0
 8003938:	ee11 0a90 	vmov	r0, s3
 800393c:	f023 4100 	bic.w	r1, r3, #2147483648	; 0x80000000
 8003940:	f000 4000 	and.w	r0, r0, #2147483648	; 0x80000000
 8003944:	ea41 0300 	orr.w	r3, r1, r0
 8003948:	ec43 2b10 	vmov	d0, r2, r3
 800394c:	4770      	bx	lr
	...

08003950 <__errno>:
 8003950:	4b01      	ldr	r3, [pc, #4]	; (8003958 <__errno+0x8>)
 8003952:	6818      	ldr	r0, [r3, #0]
 8003954:	4770      	bx	lr
 8003956:	bf00      	nop
 8003958:	20000034 	.word	0x20000034

0800395c <_init>:
 800395c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800395e:	bf00      	nop
 8003960:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8003962:	bc08      	pop	{r3}
 8003964:	469e      	mov	lr, r3
 8003966:	4770      	bx	lr

08003968 <_fini>:
 8003968:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800396a:	bf00      	nop
 800396c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800396e:	bc08      	pop	{r3}
 8003970:	469e      	mov	lr, r3
 8003972:	4770      	bx	lr
