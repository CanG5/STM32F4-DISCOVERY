
013_HAL_FLASH_ERASE_WRITE_READ.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000188  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         000014e0  08000188  08000188  00010188  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000010  08001668  08001668  00011668  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08001678  08001678  0002000c  2**0
                  CONTENTS
  4 .ARM          00000008  08001678  08001678  00011678  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  08001680  08001680  0002000c  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08001680  08001680  00011680  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08001684  08001684  00011684  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         0000000c  20000000  08001688  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00000044  2000000c  08001694  0002000c  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  20000050  08001694  00020050  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  0002000c  2**0
                  CONTENTS, READONLY
 12 .debug_info   00003baa  00000000  00000000  0002003c  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_abbrev 00000fe8  00000000  00000000  00023be6  2**0
                  CONTENTS, READONLY, DEBUGGING
 14 .debug_aranges 000004d8  00000000  00000000  00024bd0  2**3
                  CONTENTS, READONLY, DEBUGGING
 15 .debug_ranges 00000440  00000000  00000000  000250a8  2**3
                  CONTENTS, READONLY, DEBUGGING
 16 .debug_macro  0001eba5  00000000  00000000  000254e8  2**0
                  CONTENTS, READONLY, DEBUGGING
 17 .debug_line   000046c7  00000000  00000000  0004408d  2**0
                  CONTENTS, READONLY, DEBUGGING
 18 .debug_str    000bacf6  00000000  00000000  00048754  2**0
                  CONTENTS, READONLY, DEBUGGING
 19 .comment      0000007b  00000000  00000000  0010344a  2**0
                  CONTENTS, READONLY
 20 .debug_frame  000011c8  00000000  00000000  001034c8  2**2
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

08000188 <__do_global_dtors_aux>:
 8000188:	b510      	push	{r4, lr}
 800018a:	4c05      	ldr	r4, [pc, #20]	; (80001a0 <__do_global_dtors_aux+0x18>)
 800018c:	7823      	ldrb	r3, [r4, #0]
 800018e:	b933      	cbnz	r3, 800019e <__do_global_dtors_aux+0x16>
 8000190:	4b04      	ldr	r3, [pc, #16]	; (80001a4 <__do_global_dtors_aux+0x1c>)
 8000192:	b113      	cbz	r3, 800019a <__do_global_dtors_aux+0x12>
 8000194:	4804      	ldr	r0, [pc, #16]	; (80001a8 <__do_global_dtors_aux+0x20>)
 8000196:	f3af 8000 	nop.w
 800019a:	2301      	movs	r3, #1
 800019c:	7023      	strb	r3, [r4, #0]
 800019e:	bd10      	pop	{r4, pc}
 80001a0:	2000000c 	.word	0x2000000c
 80001a4:	00000000 	.word	0x00000000
 80001a8:	08001650 	.word	0x08001650

080001ac <frame_dummy>:
 80001ac:	b508      	push	{r3, lr}
 80001ae:	4b03      	ldr	r3, [pc, #12]	; (80001bc <frame_dummy+0x10>)
 80001b0:	b11b      	cbz	r3, 80001ba <frame_dummy+0xe>
 80001b2:	4903      	ldr	r1, [pc, #12]	; (80001c0 <frame_dummy+0x14>)
 80001b4:	4803      	ldr	r0, [pc, #12]	; (80001c4 <frame_dummy+0x18>)
 80001b6:	f3af 8000 	nop.w
 80001ba:	bd08      	pop	{r3, pc}
 80001bc:	00000000 	.word	0x00000000
 80001c0:	20000010 	.word	0x20000010
 80001c4:	08001650 	.word	0x08001650

080001c8 <__aeabi_uldivmod>:
 80001c8:	b953      	cbnz	r3, 80001e0 <__aeabi_uldivmod+0x18>
 80001ca:	b94a      	cbnz	r2, 80001e0 <__aeabi_uldivmod+0x18>
 80001cc:	2900      	cmp	r1, #0
 80001ce:	bf08      	it	eq
 80001d0:	2800      	cmpeq	r0, #0
 80001d2:	bf1c      	itt	ne
 80001d4:	f04f 31ff 	movne.w	r1, #4294967295
 80001d8:	f04f 30ff 	movne.w	r0, #4294967295
 80001dc:	f000 b972 	b.w	80004c4 <__aeabi_idiv0>
 80001e0:	f1ad 0c08 	sub.w	ip, sp, #8
 80001e4:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 80001e8:	f000 f806 	bl	80001f8 <__udivmoddi4>
 80001ec:	f8dd e004 	ldr.w	lr, [sp, #4]
 80001f0:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 80001f4:	b004      	add	sp, #16
 80001f6:	4770      	bx	lr

080001f8 <__udivmoddi4>:
 80001f8:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80001fc:	9e08      	ldr	r6, [sp, #32]
 80001fe:	4604      	mov	r4, r0
 8000200:	4688      	mov	r8, r1
 8000202:	2b00      	cmp	r3, #0
 8000204:	d14b      	bne.n	800029e <__udivmoddi4+0xa6>
 8000206:	428a      	cmp	r2, r1
 8000208:	4615      	mov	r5, r2
 800020a:	d967      	bls.n	80002dc <__udivmoddi4+0xe4>
 800020c:	fab2 f282 	clz	r2, r2
 8000210:	b14a      	cbz	r2, 8000226 <__udivmoddi4+0x2e>
 8000212:	f1c2 0720 	rsb	r7, r2, #32
 8000216:	fa01 f302 	lsl.w	r3, r1, r2
 800021a:	fa20 f707 	lsr.w	r7, r0, r7
 800021e:	4095      	lsls	r5, r2
 8000220:	ea47 0803 	orr.w	r8, r7, r3
 8000224:	4094      	lsls	r4, r2
 8000226:	ea4f 4e15 	mov.w	lr, r5, lsr #16
 800022a:	0c23      	lsrs	r3, r4, #16
 800022c:	fbb8 f7fe 	udiv	r7, r8, lr
 8000230:	fa1f fc85 	uxth.w	ip, r5
 8000234:	fb0e 8817 	mls	r8, lr, r7, r8
 8000238:	ea43 4308 	orr.w	r3, r3, r8, lsl #16
 800023c:	fb07 f10c 	mul.w	r1, r7, ip
 8000240:	4299      	cmp	r1, r3
 8000242:	d909      	bls.n	8000258 <__udivmoddi4+0x60>
 8000244:	18eb      	adds	r3, r5, r3
 8000246:	f107 30ff 	add.w	r0, r7, #4294967295
 800024a:	f080 811b 	bcs.w	8000484 <__udivmoddi4+0x28c>
 800024e:	4299      	cmp	r1, r3
 8000250:	f240 8118 	bls.w	8000484 <__udivmoddi4+0x28c>
 8000254:	3f02      	subs	r7, #2
 8000256:	442b      	add	r3, r5
 8000258:	1a5b      	subs	r3, r3, r1
 800025a:	b2a4      	uxth	r4, r4
 800025c:	fbb3 f0fe 	udiv	r0, r3, lr
 8000260:	fb0e 3310 	mls	r3, lr, r0, r3
 8000264:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000268:	fb00 fc0c 	mul.w	ip, r0, ip
 800026c:	45a4      	cmp	ip, r4
 800026e:	d909      	bls.n	8000284 <__udivmoddi4+0x8c>
 8000270:	192c      	adds	r4, r5, r4
 8000272:	f100 33ff 	add.w	r3, r0, #4294967295
 8000276:	f080 8107 	bcs.w	8000488 <__udivmoddi4+0x290>
 800027a:	45a4      	cmp	ip, r4
 800027c:	f240 8104 	bls.w	8000488 <__udivmoddi4+0x290>
 8000280:	3802      	subs	r0, #2
 8000282:	442c      	add	r4, r5
 8000284:	ea40 4007 	orr.w	r0, r0, r7, lsl #16
 8000288:	eba4 040c 	sub.w	r4, r4, ip
 800028c:	2700      	movs	r7, #0
 800028e:	b11e      	cbz	r6, 8000298 <__udivmoddi4+0xa0>
 8000290:	40d4      	lsrs	r4, r2
 8000292:	2300      	movs	r3, #0
 8000294:	e9c6 4300 	strd	r4, r3, [r6]
 8000298:	4639      	mov	r1, r7
 800029a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800029e:	428b      	cmp	r3, r1
 80002a0:	d909      	bls.n	80002b6 <__udivmoddi4+0xbe>
 80002a2:	2e00      	cmp	r6, #0
 80002a4:	f000 80eb 	beq.w	800047e <__udivmoddi4+0x286>
 80002a8:	2700      	movs	r7, #0
 80002aa:	e9c6 0100 	strd	r0, r1, [r6]
 80002ae:	4638      	mov	r0, r7
 80002b0:	4639      	mov	r1, r7
 80002b2:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80002b6:	fab3 f783 	clz	r7, r3
 80002ba:	2f00      	cmp	r7, #0
 80002bc:	d147      	bne.n	800034e <__udivmoddi4+0x156>
 80002be:	428b      	cmp	r3, r1
 80002c0:	d302      	bcc.n	80002c8 <__udivmoddi4+0xd0>
 80002c2:	4282      	cmp	r2, r0
 80002c4:	f200 80fa 	bhi.w	80004bc <__udivmoddi4+0x2c4>
 80002c8:	1a84      	subs	r4, r0, r2
 80002ca:	eb61 0303 	sbc.w	r3, r1, r3
 80002ce:	2001      	movs	r0, #1
 80002d0:	4698      	mov	r8, r3
 80002d2:	2e00      	cmp	r6, #0
 80002d4:	d0e0      	beq.n	8000298 <__udivmoddi4+0xa0>
 80002d6:	e9c6 4800 	strd	r4, r8, [r6]
 80002da:	e7dd      	b.n	8000298 <__udivmoddi4+0xa0>
 80002dc:	b902      	cbnz	r2, 80002e0 <__udivmoddi4+0xe8>
 80002de:	deff      	udf	#255	; 0xff
 80002e0:	fab2 f282 	clz	r2, r2
 80002e4:	2a00      	cmp	r2, #0
 80002e6:	f040 808f 	bne.w	8000408 <__udivmoddi4+0x210>
 80002ea:	1b49      	subs	r1, r1, r5
 80002ec:	ea4f 4e15 	mov.w	lr, r5, lsr #16
 80002f0:	fa1f f885 	uxth.w	r8, r5
 80002f4:	2701      	movs	r7, #1
 80002f6:	fbb1 fcfe 	udiv	ip, r1, lr
 80002fa:	0c23      	lsrs	r3, r4, #16
 80002fc:	fb0e 111c 	mls	r1, lr, ip, r1
 8000300:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000304:	fb08 f10c 	mul.w	r1, r8, ip
 8000308:	4299      	cmp	r1, r3
 800030a:	d907      	bls.n	800031c <__udivmoddi4+0x124>
 800030c:	18eb      	adds	r3, r5, r3
 800030e:	f10c 30ff 	add.w	r0, ip, #4294967295
 8000312:	d202      	bcs.n	800031a <__udivmoddi4+0x122>
 8000314:	4299      	cmp	r1, r3
 8000316:	f200 80cd 	bhi.w	80004b4 <__udivmoddi4+0x2bc>
 800031a:	4684      	mov	ip, r0
 800031c:	1a59      	subs	r1, r3, r1
 800031e:	b2a3      	uxth	r3, r4
 8000320:	fbb1 f0fe 	udiv	r0, r1, lr
 8000324:	fb0e 1410 	mls	r4, lr, r0, r1
 8000328:	ea43 4404 	orr.w	r4, r3, r4, lsl #16
 800032c:	fb08 f800 	mul.w	r8, r8, r0
 8000330:	45a0      	cmp	r8, r4
 8000332:	d907      	bls.n	8000344 <__udivmoddi4+0x14c>
 8000334:	192c      	adds	r4, r5, r4
 8000336:	f100 33ff 	add.w	r3, r0, #4294967295
 800033a:	d202      	bcs.n	8000342 <__udivmoddi4+0x14a>
 800033c:	45a0      	cmp	r8, r4
 800033e:	f200 80b6 	bhi.w	80004ae <__udivmoddi4+0x2b6>
 8000342:	4618      	mov	r0, r3
 8000344:	eba4 0408 	sub.w	r4, r4, r8
 8000348:	ea40 400c 	orr.w	r0, r0, ip, lsl #16
 800034c:	e79f      	b.n	800028e <__udivmoddi4+0x96>
 800034e:	f1c7 0c20 	rsb	ip, r7, #32
 8000352:	40bb      	lsls	r3, r7
 8000354:	fa22 fe0c 	lsr.w	lr, r2, ip
 8000358:	ea4e 0e03 	orr.w	lr, lr, r3
 800035c:	fa01 f407 	lsl.w	r4, r1, r7
 8000360:	fa20 f50c 	lsr.w	r5, r0, ip
 8000364:	fa21 f30c 	lsr.w	r3, r1, ip
 8000368:	ea4f 481e 	mov.w	r8, lr, lsr #16
 800036c:	4325      	orrs	r5, r4
 800036e:	fbb3 f9f8 	udiv	r9, r3, r8
 8000372:	0c2c      	lsrs	r4, r5, #16
 8000374:	fb08 3319 	mls	r3, r8, r9, r3
 8000378:	fa1f fa8e 	uxth.w	sl, lr
 800037c:	ea44 4303 	orr.w	r3, r4, r3, lsl #16
 8000380:	fb09 f40a 	mul.w	r4, r9, sl
 8000384:	429c      	cmp	r4, r3
 8000386:	fa02 f207 	lsl.w	r2, r2, r7
 800038a:	fa00 f107 	lsl.w	r1, r0, r7
 800038e:	d90b      	bls.n	80003a8 <__udivmoddi4+0x1b0>
 8000390:	eb1e 0303 	adds.w	r3, lr, r3
 8000394:	f109 30ff 	add.w	r0, r9, #4294967295
 8000398:	f080 8087 	bcs.w	80004aa <__udivmoddi4+0x2b2>
 800039c:	429c      	cmp	r4, r3
 800039e:	f240 8084 	bls.w	80004aa <__udivmoddi4+0x2b2>
 80003a2:	f1a9 0902 	sub.w	r9, r9, #2
 80003a6:	4473      	add	r3, lr
 80003a8:	1b1b      	subs	r3, r3, r4
 80003aa:	b2ad      	uxth	r5, r5
 80003ac:	fbb3 f0f8 	udiv	r0, r3, r8
 80003b0:	fb08 3310 	mls	r3, r8, r0, r3
 80003b4:	ea45 4403 	orr.w	r4, r5, r3, lsl #16
 80003b8:	fb00 fa0a 	mul.w	sl, r0, sl
 80003bc:	45a2      	cmp	sl, r4
 80003be:	d908      	bls.n	80003d2 <__udivmoddi4+0x1da>
 80003c0:	eb1e 0404 	adds.w	r4, lr, r4
 80003c4:	f100 33ff 	add.w	r3, r0, #4294967295
 80003c8:	d26b      	bcs.n	80004a2 <__udivmoddi4+0x2aa>
 80003ca:	45a2      	cmp	sl, r4
 80003cc:	d969      	bls.n	80004a2 <__udivmoddi4+0x2aa>
 80003ce:	3802      	subs	r0, #2
 80003d0:	4474      	add	r4, lr
 80003d2:	ea40 4009 	orr.w	r0, r0, r9, lsl #16
 80003d6:	fba0 8902 	umull	r8, r9, r0, r2
 80003da:	eba4 040a 	sub.w	r4, r4, sl
 80003de:	454c      	cmp	r4, r9
 80003e0:	46c2      	mov	sl, r8
 80003e2:	464b      	mov	r3, r9
 80003e4:	d354      	bcc.n	8000490 <__udivmoddi4+0x298>
 80003e6:	d051      	beq.n	800048c <__udivmoddi4+0x294>
 80003e8:	2e00      	cmp	r6, #0
 80003ea:	d069      	beq.n	80004c0 <__udivmoddi4+0x2c8>
 80003ec:	ebb1 050a 	subs.w	r5, r1, sl
 80003f0:	eb64 0403 	sbc.w	r4, r4, r3
 80003f4:	fa04 fc0c 	lsl.w	ip, r4, ip
 80003f8:	40fd      	lsrs	r5, r7
 80003fa:	40fc      	lsrs	r4, r7
 80003fc:	ea4c 0505 	orr.w	r5, ip, r5
 8000400:	e9c6 5400 	strd	r5, r4, [r6]
 8000404:	2700      	movs	r7, #0
 8000406:	e747      	b.n	8000298 <__udivmoddi4+0xa0>
 8000408:	f1c2 0320 	rsb	r3, r2, #32
 800040c:	fa20 f703 	lsr.w	r7, r0, r3
 8000410:	4095      	lsls	r5, r2
 8000412:	fa01 f002 	lsl.w	r0, r1, r2
 8000416:	fa21 f303 	lsr.w	r3, r1, r3
 800041a:	ea4f 4e15 	mov.w	lr, r5, lsr #16
 800041e:	4338      	orrs	r0, r7
 8000420:	0c01      	lsrs	r1, r0, #16
 8000422:	fbb3 f7fe 	udiv	r7, r3, lr
 8000426:	fa1f f885 	uxth.w	r8, r5
 800042a:	fb0e 3317 	mls	r3, lr, r7, r3
 800042e:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000432:	fb07 f308 	mul.w	r3, r7, r8
 8000436:	428b      	cmp	r3, r1
 8000438:	fa04 f402 	lsl.w	r4, r4, r2
 800043c:	d907      	bls.n	800044e <__udivmoddi4+0x256>
 800043e:	1869      	adds	r1, r5, r1
 8000440:	f107 3cff 	add.w	ip, r7, #4294967295
 8000444:	d22f      	bcs.n	80004a6 <__udivmoddi4+0x2ae>
 8000446:	428b      	cmp	r3, r1
 8000448:	d92d      	bls.n	80004a6 <__udivmoddi4+0x2ae>
 800044a:	3f02      	subs	r7, #2
 800044c:	4429      	add	r1, r5
 800044e:	1acb      	subs	r3, r1, r3
 8000450:	b281      	uxth	r1, r0
 8000452:	fbb3 f0fe 	udiv	r0, r3, lr
 8000456:	fb0e 3310 	mls	r3, lr, r0, r3
 800045a:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 800045e:	fb00 f308 	mul.w	r3, r0, r8
 8000462:	428b      	cmp	r3, r1
 8000464:	d907      	bls.n	8000476 <__udivmoddi4+0x27e>
 8000466:	1869      	adds	r1, r5, r1
 8000468:	f100 3cff 	add.w	ip, r0, #4294967295
 800046c:	d217      	bcs.n	800049e <__udivmoddi4+0x2a6>
 800046e:	428b      	cmp	r3, r1
 8000470:	d915      	bls.n	800049e <__udivmoddi4+0x2a6>
 8000472:	3802      	subs	r0, #2
 8000474:	4429      	add	r1, r5
 8000476:	1ac9      	subs	r1, r1, r3
 8000478:	ea40 4707 	orr.w	r7, r0, r7, lsl #16
 800047c:	e73b      	b.n	80002f6 <__udivmoddi4+0xfe>
 800047e:	4637      	mov	r7, r6
 8000480:	4630      	mov	r0, r6
 8000482:	e709      	b.n	8000298 <__udivmoddi4+0xa0>
 8000484:	4607      	mov	r7, r0
 8000486:	e6e7      	b.n	8000258 <__udivmoddi4+0x60>
 8000488:	4618      	mov	r0, r3
 800048a:	e6fb      	b.n	8000284 <__udivmoddi4+0x8c>
 800048c:	4541      	cmp	r1, r8
 800048e:	d2ab      	bcs.n	80003e8 <__udivmoddi4+0x1f0>
 8000490:	ebb8 0a02 	subs.w	sl, r8, r2
 8000494:	eb69 020e 	sbc.w	r2, r9, lr
 8000498:	3801      	subs	r0, #1
 800049a:	4613      	mov	r3, r2
 800049c:	e7a4      	b.n	80003e8 <__udivmoddi4+0x1f0>
 800049e:	4660      	mov	r0, ip
 80004a0:	e7e9      	b.n	8000476 <__udivmoddi4+0x27e>
 80004a2:	4618      	mov	r0, r3
 80004a4:	e795      	b.n	80003d2 <__udivmoddi4+0x1da>
 80004a6:	4667      	mov	r7, ip
 80004a8:	e7d1      	b.n	800044e <__udivmoddi4+0x256>
 80004aa:	4681      	mov	r9, r0
 80004ac:	e77c      	b.n	80003a8 <__udivmoddi4+0x1b0>
 80004ae:	3802      	subs	r0, #2
 80004b0:	442c      	add	r4, r5
 80004b2:	e747      	b.n	8000344 <__udivmoddi4+0x14c>
 80004b4:	f1ac 0c02 	sub.w	ip, ip, #2
 80004b8:	442b      	add	r3, r5
 80004ba:	e72f      	b.n	800031c <__udivmoddi4+0x124>
 80004bc:	4638      	mov	r0, r7
 80004be:	e708      	b.n	80002d2 <__udivmoddi4+0xda>
 80004c0:	4637      	mov	r7, r6
 80004c2:	e6e9      	b.n	8000298 <__udivmoddi4+0xa0>

080004c4 <__aeabi_idiv0>:
 80004c4:	4770      	bx	lr
 80004c6:	bf00      	nop

080004c8 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 80004c8:	b580      	push	{r7, lr}
 80004ca:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 80004cc:	4b0e      	ldr	r3, [pc, #56]	; (8000508 <HAL_Init+0x40>)
 80004ce:	681b      	ldr	r3, [r3, #0]
 80004d0:	4a0d      	ldr	r2, [pc, #52]	; (8000508 <HAL_Init+0x40>)
 80004d2:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 80004d6:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 80004d8:	4b0b      	ldr	r3, [pc, #44]	; (8000508 <HAL_Init+0x40>)
 80004da:	681b      	ldr	r3, [r3, #0]
 80004dc:	4a0a      	ldr	r2, [pc, #40]	; (8000508 <HAL_Init+0x40>)
 80004de:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 80004e2:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 80004e4:	4b08      	ldr	r3, [pc, #32]	; (8000508 <HAL_Init+0x40>)
 80004e6:	681b      	ldr	r3, [r3, #0]
 80004e8:	4a07      	ldr	r2, [pc, #28]	; (8000508 <HAL_Init+0x40>)
 80004ea:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80004ee:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 80004f0:	2003      	movs	r0, #3
 80004f2:	f000 f90d 	bl	8000710 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 80004f6:	2000      	movs	r0, #0
 80004f8:	f000 f808 	bl	800050c <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 80004fc:	f000 ffc6 	bl	800148c <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8000500:	2300      	movs	r3, #0
}
 8000502:	4618      	mov	r0, r3
 8000504:	bd80      	pop	{r7, pc}
 8000506:	bf00      	nop
 8000508:	40023c00 	.word	0x40023c00

0800050c <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 800050c:	b580      	push	{r7, lr}
 800050e:	b082      	sub	sp, #8
 8000510:	af00      	add	r7, sp, #0
 8000512:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8000514:	4b12      	ldr	r3, [pc, #72]	; (8000560 <HAL_InitTick+0x54>)
 8000516:	681a      	ldr	r2, [r3, #0]
 8000518:	4b12      	ldr	r3, [pc, #72]	; (8000564 <HAL_InitTick+0x58>)
 800051a:	781b      	ldrb	r3, [r3, #0]
 800051c:	4619      	mov	r1, r3
 800051e:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8000522:	fbb3 f3f1 	udiv	r3, r3, r1
 8000526:	fbb2 f3f3 	udiv	r3, r2, r3
 800052a:	4618      	mov	r0, r3
 800052c:	f000 f917 	bl	800075e <HAL_SYSTICK_Config>
 8000530:	4603      	mov	r3, r0
 8000532:	2b00      	cmp	r3, #0
 8000534:	d001      	beq.n	800053a <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 8000536:	2301      	movs	r3, #1
 8000538:	e00e      	b.n	8000558 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 800053a:	687b      	ldr	r3, [r7, #4]
 800053c:	2b0f      	cmp	r3, #15
 800053e:	d80a      	bhi.n	8000556 <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8000540:	2200      	movs	r2, #0
 8000542:	6879      	ldr	r1, [r7, #4]
 8000544:	f04f 30ff 	mov.w	r0, #4294967295
 8000548:	f000 f8ed 	bl	8000726 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 800054c:	4a06      	ldr	r2, [pc, #24]	; (8000568 <HAL_InitTick+0x5c>)
 800054e:	687b      	ldr	r3, [r7, #4]
 8000550:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 8000552:	2300      	movs	r3, #0
 8000554:	e000      	b.n	8000558 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 8000556:	2301      	movs	r3, #1
}
 8000558:	4618      	mov	r0, r3
 800055a:	3708      	adds	r7, #8
 800055c:	46bd      	mov	sp, r7
 800055e:	bd80      	pop	{r7, pc}
 8000560:	20000008 	.word	0x20000008
 8000564:	20000004 	.word	0x20000004
 8000568:	20000000 	.word	0x20000000

0800056c <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 800056c:	b480      	push	{r7}
 800056e:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8000570:	4b06      	ldr	r3, [pc, #24]	; (800058c <HAL_IncTick+0x20>)
 8000572:	781b      	ldrb	r3, [r3, #0]
 8000574:	461a      	mov	r2, r3
 8000576:	4b06      	ldr	r3, [pc, #24]	; (8000590 <HAL_IncTick+0x24>)
 8000578:	681b      	ldr	r3, [r3, #0]
 800057a:	4413      	add	r3, r2
 800057c:	4a04      	ldr	r2, [pc, #16]	; (8000590 <HAL_IncTick+0x24>)
 800057e:	6013      	str	r3, [r2, #0]
}
 8000580:	bf00      	nop
 8000582:	46bd      	mov	sp, r7
 8000584:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000588:	4770      	bx	lr
 800058a:	bf00      	nop
 800058c:	20000004 	.word	0x20000004
 8000590:	20000028 	.word	0x20000028

08000594 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8000594:	b480      	push	{r7}
 8000596:	af00      	add	r7, sp, #0
  return uwTick;
 8000598:	4b03      	ldr	r3, [pc, #12]	; (80005a8 <HAL_GetTick+0x14>)
 800059a:	681b      	ldr	r3, [r3, #0]
}
 800059c:	4618      	mov	r0, r3
 800059e:	46bd      	mov	sp, r7
 80005a0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80005a4:	4770      	bx	lr
 80005a6:	bf00      	nop
 80005a8:	20000028 	.word	0x20000028

080005ac <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80005ac:	b480      	push	{r7}
 80005ae:	b085      	sub	sp, #20
 80005b0:	af00      	add	r7, sp, #0
 80005b2:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 80005b4:	687b      	ldr	r3, [r7, #4]
 80005b6:	f003 0307 	and.w	r3, r3, #7
 80005ba:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 80005bc:	4b0c      	ldr	r3, [pc, #48]	; (80005f0 <__NVIC_SetPriorityGrouping+0x44>)
 80005be:	68db      	ldr	r3, [r3, #12]
 80005c0:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 80005c2:	68ba      	ldr	r2, [r7, #8]
 80005c4:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 80005c8:	4013      	ands	r3, r2
 80005ca:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 80005cc:	68fb      	ldr	r3, [r7, #12]
 80005ce:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 80005d0:	68bb      	ldr	r3, [r7, #8]
 80005d2:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 80005d4:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 80005d8:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80005dc:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 80005de:	4a04      	ldr	r2, [pc, #16]	; (80005f0 <__NVIC_SetPriorityGrouping+0x44>)
 80005e0:	68bb      	ldr	r3, [r7, #8]
 80005e2:	60d3      	str	r3, [r2, #12]
}
 80005e4:	bf00      	nop
 80005e6:	3714      	adds	r7, #20
 80005e8:	46bd      	mov	sp, r7
 80005ea:	f85d 7b04 	ldr.w	r7, [sp], #4
 80005ee:	4770      	bx	lr
 80005f0:	e000ed00 	.word	0xe000ed00

080005f4 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 80005f4:	b480      	push	{r7}
 80005f6:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 80005f8:	4b04      	ldr	r3, [pc, #16]	; (800060c <__NVIC_GetPriorityGrouping+0x18>)
 80005fa:	68db      	ldr	r3, [r3, #12]
 80005fc:	0a1b      	lsrs	r3, r3, #8
 80005fe:	f003 0307 	and.w	r3, r3, #7
}
 8000602:	4618      	mov	r0, r3
 8000604:	46bd      	mov	sp, r7
 8000606:	f85d 7b04 	ldr.w	r7, [sp], #4
 800060a:	4770      	bx	lr
 800060c:	e000ed00 	.word	0xe000ed00

08000610 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8000610:	b480      	push	{r7}
 8000612:	b083      	sub	sp, #12
 8000614:	af00      	add	r7, sp, #0
 8000616:	4603      	mov	r3, r0
 8000618:	6039      	str	r1, [r7, #0]
 800061a:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 800061c:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000620:	2b00      	cmp	r3, #0
 8000622:	db0a      	blt.n	800063a <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000624:	683b      	ldr	r3, [r7, #0]
 8000626:	b2da      	uxtb	r2, r3
 8000628:	490c      	ldr	r1, [pc, #48]	; (800065c <__NVIC_SetPriority+0x4c>)
 800062a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800062e:	0112      	lsls	r2, r2, #4
 8000630:	b2d2      	uxtb	r2, r2
 8000632:	440b      	add	r3, r1
 8000634:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8000638:	e00a      	b.n	8000650 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800063a:	683b      	ldr	r3, [r7, #0]
 800063c:	b2da      	uxtb	r2, r3
 800063e:	4908      	ldr	r1, [pc, #32]	; (8000660 <__NVIC_SetPriority+0x50>)
 8000640:	79fb      	ldrb	r3, [r7, #7]
 8000642:	f003 030f 	and.w	r3, r3, #15
 8000646:	3b04      	subs	r3, #4
 8000648:	0112      	lsls	r2, r2, #4
 800064a:	b2d2      	uxtb	r2, r2
 800064c:	440b      	add	r3, r1
 800064e:	761a      	strb	r2, [r3, #24]
}
 8000650:	bf00      	nop
 8000652:	370c      	adds	r7, #12
 8000654:	46bd      	mov	sp, r7
 8000656:	f85d 7b04 	ldr.w	r7, [sp], #4
 800065a:	4770      	bx	lr
 800065c:	e000e100 	.word	0xe000e100
 8000660:	e000ed00 	.word	0xe000ed00

08000664 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8000664:	b480      	push	{r7}
 8000666:	b089      	sub	sp, #36	; 0x24
 8000668:	af00      	add	r7, sp, #0
 800066a:	60f8      	str	r0, [r7, #12]
 800066c:	60b9      	str	r1, [r7, #8]
 800066e:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8000670:	68fb      	ldr	r3, [r7, #12]
 8000672:	f003 0307 	and.w	r3, r3, #7
 8000676:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8000678:	69fb      	ldr	r3, [r7, #28]
 800067a:	f1c3 0307 	rsb	r3, r3, #7
 800067e:	2b04      	cmp	r3, #4
 8000680:	bf28      	it	cs
 8000682:	2304      	movcs	r3, #4
 8000684:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8000686:	69fb      	ldr	r3, [r7, #28]
 8000688:	3304      	adds	r3, #4
 800068a:	2b06      	cmp	r3, #6
 800068c:	d902      	bls.n	8000694 <NVIC_EncodePriority+0x30>
 800068e:	69fb      	ldr	r3, [r7, #28]
 8000690:	3b03      	subs	r3, #3
 8000692:	e000      	b.n	8000696 <NVIC_EncodePriority+0x32>
 8000694:	2300      	movs	r3, #0
 8000696:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000698:	f04f 32ff 	mov.w	r2, #4294967295
 800069c:	69bb      	ldr	r3, [r7, #24]
 800069e:	fa02 f303 	lsl.w	r3, r2, r3
 80006a2:	43da      	mvns	r2, r3
 80006a4:	68bb      	ldr	r3, [r7, #8]
 80006a6:	401a      	ands	r2, r3
 80006a8:	697b      	ldr	r3, [r7, #20]
 80006aa:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 80006ac:	f04f 31ff 	mov.w	r1, #4294967295
 80006b0:	697b      	ldr	r3, [r7, #20]
 80006b2:	fa01 f303 	lsl.w	r3, r1, r3
 80006b6:	43d9      	mvns	r1, r3
 80006b8:	687b      	ldr	r3, [r7, #4]
 80006ba:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80006bc:	4313      	orrs	r3, r2
         );
}
 80006be:	4618      	mov	r0, r3
 80006c0:	3724      	adds	r7, #36	; 0x24
 80006c2:	46bd      	mov	sp, r7
 80006c4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80006c8:	4770      	bx	lr
	...

080006cc <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 80006cc:	b580      	push	{r7, lr}
 80006ce:	b082      	sub	sp, #8
 80006d0:	af00      	add	r7, sp, #0
 80006d2:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 80006d4:	687b      	ldr	r3, [r7, #4]
 80006d6:	3b01      	subs	r3, #1
 80006d8:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 80006dc:	d301      	bcc.n	80006e2 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 80006de:	2301      	movs	r3, #1
 80006e0:	e00f      	b.n	8000702 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 80006e2:	4a0a      	ldr	r2, [pc, #40]	; (800070c <SysTick_Config+0x40>)
 80006e4:	687b      	ldr	r3, [r7, #4]
 80006e6:	3b01      	subs	r3, #1
 80006e8:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 80006ea:	210f      	movs	r1, #15
 80006ec:	f04f 30ff 	mov.w	r0, #4294967295
 80006f0:	f7ff ff8e 	bl	8000610 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 80006f4:	4b05      	ldr	r3, [pc, #20]	; (800070c <SysTick_Config+0x40>)
 80006f6:	2200      	movs	r2, #0
 80006f8:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 80006fa:	4b04      	ldr	r3, [pc, #16]	; (800070c <SysTick_Config+0x40>)
 80006fc:	2207      	movs	r2, #7
 80006fe:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8000700:	2300      	movs	r3, #0
}
 8000702:	4618      	mov	r0, r3
 8000704:	3708      	adds	r7, #8
 8000706:	46bd      	mov	sp, r7
 8000708:	bd80      	pop	{r7, pc}
 800070a:	bf00      	nop
 800070c:	e000e010 	.word	0xe000e010

08000710 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8000710:	b580      	push	{r7, lr}
 8000712:	b082      	sub	sp, #8
 8000714:	af00      	add	r7, sp, #0
 8000716:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8000718:	6878      	ldr	r0, [r7, #4]
 800071a:	f7ff ff47 	bl	80005ac <__NVIC_SetPriorityGrouping>
}
 800071e:	bf00      	nop
 8000720:	3708      	adds	r7, #8
 8000722:	46bd      	mov	sp, r7
 8000724:	bd80      	pop	{r7, pc}

08000726 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8000726:	b580      	push	{r7, lr}
 8000728:	b086      	sub	sp, #24
 800072a:	af00      	add	r7, sp, #0
 800072c:	4603      	mov	r3, r0
 800072e:	60b9      	str	r1, [r7, #8]
 8000730:	607a      	str	r2, [r7, #4]
 8000732:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8000734:	2300      	movs	r3, #0
 8000736:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8000738:	f7ff ff5c 	bl	80005f4 <__NVIC_GetPriorityGrouping>
 800073c:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 800073e:	687a      	ldr	r2, [r7, #4]
 8000740:	68b9      	ldr	r1, [r7, #8]
 8000742:	6978      	ldr	r0, [r7, #20]
 8000744:	f7ff ff8e 	bl	8000664 <NVIC_EncodePriority>
 8000748:	4602      	mov	r2, r0
 800074a:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800074e:	4611      	mov	r1, r2
 8000750:	4618      	mov	r0, r3
 8000752:	f7ff ff5d 	bl	8000610 <__NVIC_SetPriority>
}
 8000756:	bf00      	nop
 8000758:	3718      	adds	r7, #24
 800075a:	46bd      	mov	sp, r7
 800075c:	bd80      	pop	{r7, pc}

0800075e <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 800075e:	b580      	push	{r7, lr}
 8000760:	b082      	sub	sp, #8
 8000762:	af00      	add	r7, sp, #0
 8000764:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8000766:	6878      	ldr	r0, [r7, #4]
 8000768:	f7ff ffb0 	bl	80006cc <SysTick_Config>
 800076c:	4603      	mov	r3, r0
}
 800076e:	4618      	mov	r0, r3
 8000770:	3708      	adds	r7, #8
 8000772:	46bd      	mov	sp, r7
 8000774:	bd80      	pop	{r7, pc}
	...

08000778 <HAL_FLASH_Program>:
  * @param  Data specifies the data to be programmed
  * 
  * @retval HAL_StatusTypeDef HAL Status
  */
HAL_StatusTypeDef HAL_FLASH_Program(uint32_t TypeProgram, uint32_t Address, uint64_t Data)
{
 8000778:	b580      	push	{r7, lr}
 800077a:	b086      	sub	sp, #24
 800077c:	af00      	add	r7, sp, #0
 800077e:	60f8      	str	r0, [r7, #12]
 8000780:	60b9      	str	r1, [r7, #8]
 8000782:	e9c7 2300 	strd	r2, r3, [r7]
  HAL_StatusTypeDef status = HAL_ERROR;
 8000786:	2301      	movs	r3, #1
 8000788:	75fb      	strb	r3, [r7, #23]
  
  /* Process Locked */
  __HAL_LOCK(&pFlash);
 800078a:	4b23      	ldr	r3, [pc, #140]	; (8000818 <HAL_FLASH_Program+0xa0>)
 800078c:	7e1b      	ldrb	r3, [r3, #24]
 800078e:	2b01      	cmp	r3, #1
 8000790:	d101      	bne.n	8000796 <HAL_FLASH_Program+0x1e>
 8000792:	2302      	movs	r3, #2
 8000794:	e03b      	b.n	800080e <HAL_FLASH_Program+0x96>
 8000796:	4b20      	ldr	r3, [pc, #128]	; (8000818 <HAL_FLASH_Program+0xa0>)
 8000798:	2201      	movs	r2, #1
 800079a:	761a      	strb	r2, [r3, #24]
  
  /* Check the parameters */
  assert_param(IS_FLASH_TYPEPROGRAM(TypeProgram));
  
  /* Wait for last operation to be completed */
  status = FLASH_WaitForLastOperation((uint32_t)FLASH_TIMEOUT_VALUE);
 800079c:	f24c 3050 	movw	r0, #50000	; 0xc350
 80007a0:	f000 f870 	bl	8000884 <FLASH_WaitForLastOperation>
 80007a4:	4603      	mov	r3, r0
 80007a6:	75fb      	strb	r3, [r7, #23]
  
  if(status == HAL_OK)
 80007a8:	7dfb      	ldrb	r3, [r7, #23]
 80007aa:	2b00      	cmp	r3, #0
 80007ac:	d12b      	bne.n	8000806 <HAL_FLASH_Program+0x8e>
  {
    if(TypeProgram == FLASH_TYPEPROGRAM_BYTE)
 80007ae:	68fb      	ldr	r3, [r7, #12]
 80007b0:	2b00      	cmp	r3, #0
 80007b2:	d105      	bne.n	80007c0 <HAL_FLASH_Program+0x48>
    {
      /*Program byte (8-bit) at a specified address.*/
      FLASH_Program_Byte(Address, (uint8_t) Data);
 80007b4:	783b      	ldrb	r3, [r7, #0]
 80007b6:	4619      	mov	r1, r3
 80007b8:	68b8      	ldr	r0, [r7, #8]
 80007ba:	f000 f917 	bl	80009ec <FLASH_Program_Byte>
 80007be:	e016      	b.n	80007ee <HAL_FLASH_Program+0x76>
    }
    else if(TypeProgram == FLASH_TYPEPROGRAM_HALFWORD)
 80007c0:	68fb      	ldr	r3, [r7, #12]
 80007c2:	2b01      	cmp	r3, #1
 80007c4:	d105      	bne.n	80007d2 <HAL_FLASH_Program+0x5a>
    {
      /*Program halfword (16-bit) at a specified address.*/
      FLASH_Program_HalfWord(Address, (uint16_t) Data);
 80007c6:	883b      	ldrh	r3, [r7, #0]
 80007c8:	4619      	mov	r1, r3
 80007ca:	68b8      	ldr	r0, [r7, #8]
 80007cc:	f000 f8ea 	bl	80009a4 <FLASH_Program_HalfWord>
 80007d0:	e00d      	b.n	80007ee <HAL_FLASH_Program+0x76>
    }
    else if(TypeProgram == FLASH_TYPEPROGRAM_WORD)
 80007d2:	68fb      	ldr	r3, [r7, #12]
 80007d4:	2b02      	cmp	r3, #2
 80007d6:	d105      	bne.n	80007e4 <HAL_FLASH_Program+0x6c>
    {
      /*Program word (32-bit) at a specified address.*/
      FLASH_Program_Word(Address, (uint32_t) Data);
 80007d8:	683b      	ldr	r3, [r7, #0]
 80007da:	4619      	mov	r1, r3
 80007dc:	68b8      	ldr	r0, [r7, #8]
 80007de:	f000 f8bf 	bl	8000960 <FLASH_Program_Word>
 80007e2:	e004      	b.n	80007ee <HAL_FLASH_Program+0x76>
    }
    else
    {
      /*Program double word (64-bit) at a specified address.*/
      FLASH_Program_DoubleWord(Address, Data);
 80007e4:	e9d7 2300 	ldrd	r2, r3, [r7]
 80007e8:	68b8      	ldr	r0, [r7, #8]
 80007ea:	f000 f88b 	bl	8000904 <FLASH_Program_DoubleWord>
    }
    
    /* Wait for last operation to be completed */
    status = FLASH_WaitForLastOperation((uint32_t)FLASH_TIMEOUT_VALUE);
 80007ee:	f24c 3050 	movw	r0, #50000	; 0xc350
 80007f2:	f000 f847 	bl	8000884 <FLASH_WaitForLastOperation>
 80007f6:	4603      	mov	r3, r0
 80007f8:	75fb      	strb	r3, [r7, #23]
    
    /* If the program operation is completed, disable the PG Bit */
    FLASH->CR &= (~FLASH_CR_PG);  
 80007fa:	4b08      	ldr	r3, [pc, #32]	; (800081c <HAL_FLASH_Program+0xa4>)
 80007fc:	691b      	ldr	r3, [r3, #16]
 80007fe:	4a07      	ldr	r2, [pc, #28]	; (800081c <HAL_FLASH_Program+0xa4>)
 8000800:	f023 0301 	bic.w	r3, r3, #1
 8000804:	6113      	str	r3, [r2, #16]
  }
  
  /* Process Unlocked */
  __HAL_UNLOCK(&pFlash);
 8000806:	4b04      	ldr	r3, [pc, #16]	; (8000818 <HAL_FLASH_Program+0xa0>)
 8000808:	2200      	movs	r2, #0
 800080a:	761a      	strb	r2, [r3, #24]
  
  return status;
 800080c:	7dfb      	ldrb	r3, [r7, #23]
}
 800080e:	4618      	mov	r0, r3
 8000810:	3718      	adds	r7, #24
 8000812:	46bd      	mov	sp, r7
 8000814:	bd80      	pop	{r7, pc}
 8000816:	bf00      	nop
 8000818:	2000002c 	.word	0x2000002c
 800081c:	40023c00 	.word	0x40023c00

08000820 <HAL_FLASH_Unlock>:
/**
  * @brief  Unlock the FLASH control register access
  * @retval HAL Status
  */
HAL_StatusTypeDef HAL_FLASH_Unlock(void)
{
 8000820:	b480      	push	{r7}
 8000822:	b083      	sub	sp, #12
 8000824:	af00      	add	r7, sp, #0
  HAL_StatusTypeDef status = HAL_OK;
 8000826:	2300      	movs	r3, #0
 8000828:	71fb      	strb	r3, [r7, #7]

  if(READ_BIT(FLASH->CR, FLASH_CR_LOCK) != RESET)
 800082a:	4b0b      	ldr	r3, [pc, #44]	; (8000858 <HAL_FLASH_Unlock+0x38>)
 800082c:	691b      	ldr	r3, [r3, #16]
 800082e:	2b00      	cmp	r3, #0
 8000830:	da0b      	bge.n	800084a <HAL_FLASH_Unlock+0x2a>
  {
    /* Authorize the FLASH Registers access */
    WRITE_REG(FLASH->KEYR, FLASH_KEY1);
 8000832:	4b09      	ldr	r3, [pc, #36]	; (8000858 <HAL_FLASH_Unlock+0x38>)
 8000834:	4a09      	ldr	r2, [pc, #36]	; (800085c <HAL_FLASH_Unlock+0x3c>)
 8000836:	605a      	str	r2, [r3, #4]
    WRITE_REG(FLASH->KEYR, FLASH_KEY2);
 8000838:	4b07      	ldr	r3, [pc, #28]	; (8000858 <HAL_FLASH_Unlock+0x38>)
 800083a:	4a09      	ldr	r2, [pc, #36]	; (8000860 <HAL_FLASH_Unlock+0x40>)
 800083c:	605a      	str	r2, [r3, #4]

    /* Verify Flash is unlocked */
    if(READ_BIT(FLASH->CR, FLASH_CR_LOCK) != RESET)
 800083e:	4b06      	ldr	r3, [pc, #24]	; (8000858 <HAL_FLASH_Unlock+0x38>)
 8000840:	691b      	ldr	r3, [r3, #16]
 8000842:	2b00      	cmp	r3, #0
 8000844:	da01      	bge.n	800084a <HAL_FLASH_Unlock+0x2a>
    {
      status = HAL_ERROR;
 8000846:	2301      	movs	r3, #1
 8000848:	71fb      	strb	r3, [r7, #7]
    }
  }

  return status;
 800084a:	79fb      	ldrb	r3, [r7, #7]
}
 800084c:	4618      	mov	r0, r3
 800084e:	370c      	adds	r7, #12
 8000850:	46bd      	mov	sp, r7
 8000852:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000856:	4770      	bx	lr
 8000858:	40023c00 	.word	0x40023c00
 800085c:	45670123 	.word	0x45670123
 8000860:	cdef89ab 	.word	0xcdef89ab

08000864 <HAL_FLASH_Lock>:
/**
  * @brief  Locks the FLASH control register access
  * @retval HAL Status
  */
HAL_StatusTypeDef HAL_FLASH_Lock(void)
{
 8000864:	b480      	push	{r7}
 8000866:	af00      	add	r7, sp, #0
  /* Set the LOCK Bit to lock the FLASH Registers access */
  FLASH->CR |= FLASH_CR_LOCK;
 8000868:	4b05      	ldr	r3, [pc, #20]	; (8000880 <HAL_FLASH_Lock+0x1c>)
 800086a:	691b      	ldr	r3, [r3, #16]
 800086c:	4a04      	ldr	r2, [pc, #16]	; (8000880 <HAL_FLASH_Lock+0x1c>)
 800086e:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8000872:	6113      	str	r3, [r2, #16]
  
  return HAL_OK;  
 8000874:	2300      	movs	r3, #0
}
 8000876:	4618      	mov	r0, r3
 8000878:	46bd      	mov	sp, r7
 800087a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800087e:	4770      	bx	lr
 8000880:	40023c00 	.word	0x40023c00

08000884 <FLASH_WaitForLastOperation>:
  * @brief  Wait for a FLASH operation to complete.
  * @param  Timeout maximum flash operationtimeout
  * @retval HAL Status
  */
HAL_StatusTypeDef FLASH_WaitForLastOperation(uint32_t Timeout)
{ 
 8000884:	b580      	push	{r7, lr}
 8000886:	b084      	sub	sp, #16
 8000888:	af00      	add	r7, sp, #0
 800088a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 800088c:	2300      	movs	r3, #0
 800088e:	60fb      	str	r3, [r7, #12]
  
  /* Clear Error Code */
  pFlash.ErrorCode = HAL_FLASH_ERROR_NONE;
 8000890:	4b1a      	ldr	r3, [pc, #104]	; (80008fc <FLASH_WaitForLastOperation+0x78>)
 8000892:	2200      	movs	r2, #0
 8000894:	61da      	str	r2, [r3, #28]
  
  /* Wait for the FLASH operation to complete by polling on BUSY flag to be reset.
     Even if the FLASH operation fails, the BUSY flag will be reset and an error
     flag will be set */
  /* Get tick */
  tickstart = HAL_GetTick();
 8000896:	f7ff fe7d 	bl	8000594 <HAL_GetTick>
 800089a:	60f8      	str	r0, [r7, #12]

  while(__HAL_FLASH_GET_FLAG(FLASH_FLAG_BSY) != RESET) 
 800089c:	e010      	b.n	80008c0 <FLASH_WaitForLastOperation+0x3c>
  { 
    if(Timeout != HAL_MAX_DELAY)
 800089e:	687b      	ldr	r3, [r7, #4]
 80008a0:	f1b3 3fff 	cmp.w	r3, #4294967295
 80008a4:	d00c      	beq.n	80008c0 <FLASH_WaitForLastOperation+0x3c>
    {
      if((Timeout == 0U)||((HAL_GetTick() - tickstart ) > Timeout))
 80008a6:	687b      	ldr	r3, [r7, #4]
 80008a8:	2b00      	cmp	r3, #0
 80008aa:	d007      	beq.n	80008bc <FLASH_WaitForLastOperation+0x38>
 80008ac:	f7ff fe72 	bl	8000594 <HAL_GetTick>
 80008b0:	4602      	mov	r2, r0
 80008b2:	68fb      	ldr	r3, [r7, #12]
 80008b4:	1ad3      	subs	r3, r2, r3
 80008b6:	687a      	ldr	r2, [r7, #4]
 80008b8:	429a      	cmp	r2, r3
 80008ba:	d201      	bcs.n	80008c0 <FLASH_WaitForLastOperation+0x3c>
      {
        return HAL_TIMEOUT;
 80008bc:	2303      	movs	r3, #3
 80008be:	e019      	b.n	80008f4 <FLASH_WaitForLastOperation+0x70>
  while(__HAL_FLASH_GET_FLAG(FLASH_FLAG_BSY) != RESET) 
 80008c0:	4b0f      	ldr	r3, [pc, #60]	; (8000900 <FLASH_WaitForLastOperation+0x7c>)
 80008c2:	68db      	ldr	r3, [r3, #12]
 80008c4:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80008c8:	2b00      	cmp	r3, #0
 80008ca:	d1e8      	bne.n	800089e <FLASH_WaitForLastOperation+0x1a>
      }
    } 
  }

  /* Check FLASH End of Operation flag  */
  if (__HAL_FLASH_GET_FLAG(FLASH_FLAG_EOP) != RESET)
 80008cc:	4b0c      	ldr	r3, [pc, #48]	; (8000900 <FLASH_WaitForLastOperation+0x7c>)
 80008ce:	68db      	ldr	r3, [r3, #12]
 80008d0:	f003 0301 	and.w	r3, r3, #1
 80008d4:	2b00      	cmp	r3, #0
 80008d6:	d002      	beq.n	80008de <FLASH_WaitForLastOperation+0x5a>
  {
    /* Clear FLASH End of Operation pending bit */
    __HAL_FLASH_CLEAR_FLAG(FLASH_FLAG_EOP);
 80008d8:	4b09      	ldr	r3, [pc, #36]	; (8000900 <FLASH_WaitForLastOperation+0x7c>)
 80008da:	2201      	movs	r2, #1
 80008dc:	60da      	str	r2, [r3, #12]
  }
#if defined(FLASH_SR_RDERR)  
  if(__HAL_FLASH_GET_FLAG((FLASH_FLAG_OPERR | FLASH_FLAG_WRPERR | FLASH_FLAG_PGAERR | \
                           FLASH_FLAG_PGPERR | FLASH_FLAG_PGSERR | FLASH_FLAG_RDERR)) != RESET)
#else
  if(__HAL_FLASH_GET_FLAG((FLASH_FLAG_OPERR | FLASH_FLAG_WRPERR | FLASH_FLAG_PGAERR | \
 80008de:	4b08      	ldr	r3, [pc, #32]	; (8000900 <FLASH_WaitForLastOperation+0x7c>)
 80008e0:	68db      	ldr	r3, [r3, #12]
 80008e2:	f003 03f2 	and.w	r3, r3, #242	; 0xf2
 80008e6:	2b00      	cmp	r3, #0
 80008e8:	d003      	beq.n	80008f2 <FLASH_WaitForLastOperation+0x6e>
                           FLASH_FLAG_PGPERR | FLASH_FLAG_PGSERR)) != RESET)
#endif /* FLASH_SR_RDERR */
  {
    /*Save the error code*/
    FLASH_SetErrorCode();
 80008ea:	f000 f8a1 	bl	8000a30 <FLASH_SetErrorCode>
    return HAL_ERROR;
 80008ee:	2301      	movs	r3, #1
 80008f0:	e000      	b.n	80008f4 <FLASH_WaitForLastOperation+0x70>
  }

  /* If there is no error flag set */
  return HAL_OK;
 80008f2:	2300      	movs	r3, #0
  
}  
 80008f4:	4618      	mov	r0, r3
 80008f6:	3710      	adds	r7, #16
 80008f8:	46bd      	mov	sp, r7
 80008fa:	bd80      	pop	{r7, pc}
 80008fc:	2000002c 	.word	0x2000002c
 8000900:	40023c00 	.word	0x40023c00

08000904 <FLASH_Program_DoubleWord>:
  * @param  Address specifies the address to be programmed.
  * @param  Data specifies the data to be programmed.
  * @retval None
  */
static void FLASH_Program_DoubleWord(uint32_t Address, uint64_t Data)
{
 8000904:	b490      	push	{r4, r7}
 8000906:	b084      	sub	sp, #16
 8000908:	af00      	add	r7, sp, #0
 800090a:	60f8      	str	r0, [r7, #12]
 800090c:	e9c7 2300 	strd	r2, r3, [r7]
  /* Check the parameters */
  assert_param(IS_FLASH_ADDRESS(Address));
  
  /* If the previous operation is completed, proceed to program the new data */
  CLEAR_BIT(FLASH->CR, FLASH_CR_PSIZE);
 8000910:	4b12      	ldr	r3, [pc, #72]	; (800095c <FLASH_Program_DoubleWord+0x58>)
 8000912:	691b      	ldr	r3, [r3, #16]
 8000914:	4a11      	ldr	r2, [pc, #68]	; (800095c <FLASH_Program_DoubleWord+0x58>)
 8000916:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 800091a:	6113      	str	r3, [r2, #16]
  FLASH->CR |= FLASH_PSIZE_DOUBLE_WORD;
 800091c:	4b0f      	ldr	r3, [pc, #60]	; (800095c <FLASH_Program_DoubleWord+0x58>)
 800091e:	691b      	ldr	r3, [r3, #16]
 8000920:	4a0e      	ldr	r2, [pc, #56]	; (800095c <FLASH_Program_DoubleWord+0x58>)
 8000922:	f443 7340 	orr.w	r3, r3, #768	; 0x300
 8000926:	6113      	str	r3, [r2, #16]
  FLASH->CR |= FLASH_CR_PG;
 8000928:	4b0c      	ldr	r3, [pc, #48]	; (800095c <FLASH_Program_DoubleWord+0x58>)
 800092a:	691b      	ldr	r3, [r3, #16]
 800092c:	4a0b      	ldr	r2, [pc, #44]	; (800095c <FLASH_Program_DoubleWord+0x58>)
 800092e:	f043 0301 	orr.w	r3, r3, #1
 8000932:	6113      	str	r3, [r2, #16]

  /* Program the double-word */
  *(__IO uint32_t*)Address = (uint32_t)Data;
 8000934:	68fb      	ldr	r3, [r7, #12]
 8000936:	683a      	ldr	r2, [r7, #0]
 8000938:	601a      	str	r2, [r3, #0]
  *(__IO uint32_t*)(Address+4) = (uint32_t)(Data >> 32);
 800093a:	e9d7 1200 	ldrd	r1, r2, [r7]
 800093e:	f04f 0300 	mov.w	r3, #0
 8000942:	f04f 0400 	mov.w	r4, #0
 8000946:	0013      	movs	r3, r2
 8000948:	2400      	movs	r4, #0
 800094a:	68fa      	ldr	r2, [r7, #12]
 800094c:	3204      	adds	r2, #4
 800094e:	6013      	str	r3, [r2, #0]
}
 8000950:	bf00      	nop
 8000952:	3710      	adds	r7, #16
 8000954:	46bd      	mov	sp, r7
 8000956:	bc90      	pop	{r4, r7}
 8000958:	4770      	bx	lr
 800095a:	bf00      	nop
 800095c:	40023c00 	.word	0x40023c00

08000960 <FLASH_Program_Word>:
  * @param  Address specifies the address to be programmed.
  * @param  Data specifies the data to be programmed.
  * @retval None
  */
static void FLASH_Program_Word(uint32_t Address, uint32_t Data)
{
 8000960:	b480      	push	{r7}
 8000962:	b083      	sub	sp, #12
 8000964:	af00      	add	r7, sp, #0
 8000966:	6078      	str	r0, [r7, #4]
 8000968:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_FLASH_ADDRESS(Address));
  
  /* If the previous operation is completed, proceed to program the new data */
  CLEAR_BIT(FLASH->CR, FLASH_CR_PSIZE);
 800096a:	4b0d      	ldr	r3, [pc, #52]	; (80009a0 <FLASH_Program_Word+0x40>)
 800096c:	691b      	ldr	r3, [r3, #16]
 800096e:	4a0c      	ldr	r2, [pc, #48]	; (80009a0 <FLASH_Program_Word+0x40>)
 8000970:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8000974:	6113      	str	r3, [r2, #16]
  FLASH->CR |= FLASH_PSIZE_WORD;
 8000976:	4b0a      	ldr	r3, [pc, #40]	; (80009a0 <FLASH_Program_Word+0x40>)
 8000978:	691b      	ldr	r3, [r3, #16]
 800097a:	4a09      	ldr	r2, [pc, #36]	; (80009a0 <FLASH_Program_Word+0x40>)
 800097c:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8000980:	6113      	str	r3, [r2, #16]
  FLASH->CR |= FLASH_CR_PG;
 8000982:	4b07      	ldr	r3, [pc, #28]	; (80009a0 <FLASH_Program_Word+0x40>)
 8000984:	691b      	ldr	r3, [r3, #16]
 8000986:	4a06      	ldr	r2, [pc, #24]	; (80009a0 <FLASH_Program_Word+0x40>)
 8000988:	f043 0301 	orr.w	r3, r3, #1
 800098c:	6113      	str	r3, [r2, #16]

  *(__IO uint32_t*)Address = Data;
 800098e:	687b      	ldr	r3, [r7, #4]
 8000990:	683a      	ldr	r2, [r7, #0]
 8000992:	601a      	str	r2, [r3, #0]
}
 8000994:	bf00      	nop
 8000996:	370c      	adds	r7, #12
 8000998:	46bd      	mov	sp, r7
 800099a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800099e:	4770      	bx	lr
 80009a0:	40023c00 	.word	0x40023c00

080009a4 <FLASH_Program_HalfWord>:
  * @param  Address specifies the address to be programmed.
  * @param  Data specifies the data to be programmed.
  * @retval None
  */
static void FLASH_Program_HalfWord(uint32_t Address, uint16_t Data)
{
 80009a4:	b480      	push	{r7}
 80009a6:	b083      	sub	sp, #12
 80009a8:	af00      	add	r7, sp, #0
 80009aa:	6078      	str	r0, [r7, #4]
 80009ac:	460b      	mov	r3, r1
 80009ae:	807b      	strh	r3, [r7, #2]
  /* Check the parameters */
  assert_param(IS_FLASH_ADDRESS(Address));
  
  /* If the previous operation is completed, proceed to program the new data */
  CLEAR_BIT(FLASH->CR, FLASH_CR_PSIZE);
 80009b0:	4b0d      	ldr	r3, [pc, #52]	; (80009e8 <FLASH_Program_HalfWord+0x44>)
 80009b2:	691b      	ldr	r3, [r3, #16]
 80009b4:	4a0c      	ldr	r2, [pc, #48]	; (80009e8 <FLASH_Program_HalfWord+0x44>)
 80009b6:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 80009ba:	6113      	str	r3, [r2, #16]
  FLASH->CR |= FLASH_PSIZE_HALF_WORD;
 80009bc:	4b0a      	ldr	r3, [pc, #40]	; (80009e8 <FLASH_Program_HalfWord+0x44>)
 80009be:	691b      	ldr	r3, [r3, #16]
 80009c0:	4a09      	ldr	r2, [pc, #36]	; (80009e8 <FLASH_Program_HalfWord+0x44>)
 80009c2:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80009c6:	6113      	str	r3, [r2, #16]
  FLASH->CR |= FLASH_CR_PG;
 80009c8:	4b07      	ldr	r3, [pc, #28]	; (80009e8 <FLASH_Program_HalfWord+0x44>)
 80009ca:	691b      	ldr	r3, [r3, #16]
 80009cc:	4a06      	ldr	r2, [pc, #24]	; (80009e8 <FLASH_Program_HalfWord+0x44>)
 80009ce:	f043 0301 	orr.w	r3, r3, #1
 80009d2:	6113      	str	r3, [r2, #16]

  *(__IO uint16_t*)Address = Data;
 80009d4:	687b      	ldr	r3, [r7, #4]
 80009d6:	887a      	ldrh	r2, [r7, #2]
 80009d8:	801a      	strh	r2, [r3, #0]
}
 80009da:	bf00      	nop
 80009dc:	370c      	adds	r7, #12
 80009de:	46bd      	mov	sp, r7
 80009e0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80009e4:	4770      	bx	lr
 80009e6:	bf00      	nop
 80009e8:	40023c00 	.word	0x40023c00

080009ec <FLASH_Program_Byte>:
  * @param  Address specifies the address to be programmed.
  * @param  Data specifies the data to be programmed.
  * @retval None
  */
static void FLASH_Program_Byte(uint32_t Address, uint8_t Data)
{
 80009ec:	b480      	push	{r7}
 80009ee:	b083      	sub	sp, #12
 80009f0:	af00      	add	r7, sp, #0
 80009f2:	6078      	str	r0, [r7, #4]
 80009f4:	460b      	mov	r3, r1
 80009f6:	70fb      	strb	r3, [r7, #3]
  /* Check the parameters */
  assert_param(IS_FLASH_ADDRESS(Address));
  
  /* If the previous operation is completed, proceed to program the new data */
  CLEAR_BIT(FLASH->CR, FLASH_CR_PSIZE);
 80009f8:	4b0c      	ldr	r3, [pc, #48]	; (8000a2c <FLASH_Program_Byte+0x40>)
 80009fa:	691b      	ldr	r3, [r3, #16]
 80009fc:	4a0b      	ldr	r2, [pc, #44]	; (8000a2c <FLASH_Program_Byte+0x40>)
 80009fe:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8000a02:	6113      	str	r3, [r2, #16]
  FLASH->CR |= FLASH_PSIZE_BYTE;
 8000a04:	4b09      	ldr	r3, [pc, #36]	; (8000a2c <FLASH_Program_Byte+0x40>)
 8000a06:	4a09      	ldr	r2, [pc, #36]	; (8000a2c <FLASH_Program_Byte+0x40>)
 8000a08:	691b      	ldr	r3, [r3, #16]
 8000a0a:	6113      	str	r3, [r2, #16]
  FLASH->CR |= FLASH_CR_PG;
 8000a0c:	4b07      	ldr	r3, [pc, #28]	; (8000a2c <FLASH_Program_Byte+0x40>)
 8000a0e:	691b      	ldr	r3, [r3, #16]
 8000a10:	4a06      	ldr	r2, [pc, #24]	; (8000a2c <FLASH_Program_Byte+0x40>)
 8000a12:	f043 0301 	orr.w	r3, r3, #1
 8000a16:	6113      	str	r3, [r2, #16]

  *(__IO uint8_t*)Address = Data;
 8000a18:	687b      	ldr	r3, [r7, #4]
 8000a1a:	78fa      	ldrb	r2, [r7, #3]
 8000a1c:	701a      	strb	r2, [r3, #0]
}
 8000a1e:	bf00      	nop
 8000a20:	370c      	adds	r7, #12
 8000a22:	46bd      	mov	sp, r7
 8000a24:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000a28:	4770      	bx	lr
 8000a2a:	bf00      	nop
 8000a2c:	40023c00 	.word	0x40023c00

08000a30 <FLASH_SetErrorCode>:
/**
  * @brief  Set the specific FLASH error flag.
  * @retval None
  */
static void FLASH_SetErrorCode(void)
{ 
 8000a30:	b480      	push	{r7}
 8000a32:	af00      	add	r7, sp, #0
  if(__HAL_FLASH_GET_FLAG(FLASH_FLAG_WRPERR) != RESET)
 8000a34:	4b27      	ldr	r3, [pc, #156]	; (8000ad4 <FLASH_SetErrorCode+0xa4>)
 8000a36:	68db      	ldr	r3, [r3, #12]
 8000a38:	f003 0310 	and.w	r3, r3, #16
 8000a3c:	2b00      	cmp	r3, #0
 8000a3e:	d008      	beq.n	8000a52 <FLASH_SetErrorCode+0x22>
  {
   pFlash.ErrorCode |= HAL_FLASH_ERROR_WRP;
 8000a40:	4b25      	ldr	r3, [pc, #148]	; (8000ad8 <FLASH_SetErrorCode+0xa8>)
 8000a42:	69db      	ldr	r3, [r3, #28]
 8000a44:	f043 0310 	orr.w	r3, r3, #16
 8000a48:	4a23      	ldr	r2, [pc, #140]	; (8000ad8 <FLASH_SetErrorCode+0xa8>)
 8000a4a:	61d3      	str	r3, [r2, #28]
   
   /* Clear FLASH write protection error pending bit */
   __HAL_FLASH_CLEAR_FLAG(FLASH_FLAG_WRPERR);
 8000a4c:	4b21      	ldr	r3, [pc, #132]	; (8000ad4 <FLASH_SetErrorCode+0xa4>)
 8000a4e:	2210      	movs	r2, #16
 8000a50:	60da      	str	r2, [r3, #12]
  }
  
  if(__HAL_FLASH_GET_FLAG(FLASH_FLAG_PGAERR) != RESET)
 8000a52:	4b20      	ldr	r3, [pc, #128]	; (8000ad4 <FLASH_SetErrorCode+0xa4>)
 8000a54:	68db      	ldr	r3, [r3, #12]
 8000a56:	f003 0320 	and.w	r3, r3, #32
 8000a5a:	2b00      	cmp	r3, #0
 8000a5c:	d008      	beq.n	8000a70 <FLASH_SetErrorCode+0x40>
  {
   pFlash.ErrorCode |= HAL_FLASH_ERROR_PGA;
 8000a5e:	4b1e      	ldr	r3, [pc, #120]	; (8000ad8 <FLASH_SetErrorCode+0xa8>)
 8000a60:	69db      	ldr	r3, [r3, #28]
 8000a62:	f043 0308 	orr.w	r3, r3, #8
 8000a66:	4a1c      	ldr	r2, [pc, #112]	; (8000ad8 <FLASH_SetErrorCode+0xa8>)
 8000a68:	61d3      	str	r3, [r2, #28]
   
   /* Clear FLASH Programming alignment error pending bit */
   __HAL_FLASH_CLEAR_FLAG(FLASH_FLAG_PGAERR);
 8000a6a:	4b1a      	ldr	r3, [pc, #104]	; (8000ad4 <FLASH_SetErrorCode+0xa4>)
 8000a6c:	2220      	movs	r2, #32
 8000a6e:	60da      	str	r2, [r3, #12]
  }
  
  if(__HAL_FLASH_GET_FLAG(FLASH_FLAG_PGPERR) != RESET)
 8000a70:	4b18      	ldr	r3, [pc, #96]	; (8000ad4 <FLASH_SetErrorCode+0xa4>)
 8000a72:	68db      	ldr	r3, [r3, #12]
 8000a74:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8000a78:	2b00      	cmp	r3, #0
 8000a7a:	d008      	beq.n	8000a8e <FLASH_SetErrorCode+0x5e>
  {
    pFlash.ErrorCode |= HAL_FLASH_ERROR_PGP;
 8000a7c:	4b16      	ldr	r3, [pc, #88]	; (8000ad8 <FLASH_SetErrorCode+0xa8>)
 8000a7e:	69db      	ldr	r3, [r3, #28]
 8000a80:	f043 0304 	orr.w	r3, r3, #4
 8000a84:	4a14      	ldr	r2, [pc, #80]	; (8000ad8 <FLASH_SetErrorCode+0xa8>)
 8000a86:	61d3      	str	r3, [r2, #28]
    
    /* Clear FLASH Programming parallelism error pending bit */
    __HAL_FLASH_CLEAR_FLAG(FLASH_FLAG_PGPERR);
 8000a88:	4b12      	ldr	r3, [pc, #72]	; (8000ad4 <FLASH_SetErrorCode+0xa4>)
 8000a8a:	2240      	movs	r2, #64	; 0x40
 8000a8c:	60da      	str	r2, [r3, #12]
  }
  
  if(__HAL_FLASH_GET_FLAG(FLASH_FLAG_PGSERR) != RESET)
 8000a8e:	4b11      	ldr	r3, [pc, #68]	; (8000ad4 <FLASH_SetErrorCode+0xa4>)
 8000a90:	68db      	ldr	r3, [r3, #12]
 8000a92:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8000a96:	2b00      	cmp	r3, #0
 8000a98:	d008      	beq.n	8000aac <FLASH_SetErrorCode+0x7c>
  {
    pFlash.ErrorCode |= HAL_FLASH_ERROR_PGS;
 8000a9a:	4b0f      	ldr	r3, [pc, #60]	; (8000ad8 <FLASH_SetErrorCode+0xa8>)
 8000a9c:	69db      	ldr	r3, [r3, #28]
 8000a9e:	f043 0302 	orr.w	r3, r3, #2
 8000aa2:	4a0d      	ldr	r2, [pc, #52]	; (8000ad8 <FLASH_SetErrorCode+0xa8>)
 8000aa4:	61d3      	str	r3, [r2, #28]
    
    /* Clear FLASH Programming sequence error pending bit */
    __HAL_FLASH_CLEAR_FLAG(FLASH_FLAG_PGSERR);
 8000aa6:	4b0b      	ldr	r3, [pc, #44]	; (8000ad4 <FLASH_SetErrorCode+0xa4>)
 8000aa8:	2280      	movs	r2, #128	; 0x80
 8000aaa:	60da      	str	r2, [r3, #12]
    
    /* Clear FLASH Proprietary readout protection error pending bit */
    __HAL_FLASH_CLEAR_FLAG(FLASH_FLAG_RDERR);
  }
#endif /* FLASH_SR_RDERR */  
  if(__HAL_FLASH_GET_FLAG(FLASH_FLAG_OPERR) != RESET)
 8000aac:	4b09      	ldr	r3, [pc, #36]	; (8000ad4 <FLASH_SetErrorCode+0xa4>)
 8000aae:	68db      	ldr	r3, [r3, #12]
 8000ab0:	f003 0302 	and.w	r3, r3, #2
 8000ab4:	2b00      	cmp	r3, #0
 8000ab6:	d008      	beq.n	8000aca <FLASH_SetErrorCode+0x9a>
  {
    pFlash.ErrorCode |= HAL_FLASH_ERROR_OPERATION;
 8000ab8:	4b07      	ldr	r3, [pc, #28]	; (8000ad8 <FLASH_SetErrorCode+0xa8>)
 8000aba:	69db      	ldr	r3, [r3, #28]
 8000abc:	f043 0320 	orr.w	r3, r3, #32
 8000ac0:	4a05      	ldr	r2, [pc, #20]	; (8000ad8 <FLASH_SetErrorCode+0xa8>)
 8000ac2:	61d3      	str	r3, [r2, #28]
    
    /* Clear FLASH Operation error pending bit */
    __HAL_FLASH_CLEAR_FLAG(FLASH_FLAG_OPERR);
 8000ac4:	4b03      	ldr	r3, [pc, #12]	; (8000ad4 <FLASH_SetErrorCode+0xa4>)
 8000ac6:	2202      	movs	r2, #2
 8000ac8:	60da      	str	r2, [r3, #12]
  }
}
 8000aca:	bf00      	nop
 8000acc:	46bd      	mov	sp, r7
 8000ace:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000ad2:	4770      	bx	lr
 8000ad4:	40023c00 	.word	0x40023c00
 8000ad8:	2000002c 	.word	0x2000002c

08000adc <FLASH_Erase_Sector>:
  *                                  the operation will be done by double word (64-bit)
  * 
  * @retval None
  */
void FLASH_Erase_Sector(uint32_t Sector, uint8_t VoltageRange)
{
 8000adc:	b480      	push	{r7}
 8000ade:	b085      	sub	sp, #20
 8000ae0:	af00      	add	r7, sp, #0
 8000ae2:	6078      	str	r0, [r7, #4]
 8000ae4:	460b      	mov	r3, r1
 8000ae6:	70fb      	strb	r3, [r7, #3]
  uint32_t tmp_psize = 0U;
 8000ae8:	2300      	movs	r3, #0
 8000aea:	60fb      	str	r3, [r7, #12]

  /* Check the parameters */
  assert_param(IS_FLASH_SECTOR(Sector));
  assert_param(IS_VOLTAGERANGE(VoltageRange));
  
  if(VoltageRange == FLASH_VOLTAGE_RANGE_1)
 8000aec:	78fb      	ldrb	r3, [r7, #3]
 8000aee:	2b00      	cmp	r3, #0
 8000af0:	d102      	bne.n	8000af8 <FLASH_Erase_Sector+0x1c>
  {
     tmp_psize = FLASH_PSIZE_BYTE;
 8000af2:	2300      	movs	r3, #0
 8000af4:	60fb      	str	r3, [r7, #12]
 8000af6:	e010      	b.n	8000b1a <FLASH_Erase_Sector+0x3e>
  }
  else if(VoltageRange == FLASH_VOLTAGE_RANGE_2)
 8000af8:	78fb      	ldrb	r3, [r7, #3]
 8000afa:	2b01      	cmp	r3, #1
 8000afc:	d103      	bne.n	8000b06 <FLASH_Erase_Sector+0x2a>
  {
    tmp_psize = FLASH_PSIZE_HALF_WORD;
 8000afe:	f44f 7380 	mov.w	r3, #256	; 0x100
 8000b02:	60fb      	str	r3, [r7, #12]
 8000b04:	e009      	b.n	8000b1a <FLASH_Erase_Sector+0x3e>
  }
  else if(VoltageRange == FLASH_VOLTAGE_RANGE_3)
 8000b06:	78fb      	ldrb	r3, [r7, #3]
 8000b08:	2b02      	cmp	r3, #2
 8000b0a:	d103      	bne.n	8000b14 <FLASH_Erase_Sector+0x38>
  {
    tmp_psize = FLASH_PSIZE_WORD;
 8000b0c:	f44f 7300 	mov.w	r3, #512	; 0x200
 8000b10:	60fb      	str	r3, [r7, #12]
 8000b12:	e002      	b.n	8000b1a <FLASH_Erase_Sector+0x3e>
  }
  else
  {
    tmp_psize = FLASH_PSIZE_DOUBLE_WORD;
 8000b14:	f44f 7340 	mov.w	r3, #768	; 0x300
 8000b18:	60fb      	str	r3, [r7, #12]
  }

  /* If the previous operation is completed, proceed to erase the sector */
  CLEAR_BIT(FLASH->CR, FLASH_CR_PSIZE);
 8000b1a:	4b13      	ldr	r3, [pc, #76]	; (8000b68 <FLASH_Erase_Sector+0x8c>)
 8000b1c:	691b      	ldr	r3, [r3, #16]
 8000b1e:	4a12      	ldr	r2, [pc, #72]	; (8000b68 <FLASH_Erase_Sector+0x8c>)
 8000b20:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8000b24:	6113      	str	r3, [r2, #16]
  FLASH->CR |= tmp_psize;
 8000b26:	4b10      	ldr	r3, [pc, #64]	; (8000b68 <FLASH_Erase_Sector+0x8c>)
 8000b28:	691a      	ldr	r2, [r3, #16]
 8000b2a:	490f      	ldr	r1, [pc, #60]	; (8000b68 <FLASH_Erase_Sector+0x8c>)
 8000b2c:	68fb      	ldr	r3, [r7, #12]
 8000b2e:	4313      	orrs	r3, r2
 8000b30:	610b      	str	r3, [r1, #16]
  CLEAR_BIT(FLASH->CR, FLASH_CR_SNB);
 8000b32:	4b0d      	ldr	r3, [pc, #52]	; (8000b68 <FLASH_Erase_Sector+0x8c>)
 8000b34:	691b      	ldr	r3, [r3, #16]
 8000b36:	4a0c      	ldr	r2, [pc, #48]	; (8000b68 <FLASH_Erase_Sector+0x8c>)
 8000b38:	f023 03f8 	bic.w	r3, r3, #248	; 0xf8
 8000b3c:	6113      	str	r3, [r2, #16]
  FLASH->CR |= FLASH_CR_SER | (Sector << FLASH_CR_SNB_Pos);
 8000b3e:	4b0a      	ldr	r3, [pc, #40]	; (8000b68 <FLASH_Erase_Sector+0x8c>)
 8000b40:	691a      	ldr	r2, [r3, #16]
 8000b42:	687b      	ldr	r3, [r7, #4]
 8000b44:	00db      	lsls	r3, r3, #3
 8000b46:	4313      	orrs	r3, r2
 8000b48:	4a07      	ldr	r2, [pc, #28]	; (8000b68 <FLASH_Erase_Sector+0x8c>)
 8000b4a:	f043 0302 	orr.w	r3, r3, #2
 8000b4e:	6113      	str	r3, [r2, #16]
  FLASH->CR |= FLASH_CR_STRT;
 8000b50:	4b05      	ldr	r3, [pc, #20]	; (8000b68 <FLASH_Erase_Sector+0x8c>)
 8000b52:	691b      	ldr	r3, [r3, #16]
 8000b54:	4a04      	ldr	r2, [pc, #16]	; (8000b68 <FLASH_Erase_Sector+0x8c>)
 8000b56:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8000b5a:	6113      	str	r3, [r2, #16]
}
 8000b5c:	bf00      	nop
 8000b5e:	3714      	adds	r7, #20
 8000b60:	46bd      	mov	sp, r7
 8000b62:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000b66:	4770      	bx	lr
 8000b68:	40023c00 	.word	0x40023c00

08000b6c <HAL_RCC_OscConfig>:
  *         supported by this API. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8000b6c:	b580      	push	{r7, lr}
 8000b6e:	b086      	sub	sp, #24
 8000b70:	af00      	add	r7, sp, #0
 8000b72:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 8000b74:	687b      	ldr	r3, [r7, #4]
 8000b76:	2b00      	cmp	r3, #0
 8000b78:	d101      	bne.n	8000b7e <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8000b7a:	2301      	movs	r3, #1
 8000b7c:	e22d      	b.n	8000fda <HAL_RCC_OscConfig+0x46e>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8000b7e:	687b      	ldr	r3, [r7, #4]
 8000b80:	681b      	ldr	r3, [r3, #0]
 8000b82:	f003 0301 	and.w	r3, r3, #1
 8000b86:	2b00      	cmp	r3, #0
 8000b88:	d075      	beq.n	8000c76 <HAL_RCC_OscConfig+0x10a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 8000b8a:	4ba3      	ldr	r3, [pc, #652]	; (8000e18 <HAL_RCC_OscConfig+0x2ac>)
 8000b8c:	689b      	ldr	r3, [r3, #8]
 8000b8e:	f003 030c 	and.w	r3, r3, #12
 8000b92:	2b04      	cmp	r3, #4
 8000b94:	d00c      	beq.n	8000bb0 <HAL_RCC_OscConfig+0x44>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8000b96:	4ba0      	ldr	r3, [pc, #640]	; (8000e18 <HAL_RCC_OscConfig+0x2ac>)
 8000b98:	689b      	ldr	r3, [r3, #8]
 8000b9a:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 8000b9e:	2b08      	cmp	r3, #8
 8000ba0:	d112      	bne.n	8000bc8 <HAL_RCC_OscConfig+0x5c>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8000ba2:	4b9d      	ldr	r3, [pc, #628]	; (8000e18 <HAL_RCC_OscConfig+0x2ac>)
 8000ba4:	685b      	ldr	r3, [r3, #4]
 8000ba6:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8000baa:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8000bae:	d10b      	bne.n	8000bc8 <HAL_RCC_OscConfig+0x5c>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8000bb0:	4b99      	ldr	r3, [pc, #612]	; (8000e18 <HAL_RCC_OscConfig+0x2ac>)
 8000bb2:	681b      	ldr	r3, [r3, #0]
 8000bb4:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8000bb8:	2b00      	cmp	r3, #0
 8000bba:	d05b      	beq.n	8000c74 <HAL_RCC_OscConfig+0x108>
 8000bbc:	687b      	ldr	r3, [r7, #4]
 8000bbe:	685b      	ldr	r3, [r3, #4]
 8000bc0:	2b00      	cmp	r3, #0
 8000bc2:	d157      	bne.n	8000c74 <HAL_RCC_OscConfig+0x108>
      {
        return HAL_ERROR;
 8000bc4:	2301      	movs	r3, #1
 8000bc6:	e208      	b.n	8000fda <HAL_RCC_OscConfig+0x46e>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8000bc8:	687b      	ldr	r3, [r7, #4]
 8000bca:	685b      	ldr	r3, [r3, #4]
 8000bcc:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8000bd0:	d106      	bne.n	8000be0 <HAL_RCC_OscConfig+0x74>
 8000bd2:	4b91      	ldr	r3, [pc, #580]	; (8000e18 <HAL_RCC_OscConfig+0x2ac>)
 8000bd4:	681b      	ldr	r3, [r3, #0]
 8000bd6:	4a90      	ldr	r2, [pc, #576]	; (8000e18 <HAL_RCC_OscConfig+0x2ac>)
 8000bd8:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8000bdc:	6013      	str	r3, [r2, #0]
 8000bde:	e01d      	b.n	8000c1c <HAL_RCC_OscConfig+0xb0>
 8000be0:	687b      	ldr	r3, [r7, #4]
 8000be2:	685b      	ldr	r3, [r3, #4]
 8000be4:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8000be8:	d10c      	bne.n	8000c04 <HAL_RCC_OscConfig+0x98>
 8000bea:	4b8b      	ldr	r3, [pc, #556]	; (8000e18 <HAL_RCC_OscConfig+0x2ac>)
 8000bec:	681b      	ldr	r3, [r3, #0]
 8000bee:	4a8a      	ldr	r2, [pc, #552]	; (8000e18 <HAL_RCC_OscConfig+0x2ac>)
 8000bf0:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8000bf4:	6013      	str	r3, [r2, #0]
 8000bf6:	4b88      	ldr	r3, [pc, #544]	; (8000e18 <HAL_RCC_OscConfig+0x2ac>)
 8000bf8:	681b      	ldr	r3, [r3, #0]
 8000bfa:	4a87      	ldr	r2, [pc, #540]	; (8000e18 <HAL_RCC_OscConfig+0x2ac>)
 8000bfc:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8000c00:	6013      	str	r3, [r2, #0]
 8000c02:	e00b      	b.n	8000c1c <HAL_RCC_OscConfig+0xb0>
 8000c04:	4b84      	ldr	r3, [pc, #528]	; (8000e18 <HAL_RCC_OscConfig+0x2ac>)
 8000c06:	681b      	ldr	r3, [r3, #0]
 8000c08:	4a83      	ldr	r2, [pc, #524]	; (8000e18 <HAL_RCC_OscConfig+0x2ac>)
 8000c0a:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8000c0e:	6013      	str	r3, [r2, #0]
 8000c10:	4b81      	ldr	r3, [pc, #516]	; (8000e18 <HAL_RCC_OscConfig+0x2ac>)
 8000c12:	681b      	ldr	r3, [r3, #0]
 8000c14:	4a80      	ldr	r2, [pc, #512]	; (8000e18 <HAL_RCC_OscConfig+0x2ac>)
 8000c16:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8000c1a:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 8000c1c:	687b      	ldr	r3, [r7, #4]
 8000c1e:	685b      	ldr	r3, [r3, #4]
 8000c20:	2b00      	cmp	r3, #0
 8000c22:	d013      	beq.n	8000c4c <HAL_RCC_OscConfig+0xe0>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8000c24:	f7ff fcb6 	bl	8000594 <HAL_GetTick>
 8000c28:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8000c2a:	e008      	b.n	8000c3e <HAL_RCC_OscConfig+0xd2>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8000c2c:	f7ff fcb2 	bl	8000594 <HAL_GetTick>
 8000c30:	4602      	mov	r2, r0
 8000c32:	693b      	ldr	r3, [r7, #16]
 8000c34:	1ad3      	subs	r3, r2, r3
 8000c36:	2b64      	cmp	r3, #100	; 0x64
 8000c38:	d901      	bls.n	8000c3e <HAL_RCC_OscConfig+0xd2>
          {
            return HAL_TIMEOUT;
 8000c3a:	2303      	movs	r3, #3
 8000c3c:	e1cd      	b.n	8000fda <HAL_RCC_OscConfig+0x46e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8000c3e:	4b76      	ldr	r3, [pc, #472]	; (8000e18 <HAL_RCC_OscConfig+0x2ac>)
 8000c40:	681b      	ldr	r3, [r3, #0]
 8000c42:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8000c46:	2b00      	cmp	r3, #0
 8000c48:	d0f0      	beq.n	8000c2c <HAL_RCC_OscConfig+0xc0>
 8000c4a:	e014      	b.n	8000c76 <HAL_RCC_OscConfig+0x10a>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8000c4c:	f7ff fca2 	bl	8000594 <HAL_GetTick>
 8000c50:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8000c52:	e008      	b.n	8000c66 <HAL_RCC_OscConfig+0xfa>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8000c54:	f7ff fc9e 	bl	8000594 <HAL_GetTick>
 8000c58:	4602      	mov	r2, r0
 8000c5a:	693b      	ldr	r3, [r7, #16]
 8000c5c:	1ad3      	subs	r3, r2, r3
 8000c5e:	2b64      	cmp	r3, #100	; 0x64
 8000c60:	d901      	bls.n	8000c66 <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 8000c62:	2303      	movs	r3, #3
 8000c64:	e1b9      	b.n	8000fda <HAL_RCC_OscConfig+0x46e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8000c66:	4b6c      	ldr	r3, [pc, #432]	; (8000e18 <HAL_RCC_OscConfig+0x2ac>)
 8000c68:	681b      	ldr	r3, [r3, #0]
 8000c6a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8000c6e:	2b00      	cmp	r3, #0
 8000c70:	d1f0      	bne.n	8000c54 <HAL_RCC_OscConfig+0xe8>
 8000c72:	e000      	b.n	8000c76 <HAL_RCC_OscConfig+0x10a>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8000c74:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8000c76:	687b      	ldr	r3, [r7, #4]
 8000c78:	681b      	ldr	r3, [r3, #0]
 8000c7a:	f003 0302 	and.w	r3, r3, #2
 8000c7e:	2b00      	cmp	r3, #0
 8000c80:	d063      	beq.n	8000d4a <HAL_RCC_OscConfig+0x1de>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 8000c82:	4b65      	ldr	r3, [pc, #404]	; (8000e18 <HAL_RCC_OscConfig+0x2ac>)
 8000c84:	689b      	ldr	r3, [r3, #8]
 8000c86:	f003 030c 	and.w	r3, r3, #12
 8000c8a:	2b00      	cmp	r3, #0
 8000c8c:	d00b      	beq.n	8000ca6 <HAL_RCC_OscConfig+0x13a>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8000c8e:	4b62      	ldr	r3, [pc, #392]	; (8000e18 <HAL_RCC_OscConfig+0x2ac>)
 8000c90:	689b      	ldr	r3, [r3, #8]
 8000c92:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 8000c96:	2b08      	cmp	r3, #8
 8000c98:	d11c      	bne.n	8000cd4 <HAL_RCC_OscConfig+0x168>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8000c9a:	4b5f      	ldr	r3, [pc, #380]	; (8000e18 <HAL_RCC_OscConfig+0x2ac>)
 8000c9c:	685b      	ldr	r3, [r3, #4]
 8000c9e:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8000ca2:	2b00      	cmp	r3, #0
 8000ca4:	d116      	bne.n	8000cd4 <HAL_RCC_OscConfig+0x168>
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8000ca6:	4b5c      	ldr	r3, [pc, #368]	; (8000e18 <HAL_RCC_OscConfig+0x2ac>)
 8000ca8:	681b      	ldr	r3, [r3, #0]
 8000caa:	f003 0302 	and.w	r3, r3, #2
 8000cae:	2b00      	cmp	r3, #0
 8000cb0:	d005      	beq.n	8000cbe <HAL_RCC_OscConfig+0x152>
 8000cb2:	687b      	ldr	r3, [r7, #4]
 8000cb4:	68db      	ldr	r3, [r3, #12]
 8000cb6:	2b01      	cmp	r3, #1
 8000cb8:	d001      	beq.n	8000cbe <HAL_RCC_OscConfig+0x152>
      {
        return HAL_ERROR;
 8000cba:	2301      	movs	r3, #1
 8000cbc:	e18d      	b.n	8000fda <HAL_RCC_OscConfig+0x46e>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8000cbe:	4b56      	ldr	r3, [pc, #344]	; (8000e18 <HAL_RCC_OscConfig+0x2ac>)
 8000cc0:	681b      	ldr	r3, [r3, #0]
 8000cc2:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8000cc6:	687b      	ldr	r3, [r7, #4]
 8000cc8:	691b      	ldr	r3, [r3, #16]
 8000cca:	00db      	lsls	r3, r3, #3
 8000ccc:	4952      	ldr	r1, [pc, #328]	; (8000e18 <HAL_RCC_OscConfig+0x2ac>)
 8000cce:	4313      	orrs	r3, r2
 8000cd0:	600b      	str	r3, [r1, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8000cd2:	e03a      	b.n	8000d4a <HAL_RCC_OscConfig+0x1de>
      }
    }
    else
    {
      /* Check the HSI State */
      if((RCC_OscInitStruct->HSIState)!= RCC_HSI_OFF)
 8000cd4:	687b      	ldr	r3, [r7, #4]
 8000cd6:	68db      	ldr	r3, [r3, #12]
 8000cd8:	2b00      	cmp	r3, #0
 8000cda:	d020      	beq.n	8000d1e <HAL_RCC_OscConfig+0x1b2>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8000cdc:	4b4f      	ldr	r3, [pc, #316]	; (8000e1c <HAL_RCC_OscConfig+0x2b0>)
 8000cde:	2201      	movs	r2, #1
 8000ce0:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8000ce2:	f7ff fc57 	bl	8000594 <HAL_GetTick>
 8000ce6:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8000ce8:	e008      	b.n	8000cfc <HAL_RCC_OscConfig+0x190>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8000cea:	f7ff fc53 	bl	8000594 <HAL_GetTick>
 8000cee:	4602      	mov	r2, r0
 8000cf0:	693b      	ldr	r3, [r7, #16]
 8000cf2:	1ad3      	subs	r3, r2, r3
 8000cf4:	2b02      	cmp	r3, #2
 8000cf6:	d901      	bls.n	8000cfc <HAL_RCC_OscConfig+0x190>
          {
            return HAL_TIMEOUT;
 8000cf8:	2303      	movs	r3, #3
 8000cfa:	e16e      	b.n	8000fda <HAL_RCC_OscConfig+0x46e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8000cfc:	4b46      	ldr	r3, [pc, #280]	; (8000e18 <HAL_RCC_OscConfig+0x2ac>)
 8000cfe:	681b      	ldr	r3, [r3, #0]
 8000d00:	f003 0302 	and.w	r3, r3, #2
 8000d04:	2b00      	cmp	r3, #0
 8000d06:	d0f0      	beq.n	8000cea <HAL_RCC_OscConfig+0x17e>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value. */
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8000d08:	4b43      	ldr	r3, [pc, #268]	; (8000e18 <HAL_RCC_OscConfig+0x2ac>)
 8000d0a:	681b      	ldr	r3, [r3, #0]
 8000d0c:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8000d10:	687b      	ldr	r3, [r7, #4]
 8000d12:	691b      	ldr	r3, [r3, #16]
 8000d14:	00db      	lsls	r3, r3, #3
 8000d16:	4940      	ldr	r1, [pc, #256]	; (8000e18 <HAL_RCC_OscConfig+0x2ac>)
 8000d18:	4313      	orrs	r3, r2
 8000d1a:	600b      	str	r3, [r1, #0]
 8000d1c:	e015      	b.n	8000d4a <HAL_RCC_OscConfig+0x1de>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8000d1e:	4b3f      	ldr	r3, [pc, #252]	; (8000e1c <HAL_RCC_OscConfig+0x2b0>)
 8000d20:	2200      	movs	r2, #0
 8000d22:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8000d24:	f7ff fc36 	bl	8000594 <HAL_GetTick>
 8000d28:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8000d2a:	e008      	b.n	8000d3e <HAL_RCC_OscConfig+0x1d2>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8000d2c:	f7ff fc32 	bl	8000594 <HAL_GetTick>
 8000d30:	4602      	mov	r2, r0
 8000d32:	693b      	ldr	r3, [r7, #16]
 8000d34:	1ad3      	subs	r3, r2, r3
 8000d36:	2b02      	cmp	r3, #2
 8000d38:	d901      	bls.n	8000d3e <HAL_RCC_OscConfig+0x1d2>
          {
            return HAL_TIMEOUT;
 8000d3a:	2303      	movs	r3, #3
 8000d3c:	e14d      	b.n	8000fda <HAL_RCC_OscConfig+0x46e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8000d3e:	4b36      	ldr	r3, [pc, #216]	; (8000e18 <HAL_RCC_OscConfig+0x2ac>)
 8000d40:	681b      	ldr	r3, [r3, #0]
 8000d42:	f003 0302 	and.w	r3, r3, #2
 8000d46:	2b00      	cmp	r3, #0
 8000d48:	d1f0      	bne.n	8000d2c <HAL_RCC_OscConfig+0x1c0>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8000d4a:	687b      	ldr	r3, [r7, #4]
 8000d4c:	681b      	ldr	r3, [r3, #0]
 8000d4e:	f003 0308 	and.w	r3, r3, #8
 8000d52:	2b00      	cmp	r3, #0
 8000d54:	d030      	beq.n	8000db8 <HAL_RCC_OscConfig+0x24c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if((RCC_OscInitStruct->LSIState)!= RCC_LSI_OFF)
 8000d56:	687b      	ldr	r3, [r7, #4]
 8000d58:	695b      	ldr	r3, [r3, #20]
 8000d5a:	2b00      	cmp	r3, #0
 8000d5c:	d016      	beq.n	8000d8c <HAL_RCC_OscConfig+0x220>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8000d5e:	4b30      	ldr	r3, [pc, #192]	; (8000e20 <HAL_RCC_OscConfig+0x2b4>)
 8000d60:	2201      	movs	r2, #1
 8000d62:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8000d64:	f7ff fc16 	bl	8000594 <HAL_GetTick>
 8000d68:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8000d6a:	e008      	b.n	8000d7e <HAL_RCC_OscConfig+0x212>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8000d6c:	f7ff fc12 	bl	8000594 <HAL_GetTick>
 8000d70:	4602      	mov	r2, r0
 8000d72:	693b      	ldr	r3, [r7, #16]
 8000d74:	1ad3      	subs	r3, r2, r3
 8000d76:	2b02      	cmp	r3, #2
 8000d78:	d901      	bls.n	8000d7e <HAL_RCC_OscConfig+0x212>
        {
          return HAL_TIMEOUT;
 8000d7a:	2303      	movs	r3, #3
 8000d7c:	e12d      	b.n	8000fda <HAL_RCC_OscConfig+0x46e>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8000d7e:	4b26      	ldr	r3, [pc, #152]	; (8000e18 <HAL_RCC_OscConfig+0x2ac>)
 8000d80:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8000d82:	f003 0302 	and.w	r3, r3, #2
 8000d86:	2b00      	cmp	r3, #0
 8000d88:	d0f0      	beq.n	8000d6c <HAL_RCC_OscConfig+0x200>
 8000d8a:	e015      	b.n	8000db8 <HAL_RCC_OscConfig+0x24c>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8000d8c:	4b24      	ldr	r3, [pc, #144]	; (8000e20 <HAL_RCC_OscConfig+0x2b4>)
 8000d8e:	2200      	movs	r2, #0
 8000d90:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8000d92:	f7ff fbff 	bl	8000594 <HAL_GetTick>
 8000d96:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8000d98:	e008      	b.n	8000dac <HAL_RCC_OscConfig+0x240>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8000d9a:	f7ff fbfb 	bl	8000594 <HAL_GetTick>
 8000d9e:	4602      	mov	r2, r0
 8000da0:	693b      	ldr	r3, [r7, #16]
 8000da2:	1ad3      	subs	r3, r2, r3
 8000da4:	2b02      	cmp	r3, #2
 8000da6:	d901      	bls.n	8000dac <HAL_RCC_OscConfig+0x240>
        {
          return HAL_TIMEOUT;
 8000da8:	2303      	movs	r3, #3
 8000daa:	e116      	b.n	8000fda <HAL_RCC_OscConfig+0x46e>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8000dac:	4b1a      	ldr	r3, [pc, #104]	; (8000e18 <HAL_RCC_OscConfig+0x2ac>)
 8000dae:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8000db0:	f003 0302 	and.w	r3, r3, #2
 8000db4:	2b00      	cmp	r3, #0
 8000db6:	d1f0      	bne.n	8000d9a <HAL_RCC_OscConfig+0x22e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8000db8:	687b      	ldr	r3, [r7, #4]
 8000dba:	681b      	ldr	r3, [r3, #0]
 8000dbc:	f003 0304 	and.w	r3, r3, #4
 8000dc0:	2b00      	cmp	r3, #0
 8000dc2:	f000 80a0 	beq.w	8000f06 <HAL_RCC_OscConfig+0x39a>
  {
    FlagStatus       pwrclkchanged = RESET;
 8000dc6:	2300      	movs	r3, #0
 8000dc8:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8000dca:	4b13      	ldr	r3, [pc, #76]	; (8000e18 <HAL_RCC_OscConfig+0x2ac>)
 8000dcc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000dce:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8000dd2:	2b00      	cmp	r3, #0
 8000dd4:	d10f      	bne.n	8000df6 <HAL_RCC_OscConfig+0x28a>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8000dd6:	2300      	movs	r3, #0
 8000dd8:	60fb      	str	r3, [r7, #12]
 8000dda:	4b0f      	ldr	r3, [pc, #60]	; (8000e18 <HAL_RCC_OscConfig+0x2ac>)
 8000ddc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000dde:	4a0e      	ldr	r2, [pc, #56]	; (8000e18 <HAL_RCC_OscConfig+0x2ac>)
 8000de0:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8000de4:	6413      	str	r3, [r2, #64]	; 0x40
 8000de6:	4b0c      	ldr	r3, [pc, #48]	; (8000e18 <HAL_RCC_OscConfig+0x2ac>)
 8000de8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000dea:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8000dee:	60fb      	str	r3, [r7, #12]
 8000df0:	68fb      	ldr	r3, [r7, #12]
      pwrclkchanged = SET;
 8000df2:	2301      	movs	r3, #1
 8000df4:	75fb      	strb	r3, [r7, #23]
    }

    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8000df6:	4b0b      	ldr	r3, [pc, #44]	; (8000e24 <HAL_RCC_OscConfig+0x2b8>)
 8000df8:	681b      	ldr	r3, [r3, #0]
 8000dfa:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8000dfe:	2b00      	cmp	r3, #0
 8000e00:	d121      	bne.n	8000e46 <HAL_RCC_OscConfig+0x2da>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8000e02:	4b08      	ldr	r3, [pc, #32]	; (8000e24 <HAL_RCC_OscConfig+0x2b8>)
 8000e04:	681b      	ldr	r3, [r3, #0]
 8000e06:	4a07      	ldr	r2, [pc, #28]	; (8000e24 <HAL_RCC_OscConfig+0x2b8>)
 8000e08:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8000e0c:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8000e0e:	f7ff fbc1 	bl	8000594 <HAL_GetTick>
 8000e12:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8000e14:	e011      	b.n	8000e3a <HAL_RCC_OscConfig+0x2ce>
 8000e16:	bf00      	nop
 8000e18:	40023800 	.word	0x40023800
 8000e1c:	42470000 	.word	0x42470000
 8000e20:	42470e80 	.word	0x42470e80
 8000e24:	40007000 	.word	0x40007000
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8000e28:	f7ff fbb4 	bl	8000594 <HAL_GetTick>
 8000e2c:	4602      	mov	r2, r0
 8000e2e:	693b      	ldr	r3, [r7, #16]
 8000e30:	1ad3      	subs	r3, r2, r3
 8000e32:	2b02      	cmp	r3, #2
 8000e34:	d901      	bls.n	8000e3a <HAL_RCC_OscConfig+0x2ce>
        {
          return HAL_TIMEOUT;
 8000e36:	2303      	movs	r3, #3
 8000e38:	e0cf      	b.n	8000fda <HAL_RCC_OscConfig+0x46e>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8000e3a:	4b6a      	ldr	r3, [pc, #424]	; (8000fe4 <HAL_RCC_OscConfig+0x478>)
 8000e3c:	681b      	ldr	r3, [r3, #0]
 8000e3e:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8000e42:	2b00      	cmp	r3, #0
 8000e44:	d0f0      	beq.n	8000e28 <HAL_RCC_OscConfig+0x2bc>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8000e46:	687b      	ldr	r3, [r7, #4]
 8000e48:	689b      	ldr	r3, [r3, #8]
 8000e4a:	2b01      	cmp	r3, #1
 8000e4c:	d106      	bne.n	8000e5c <HAL_RCC_OscConfig+0x2f0>
 8000e4e:	4b66      	ldr	r3, [pc, #408]	; (8000fe8 <HAL_RCC_OscConfig+0x47c>)
 8000e50:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8000e52:	4a65      	ldr	r2, [pc, #404]	; (8000fe8 <HAL_RCC_OscConfig+0x47c>)
 8000e54:	f043 0301 	orr.w	r3, r3, #1
 8000e58:	6713      	str	r3, [r2, #112]	; 0x70
 8000e5a:	e01c      	b.n	8000e96 <HAL_RCC_OscConfig+0x32a>
 8000e5c:	687b      	ldr	r3, [r7, #4]
 8000e5e:	689b      	ldr	r3, [r3, #8]
 8000e60:	2b05      	cmp	r3, #5
 8000e62:	d10c      	bne.n	8000e7e <HAL_RCC_OscConfig+0x312>
 8000e64:	4b60      	ldr	r3, [pc, #384]	; (8000fe8 <HAL_RCC_OscConfig+0x47c>)
 8000e66:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8000e68:	4a5f      	ldr	r2, [pc, #380]	; (8000fe8 <HAL_RCC_OscConfig+0x47c>)
 8000e6a:	f043 0304 	orr.w	r3, r3, #4
 8000e6e:	6713      	str	r3, [r2, #112]	; 0x70
 8000e70:	4b5d      	ldr	r3, [pc, #372]	; (8000fe8 <HAL_RCC_OscConfig+0x47c>)
 8000e72:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8000e74:	4a5c      	ldr	r2, [pc, #368]	; (8000fe8 <HAL_RCC_OscConfig+0x47c>)
 8000e76:	f043 0301 	orr.w	r3, r3, #1
 8000e7a:	6713      	str	r3, [r2, #112]	; 0x70
 8000e7c:	e00b      	b.n	8000e96 <HAL_RCC_OscConfig+0x32a>
 8000e7e:	4b5a      	ldr	r3, [pc, #360]	; (8000fe8 <HAL_RCC_OscConfig+0x47c>)
 8000e80:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8000e82:	4a59      	ldr	r2, [pc, #356]	; (8000fe8 <HAL_RCC_OscConfig+0x47c>)
 8000e84:	f023 0301 	bic.w	r3, r3, #1
 8000e88:	6713      	str	r3, [r2, #112]	; 0x70
 8000e8a:	4b57      	ldr	r3, [pc, #348]	; (8000fe8 <HAL_RCC_OscConfig+0x47c>)
 8000e8c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8000e8e:	4a56      	ldr	r2, [pc, #344]	; (8000fe8 <HAL_RCC_OscConfig+0x47c>)
 8000e90:	f023 0304 	bic.w	r3, r3, #4
 8000e94:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 8000e96:	687b      	ldr	r3, [r7, #4]
 8000e98:	689b      	ldr	r3, [r3, #8]
 8000e9a:	2b00      	cmp	r3, #0
 8000e9c:	d015      	beq.n	8000eca <HAL_RCC_OscConfig+0x35e>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8000e9e:	f7ff fb79 	bl	8000594 <HAL_GetTick>
 8000ea2:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8000ea4:	e00a      	b.n	8000ebc <HAL_RCC_OscConfig+0x350>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8000ea6:	f7ff fb75 	bl	8000594 <HAL_GetTick>
 8000eaa:	4602      	mov	r2, r0
 8000eac:	693b      	ldr	r3, [r7, #16]
 8000eae:	1ad3      	subs	r3, r2, r3
 8000eb0:	f241 3288 	movw	r2, #5000	; 0x1388
 8000eb4:	4293      	cmp	r3, r2
 8000eb6:	d901      	bls.n	8000ebc <HAL_RCC_OscConfig+0x350>
        {
          return HAL_TIMEOUT;
 8000eb8:	2303      	movs	r3, #3
 8000eba:	e08e      	b.n	8000fda <HAL_RCC_OscConfig+0x46e>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8000ebc:	4b4a      	ldr	r3, [pc, #296]	; (8000fe8 <HAL_RCC_OscConfig+0x47c>)
 8000ebe:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8000ec0:	f003 0302 	and.w	r3, r3, #2
 8000ec4:	2b00      	cmp	r3, #0
 8000ec6:	d0ee      	beq.n	8000ea6 <HAL_RCC_OscConfig+0x33a>
 8000ec8:	e014      	b.n	8000ef4 <HAL_RCC_OscConfig+0x388>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8000eca:	f7ff fb63 	bl	8000594 <HAL_GetTick>
 8000ece:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8000ed0:	e00a      	b.n	8000ee8 <HAL_RCC_OscConfig+0x37c>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8000ed2:	f7ff fb5f 	bl	8000594 <HAL_GetTick>
 8000ed6:	4602      	mov	r2, r0
 8000ed8:	693b      	ldr	r3, [r7, #16]
 8000eda:	1ad3      	subs	r3, r2, r3
 8000edc:	f241 3288 	movw	r2, #5000	; 0x1388
 8000ee0:	4293      	cmp	r3, r2
 8000ee2:	d901      	bls.n	8000ee8 <HAL_RCC_OscConfig+0x37c>
        {
          return HAL_TIMEOUT;
 8000ee4:	2303      	movs	r3, #3
 8000ee6:	e078      	b.n	8000fda <HAL_RCC_OscConfig+0x46e>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8000ee8:	4b3f      	ldr	r3, [pc, #252]	; (8000fe8 <HAL_RCC_OscConfig+0x47c>)
 8000eea:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8000eec:	f003 0302 	and.w	r3, r3, #2
 8000ef0:	2b00      	cmp	r3, #0
 8000ef2:	d1ee      	bne.n	8000ed2 <HAL_RCC_OscConfig+0x366>
        }
      }
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 8000ef4:	7dfb      	ldrb	r3, [r7, #23]
 8000ef6:	2b01      	cmp	r3, #1
 8000ef8:	d105      	bne.n	8000f06 <HAL_RCC_OscConfig+0x39a>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8000efa:	4b3b      	ldr	r3, [pc, #236]	; (8000fe8 <HAL_RCC_OscConfig+0x47c>)
 8000efc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000efe:	4a3a      	ldr	r2, [pc, #232]	; (8000fe8 <HAL_RCC_OscConfig+0x47c>)
 8000f00:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8000f04:	6413      	str	r3, [r2, #64]	; 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8000f06:	687b      	ldr	r3, [r7, #4]
 8000f08:	699b      	ldr	r3, [r3, #24]
 8000f0a:	2b00      	cmp	r3, #0
 8000f0c:	d064      	beq.n	8000fd8 <HAL_RCC_OscConfig+0x46c>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 8000f0e:	4b36      	ldr	r3, [pc, #216]	; (8000fe8 <HAL_RCC_OscConfig+0x47c>)
 8000f10:	689b      	ldr	r3, [r3, #8]
 8000f12:	f003 030c 	and.w	r3, r3, #12
 8000f16:	2b08      	cmp	r3, #8
 8000f18:	d05c      	beq.n	8000fd4 <HAL_RCC_OscConfig+0x468>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8000f1a:	687b      	ldr	r3, [r7, #4]
 8000f1c:	699b      	ldr	r3, [r3, #24]
 8000f1e:	2b02      	cmp	r3, #2
 8000f20:	d141      	bne.n	8000fa6 <HAL_RCC_OscConfig+0x43a>
        assert_param(IS_RCC_PLLN_VALUE(RCC_OscInitStruct->PLL.PLLN));
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8000f22:	4b32      	ldr	r3, [pc, #200]	; (8000fec <HAL_RCC_OscConfig+0x480>)
 8000f24:	2200      	movs	r2, #0
 8000f26:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8000f28:	f7ff fb34 	bl	8000594 <HAL_GetTick>
 8000f2c:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8000f2e:	e008      	b.n	8000f42 <HAL_RCC_OscConfig+0x3d6>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8000f30:	f7ff fb30 	bl	8000594 <HAL_GetTick>
 8000f34:	4602      	mov	r2, r0
 8000f36:	693b      	ldr	r3, [r7, #16]
 8000f38:	1ad3      	subs	r3, r2, r3
 8000f3a:	2b02      	cmp	r3, #2
 8000f3c:	d901      	bls.n	8000f42 <HAL_RCC_OscConfig+0x3d6>
          {
            return HAL_TIMEOUT;
 8000f3e:	2303      	movs	r3, #3
 8000f40:	e04b      	b.n	8000fda <HAL_RCC_OscConfig+0x46e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8000f42:	4b29      	ldr	r3, [pc, #164]	; (8000fe8 <HAL_RCC_OscConfig+0x47c>)
 8000f44:	681b      	ldr	r3, [r3, #0]
 8000f46:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8000f4a:	2b00      	cmp	r3, #0
 8000f4c:	d1f0      	bne.n	8000f30 <HAL_RCC_OscConfig+0x3c4>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 8000f4e:	687b      	ldr	r3, [r7, #4]
 8000f50:	69da      	ldr	r2, [r3, #28]
 8000f52:	687b      	ldr	r3, [r7, #4]
 8000f54:	6a1b      	ldr	r3, [r3, #32]
 8000f56:	431a      	orrs	r2, r3
 8000f58:	687b      	ldr	r3, [r7, #4]
 8000f5a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8000f5c:	019b      	lsls	r3, r3, #6
 8000f5e:	431a      	orrs	r2, r3
 8000f60:	687b      	ldr	r3, [r7, #4]
 8000f62:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8000f64:	085b      	lsrs	r3, r3, #1
 8000f66:	3b01      	subs	r3, #1
 8000f68:	041b      	lsls	r3, r3, #16
 8000f6a:	431a      	orrs	r2, r3
 8000f6c:	687b      	ldr	r3, [r7, #4]
 8000f6e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8000f70:	061b      	lsls	r3, r3, #24
 8000f72:	491d      	ldr	r1, [pc, #116]	; (8000fe8 <HAL_RCC_OscConfig+0x47c>)
 8000f74:	4313      	orrs	r3, r2
 8000f76:	604b      	str	r3, [r1, #4]
                                 RCC_OscInitStruct->PLL.PLLM                                                 | \
                                 (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)             | \
                                 (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos) | \
                                 (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)));
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8000f78:	4b1c      	ldr	r3, [pc, #112]	; (8000fec <HAL_RCC_OscConfig+0x480>)
 8000f7a:	2201      	movs	r2, #1
 8000f7c:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8000f7e:	f7ff fb09 	bl	8000594 <HAL_GetTick>
 8000f82:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8000f84:	e008      	b.n	8000f98 <HAL_RCC_OscConfig+0x42c>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8000f86:	f7ff fb05 	bl	8000594 <HAL_GetTick>
 8000f8a:	4602      	mov	r2, r0
 8000f8c:	693b      	ldr	r3, [r7, #16]
 8000f8e:	1ad3      	subs	r3, r2, r3
 8000f90:	2b02      	cmp	r3, #2
 8000f92:	d901      	bls.n	8000f98 <HAL_RCC_OscConfig+0x42c>
          {
            return HAL_TIMEOUT;
 8000f94:	2303      	movs	r3, #3
 8000f96:	e020      	b.n	8000fda <HAL_RCC_OscConfig+0x46e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8000f98:	4b13      	ldr	r3, [pc, #76]	; (8000fe8 <HAL_RCC_OscConfig+0x47c>)
 8000f9a:	681b      	ldr	r3, [r3, #0]
 8000f9c:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8000fa0:	2b00      	cmp	r3, #0
 8000fa2:	d0f0      	beq.n	8000f86 <HAL_RCC_OscConfig+0x41a>
 8000fa4:	e018      	b.n	8000fd8 <HAL_RCC_OscConfig+0x46c>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8000fa6:	4b11      	ldr	r3, [pc, #68]	; (8000fec <HAL_RCC_OscConfig+0x480>)
 8000fa8:	2200      	movs	r2, #0
 8000faa:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8000fac:	f7ff faf2 	bl	8000594 <HAL_GetTick>
 8000fb0:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8000fb2:	e008      	b.n	8000fc6 <HAL_RCC_OscConfig+0x45a>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8000fb4:	f7ff faee 	bl	8000594 <HAL_GetTick>
 8000fb8:	4602      	mov	r2, r0
 8000fba:	693b      	ldr	r3, [r7, #16]
 8000fbc:	1ad3      	subs	r3, r2, r3
 8000fbe:	2b02      	cmp	r3, #2
 8000fc0:	d901      	bls.n	8000fc6 <HAL_RCC_OscConfig+0x45a>
          {
            return HAL_TIMEOUT;
 8000fc2:	2303      	movs	r3, #3
 8000fc4:	e009      	b.n	8000fda <HAL_RCC_OscConfig+0x46e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8000fc6:	4b08      	ldr	r3, [pc, #32]	; (8000fe8 <HAL_RCC_OscConfig+0x47c>)
 8000fc8:	681b      	ldr	r3, [r3, #0]
 8000fca:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8000fce:	2b00      	cmp	r3, #0
 8000fd0:	d1f0      	bne.n	8000fb4 <HAL_RCC_OscConfig+0x448>
 8000fd2:	e001      	b.n	8000fd8 <HAL_RCC_OscConfig+0x46c>
        }
      }
    }
    else
    {
      return HAL_ERROR;
 8000fd4:	2301      	movs	r3, #1
 8000fd6:	e000      	b.n	8000fda <HAL_RCC_OscConfig+0x46e>
    }
  }
  return HAL_OK;
 8000fd8:	2300      	movs	r3, #0
}
 8000fda:	4618      	mov	r0, r3
 8000fdc:	3718      	adds	r7, #24
 8000fde:	46bd      	mov	sp, r7
 8000fe0:	bd80      	pop	{r7, pc}
 8000fe2:	bf00      	nop
 8000fe4:	40007000 	.word	0x40007000
 8000fe8:	40023800 	.word	0x40023800
 8000fec:	42470060 	.word	0x42470060

08000ff0 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8000ff0:	b580      	push	{r7, lr}
 8000ff2:	b084      	sub	sp, #16
 8000ff4:	af00      	add	r7, sp, #0
 8000ff6:	6078      	str	r0, [r7, #4]
 8000ff8:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 8000ffa:	687b      	ldr	r3, [r7, #4]
 8000ffc:	2b00      	cmp	r3, #0
 8000ffe:	d101      	bne.n	8001004 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8001000:	2301      	movs	r3, #1
 8001002:	e0ca      	b.n	800119a <HAL_RCC_ClockConfig+0x1aa>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8001004:	4b67      	ldr	r3, [pc, #412]	; (80011a4 <HAL_RCC_ClockConfig+0x1b4>)
 8001006:	681b      	ldr	r3, [r3, #0]
 8001008:	f003 030f 	and.w	r3, r3, #15
 800100c:	683a      	ldr	r2, [r7, #0]
 800100e:	429a      	cmp	r2, r3
 8001010:	d90c      	bls.n	800102c <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8001012:	4b64      	ldr	r3, [pc, #400]	; (80011a4 <HAL_RCC_ClockConfig+0x1b4>)
 8001014:	683a      	ldr	r2, [r7, #0]
 8001016:	b2d2      	uxtb	r2, r2
 8001018:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 800101a:	4b62      	ldr	r3, [pc, #392]	; (80011a4 <HAL_RCC_ClockConfig+0x1b4>)
 800101c:	681b      	ldr	r3, [r3, #0]
 800101e:	f003 030f 	and.w	r3, r3, #15
 8001022:	683a      	ldr	r2, [r7, #0]
 8001024:	429a      	cmp	r2, r3
 8001026:	d001      	beq.n	800102c <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 8001028:	2301      	movs	r3, #1
 800102a:	e0b6      	b.n	800119a <HAL_RCC_ClockConfig+0x1aa>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 800102c:	687b      	ldr	r3, [r7, #4]
 800102e:	681b      	ldr	r3, [r3, #0]
 8001030:	f003 0302 	and.w	r3, r3, #2
 8001034:	2b00      	cmp	r3, #0
 8001036:	d020      	beq.n	800107a <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8001038:	687b      	ldr	r3, [r7, #4]
 800103a:	681b      	ldr	r3, [r3, #0]
 800103c:	f003 0304 	and.w	r3, r3, #4
 8001040:	2b00      	cmp	r3, #0
 8001042:	d005      	beq.n	8001050 <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8001044:	4b58      	ldr	r3, [pc, #352]	; (80011a8 <HAL_RCC_ClockConfig+0x1b8>)
 8001046:	689b      	ldr	r3, [r3, #8]
 8001048:	4a57      	ldr	r2, [pc, #348]	; (80011a8 <HAL_RCC_ClockConfig+0x1b8>)
 800104a:	f443 53e0 	orr.w	r3, r3, #7168	; 0x1c00
 800104e:	6093      	str	r3, [r2, #8]
    }

    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8001050:	687b      	ldr	r3, [r7, #4]
 8001052:	681b      	ldr	r3, [r3, #0]
 8001054:	f003 0308 	and.w	r3, r3, #8
 8001058:	2b00      	cmp	r3, #0
 800105a:	d005      	beq.n	8001068 <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 800105c:	4b52      	ldr	r3, [pc, #328]	; (80011a8 <HAL_RCC_ClockConfig+0x1b8>)
 800105e:	689b      	ldr	r3, [r3, #8]
 8001060:	4a51      	ldr	r2, [pc, #324]	; (80011a8 <HAL_RCC_ClockConfig+0x1b8>)
 8001062:	f443 4360 	orr.w	r3, r3, #57344	; 0xe000
 8001066:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8001068:	4b4f      	ldr	r3, [pc, #316]	; (80011a8 <HAL_RCC_ClockConfig+0x1b8>)
 800106a:	689b      	ldr	r3, [r3, #8]
 800106c:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8001070:	687b      	ldr	r3, [r7, #4]
 8001072:	689b      	ldr	r3, [r3, #8]
 8001074:	494c      	ldr	r1, [pc, #304]	; (80011a8 <HAL_RCC_ClockConfig+0x1b8>)
 8001076:	4313      	orrs	r3, r2
 8001078:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 800107a:	687b      	ldr	r3, [r7, #4]
 800107c:	681b      	ldr	r3, [r3, #0]
 800107e:	f003 0301 	and.w	r3, r3, #1
 8001082:	2b00      	cmp	r3, #0
 8001084:	d044      	beq.n	8001110 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8001086:	687b      	ldr	r3, [r7, #4]
 8001088:	685b      	ldr	r3, [r3, #4]
 800108a:	2b01      	cmp	r3, #1
 800108c:	d107      	bne.n	800109e <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800108e:	4b46      	ldr	r3, [pc, #280]	; (80011a8 <HAL_RCC_ClockConfig+0x1b8>)
 8001090:	681b      	ldr	r3, [r3, #0]
 8001092:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001096:	2b00      	cmp	r3, #0
 8001098:	d119      	bne.n	80010ce <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 800109a:	2301      	movs	r3, #1
 800109c:	e07d      	b.n	800119a <HAL_RCC_ClockConfig+0x1aa>
      }
    }
    /* PLL is selected as System Clock Source */
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 800109e:	687b      	ldr	r3, [r7, #4]
 80010a0:	685b      	ldr	r3, [r3, #4]
 80010a2:	2b02      	cmp	r3, #2
 80010a4:	d003      	beq.n	80010ae <HAL_RCC_ClockConfig+0xbe>
            (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 80010a6:	687b      	ldr	r3, [r7, #4]
 80010a8:	685b      	ldr	r3, [r3, #4]
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 80010aa:	2b03      	cmp	r3, #3
 80010ac:	d107      	bne.n	80010be <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80010ae:	4b3e      	ldr	r3, [pc, #248]	; (80011a8 <HAL_RCC_ClockConfig+0x1b8>)
 80010b0:	681b      	ldr	r3, [r3, #0]
 80010b2:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80010b6:	2b00      	cmp	r3, #0
 80010b8:	d109      	bne.n	80010ce <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80010ba:	2301      	movs	r3, #1
 80010bc:	e06d      	b.n	800119a <HAL_RCC_ClockConfig+0x1aa>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80010be:	4b3a      	ldr	r3, [pc, #232]	; (80011a8 <HAL_RCC_ClockConfig+0x1b8>)
 80010c0:	681b      	ldr	r3, [r3, #0]
 80010c2:	f003 0302 	and.w	r3, r3, #2
 80010c6:	2b00      	cmp	r3, #0
 80010c8:	d101      	bne.n	80010ce <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80010ca:	2301      	movs	r3, #1
 80010cc:	e065      	b.n	800119a <HAL_RCC_ClockConfig+0x1aa>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 80010ce:	4b36      	ldr	r3, [pc, #216]	; (80011a8 <HAL_RCC_ClockConfig+0x1b8>)
 80010d0:	689b      	ldr	r3, [r3, #8]
 80010d2:	f023 0203 	bic.w	r2, r3, #3
 80010d6:	687b      	ldr	r3, [r7, #4]
 80010d8:	685b      	ldr	r3, [r3, #4]
 80010da:	4933      	ldr	r1, [pc, #204]	; (80011a8 <HAL_RCC_ClockConfig+0x1b8>)
 80010dc:	4313      	orrs	r3, r2
 80010de:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 80010e0:	f7ff fa58 	bl	8000594 <HAL_GetTick>
 80010e4:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80010e6:	e00a      	b.n	80010fe <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 80010e8:	f7ff fa54 	bl	8000594 <HAL_GetTick>
 80010ec:	4602      	mov	r2, r0
 80010ee:	68fb      	ldr	r3, [r7, #12]
 80010f0:	1ad3      	subs	r3, r2, r3
 80010f2:	f241 3288 	movw	r2, #5000	; 0x1388
 80010f6:	4293      	cmp	r3, r2
 80010f8:	d901      	bls.n	80010fe <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 80010fa:	2303      	movs	r3, #3
 80010fc:	e04d      	b.n	800119a <HAL_RCC_ClockConfig+0x1aa>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80010fe:	4b2a      	ldr	r3, [pc, #168]	; (80011a8 <HAL_RCC_ClockConfig+0x1b8>)
 8001100:	689b      	ldr	r3, [r3, #8]
 8001102:	f003 020c 	and.w	r2, r3, #12
 8001106:	687b      	ldr	r3, [r7, #4]
 8001108:	685b      	ldr	r3, [r3, #4]
 800110a:	009b      	lsls	r3, r3, #2
 800110c:	429a      	cmp	r2, r3
 800110e:	d1eb      	bne.n	80010e8 <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8001110:	4b24      	ldr	r3, [pc, #144]	; (80011a4 <HAL_RCC_ClockConfig+0x1b4>)
 8001112:	681b      	ldr	r3, [r3, #0]
 8001114:	f003 030f 	and.w	r3, r3, #15
 8001118:	683a      	ldr	r2, [r7, #0]
 800111a:	429a      	cmp	r2, r3
 800111c:	d20c      	bcs.n	8001138 <HAL_RCC_ClockConfig+0x148>
  {
     /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800111e:	4b21      	ldr	r3, [pc, #132]	; (80011a4 <HAL_RCC_ClockConfig+0x1b4>)
 8001120:	683a      	ldr	r2, [r7, #0]
 8001122:	b2d2      	uxtb	r2, r2
 8001124:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8001126:	4b1f      	ldr	r3, [pc, #124]	; (80011a4 <HAL_RCC_ClockConfig+0x1b4>)
 8001128:	681b      	ldr	r3, [r3, #0]
 800112a:	f003 030f 	and.w	r3, r3, #15
 800112e:	683a      	ldr	r2, [r7, #0]
 8001130:	429a      	cmp	r2, r3
 8001132:	d001      	beq.n	8001138 <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 8001134:	2301      	movs	r3, #1
 8001136:	e030      	b.n	800119a <HAL_RCC_ClockConfig+0x1aa>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8001138:	687b      	ldr	r3, [r7, #4]
 800113a:	681b      	ldr	r3, [r3, #0]
 800113c:	f003 0304 	and.w	r3, r3, #4
 8001140:	2b00      	cmp	r3, #0
 8001142:	d008      	beq.n	8001156 <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8001144:	4b18      	ldr	r3, [pc, #96]	; (80011a8 <HAL_RCC_ClockConfig+0x1b8>)
 8001146:	689b      	ldr	r3, [r3, #8]
 8001148:	f423 52e0 	bic.w	r2, r3, #7168	; 0x1c00
 800114c:	687b      	ldr	r3, [r7, #4]
 800114e:	68db      	ldr	r3, [r3, #12]
 8001150:	4915      	ldr	r1, [pc, #84]	; (80011a8 <HAL_RCC_ClockConfig+0x1b8>)
 8001152:	4313      	orrs	r3, r2
 8001154:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8001156:	687b      	ldr	r3, [r7, #4]
 8001158:	681b      	ldr	r3, [r3, #0]
 800115a:	f003 0308 	and.w	r3, r3, #8
 800115e:	2b00      	cmp	r3, #0
 8001160:	d009      	beq.n	8001176 <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8001162:	4b11      	ldr	r3, [pc, #68]	; (80011a8 <HAL_RCC_ClockConfig+0x1b8>)
 8001164:	689b      	ldr	r3, [r3, #8]
 8001166:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 800116a:	687b      	ldr	r3, [r7, #4]
 800116c:	691b      	ldr	r3, [r3, #16]
 800116e:	00db      	lsls	r3, r3, #3
 8001170:	490d      	ldr	r1, [pc, #52]	; (80011a8 <HAL_RCC_ClockConfig+0x1b8>)
 8001172:	4313      	orrs	r3, r2
 8001174:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 8001176:	f000 f81d 	bl	80011b4 <HAL_RCC_GetSysClockFreq>
 800117a:	4601      	mov	r1, r0
 800117c:	4b0a      	ldr	r3, [pc, #40]	; (80011a8 <HAL_RCC_ClockConfig+0x1b8>)
 800117e:	689b      	ldr	r3, [r3, #8]
 8001180:	091b      	lsrs	r3, r3, #4
 8001182:	f003 030f 	and.w	r3, r3, #15
 8001186:	4a09      	ldr	r2, [pc, #36]	; (80011ac <HAL_RCC_ClockConfig+0x1bc>)
 8001188:	5cd3      	ldrb	r3, [r2, r3]
 800118a:	fa21 f303 	lsr.w	r3, r1, r3
 800118e:	4a08      	ldr	r2, [pc, #32]	; (80011b0 <HAL_RCC_ClockConfig+0x1c0>)
 8001190:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick (TICK_INT_PRIORITY);
 8001192:	2000      	movs	r0, #0
 8001194:	f7ff f9ba 	bl	800050c <HAL_InitTick>

  return HAL_OK;
 8001198:	2300      	movs	r3, #0
}
 800119a:	4618      	mov	r0, r3
 800119c:	3710      	adds	r7, #16
 800119e:	46bd      	mov	sp, r7
 80011a0:	bd80      	pop	{r7, pc}
 80011a2:	bf00      	nop
 80011a4:	40023c00 	.word	0x40023c00
 80011a8:	40023800 	.word	0x40023800
 80011ac:	08001668 	.word	0x08001668
 80011b0:	20000008 	.word	0x20000008

080011b4 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
__weak uint32_t HAL_RCC_GetSysClockFreq(void)
{
 80011b4:	b5f0      	push	{r4, r5, r6, r7, lr}
 80011b6:	b085      	sub	sp, #20
 80011b8:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U, pllvco = 0U, pllp = 0U;
 80011ba:	2300      	movs	r3, #0
 80011bc:	607b      	str	r3, [r7, #4]
 80011be:	2300      	movs	r3, #0
 80011c0:	60fb      	str	r3, [r7, #12]
 80011c2:	2300      	movs	r3, #0
 80011c4:	603b      	str	r3, [r7, #0]
  uint32_t sysclockfreq = 0U;
 80011c6:	2300      	movs	r3, #0
 80011c8:	60bb      	str	r3, [r7, #8]

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 80011ca:	4b50      	ldr	r3, [pc, #320]	; (800130c <HAL_RCC_GetSysClockFreq+0x158>)
 80011cc:	689b      	ldr	r3, [r3, #8]
 80011ce:	f003 030c 	and.w	r3, r3, #12
 80011d2:	2b04      	cmp	r3, #4
 80011d4:	d007      	beq.n	80011e6 <HAL_RCC_GetSysClockFreq+0x32>
 80011d6:	2b08      	cmp	r3, #8
 80011d8:	d008      	beq.n	80011ec <HAL_RCC_GetSysClockFreq+0x38>
 80011da:	2b00      	cmp	r3, #0
 80011dc:	f040 808d 	bne.w	80012fa <HAL_RCC_GetSysClockFreq+0x146>
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 80011e0:	4b4b      	ldr	r3, [pc, #300]	; (8001310 <HAL_RCC_GetSysClockFreq+0x15c>)
 80011e2:	60bb      	str	r3, [r7, #8]
       break;
 80011e4:	e08c      	b.n	8001300 <HAL_RCC_GetSysClockFreq+0x14c>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 80011e6:	4b4b      	ldr	r3, [pc, #300]	; (8001314 <HAL_RCC_GetSysClockFreq+0x160>)
 80011e8:	60bb      	str	r3, [r7, #8]
      break;
 80011ea:	e089      	b.n	8001300 <HAL_RCC_GetSysClockFreq+0x14c>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 80011ec:	4b47      	ldr	r3, [pc, #284]	; (800130c <HAL_RCC_GetSysClockFreq+0x158>)
 80011ee:	685b      	ldr	r3, [r3, #4]
 80011f0:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 80011f4:	607b      	str	r3, [r7, #4]
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 80011f6:	4b45      	ldr	r3, [pc, #276]	; (800130c <HAL_RCC_GetSysClockFreq+0x158>)
 80011f8:	685b      	ldr	r3, [r3, #4]
 80011fa:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80011fe:	2b00      	cmp	r3, #0
 8001200:	d023      	beq.n	800124a <HAL_RCC_GetSysClockFreq+0x96>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8001202:	4b42      	ldr	r3, [pc, #264]	; (800130c <HAL_RCC_GetSysClockFreq+0x158>)
 8001204:	685b      	ldr	r3, [r3, #4]
 8001206:	099b      	lsrs	r3, r3, #6
 8001208:	f04f 0400 	mov.w	r4, #0
 800120c:	f240 11ff 	movw	r1, #511	; 0x1ff
 8001210:	f04f 0200 	mov.w	r2, #0
 8001214:	ea03 0501 	and.w	r5, r3, r1
 8001218:	ea04 0602 	and.w	r6, r4, r2
 800121c:	4a3d      	ldr	r2, [pc, #244]	; (8001314 <HAL_RCC_GetSysClockFreq+0x160>)
 800121e:	fb02 f106 	mul.w	r1, r2, r6
 8001222:	2200      	movs	r2, #0
 8001224:	fb02 f205 	mul.w	r2, r2, r5
 8001228:	440a      	add	r2, r1
 800122a:	493a      	ldr	r1, [pc, #232]	; (8001314 <HAL_RCC_GetSysClockFreq+0x160>)
 800122c:	fba5 0101 	umull	r0, r1, r5, r1
 8001230:	1853      	adds	r3, r2, r1
 8001232:	4619      	mov	r1, r3
 8001234:	687b      	ldr	r3, [r7, #4]
 8001236:	f04f 0400 	mov.w	r4, #0
 800123a:	461a      	mov	r2, r3
 800123c:	4623      	mov	r3, r4
 800123e:	f7fe ffc3 	bl	80001c8 <__aeabi_uldivmod>
 8001242:	4603      	mov	r3, r0
 8001244:	460c      	mov	r4, r1
 8001246:	60fb      	str	r3, [r7, #12]
 8001248:	e049      	b.n	80012de <HAL_RCC_GetSysClockFreq+0x12a>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 800124a:	4b30      	ldr	r3, [pc, #192]	; (800130c <HAL_RCC_GetSysClockFreq+0x158>)
 800124c:	685b      	ldr	r3, [r3, #4]
 800124e:	099b      	lsrs	r3, r3, #6
 8001250:	f04f 0400 	mov.w	r4, #0
 8001254:	f240 11ff 	movw	r1, #511	; 0x1ff
 8001258:	f04f 0200 	mov.w	r2, #0
 800125c:	ea03 0501 	and.w	r5, r3, r1
 8001260:	ea04 0602 	and.w	r6, r4, r2
 8001264:	4629      	mov	r1, r5
 8001266:	4632      	mov	r2, r6
 8001268:	f04f 0300 	mov.w	r3, #0
 800126c:	f04f 0400 	mov.w	r4, #0
 8001270:	0154      	lsls	r4, r2, #5
 8001272:	ea44 64d1 	orr.w	r4, r4, r1, lsr #27
 8001276:	014b      	lsls	r3, r1, #5
 8001278:	4619      	mov	r1, r3
 800127a:	4622      	mov	r2, r4
 800127c:	1b49      	subs	r1, r1, r5
 800127e:	eb62 0206 	sbc.w	r2, r2, r6
 8001282:	f04f 0300 	mov.w	r3, #0
 8001286:	f04f 0400 	mov.w	r4, #0
 800128a:	0194      	lsls	r4, r2, #6
 800128c:	ea44 6491 	orr.w	r4, r4, r1, lsr #26
 8001290:	018b      	lsls	r3, r1, #6
 8001292:	1a5b      	subs	r3, r3, r1
 8001294:	eb64 0402 	sbc.w	r4, r4, r2
 8001298:	f04f 0100 	mov.w	r1, #0
 800129c:	f04f 0200 	mov.w	r2, #0
 80012a0:	00e2      	lsls	r2, r4, #3
 80012a2:	ea42 7253 	orr.w	r2, r2, r3, lsr #29
 80012a6:	00d9      	lsls	r1, r3, #3
 80012a8:	460b      	mov	r3, r1
 80012aa:	4614      	mov	r4, r2
 80012ac:	195b      	adds	r3, r3, r5
 80012ae:	eb44 0406 	adc.w	r4, r4, r6
 80012b2:	f04f 0100 	mov.w	r1, #0
 80012b6:	f04f 0200 	mov.w	r2, #0
 80012ba:	02a2      	lsls	r2, r4, #10
 80012bc:	ea42 5293 	orr.w	r2, r2, r3, lsr #22
 80012c0:	0299      	lsls	r1, r3, #10
 80012c2:	460b      	mov	r3, r1
 80012c4:	4614      	mov	r4, r2
 80012c6:	4618      	mov	r0, r3
 80012c8:	4621      	mov	r1, r4
 80012ca:	687b      	ldr	r3, [r7, #4]
 80012cc:	f04f 0400 	mov.w	r4, #0
 80012d0:	461a      	mov	r2, r3
 80012d2:	4623      	mov	r3, r4
 80012d4:	f7fe ff78 	bl	80001c8 <__aeabi_uldivmod>
 80012d8:	4603      	mov	r3, r0
 80012da:	460c      	mov	r4, r1
 80012dc:	60fb      	str	r3, [r7, #12]
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) *2U);
 80012de:	4b0b      	ldr	r3, [pc, #44]	; (800130c <HAL_RCC_GetSysClockFreq+0x158>)
 80012e0:	685b      	ldr	r3, [r3, #4]
 80012e2:	0c1b      	lsrs	r3, r3, #16
 80012e4:	f003 0303 	and.w	r3, r3, #3
 80012e8:	3301      	adds	r3, #1
 80012ea:	005b      	lsls	r3, r3, #1
 80012ec:	603b      	str	r3, [r7, #0]

      sysclockfreq = pllvco/pllp;
 80012ee:	68fa      	ldr	r2, [r7, #12]
 80012f0:	683b      	ldr	r3, [r7, #0]
 80012f2:	fbb2 f3f3 	udiv	r3, r2, r3
 80012f6:	60bb      	str	r3, [r7, #8]
      break;
 80012f8:	e002      	b.n	8001300 <HAL_RCC_GetSysClockFreq+0x14c>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 80012fa:	4b05      	ldr	r3, [pc, #20]	; (8001310 <HAL_RCC_GetSysClockFreq+0x15c>)
 80012fc:	60bb      	str	r3, [r7, #8]
      break;
 80012fe:	bf00      	nop
    }
  }
  return sysclockfreq;
 8001300:	68bb      	ldr	r3, [r7, #8]
}
 8001302:	4618      	mov	r0, r3
 8001304:	3714      	adds	r7, #20
 8001306:	46bd      	mov	sp, r7
 8001308:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800130a:	bf00      	nop
 800130c:	40023800 	.word	0x40023800
 8001310:	00f42400 	.word	0x00f42400
 8001314:	017d7840 	.word	0x017d7840

08001318 <Flash_Write>:

/* Private user code ---------------------------------------------------------*/
/* USER CODE BEGIN 0 */

void Flash_Write(uint32_t m_flashAddress, uint32_t m_flashData)
{
 8001318:	b590      	push	{r4, r7, lr}
 800131a:	b083      	sub	sp, #12
 800131c:	af00      	add	r7, sp, #0
 800131e:	6078      	str	r0, [r7, #4]
 8001320:	6039      	str	r1, [r7, #0]
	HAL_FLASH_Unlock();	//	Öncelikle Flash memorynin kilidini yazma işlemi için çözülür.
 8001322:	f7ff fa7d 	bl	8000820 <HAL_FLASH_Unlock>

	__HAL_FLASH_CLEAR_FLAG(FLASH_FLAG_EOP | FLASH_FLAG_OPERR | FLASH_FLAG_WRPERR | FLASH_FLAG_PGAERR | FLASH_FLAG_PGSERR);
 8001326:	4b0b      	ldr	r3, [pc, #44]	; (8001354 <Flash_Write+0x3c>)
 8001328:	22b3      	movs	r2, #179	; 0xb3
 800132a:	60da      	str	r2, [r3, #12]

	FLASH_Erase_Sector(FLASH_SECTOR_11, VOLTAGE_RANGE_3);	// sektör 11 temizlenir,
 800132c:	2102      	movs	r1, #2
 800132e:	200b      	movs	r0, #11
 8001330:	f7ff fbd4 	bl	8000adc <FLASH_Erase_Sector>
	 * yazma işlemi için kullanılmak isteniyorsa sektorün silinmesi gerekir. Örneğin sektor 11 de 10 bytlık
	 * bir data tutuyorsak ve 1 bytın değişmesini istesek dahi yine bütün sektörü silmemiz gerekir ardından
	 * tekrar yazmamız gerekir.
	*/

	HAL_FLASH_Program(FLASH_TYPEPROGRAM_WORD, m_flashAddress, m_flashData); // birinci parametre kaç bit yazılacak
 8001334:	683b      	ldr	r3, [r7, #0]
 8001336:	f04f 0400 	mov.w	r4, #0
 800133a:	461a      	mov	r2, r3
 800133c:	4623      	mov	r3, r4
 800133e:	6879      	ldr	r1, [r7, #4]
 8001340:	2002      	movs	r0, #2
 8001342:	f7ff fa19 	bl	8000778 <HAL_FLASH_Program>
								// ikinci parametre ise yazılacak adres, üçüncü parametre ise yazılacak veridir.
	HAL_FLASH_Lock();	// İşlem bittikten sonra flash tekrar kilitlenir.
 8001346:	f7ff fa8d 	bl	8000864 <HAL_FLASH_Lock>
}
 800134a:	bf00      	nop
 800134c:	370c      	adds	r7, #12
 800134e:	46bd      	mov	sp, r7
 8001350:	bd90      	pop	{r4, r7, pc}
 8001352:	bf00      	nop
 8001354:	40023c00 	.word	0x40023c00

08001358 <Flash_Read>:

uint32_t Flash_Read(uint32_t m_flashAddress)
{
 8001358:	b480      	push	{r7}
 800135a:	b085      	sub	sp, #20
 800135c:	af00      	add	r7, sp, #0
 800135e:	6078      	str	r0, [r7, #4]
	uint32_t m_flashData;

	m_flashData = *(uint32_t*)m_flashAddress;	// Okumak istenilen bölgenin adresi  içerisindeki veri
 8001360:	687b      	ldr	r3, [r7, #4]
 8001362:	681b      	ldr	r3, [r3, #0]
 8001364:	60fb      	str	r3, [r7, #12]
	//	 pointer kullanılarak dataya atanır. Standart bir yazımdır.

	return m_flashData;
 8001366:	68fb      	ldr	r3, [r7, #12]
}
 8001368:	4618      	mov	r0, r3
 800136a:	3714      	adds	r7, #20
 800136c:	46bd      	mov	sp, r7
 800136e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001372:	4770      	bx	lr

08001374 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8001374:	b580      	push	{r7, lr}
 8001376:	af00      	add	r7, sp, #0
  

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8001378:	f7ff f8a6 	bl	80004c8 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 800137c:	f000 f814 	bl	80013a8 <SystemClock_Config>
  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  /* USER CODE BEGIN 2 */

  FLASH_Erase_Sector(FLASH_SECTOR_11, VOLTAGE_RANGE_3);
 8001380:	2102      	movs	r1, #2
 8001382:	200b      	movs	r0, #11
 8001384:	f7ff fbaa 	bl	8000adc <FLASH_Erase_Sector>
  Flash_Write(0x080E0000, 0xDD);
 8001388:	21dd      	movs	r1, #221	; 0xdd
 800138a:	4805      	ldr	r0, [pc, #20]	; (80013a0 <main+0x2c>)
 800138c:	f7ff ffc4 	bl	8001318 <Flash_Write>
  {
    /* USER CODE END WHILE */

    /* USER CODE BEGIN 3 */

	  data = Flash_Read(0x080E0000);
 8001390:	4803      	ldr	r0, [pc, #12]	; (80013a0 <main+0x2c>)
 8001392:	f7ff ffe1 	bl	8001358 <Flash_Read>
 8001396:	4602      	mov	r2, r0
 8001398:	4b02      	ldr	r3, [pc, #8]	; (80013a4 <main+0x30>)
 800139a:	601a      	str	r2, [r3, #0]
 800139c:	e7f8      	b.n	8001390 <main+0x1c>
 800139e:	bf00      	nop
 80013a0:	080e0000 	.word	0x080e0000
 80013a4:	2000004c 	.word	0x2000004c

080013a8 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 80013a8:	b580      	push	{r7, lr}
 80013aa:	b094      	sub	sp, #80	; 0x50
 80013ac:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 80013ae:	f107 0320 	add.w	r3, r7, #32
 80013b2:	2230      	movs	r2, #48	; 0x30
 80013b4:	2100      	movs	r1, #0
 80013b6:	4618      	mov	r0, r3
 80013b8:	f000 f942 	bl	8001640 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 80013bc:	f107 030c 	add.w	r3, r7, #12
 80013c0:	2200      	movs	r2, #0
 80013c2:	601a      	str	r2, [r3, #0]
 80013c4:	605a      	str	r2, [r3, #4]
 80013c6:	609a      	str	r2, [r3, #8]
 80013c8:	60da      	str	r2, [r3, #12]
 80013ca:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage 
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 80013cc:	2300      	movs	r3, #0
 80013ce:	60bb      	str	r3, [r7, #8]
 80013d0:	4b28      	ldr	r3, [pc, #160]	; (8001474 <SystemClock_Config+0xcc>)
 80013d2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80013d4:	4a27      	ldr	r2, [pc, #156]	; (8001474 <SystemClock_Config+0xcc>)
 80013d6:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80013da:	6413      	str	r3, [r2, #64]	; 0x40
 80013dc:	4b25      	ldr	r3, [pc, #148]	; (8001474 <SystemClock_Config+0xcc>)
 80013de:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80013e0:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80013e4:	60bb      	str	r3, [r7, #8]
 80013e6:	68bb      	ldr	r3, [r7, #8]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 80013e8:	2300      	movs	r3, #0
 80013ea:	607b      	str	r3, [r7, #4]
 80013ec:	4b22      	ldr	r3, [pc, #136]	; (8001478 <SystemClock_Config+0xd0>)
 80013ee:	681b      	ldr	r3, [r3, #0]
 80013f0:	4a21      	ldr	r2, [pc, #132]	; (8001478 <SystemClock_Config+0xd0>)
 80013f2:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 80013f6:	6013      	str	r3, [r2, #0]
 80013f8:	4b1f      	ldr	r3, [pc, #124]	; (8001478 <SystemClock_Config+0xd0>)
 80013fa:	681b      	ldr	r3, [r3, #0]
 80013fc:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8001400:	607b      	str	r3, [r7, #4]
 8001402:	687b      	ldr	r3, [r7, #4]
  /** Initializes the CPU, AHB and APB busses clocks 
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 8001404:	2302      	movs	r3, #2
 8001406:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8001408:	2301      	movs	r3, #1
 800140a:	62fb      	str	r3, [r7, #44]	; 0x2c
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 800140c:	2310      	movs	r3, #16
 800140e:	633b      	str	r3, [r7, #48]	; 0x30
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8001410:	2302      	movs	r3, #2
 8001412:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI;
 8001414:	2300      	movs	r3, #0
 8001416:	63fb      	str	r3, [r7, #60]	; 0x3c
  RCC_OscInitStruct.PLL.PLLM = 8;
 8001418:	2308      	movs	r3, #8
 800141a:	643b      	str	r3, [r7, #64]	; 0x40
  RCC_OscInitStruct.PLL.PLLN = 168;
 800141c:	23a8      	movs	r3, #168	; 0xa8
 800141e:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 8001420:	2302      	movs	r3, #2
 8001422:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLQ = 4;
 8001424:	2304      	movs	r3, #4
 8001426:	64fb      	str	r3, [r7, #76]	; 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8001428:	f107 0320 	add.w	r3, r7, #32
 800142c:	4618      	mov	r0, r3
 800142e:	f7ff fb9d 	bl	8000b6c <HAL_RCC_OscConfig>
 8001432:	4603      	mov	r3, r0
 8001434:	2b00      	cmp	r3, #0
 8001436:	d001      	beq.n	800143c <SystemClock_Config+0x94>
  {
    Error_Handler();
 8001438:	f000 f820 	bl	800147c <Error_Handler>
  }
  /** Initializes the CPU, AHB and APB busses clocks 
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 800143c:	230f      	movs	r3, #15
 800143e:	60fb      	str	r3, [r7, #12]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8001440:	2302      	movs	r3, #2
 8001442:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8001444:	2300      	movs	r3, #0
 8001446:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV4;
 8001448:	f44f 53a0 	mov.w	r3, #5120	; 0x1400
 800144c:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV2;
 800144e:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8001452:	61fb      	str	r3, [r7, #28]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_5) != HAL_OK)
 8001454:	f107 030c 	add.w	r3, r7, #12
 8001458:	2105      	movs	r1, #5
 800145a:	4618      	mov	r0, r3
 800145c:	f7ff fdc8 	bl	8000ff0 <HAL_RCC_ClockConfig>
 8001460:	4603      	mov	r3, r0
 8001462:	2b00      	cmp	r3, #0
 8001464:	d001      	beq.n	800146a <SystemClock_Config+0xc2>
  {
    Error_Handler();
 8001466:	f000 f809 	bl	800147c <Error_Handler>
  }
}
 800146a:	bf00      	nop
 800146c:	3750      	adds	r7, #80	; 0x50
 800146e:	46bd      	mov	sp, r7
 8001470:	bd80      	pop	{r7, pc}
 8001472:	bf00      	nop
 8001474:	40023800 	.word	0x40023800
 8001478:	40007000 	.word	0x40007000

0800147c <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 800147c:	b480      	push	{r7}
 800147e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */

  /* USER CODE END Error_Handler_Debug */
}
 8001480:	bf00      	nop
 8001482:	46bd      	mov	sp, r7
 8001484:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001488:	4770      	bx	lr
	...

0800148c <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 800148c:	b480      	push	{r7}
 800148e:	b083      	sub	sp, #12
 8001490:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8001492:	2300      	movs	r3, #0
 8001494:	607b      	str	r3, [r7, #4]
 8001496:	4b10      	ldr	r3, [pc, #64]	; (80014d8 <HAL_MspInit+0x4c>)
 8001498:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800149a:	4a0f      	ldr	r2, [pc, #60]	; (80014d8 <HAL_MspInit+0x4c>)
 800149c:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 80014a0:	6453      	str	r3, [r2, #68]	; 0x44
 80014a2:	4b0d      	ldr	r3, [pc, #52]	; (80014d8 <HAL_MspInit+0x4c>)
 80014a4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80014a6:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80014aa:	607b      	str	r3, [r7, #4]
 80014ac:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 80014ae:	2300      	movs	r3, #0
 80014b0:	603b      	str	r3, [r7, #0]
 80014b2:	4b09      	ldr	r3, [pc, #36]	; (80014d8 <HAL_MspInit+0x4c>)
 80014b4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80014b6:	4a08      	ldr	r2, [pc, #32]	; (80014d8 <HAL_MspInit+0x4c>)
 80014b8:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80014bc:	6413      	str	r3, [r2, #64]	; 0x40
 80014be:	4b06      	ldr	r3, [pc, #24]	; (80014d8 <HAL_MspInit+0x4c>)
 80014c0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80014c2:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80014c6:	603b      	str	r3, [r7, #0]
 80014c8:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 80014ca:	bf00      	nop
 80014cc:	370c      	adds	r7, #12
 80014ce:	46bd      	mov	sp, r7
 80014d0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80014d4:	4770      	bx	lr
 80014d6:	bf00      	nop
 80014d8:	40023800 	.word	0x40023800

080014dc <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 80014dc:	b480      	push	{r7}
 80014de:	af00      	add	r7, sp, #0

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */

  /* USER CODE END NonMaskableInt_IRQn 1 */
}
 80014e0:	bf00      	nop
 80014e2:	46bd      	mov	sp, r7
 80014e4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80014e8:	4770      	bx	lr

080014ea <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 80014ea:	b480      	push	{r7}
 80014ec:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 80014ee:	e7fe      	b.n	80014ee <HardFault_Handler+0x4>

080014f0 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 80014f0:	b480      	push	{r7}
 80014f2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 80014f4:	e7fe      	b.n	80014f4 <MemManage_Handler+0x4>

080014f6 <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 80014f6:	b480      	push	{r7}
 80014f8:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 80014fa:	e7fe      	b.n	80014fa <BusFault_Handler+0x4>

080014fc <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 80014fc:	b480      	push	{r7}
 80014fe:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8001500:	e7fe      	b.n	8001500 <UsageFault_Handler+0x4>

08001502 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8001502:	b480      	push	{r7}
 8001504:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8001506:	bf00      	nop
 8001508:	46bd      	mov	sp, r7
 800150a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800150e:	4770      	bx	lr

08001510 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8001510:	b480      	push	{r7}
 8001512:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8001514:	bf00      	nop
 8001516:	46bd      	mov	sp, r7
 8001518:	f85d 7b04 	ldr.w	r7, [sp], #4
 800151c:	4770      	bx	lr

0800151e <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 800151e:	b480      	push	{r7}
 8001520:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8001522:	bf00      	nop
 8001524:	46bd      	mov	sp, r7
 8001526:	f85d 7b04 	ldr.w	r7, [sp], #4
 800152a:	4770      	bx	lr

0800152c <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 800152c:	b580      	push	{r7, lr}
 800152e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8001530:	f7ff f81c 	bl	800056c <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8001534:	bf00      	nop
 8001536:	bd80      	pop	{r7, pc}

08001538 <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8001538:	b480      	push	{r7}
 800153a:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 800153c:	4b16      	ldr	r3, [pc, #88]	; (8001598 <SystemInit+0x60>)
 800153e:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8001542:	4a15      	ldr	r2, [pc, #84]	; (8001598 <SystemInit+0x60>)
 8001544:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8001548:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88
  #endif
  /* Reset the RCC clock configuration to the default reset state ------------*/
  /* Set HSION bit */
  RCC->CR |= (uint32_t)0x00000001;
 800154c:	4b13      	ldr	r3, [pc, #76]	; (800159c <SystemInit+0x64>)
 800154e:	681b      	ldr	r3, [r3, #0]
 8001550:	4a12      	ldr	r2, [pc, #72]	; (800159c <SystemInit+0x64>)
 8001552:	f043 0301 	orr.w	r3, r3, #1
 8001556:	6013      	str	r3, [r2, #0]

  /* Reset CFGR register */
  RCC->CFGR = 0x00000000;
 8001558:	4b10      	ldr	r3, [pc, #64]	; (800159c <SystemInit+0x64>)
 800155a:	2200      	movs	r2, #0
 800155c:	609a      	str	r2, [r3, #8]

  /* Reset HSEON, CSSON and PLLON bits */
  RCC->CR &= (uint32_t)0xFEF6FFFF;
 800155e:	4b0f      	ldr	r3, [pc, #60]	; (800159c <SystemInit+0x64>)
 8001560:	681b      	ldr	r3, [r3, #0]
 8001562:	4a0e      	ldr	r2, [pc, #56]	; (800159c <SystemInit+0x64>)
 8001564:	f023 7384 	bic.w	r3, r3, #17301504	; 0x1080000
 8001568:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 800156c:	6013      	str	r3, [r2, #0]

  /* Reset PLLCFGR register */
  RCC->PLLCFGR = 0x24003010;
 800156e:	4b0b      	ldr	r3, [pc, #44]	; (800159c <SystemInit+0x64>)
 8001570:	4a0b      	ldr	r2, [pc, #44]	; (80015a0 <SystemInit+0x68>)
 8001572:	605a      	str	r2, [r3, #4]

  /* Reset HSEBYP bit */
  RCC->CR &= (uint32_t)0xFFFBFFFF;
 8001574:	4b09      	ldr	r3, [pc, #36]	; (800159c <SystemInit+0x64>)
 8001576:	681b      	ldr	r3, [r3, #0]
 8001578:	4a08      	ldr	r2, [pc, #32]	; (800159c <SystemInit+0x64>)
 800157a:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 800157e:	6013      	str	r3, [r2, #0]

  /* Disable all interrupts */
  RCC->CIR = 0x00000000;
 8001580:	4b06      	ldr	r3, [pc, #24]	; (800159c <SystemInit+0x64>)
 8001582:	2200      	movs	r2, #0
 8001584:	60da      	str	r2, [r3, #12]

  /* Configure the Vector Table location add offset address ------------------*/
#ifdef VECT_TAB_SRAM
  SCB->VTOR = SRAM_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#else
  SCB->VTOR = FLASH_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal FLASH */
 8001586:	4b04      	ldr	r3, [pc, #16]	; (8001598 <SystemInit+0x60>)
 8001588:	f04f 6200 	mov.w	r2, #134217728	; 0x8000000
 800158c:	609a      	str	r2, [r3, #8]
#endif
}
 800158e:	bf00      	nop
 8001590:	46bd      	mov	sp, r7
 8001592:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001596:	4770      	bx	lr
 8001598:	e000ed00 	.word	0xe000ed00
 800159c:	40023800 	.word	0x40023800
 80015a0:	24003010 	.word	0x24003010

080015a4 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack     /* set stack pointer */
 80015a4:	f8df d034 	ldr.w	sp, [pc, #52]	; 80015dc <LoopFillZerobss+0x14>

/* Copy the data segment initializers from flash to SRAM */  
  movs  r1, #0
 80015a8:	2100      	movs	r1, #0
  b  LoopCopyDataInit
 80015aa:	e003      	b.n	80015b4 <LoopCopyDataInit>

080015ac <CopyDataInit>:

CopyDataInit:
  ldr  r3, =_sidata
 80015ac:	4b0c      	ldr	r3, [pc, #48]	; (80015e0 <LoopFillZerobss+0x18>)
  ldr  r3, [r3, r1]
 80015ae:	585b      	ldr	r3, [r3, r1]
  str  r3, [r0, r1]
 80015b0:	5043      	str	r3, [r0, r1]
  adds  r1, r1, #4
 80015b2:	3104      	adds	r1, #4

080015b4 <LoopCopyDataInit>:
    
LoopCopyDataInit:
  ldr  r0, =_sdata
 80015b4:	480b      	ldr	r0, [pc, #44]	; (80015e4 <LoopFillZerobss+0x1c>)
  ldr  r3, =_edata
 80015b6:	4b0c      	ldr	r3, [pc, #48]	; (80015e8 <LoopFillZerobss+0x20>)
  adds  r2, r0, r1
 80015b8:	1842      	adds	r2, r0, r1
  cmp  r2, r3
 80015ba:	429a      	cmp	r2, r3
  bcc  CopyDataInit
 80015bc:	d3f6      	bcc.n	80015ac <CopyDataInit>
  ldr  r2, =_sbss
 80015be:	4a0b      	ldr	r2, [pc, #44]	; (80015ec <LoopFillZerobss+0x24>)
  b  LoopFillZerobss
 80015c0:	e002      	b.n	80015c8 <LoopFillZerobss>

080015c2 <FillZerobss>:
/* Zero fill the bss segment. */  
FillZerobss:
  movs  r3, #0
 80015c2:	2300      	movs	r3, #0
  str  r3, [r2], #4
 80015c4:	f842 3b04 	str.w	r3, [r2], #4

080015c8 <LoopFillZerobss>:
    
LoopFillZerobss:
  ldr  r3, = _ebss
 80015c8:	4b09      	ldr	r3, [pc, #36]	; (80015f0 <LoopFillZerobss+0x28>)
  cmp  r2, r3
 80015ca:	429a      	cmp	r2, r3
  bcc  FillZerobss
 80015cc:	d3f9      	bcc.n	80015c2 <FillZerobss>

/* Call the clock system intitialization function.*/
  bl  SystemInit   
 80015ce:	f7ff ffb3 	bl	8001538 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 80015d2:	f000 f811 	bl	80015f8 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 80015d6:	f7ff fecd 	bl	8001374 <main>
  bx  lr    
 80015da:	4770      	bx	lr
  ldr   sp, =_estack     /* set stack pointer */
 80015dc:	20020000 	.word	0x20020000
  ldr  r3, =_sidata
 80015e0:	08001688 	.word	0x08001688
  ldr  r0, =_sdata
 80015e4:	20000000 	.word	0x20000000
  ldr  r3, =_edata
 80015e8:	2000000c 	.word	0x2000000c
  ldr  r2, =_sbss
 80015ec:	2000000c 	.word	0x2000000c
  ldr  r3, = _ebss
 80015f0:	20000050 	.word	0x20000050

080015f4 <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 80015f4:	e7fe      	b.n	80015f4 <ADC_IRQHandler>
	...

080015f8 <__libc_init_array>:
 80015f8:	b570      	push	{r4, r5, r6, lr}
 80015fa:	4e0d      	ldr	r6, [pc, #52]	; (8001630 <__libc_init_array+0x38>)
 80015fc:	4c0d      	ldr	r4, [pc, #52]	; (8001634 <__libc_init_array+0x3c>)
 80015fe:	1ba4      	subs	r4, r4, r6
 8001600:	10a4      	asrs	r4, r4, #2
 8001602:	2500      	movs	r5, #0
 8001604:	42a5      	cmp	r5, r4
 8001606:	d109      	bne.n	800161c <__libc_init_array+0x24>
 8001608:	4e0b      	ldr	r6, [pc, #44]	; (8001638 <__libc_init_array+0x40>)
 800160a:	4c0c      	ldr	r4, [pc, #48]	; (800163c <__libc_init_array+0x44>)
 800160c:	f000 f820 	bl	8001650 <_init>
 8001610:	1ba4      	subs	r4, r4, r6
 8001612:	10a4      	asrs	r4, r4, #2
 8001614:	2500      	movs	r5, #0
 8001616:	42a5      	cmp	r5, r4
 8001618:	d105      	bne.n	8001626 <__libc_init_array+0x2e>
 800161a:	bd70      	pop	{r4, r5, r6, pc}
 800161c:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 8001620:	4798      	blx	r3
 8001622:	3501      	adds	r5, #1
 8001624:	e7ee      	b.n	8001604 <__libc_init_array+0xc>
 8001626:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 800162a:	4798      	blx	r3
 800162c:	3501      	adds	r5, #1
 800162e:	e7f2      	b.n	8001616 <__libc_init_array+0x1e>
 8001630:	08001680 	.word	0x08001680
 8001634:	08001680 	.word	0x08001680
 8001638:	08001680 	.word	0x08001680
 800163c:	08001684 	.word	0x08001684

08001640 <memset>:
 8001640:	4402      	add	r2, r0
 8001642:	4603      	mov	r3, r0
 8001644:	4293      	cmp	r3, r2
 8001646:	d100      	bne.n	800164a <memset+0xa>
 8001648:	4770      	bx	lr
 800164a:	f803 1b01 	strb.w	r1, [r3], #1
 800164e:	e7f9      	b.n	8001644 <memset+0x4>

08001650 <_init>:
 8001650:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8001652:	bf00      	nop
 8001654:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8001656:	bc08      	pop	{r3}
 8001658:	469e      	mov	lr, r3
 800165a:	4770      	bx	lr

0800165c <_fini>:
 800165c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800165e:	bf00      	nop
 8001660:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8001662:	bc08      	pop	{r3}
 8001664:	469e      	mov	lr, r3
 8001666:	4770      	bx	lr
