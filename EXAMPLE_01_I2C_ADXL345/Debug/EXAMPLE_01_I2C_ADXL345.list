
EXAMPLE_01_I2C_ADXL345.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000188  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         000031b4  08000188  08000188  00010188  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000018  0800333c  0800333c  0001333c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08003354  08003354  0002000c  2**0
                  CONTENTS
  4 .ARM          00000008  08003354  08003354  00013354  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  0800335c  0800335c  0002000c  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  0800335c  0800335c  0001335c  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08003360  08003360  00013360  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         0000000c  20000000  08003364  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00000094  2000000c  08003370  0002000c  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  200000a0  08003370  000200a0  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  0002000c  2**0
                  CONTENTS, READONLY
 12 .debug_info   00006721  00000000  00000000  0002003c  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_abbrev 000010dc  00000000  00000000  0002675d  2**0
                  CONTENTS, READONLY, DEBUGGING
 14 .debug_aranges 000006b8  00000000  00000000  00027840  2**3
                  CONTENTS, READONLY, DEBUGGING
 15 .debug_ranges 00000640  00000000  00000000  00027ef8  2**3
                  CONTENTS, READONLY, DEBUGGING
 16 .debug_macro  0001ef89  00000000  00000000  00028538  2**0
                  CONTENTS, READONLY, DEBUGGING
 17 .debug_line   00005b51  00000000  00000000  000474c1  2**0
                  CONTENTS, READONLY, DEBUGGING
 18 .debug_str    000bd21c  00000000  00000000  0004d012  2**0
                  CONTENTS, READONLY, DEBUGGING
 19 .comment      0000007b  00000000  00000000  0010a22e  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00001c3c  00000000  00000000  0010a2ac  2**2
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

08000188 <__do_global_dtors_aux>:
 8000188:	b510      	push	{r4, lr}
 800018a:	4c05      	ldr	r4, [pc, #20]	; (80001a0 <__do_global_dtors_aux+0x18>)
 800018c:	7823      	ldrb	r3, [r4, #0]
 800018e:	b933      	cbnz	r3, 800019e <__do_global_dtors_aux+0x16>
 8000190:	4b04      	ldr	r3, [pc, #16]	; (80001a4 <__do_global_dtors_aux+0x1c>)
 8000192:	b113      	cbz	r3, 800019a <__do_global_dtors_aux+0x12>
 8000194:	4804      	ldr	r0, [pc, #16]	; (80001a8 <__do_global_dtors_aux+0x20>)
 8000196:	f3af 8000 	nop.w
 800019a:	2301      	movs	r3, #1
 800019c:	7023      	strb	r3, [r4, #0]
 800019e:	bd10      	pop	{r4, pc}
 80001a0:	2000000c 	.word	0x2000000c
 80001a4:	00000000 	.word	0x00000000
 80001a8:	08003324 	.word	0x08003324

080001ac <frame_dummy>:
 80001ac:	b508      	push	{r3, lr}
 80001ae:	4b03      	ldr	r3, [pc, #12]	; (80001bc <frame_dummy+0x10>)
 80001b0:	b11b      	cbz	r3, 80001ba <frame_dummy+0xe>
 80001b2:	4903      	ldr	r1, [pc, #12]	; (80001c0 <frame_dummy+0x14>)
 80001b4:	4803      	ldr	r0, [pc, #12]	; (80001c4 <frame_dummy+0x18>)
 80001b6:	f3af 8000 	nop.w
 80001ba:	bd08      	pop	{r3, pc}
 80001bc:	00000000 	.word	0x00000000
 80001c0:	20000010 	.word	0x20000010
 80001c4:	08003324 	.word	0x08003324

080001c8 <__aeabi_drsub>:
 80001c8:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000
 80001cc:	e002      	b.n	80001d4 <__adddf3>
 80001ce:	bf00      	nop

080001d0 <__aeabi_dsub>:
 80001d0:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000

080001d4 <__adddf3>:
 80001d4:	b530      	push	{r4, r5, lr}
 80001d6:	ea4f 0441 	mov.w	r4, r1, lsl #1
 80001da:	ea4f 0543 	mov.w	r5, r3, lsl #1
 80001de:	ea94 0f05 	teq	r4, r5
 80001e2:	bf08      	it	eq
 80001e4:	ea90 0f02 	teqeq	r0, r2
 80001e8:	bf1f      	itttt	ne
 80001ea:	ea54 0c00 	orrsne.w	ip, r4, r0
 80001ee:	ea55 0c02 	orrsne.w	ip, r5, r2
 80001f2:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 80001f6:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80001fa:	f000 80e2 	beq.w	80003c2 <__adddf3+0x1ee>
 80001fe:	ea4f 5454 	mov.w	r4, r4, lsr #21
 8000202:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 8000206:	bfb8      	it	lt
 8000208:	426d      	neglt	r5, r5
 800020a:	dd0c      	ble.n	8000226 <__adddf3+0x52>
 800020c:	442c      	add	r4, r5
 800020e:	ea80 0202 	eor.w	r2, r0, r2
 8000212:	ea81 0303 	eor.w	r3, r1, r3
 8000216:	ea82 0000 	eor.w	r0, r2, r0
 800021a:	ea83 0101 	eor.w	r1, r3, r1
 800021e:	ea80 0202 	eor.w	r2, r0, r2
 8000222:	ea81 0303 	eor.w	r3, r1, r3
 8000226:	2d36      	cmp	r5, #54	; 0x36
 8000228:	bf88      	it	hi
 800022a:	bd30      	pophi	{r4, r5, pc}
 800022c:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8000230:	ea4f 3101 	mov.w	r1, r1, lsl #12
 8000234:	f44f 1c80 	mov.w	ip, #1048576	; 0x100000
 8000238:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 800023c:	d002      	beq.n	8000244 <__adddf3+0x70>
 800023e:	4240      	negs	r0, r0
 8000240:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000244:	f013 4f00 	tst.w	r3, #2147483648	; 0x80000000
 8000248:	ea4f 3303 	mov.w	r3, r3, lsl #12
 800024c:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 8000250:	d002      	beq.n	8000258 <__adddf3+0x84>
 8000252:	4252      	negs	r2, r2
 8000254:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000258:	ea94 0f05 	teq	r4, r5
 800025c:	f000 80a7 	beq.w	80003ae <__adddf3+0x1da>
 8000260:	f1a4 0401 	sub.w	r4, r4, #1
 8000264:	f1d5 0e20 	rsbs	lr, r5, #32
 8000268:	db0d      	blt.n	8000286 <__adddf3+0xb2>
 800026a:	fa02 fc0e 	lsl.w	ip, r2, lr
 800026e:	fa22 f205 	lsr.w	r2, r2, r5
 8000272:	1880      	adds	r0, r0, r2
 8000274:	f141 0100 	adc.w	r1, r1, #0
 8000278:	fa03 f20e 	lsl.w	r2, r3, lr
 800027c:	1880      	adds	r0, r0, r2
 800027e:	fa43 f305 	asr.w	r3, r3, r5
 8000282:	4159      	adcs	r1, r3
 8000284:	e00e      	b.n	80002a4 <__adddf3+0xd0>
 8000286:	f1a5 0520 	sub.w	r5, r5, #32
 800028a:	f10e 0e20 	add.w	lr, lr, #32
 800028e:	2a01      	cmp	r2, #1
 8000290:	fa03 fc0e 	lsl.w	ip, r3, lr
 8000294:	bf28      	it	cs
 8000296:	f04c 0c02 	orrcs.w	ip, ip, #2
 800029a:	fa43 f305 	asr.w	r3, r3, r5
 800029e:	18c0      	adds	r0, r0, r3
 80002a0:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 80002a4:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80002a8:	d507      	bpl.n	80002ba <__adddf3+0xe6>
 80002aa:	f04f 0e00 	mov.w	lr, #0
 80002ae:	f1dc 0c00 	rsbs	ip, ip, #0
 80002b2:	eb7e 0000 	sbcs.w	r0, lr, r0
 80002b6:	eb6e 0101 	sbc.w	r1, lr, r1
 80002ba:	f5b1 1f80 	cmp.w	r1, #1048576	; 0x100000
 80002be:	d31b      	bcc.n	80002f8 <__adddf3+0x124>
 80002c0:	f5b1 1f00 	cmp.w	r1, #2097152	; 0x200000
 80002c4:	d30c      	bcc.n	80002e0 <__adddf3+0x10c>
 80002c6:	0849      	lsrs	r1, r1, #1
 80002c8:	ea5f 0030 	movs.w	r0, r0, rrx
 80002cc:	ea4f 0c3c 	mov.w	ip, ip, rrx
 80002d0:	f104 0401 	add.w	r4, r4, #1
 80002d4:	ea4f 5244 	mov.w	r2, r4, lsl #21
 80002d8:	f512 0f80 	cmn.w	r2, #4194304	; 0x400000
 80002dc:	f080 809a 	bcs.w	8000414 <__adddf3+0x240>
 80002e0:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 80002e4:	bf08      	it	eq
 80002e6:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80002ea:	f150 0000 	adcs.w	r0, r0, #0
 80002ee:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80002f2:	ea41 0105 	orr.w	r1, r1, r5
 80002f6:	bd30      	pop	{r4, r5, pc}
 80002f8:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 80002fc:	4140      	adcs	r0, r0
 80002fe:	eb41 0101 	adc.w	r1, r1, r1
 8000302:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000306:	f1a4 0401 	sub.w	r4, r4, #1
 800030a:	d1e9      	bne.n	80002e0 <__adddf3+0x10c>
 800030c:	f091 0f00 	teq	r1, #0
 8000310:	bf04      	itt	eq
 8000312:	4601      	moveq	r1, r0
 8000314:	2000      	moveq	r0, #0
 8000316:	fab1 f381 	clz	r3, r1
 800031a:	bf08      	it	eq
 800031c:	3320      	addeq	r3, #32
 800031e:	f1a3 030b 	sub.w	r3, r3, #11
 8000322:	f1b3 0220 	subs.w	r2, r3, #32
 8000326:	da0c      	bge.n	8000342 <__adddf3+0x16e>
 8000328:	320c      	adds	r2, #12
 800032a:	dd08      	ble.n	800033e <__adddf3+0x16a>
 800032c:	f102 0c14 	add.w	ip, r2, #20
 8000330:	f1c2 020c 	rsb	r2, r2, #12
 8000334:	fa01 f00c 	lsl.w	r0, r1, ip
 8000338:	fa21 f102 	lsr.w	r1, r1, r2
 800033c:	e00c      	b.n	8000358 <__adddf3+0x184>
 800033e:	f102 0214 	add.w	r2, r2, #20
 8000342:	bfd8      	it	le
 8000344:	f1c2 0c20 	rsble	ip, r2, #32
 8000348:	fa01 f102 	lsl.w	r1, r1, r2
 800034c:	fa20 fc0c 	lsr.w	ip, r0, ip
 8000350:	bfdc      	itt	le
 8000352:	ea41 010c 	orrle.w	r1, r1, ip
 8000356:	4090      	lslle	r0, r2
 8000358:	1ae4      	subs	r4, r4, r3
 800035a:	bfa2      	ittt	ge
 800035c:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 8000360:	4329      	orrge	r1, r5
 8000362:	bd30      	popge	{r4, r5, pc}
 8000364:	ea6f 0404 	mvn.w	r4, r4
 8000368:	3c1f      	subs	r4, #31
 800036a:	da1c      	bge.n	80003a6 <__adddf3+0x1d2>
 800036c:	340c      	adds	r4, #12
 800036e:	dc0e      	bgt.n	800038e <__adddf3+0x1ba>
 8000370:	f104 0414 	add.w	r4, r4, #20
 8000374:	f1c4 0220 	rsb	r2, r4, #32
 8000378:	fa20 f004 	lsr.w	r0, r0, r4
 800037c:	fa01 f302 	lsl.w	r3, r1, r2
 8000380:	ea40 0003 	orr.w	r0, r0, r3
 8000384:	fa21 f304 	lsr.w	r3, r1, r4
 8000388:	ea45 0103 	orr.w	r1, r5, r3
 800038c:	bd30      	pop	{r4, r5, pc}
 800038e:	f1c4 040c 	rsb	r4, r4, #12
 8000392:	f1c4 0220 	rsb	r2, r4, #32
 8000396:	fa20 f002 	lsr.w	r0, r0, r2
 800039a:	fa01 f304 	lsl.w	r3, r1, r4
 800039e:	ea40 0003 	orr.w	r0, r0, r3
 80003a2:	4629      	mov	r1, r5
 80003a4:	bd30      	pop	{r4, r5, pc}
 80003a6:	fa21 f004 	lsr.w	r0, r1, r4
 80003aa:	4629      	mov	r1, r5
 80003ac:	bd30      	pop	{r4, r5, pc}
 80003ae:	f094 0f00 	teq	r4, #0
 80003b2:	f483 1380 	eor.w	r3, r3, #1048576	; 0x100000
 80003b6:	bf06      	itte	eq
 80003b8:	f481 1180 	eoreq.w	r1, r1, #1048576	; 0x100000
 80003bc:	3401      	addeq	r4, #1
 80003be:	3d01      	subne	r5, #1
 80003c0:	e74e      	b.n	8000260 <__adddf3+0x8c>
 80003c2:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80003c6:	bf18      	it	ne
 80003c8:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80003cc:	d029      	beq.n	8000422 <__adddf3+0x24e>
 80003ce:	ea94 0f05 	teq	r4, r5
 80003d2:	bf08      	it	eq
 80003d4:	ea90 0f02 	teqeq	r0, r2
 80003d8:	d005      	beq.n	80003e6 <__adddf3+0x212>
 80003da:	ea54 0c00 	orrs.w	ip, r4, r0
 80003de:	bf04      	itt	eq
 80003e0:	4619      	moveq	r1, r3
 80003e2:	4610      	moveq	r0, r2
 80003e4:	bd30      	pop	{r4, r5, pc}
 80003e6:	ea91 0f03 	teq	r1, r3
 80003ea:	bf1e      	ittt	ne
 80003ec:	2100      	movne	r1, #0
 80003ee:	2000      	movne	r0, #0
 80003f0:	bd30      	popne	{r4, r5, pc}
 80003f2:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 80003f6:	d105      	bne.n	8000404 <__adddf3+0x230>
 80003f8:	0040      	lsls	r0, r0, #1
 80003fa:	4149      	adcs	r1, r1
 80003fc:	bf28      	it	cs
 80003fe:	f041 4100 	orrcs.w	r1, r1, #2147483648	; 0x80000000
 8000402:	bd30      	pop	{r4, r5, pc}
 8000404:	f514 0480 	adds.w	r4, r4, #4194304	; 0x400000
 8000408:	bf3c      	itt	cc
 800040a:	f501 1180 	addcc.w	r1, r1, #1048576	; 0x100000
 800040e:	bd30      	popcc	{r4, r5, pc}
 8000410:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000414:	f045 41fe 	orr.w	r1, r5, #2130706432	; 0x7f000000
 8000418:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 800041c:	f04f 0000 	mov.w	r0, #0
 8000420:	bd30      	pop	{r4, r5, pc}
 8000422:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 8000426:	bf1a      	itte	ne
 8000428:	4619      	movne	r1, r3
 800042a:	4610      	movne	r0, r2
 800042c:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 8000430:	bf1c      	itt	ne
 8000432:	460b      	movne	r3, r1
 8000434:	4602      	movne	r2, r0
 8000436:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 800043a:	bf06      	itte	eq
 800043c:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 8000440:	ea91 0f03 	teqeq	r1, r3
 8000444:	f441 2100 	orrne.w	r1, r1, #524288	; 0x80000
 8000448:	bd30      	pop	{r4, r5, pc}
 800044a:	bf00      	nop

0800044c <__aeabi_ui2d>:
 800044c:	f090 0f00 	teq	r0, #0
 8000450:	bf04      	itt	eq
 8000452:	2100      	moveq	r1, #0
 8000454:	4770      	bxeq	lr
 8000456:	b530      	push	{r4, r5, lr}
 8000458:	f44f 6480 	mov.w	r4, #1024	; 0x400
 800045c:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000460:	f04f 0500 	mov.w	r5, #0
 8000464:	f04f 0100 	mov.w	r1, #0
 8000468:	e750      	b.n	800030c <__adddf3+0x138>
 800046a:	bf00      	nop

0800046c <__aeabi_i2d>:
 800046c:	f090 0f00 	teq	r0, #0
 8000470:	bf04      	itt	eq
 8000472:	2100      	moveq	r1, #0
 8000474:	4770      	bxeq	lr
 8000476:	b530      	push	{r4, r5, lr}
 8000478:	f44f 6480 	mov.w	r4, #1024	; 0x400
 800047c:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000480:	f010 4500 	ands.w	r5, r0, #2147483648	; 0x80000000
 8000484:	bf48      	it	mi
 8000486:	4240      	negmi	r0, r0
 8000488:	f04f 0100 	mov.w	r1, #0
 800048c:	e73e      	b.n	800030c <__adddf3+0x138>
 800048e:	bf00      	nop

08000490 <__aeabi_f2d>:
 8000490:	0042      	lsls	r2, r0, #1
 8000492:	ea4f 01e2 	mov.w	r1, r2, asr #3
 8000496:	ea4f 0131 	mov.w	r1, r1, rrx
 800049a:	ea4f 7002 	mov.w	r0, r2, lsl #28
 800049e:	bf1f      	itttt	ne
 80004a0:	f012 437f 	andsne.w	r3, r2, #4278190080	; 0xff000000
 80004a4:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
 80004a8:	f081 5160 	eorne.w	r1, r1, #939524096	; 0x38000000
 80004ac:	4770      	bxne	lr
 80004ae:	f032 427f 	bics.w	r2, r2, #4278190080	; 0xff000000
 80004b2:	bf08      	it	eq
 80004b4:	4770      	bxeq	lr
 80004b6:	f093 4f7f 	teq	r3, #4278190080	; 0xff000000
 80004ba:	bf04      	itt	eq
 80004bc:	f441 2100 	orreq.w	r1, r1, #524288	; 0x80000
 80004c0:	4770      	bxeq	lr
 80004c2:	b530      	push	{r4, r5, lr}
 80004c4:	f44f 7460 	mov.w	r4, #896	; 0x380
 80004c8:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80004cc:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 80004d0:	e71c      	b.n	800030c <__adddf3+0x138>
 80004d2:	bf00      	nop

080004d4 <__aeabi_ul2d>:
 80004d4:	ea50 0201 	orrs.w	r2, r0, r1
 80004d8:	bf08      	it	eq
 80004da:	4770      	bxeq	lr
 80004dc:	b530      	push	{r4, r5, lr}
 80004de:	f04f 0500 	mov.w	r5, #0
 80004e2:	e00a      	b.n	80004fa <__aeabi_l2d+0x16>

080004e4 <__aeabi_l2d>:
 80004e4:	ea50 0201 	orrs.w	r2, r0, r1
 80004e8:	bf08      	it	eq
 80004ea:	4770      	bxeq	lr
 80004ec:	b530      	push	{r4, r5, lr}
 80004ee:	f011 4500 	ands.w	r5, r1, #2147483648	; 0x80000000
 80004f2:	d502      	bpl.n	80004fa <__aeabi_l2d+0x16>
 80004f4:	4240      	negs	r0, r0
 80004f6:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80004fa:	f44f 6480 	mov.w	r4, #1024	; 0x400
 80004fe:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000502:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 8000506:	f43f aed8 	beq.w	80002ba <__adddf3+0xe6>
 800050a:	f04f 0203 	mov.w	r2, #3
 800050e:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 8000512:	bf18      	it	ne
 8000514:	3203      	addne	r2, #3
 8000516:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 800051a:	bf18      	it	ne
 800051c:	3203      	addne	r2, #3
 800051e:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 8000522:	f1c2 0320 	rsb	r3, r2, #32
 8000526:	fa00 fc03 	lsl.w	ip, r0, r3
 800052a:	fa20 f002 	lsr.w	r0, r0, r2
 800052e:	fa01 fe03 	lsl.w	lr, r1, r3
 8000532:	ea40 000e 	orr.w	r0, r0, lr
 8000536:	fa21 f102 	lsr.w	r1, r1, r2
 800053a:	4414      	add	r4, r2
 800053c:	e6bd      	b.n	80002ba <__adddf3+0xe6>
 800053e:	bf00      	nop

08000540 <__aeabi_dmul>:
 8000540:	b570      	push	{r4, r5, r6, lr}
 8000542:	f04f 0cff 	mov.w	ip, #255	; 0xff
 8000546:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 800054a:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 800054e:	bf1d      	ittte	ne
 8000550:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 8000554:	ea94 0f0c 	teqne	r4, ip
 8000558:	ea95 0f0c 	teqne	r5, ip
 800055c:	f000 f8de 	bleq	800071c <__aeabi_dmul+0x1dc>
 8000560:	442c      	add	r4, r5
 8000562:	ea81 0603 	eor.w	r6, r1, r3
 8000566:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 800056a:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 800056e:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 8000572:	bf18      	it	ne
 8000574:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 8000578:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 800057c:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8000580:	d038      	beq.n	80005f4 <__aeabi_dmul+0xb4>
 8000582:	fba0 ce02 	umull	ip, lr, r0, r2
 8000586:	f04f 0500 	mov.w	r5, #0
 800058a:	fbe1 e502 	umlal	lr, r5, r1, r2
 800058e:	f006 4200 	and.w	r2, r6, #2147483648	; 0x80000000
 8000592:	fbe0 e503 	umlal	lr, r5, r0, r3
 8000596:	f04f 0600 	mov.w	r6, #0
 800059a:	fbe1 5603 	umlal	r5, r6, r1, r3
 800059e:	f09c 0f00 	teq	ip, #0
 80005a2:	bf18      	it	ne
 80005a4:	f04e 0e01 	orrne.w	lr, lr, #1
 80005a8:	f1a4 04ff 	sub.w	r4, r4, #255	; 0xff
 80005ac:	f5b6 7f00 	cmp.w	r6, #512	; 0x200
 80005b0:	f564 7440 	sbc.w	r4, r4, #768	; 0x300
 80005b4:	d204      	bcs.n	80005c0 <__aeabi_dmul+0x80>
 80005b6:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 80005ba:	416d      	adcs	r5, r5
 80005bc:	eb46 0606 	adc.w	r6, r6, r6
 80005c0:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 80005c4:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 80005c8:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 80005cc:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 80005d0:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 80005d4:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 80005d8:	bf88      	it	hi
 80005da:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 80005de:	d81e      	bhi.n	800061e <__aeabi_dmul+0xde>
 80005e0:	f1be 4f00 	cmp.w	lr, #2147483648	; 0x80000000
 80005e4:	bf08      	it	eq
 80005e6:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 80005ea:	f150 0000 	adcs.w	r0, r0, #0
 80005ee:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80005f2:	bd70      	pop	{r4, r5, r6, pc}
 80005f4:	f006 4600 	and.w	r6, r6, #2147483648	; 0x80000000
 80005f8:	ea46 0101 	orr.w	r1, r6, r1
 80005fc:	ea40 0002 	orr.w	r0, r0, r2
 8000600:	ea81 0103 	eor.w	r1, r1, r3
 8000604:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 8000608:	bfc2      	ittt	gt
 800060a:	ebd4 050c 	rsbsgt	r5, r4, ip
 800060e:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 8000612:	bd70      	popgt	{r4, r5, r6, pc}
 8000614:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000618:	f04f 0e00 	mov.w	lr, #0
 800061c:	3c01      	subs	r4, #1
 800061e:	f300 80ab 	bgt.w	8000778 <__aeabi_dmul+0x238>
 8000622:	f114 0f36 	cmn.w	r4, #54	; 0x36
 8000626:	bfde      	ittt	le
 8000628:	2000      	movle	r0, #0
 800062a:	f001 4100 	andle.w	r1, r1, #2147483648	; 0x80000000
 800062e:	bd70      	pople	{r4, r5, r6, pc}
 8000630:	f1c4 0400 	rsb	r4, r4, #0
 8000634:	3c20      	subs	r4, #32
 8000636:	da35      	bge.n	80006a4 <__aeabi_dmul+0x164>
 8000638:	340c      	adds	r4, #12
 800063a:	dc1b      	bgt.n	8000674 <__aeabi_dmul+0x134>
 800063c:	f104 0414 	add.w	r4, r4, #20
 8000640:	f1c4 0520 	rsb	r5, r4, #32
 8000644:	fa00 f305 	lsl.w	r3, r0, r5
 8000648:	fa20 f004 	lsr.w	r0, r0, r4
 800064c:	fa01 f205 	lsl.w	r2, r1, r5
 8000650:	ea40 0002 	orr.w	r0, r0, r2
 8000654:	f001 4200 	and.w	r2, r1, #2147483648	; 0x80000000
 8000658:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 800065c:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 8000660:	fa21 f604 	lsr.w	r6, r1, r4
 8000664:	eb42 0106 	adc.w	r1, r2, r6
 8000668:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 800066c:	bf08      	it	eq
 800066e:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 8000672:	bd70      	pop	{r4, r5, r6, pc}
 8000674:	f1c4 040c 	rsb	r4, r4, #12
 8000678:	f1c4 0520 	rsb	r5, r4, #32
 800067c:	fa00 f304 	lsl.w	r3, r0, r4
 8000680:	fa20 f005 	lsr.w	r0, r0, r5
 8000684:	fa01 f204 	lsl.w	r2, r1, r4
 8000688:	ea40 0002 	orr.w	r0, r0, r2
 800068c:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000690:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 8000694:	f141 0100 	adc.w	r1, r1, #0
 8000698:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 800069c:	bf08      	it	eq
 800069e:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 80006a2:	bd70      	pop	{r4, r5, r6, pc}
 80006a4:	f1c4 0520 	rsb	r5, r4, #32
 80006a8:	fa00 f205 	lsl.w	r2, r0, r5
 80006ac:	ea4e 0e02 	orr.w	lr, lr, r2
 80006b0:	fa20 f304 	lsr.w	r3, r0, r4
 80006b4:	fa01 f205 	lsl.w	r2, r1, r5
 80006b8:	ea43 0302 	orr.w	r3, r3, r2
 80006bc:	fa21 f004 	lsr.w	r0, r1, r4
 80006c0:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 80006c4:	fa21 f204 	lsr.w	r2, r1, r4
 80006c8:	ea20 0002 	bic.w	r0, r0, r2
 80006cc:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 80006d0:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 80006d4:	bf08      	it	eq
 80006d6:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 80006da:	bd70      	pop	{r4, r5, r6, pc}
 80006dc:	f094 0f00 	teq	r4, #0
 80006e0:	d10f      	bne.n	8000702 <__aeabi_dmul+0x1c2>
 80006e2:	f001 4600 	and.w	r6, r1, #2147483648	; 0x80000000
 80006e6:	0040      	lsls	r0, r0, #1
 80006e8:	eb41 0101 	adc.w	r1, r1, r1
 80006ec:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 80006f0:	bf08      	it	eq
 80006f2:	3c01      	subeq	r4, #1
 80006f4:	d0f7      	beq.n	80006e6 <__aeabi_dmul+0x1a6>
 80006f6:	ea41 0106 	orr.w	r1, r1, r6
 80006fa:	f095 0f00 	teq	r5, #0
 80006fe:	bf18      	it	ne
 8000700:	4770      	bxne	lr
 8000702:	f003 4600 	and.w	r6, r3, #2147483648	; 0x80000000
 8000706:	0052      	lsls	r2, r2, #1
 8000708:	eb43 0303 	adc.w	r3, r3, r3
 800070c:	f413 1f80 	tst.w	r3, #1048576	; 0x100000
 8000710:	bf08      	it	eq
 8000712:	3d01      	subeq	r5, #1
 8000714:	d0f7      	beq.n	8000706 <__aeabi_dmul+0x1c6>
 8000716:	ea43 0306 	orr.w	r3, r3, r6
 800071a:	4770      	bx	lr
 800071c:	ea94 0f0c 	teq	r4, ip
 8000720:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 8000724:	bf18      	it	ne
 8000726:	ea95 0f0c 	teqne	r5, ip
 800072a:	d00c      	beq.n	8000746 <__aeabi_dmul+0x206>
 800072c:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000730:	bf18      	it	ne
 8000732:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8000736:	d1d1      	bne.n	80006dc <__aeabi_dmul+0x19c>
 8000738:	ea81 0103 	eor.w	r1, r1, r3
 800073c:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000740:	f04f 0000 	mov.w	r0, #0
 8000744:	bd70      	pop	{r4, r5, r6, pc}
 8000746:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 800074a:	bf06      	itte	eq
 800074c:	4610      	moveq	r0, r2
 800074e:	4619      	moveq	r1, r3
 8000750:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8000754:	d019      	beq.n	800078a <__aeabi_dmul+0x24a>
 8000756:	ea94 0f0c 	teq	r4, ip
 800075a:	d102      	bne.n	8000762 <__aeabi_dmul+0x222>
 800075c:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 8000760:	d113      	bne.n	800078a <__aeabi_dmul+0x24a>
 8000762:	ea95 0f0c 	teq	r5, ip
 8000766:	d105      	bne.n	8000774 <__aeabi_dmul+0x234>
 8000768:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 800076c:	bf1c      	itt	ne
 800076e:	4610      	movne	r0, r2
 8000770:	4619      	movne	r1, r3
 8000772:	d10a      	bne.n	800078a <__aeabi_dmul+0x24a>
 8000774:	ea81 0103 	eor.w	r1, r1, r3
 8000778:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 800077c:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000780:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 8000784:	f04f 0000 	mov.w	r0, #0
 8000788:	bd70      	pop	{r4, r5, r6, pc}
 800078a:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 800078e:	f441 0178 	orr.w	r1, r1, #16252928	; 0xf80000
 8000792:	bd70      	pop	{r4, r5, r6, pc}

08000794 <__aeabi_ddiv>:
 8000794:	b570      	push	{r4, r5, r6, lr}
 8000796:	f04f 0cff 	mov.w	ip, #255	; 0xff
 800079a:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 800079e:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 80007a2:	bf1d      	ittte	ne
 80007a4:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 80007a8:	ea94 0f0c 	teqne	r4, ip
 80007ac:	ea95 0f0c 	teqne	r5, ip
 80007b0:	f000 f8a7 	bleq	8000902 <__aeabi_ddiv+0x16e>
 80007b4:	eba4 0405 	sub.w	r4, r4, r5
 80007b8:	ea81 0e03 	eor.w	lr, r1, r3
 80007bc:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 80007c0:	ea4f 3101 	mov.w	r1, r1, lsl #12
 80007c4:	f000 8088 	beq.w	80008d8 <__aeabi_ddiv+0x144>
 80007c8:	ea4f 3303 	mov.w	r3, r3, lsl #12
 80007cc:	f04f 5580 	mov.w	r5, #268435456	; 0x10000000
 80007d0:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 80007d4:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 80007d8:	ea4f 2202 	mov.w	r2, r2, lsl #8
 80007dc:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 80007e0:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 80007e4:	ea4f 2600 	mov.w	r6, r0, lsl #8
 80007e8:	f00e 4100 	and.w	r1, lr, #2147483648	; 0x80000000
 80007ec:	429d      	cmp	r5, r3
 80007ee:	bf08      	it	eq
 80007f0:	4296      	cmpeq	r6, r2
 80007f2:	f144 04fd 	adc.w	r4, r4, #253	; 0xfd
 80007f6:	f504 7440 	add.w	r4, r4, #768	; 0x300
 80007fa:	d202      	bcs.n	8000802 <__aeabi_ddiv+0x6e>
 80007fc:	085b      	lsrs	r3, r3, #1
 80007fe:	ea4f 0232 	mov.w	r2, r2, rrx
 8000802:	1ab6      	subs	r6, r6, r2
 8000804:	eb65 0503 	sbc.w	r5, r5, r3
 8000808:	085b      	lsrs	r3, r3, #1
 800080a:	ea4f 0232 	mov.w	r2, r2, rrx
 800080e:	f44f 1080 	mov.w	r0, #1048576	; 0x100000
 8000812:	f44f 2c00 	mov.w	ip, #524288	; 0x80000
 8000816:	ebb6 0e02 	subs.w	lr, r6, r2
 800081a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800081e:	bf22      	ittt	cs
 8000820:	1ab6      	subcs	r6, r6, r2
 8000822:	4675      	movcs	r5, lr
 8000824:	ea40 000c 	orrcs.w	r0, r0, ip
 8000828:	085b      	lsrs	r3, r3, #1
 800082a:	ea4f 0232 	mov.w	r2, r2, rrx
 800082e:	ebb6 0e02 	subs.w	lr, r6, r2
 8000832:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000836:	bf22      	ittt	cs
 8000838:	1ab6      	subcs	r6, r6, r2
 800083a:	4675      	movcs	r5, lr
 800083c:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 8000840:	085b      	lsrs	r3, r3, #1
 8000842:	ea4f 0232 	mov.w	r2, r2, rrx
 8000846:	ebb6 0e02 	subs.w	lr, r6, r2
 800084a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800084e:	bf22      	ittt	cs
 8000850:	1ab6      	subcs	r6, r6, r2
 8000852:	4675      	movcs	r5, lr
 8000854:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 8000858:	085b      	lsrs	r3, r3, #1
 800085a:	ea4f 0232 	mov.w	r2, r2, rrx
 800085e:	ebb6 0e02 	subs.w	lr, r6, r2
 8000862:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000866:	bf22      	ittt	cs
 8000868:	1ab6      	subcs	r6, r6, r2
 800086a:	4675      	movcs	r5, lr
 800086c:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 8000870:	ea55 0e06 	orrs.w	lr, r5, r6
 8000874:	d018      	beq.n	80008a8 <__aeabi_ddiv+0x114>
 8000876:	ea4f 1505 	mov.w	r5, r5, lsl #4
 800087a:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 800087e:	ea4f 1606 	mov.w	r6, r6, lsl #4
 8000882:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 8000886:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 800088a:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 800088e:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 8000892:	d1c0      	bne.n	8000816 <__aeabi_ddiv+0x82>
 8000894:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000898:	d10b      	bne.n	80008b2 <__aeabi_ddiv+0x11e>
 800089a:	ea41 0100 	orr.w	r1, r1, r0
 800089e:	f04f 0000 	mov.w	r0, #0
 80008a2:	f04f 4c00 	mov.w	ip, #2147483648	; 0x80000000
 80008a6:	e7b6      	b.n	8000816 <__aeabi_ddiv+0x82>
 80008a8:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 80008ac:	bf04      	itt	eq
 80008ae:	4301      	orreq	r1, r0
 80008b0:	2000      	moveq	r0, #0
 80008b2:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 80008b6:	bf88      	it	hi
 80008b8:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 80008bc:	f63f aeaf 	bhi.w	800061e <__aeabi_dmul+0xde>
 80008c0:	ebb5 0c03 	subs.w	ip, r5, r3
 80008c4:	bf04      	itt	eq
 80008c6:	ebb6 0c02 	subseq.w	ip, r6, r2
 80008ca:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80008ce:	f150 0000 	adcs.w	r0, r0, #0
 80008d2:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80008d6:	bd70      	pop	{r4, r5, r6, pc}
 80008d8:	f00e 4e00 	and.w	lr, lr, #2147483648	; 0x80000000
 80008dc:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 80008e0:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 80008e4:	bfc2      	ittt	gt
 80008e6:	ebd4 050c 	rsbsgt	r5, r4, ip
 80008ea:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80008ee:	bd70      	popgt	{r4, r5, r6, pc}
 80008f0:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80008f4:	f04f 0e00 	mov.w	lr, #0
 80008f8:	3c01      	subs	r4, #1
 80008fa:	e690      	b.n	800061e <__aeabi_dmul+0xde>
 80008fc:	ea45 0e06 	orr.w	lr, r5, r6
 8000900:	e68d      	b.n	800061e <__aeabi_dmul+0xde>
 8000902:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 8000906:	ea94 0f0c 	teq	r4, ip
 800090a:	bf08      	it	eq
 800090c:	ea95 0f0c 	teqeq	r5, ip
 8000910:	f43f af3b 	beq.w	800078a <__aeabi_dmul+0x24a>
 8000914:	ea94 0f0c 	teq	r4, ip
 8000918:	d10a      	bne.n	8000930 <__aeabi_ddiv+0x19c>
 800091a:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 800091e:	f47f af34 	bne.w	800078a <__aeabi_dmul+0x24a>
 8000922:	ea95 0f0c 	teq	r5, ip
 8000926:	f47f af25 	bne.w	8000774 <__aeabi_dmul+0x234>
 800092a:	4610      	mov	r0, r2
 800092c:	4619      	mov	r1, r3
 800092e:	e72c      	b.n	800078a <__aeabi_dmul+0x24a>
 8000930:	ea95 0f0c 	teq	r5, ip
 8000934:	d106      	bne.n	8000944 <__aeabi_ddiv+0x1b0>
 8000936:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 800093a:	f43f aefd 	beq.w	8000738 <__aeabi_dmul+0x1f8>
 800093e:	4610      	mov	r0, r2
 8000940:	4619      	mov	r1, r3
 8000942:	e722      	b.n	800078a <__aeabi_dmul+0x24a>
 8000944:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000948:	bf18      	it	ne
 800094a:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800094e:	f47f aec5 	bne.w	80006dc <__aeabi_dmul+0x19c>
 8000952:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 8000956:	f47f af0d 	bne.w	8000774 <__aeabi_dmul+0x234>
 800095a:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 800095e:	f47f aeeb 	bne.w	8000738 <__aeabi_dmul+0x1f8>
 8000962:	e712      	b.n	800078a <__aeabi_dmul+0x24a>

08000964 <__aeabi_d2f>:
 8000964:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000968:	f1b2 43e0 	subs.w	r3, r2, #1879048192	; 0x70000000
 800096c:	bf24      	itt	cs
 800096e:	f5b3 1c00 	subscs.w	ip, r3, #2097152	; 0x200000
 8000972:	f1dc 5cfe 	rsbscs	ip, ip, #532676608	; 0x1fc00000
 8000976:	d90d      	bls.n	8000994 <__aeabi_d2f+0x30>
 8000978:	f001 4c00 	and.w	ip, r1, #2147483648	; 0x80000000
 800097c:	ea4f 02c0 	mov.w	r2, r0, lsl #3
 8000980:	ea4c 7050 	orr.w	r0, ip, r0, lsr #29
 8000984:	f1b2 4f00 	cmp.w	r2, #2147483648	; 0x80000000
 8000988:	eb40 0083 	adc.w	r0, r0, r3, lsl #2
 800098c:	bf08      	it	eq
 800098e:	f020 0001 	biceq.w	r0, r0, #1
 8000992:	4770      	bx	lr
 8000994:	f011 4f80 	tst.w	r1, #1073741824	; 0x40000000
 8000998:	d121      	bne.n	80009de <__aeabi_d2f+0x7a>
 800099a:	f113 7238 	adds.w	r2, r3, #48234496	; 0x2e00000
 800099e:	bfbc      	itt	lt
 80009a0:	f001 4000 	andlt.w	r0, r1, #2147483648	; 0x80000000
 80009a4:	4770      	bxlt	lr
 80009a6:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80009aa:	ea4f 5252 	mov.w	r2, r2, lsr #21
 80009ae:	f1c2 0218 	rsb	r2, r2, #24
 80009b2:	f1c2 0c20 	rsb	ip, r2, #32
 80009b6:	fa10 f30c 	lsls.w	r3, r0, ip
 80009ba:	fa20 f002 	lsr.w	r0, r0, r2
 80009be:	bf18      	it	ne
 80009c0:	f040 0001 	orrne.w	r0, r0, #1
 80009c4:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 80009c8:	ea4f 23d3 	mov.w	r3, r3, lsr #11
 80009cc:	fa03 fc0c 	lsl.w	ip, r3, ip
 80009d0:	ea40 000c 	orr.w	r0, r0, ip
 80009d4:	fa23 f302 	lsr.w	r3, r3, r2
 80009d8:	ea4f 0343 	mov.w	r3, r3, lsl #1
 80009dc:	e7cc      	b.n	8000978 <__aeabi_d2f+0x14>
 80009de:	ea7f 5362 	mvns.w	r3, r2, asr #21
 80009e2:	d107      	bne.n	80009f4 <__aeabi_d2f+0x90>
 80009e4:	ea50 3301 	orrs.w	r3, r0, r1, lsl #12
 80009e8:	bf1e      	ittt	ne
 80009ea:	f04f 40fe 	movne.w	r0, #2130706432	; 0x7f000000
 80009ee:	f440 0040 	orrne.w	r0, r0, #12582912	; 0xc00000
 80009f2:	4770      	bxne	lr
 80009f4:	f001 4000 	and.w	r0, r1, #2147483648	; 0x80000000
 80009f8:	f040 40fe 	orr.w	r0, r0, #2130706432	; 0x7f000000
 80009fc:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8000a00:	4770      	bx	lr
 8000a02:	bf00      	nop

08000a04 <__aeabi_uldivmod>:
 8000a04:	b953      	cbnz	r3, 8000a1c <__aeabi_uldivmod+0x18>
 8000a06:	b94a      	cbnz	r2, 8000a1c <__aeabi_uldivmod+0x18>
 8000a08:	2900      	cmp	r1, #0
 8000a0a:	bf08      	it	eq
 8000a0c:	2800      	cmpeq	r0, #0
 8000a0e:	bf1c      	itt	ne
 8000a10:	f04f 31ff 	movne.w	r1, #4294967295
 8000a14:	f04f 30ff 	movne.w	r0, #4294967295
 8000a18:	f000 b972 	b.w	8000d00 <__aeabi_idiv0>
 8000a1c:	f1ad 0c08 	sub.w	ip, sp, #8
 8000a20:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000a24:	f000 f806 	bl	8000a34 <__udivmoddi4>
 8000a28:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000a2c:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000a30:	b004      	add	sp, #16
 8000a32:	4770      	bx	lr

08000a34 <__udivmoddi4>:
 8000a34:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000a38:	9e08      	ldr	r6, [sp, #32]
 8000a3a:	4604      	mov	r4, r0
 8000a3c:	4688      	mov	r8, r1
 8000a3e:	2b00      	cmp	r3, #0
 8000a40:	d14b      	bne.n	8000ada <__udivmoddi4+0xa6>
 8000a42:	428a      	cmp	r2, r1
 8000a44:	4615      	mov	r5, r2
 8000a46:	d967      	bls.n	8000b18 <__udivmoddi4+0xe4>
 8000a48:	fab2 f282 	clz	r2, r2
 8000a4c:	b14a      	cbz	r2, 8000a62 <__udivmoddi4+0x2e>
 8000a4e:	f1c2 0720 	rsb	r7, r2, #32
 8000a52:	fa01 f302 	lsl.w	r3, r1, r2
 8000a56:	fa20 f707 	lsr.w	r7, r0, r7
 8000a5a:	4095      	lsls	r5, r2
 8000a5c:	ea47 0803 	orr.w	r8, r7, r3
 8000a60:	4094      	lsls	r4, r2
 8000a62:	ea4f 4e15 	mov.w	lr, r5, lsr #16
 8000a66:	0c23      	lsrs	r3, r4, #16
 8000a68:	fbb8 f7fe 	udiv	r7, r8, lr
 8000a6c:	fa1f fc85 	uxth.w	ip, r5
 8000a70:	fb0e 8817 	mls	r8, lr, r7, r8
 8000a74:	ea43 4308 	orr.w	r3, r3, r8, lsl #16
 8000a78:	fb07 f10c 	mul.w	r1, r7, ip
 8000a7c:	4299      	cmp	r1, r3
 8000a7e:	d909      	bls.n	8000a94 <__udivmoddi4+0x60>
 8000a80:	18eb      	adds	r3, r5, r3
 8000a82:	f107 30ff 	add.w	r0, r7, #4294967295
 8000a86:	f080 811b 	bcs.w	8000cc0 <__udivmoddi4+0x28c>
 8000a8a:	4299      	cmp	r1, r3
 8000a8c:	f240 8118 	bls.w	8000cc0 <__udivmoddi4+0x28c>
 8000a90:	3f02      	subs	r7, #2
 8000a92:	442b      	add	r3, r5
 8000a94:	1a5b      	subs	r3, r3, r1
 8000a96:	b2a4      	uxth	r4, r4
 8000a98:	fbb3 f0fe 	udiv	r0, r3, lr
 8000a9c:	fb0e 3310 	mls	r3, lr, r0, r3
 8000aa0:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000aa4:	fb00 fc0c 	mul.w	ip, r0, ip
 8000aa8:	45a4      	cmp	ip, r4
 8000aaa:	d909      	bls.n	8000ac0 <__udivmoddi4+0x8c>
 8000aac:	192c      	adds	r4, r5, r4
 8000aae:	f100 33ff 	add.w	r3, r0, #4294967295
 8000ab2:	f080 8107 	bcs.w	8000cc4 <__udivmoddi4+0x290>
 8000ab6:	45a4      	cmp	ip, r4
 8000ab8:	f240 8104 	bls.w	8000cc4 <__udivmoddi4+0x290>
 8000abc:	3802      	subs	r0, #2
 8000abe:	442c      	add	r4, r5
 8000ac0:	ea40 4007 	orr.w	r0, r0, r7, lsl #16
 8000ac4:	eba4 040c 	sub.w	r4, r4, ip
 8000ac8:	2700      	movs	r7, #0
 8000aca:	b11e      	cbz	r6, 8000ad4 <__udivmoddi4+0xa0>
 8000acc:	40d4      	lsrs	r4, r2
 8000ace:	2300      	movs	r3, #0
 8000ad0:	e9c6 4300 	strd	r4, r3, [r6]
 8000ad4:	4639      	mov	r1, r7
 8000ad6:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000ada:	428b      	cmp	r3, r1
 8000adc:	d909      	bls.n	8000af2 <__udivmoddi4+0xbe>
 8000ade:	2e00      	cmp	r6, #0
 8000ae0:	f000 80eb 	beq.w	8000cba <__udivmoddi4+0x286>
 8000ae4:	2700      	movs	r7, #0
 8000ae6:	e9c6 0100 	strd	r0, r1, [r6]
 8000aea:	4638      	mov	r0, r7
 8000aec:	4639      	mov	r1, r7
 8000aee:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000af2:	fab3 f783 	clz	r7, r3
 8000af6:	2f00      	cmp	r7, #0
 8000af8:	d147      	bne.n	8000b8a <__udivmoddi4+0x156>
 8000afa:	428b      	cmp	r3, r1
 8000afc:	d302      	bcc.n	8000b04 <__udivmoddi4+0xd0>
 8000afe:	4282      	cmp	r2, r0
 8000b00:	f200 80fa 	bhi.w	8000cf8 <__udivmoddi4+0x2c4>
 8000b04:	1a84      	subs	r4, r0, r2
 8000b06:	eb61 0303 	sbc.w	r3, r1, r3
 8000b0a:	2001      	movs	r0, #1
 8000b0c:	4698      	mov	r8, r3
 8000b0e:	2e00      	cmp	r6, #0
 8000b10:	d0e0      	beq.n	8000ad4 <__udivmoddi4+0xa0>
 8000b12:	e9c6 4800 	strd	r4, r8, [r6]
 8000b16:	e7dd      	b.n	8000ad4 <__udivmoddi4+0xa0>
 8000b18:	b902      	cbnz	r2, 8000b1c <__udivmoddi4+0xe8>
 8000b1a:	deff      	udf	#255	; 0xff
 8000b1c:	fab2 f282 	clz	r2, r2
 8000b20:	2a00      	cmp	r2, #0
 8000b22:	f040 808f 	bne.w	8000c44 <__udivmoddi4+0x210>
 8000b26:	1b49      	subs	r1, r1, r5
 8000b28:	ea4f 4e15 	mov.w	lr, r5, lsr #16
 8000b2c:	fa1f f885 	uxth.w	r8, r5
 8000b30:	2701      	movs	r7, #1
 8000b32:	fbb1 fcfe 	udiv	ip, r1, lr
 8000b36:	0c23      	lsrs	r3, r4, #16
 8000b38:	fb0e 111c 	mls	r1, lr, ip, r1
 8000b3c:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000b40:	fb08 f10c 	mul.w	r1, r8, ip
 8000b44:	4299      	cmp	r1, r3
 8000b46:	d907      	bls.n	8000b58 <__udivmoddi4+0x124>
 8000b48:	18eb      	adds	r3, r5, r3
 8000b4a:	f10c 30ff 	add.w	r0, ip, #4294967295
 8000b4e:	d202      	bcs.n	8000b56 <__udivmoddi4+0x122>
 8000b50:	4299      	cmp	r1, r3
 8000b52:	f200 80cd 	bhi.w	8000cf0 <__udivmoddi4+0x2bc>
 8000b56:	4684      	mov	ip, r0
 8000b58:	1a59      	subs	r1, r3, r1
 8000b5a:	b2a3      	uxth	r3, r4
 8000b5c:	fbb1 f0fe 	udiv	r0, r1, lr
 8000b60:	fb0e 1410 	mls	r4, lr, r0, r1
 8000b64:	ea43 4404 	orr.w	r4, r3, r4, lsl #16
 8000b68:	fb08 f800 	mul.w	r8, r8, r0
 8000b6c:	45a0      	cmp	r8, r4
 8000b6e:	d907      	bls.n	8000b80 <__udivmoddi4+0x14c>
 8000b70:	192c      	adds	r4, r5, r4
 8000b72:	f100 33ff 	add.w	r3, r0, #4294967295
 8000b76:	d202      	bcs.n	8000b7e <__udivmoddi4+0x14a>
 8000b78:	45a0      	cmp	r8, r4
 8000b7a:	f200 80b6 	bhi.w	8000cea <__udivmoddi4+0x2b6>
 8000b7e:	4618      	mov	r0, r3
 8000b80:	eba4 0408 	sub.w	r4, r4, r8
 8000b84:	ea40 400c 	orr.w	r0, r0, ip, lsl #16
 8000b88:	e79f      	b.n	8000aca <__udivmoddi4+0x96>
 8000b8a:	f1c7 0c20 	rsb	ip, r7, #32
 8000b8e:	40bb      	lsls	r3, r7
 8000b90:	fa22 fe0c 	lsr.w	lr, r2, ip
 8000b94:	ea4e 0e03 	orr.w	lr, lr, r3
 8000b98:	fa01 f407 	lsl.w	r4, r1, r7
 8000b9c:	fa20 f50c 	lsr.w	r5, r0, ip
 8000ba0:	fa21 f30c 	lsr.w	r3, r1, ip
 8000ba4:	ea4f 481e 	mov.w	r8, lr, lsr #16
 8000ba8:	4325      	orrs	r5, r4
 8000baa:	fbb3 f9f8 	udiv	r9, r3, r8
 8000bae:	0c2c      	lsrs	r4, r5, #16
 8000bb0:	fb08 3319 	mls	r3, r8, r9, r3
 8000bb4:	fa1f fa8e 	uxth.w	sl, lr
 8000bb8:	ea44 4303 	orr.w	r3, r4, r3, lsl #16
 8000bbc:	fb09 f40a 	mul.w	r4, r9, sl
 8000bc0:	429c      	cmp	r4, r3
 8000bc2:	fa02 f207 	lsl.w	r2, r2, r7
 8000bc6:	fa00 f107 	lsl.w	r1, r0, r7
 8000bca:	d90b      	bls.n	8000be4 <__udivmoddi4+0x1b0>
 8000bcc:	eb1e 0303 	adds.w	r3, lr, r3
 8000bd0:	f109 30ff 	add.w	r0, r9, #4294967295
 8000bd4:	f080 8087 	bcs.w	8000ce6 <__udivmoddi4+0x2b2>
 8000bd8:	429c      	cmp	r4, r3
 8000bda:	f240 8084 	bls.w	8000ce6 <__udivmoddi4+0x2b2>
 8000bde:	f1a9 0902 	sub.w	r9, r9, #2
 8000be2:	4473      	add	r3, lr
 8000be4:	1b1b      	subs	r3, r3, r4
 8000be6:	b2ad      	uxth	r5, r5
 8000be8:	fbb3 f0f8 	udiv	r0, r3, r8
 8000bec:	fb08 3310 	mls	r3, r8, r0, r3
 8000bf0:	ea45 4403 	orr.w	r4, r5, r3, lsl #16
 8000bf4:	fb00 fa0a 	mul.w	sl, r0, sl
 8000bf8:	45a2      	cmp	sl, r4
 8000bfa:	d908      	bls.n	8000c0e <__udivmoddi4+0x1da>
 8000bfc:	eb1e 0404 	adds.w	r4, lr, r4
 8000c00:	f100 33ff 	add.w	r3, r0, #4294967295
 8000c04:	d26b      	bcs.n	8000cde <__udivmoddi4+0x2aa>
 8000c06:	45a2      	cmp	sl, r4
 8000c08:	d969      	bls.n	8000cde <__udivmoddi4+0x2aa>
 8000c0a:	3802      	subs	r0, #2
 8000c0c:	4474      	add	r4, lr
 8000c0e:	ea40 4009 	orr.w	r0, r0, r9, lsl #16
 8000c12:	fba0 8902 	umull	r8, r9, r0, r2
 8000c16:	eba4 040a 	sub.w	r4, r4, sl
 8000c1a:	454c      	cmp	r4, r9
 8000c1c:	46c2      	mov	sl, r8
 8000c1e:	464b      	mov	r3, r9
 8000c20:	d354      	bcc.n	8000ccc <__udivmoddi4+0x298>
 8000c22:	d051      	beq.n	8000cc8 <__udivmoddi4+0x294>
 8000c24:	2e00      	cmp	r6, #0
 8000c26:	d069      	beq.n	8000cfc <__udivmoddi4+0x2c8>
 8000c28:	ebb1 050a 	subs.w	r5, r1, sl
 8000c2c:	eb64 0403 	sbc.w	r4, r4, r3
 8000c30:	fa04 fc0c 	lsl.w	ip, r4, ip
 8000c34:	40fd      	lsrs	r5, r7
 8000c36:	40fc      	lsrs	r4, r7
 8000c38:	ea4c 0505 	orr.w	r5, ip, r5
 8000c3c:	e9c6 5400 	strd	r5, r4, [r6]
 8000c40:	2700      	movs	r7, #0
 8000c42:	e747      	b.n	8000ad4 <__udivmoddi4+0xa0>
 8000c44:	f1c2 0320 	rsb	r3, r2, #32
 8000c48:	fa20 f703 	lsr.w	r7, r0, r3
 8000c4c:	4095      	lsls	r5, r2
 8000c4e:	fa01 f002 	lsl.w	r0, r1, r2
 8000c52:	fa21 f303 	lsr.w	r3, r1, r3
 8000c56:	ea4f 4e15 	mov.w	lr, r5, lsr #16
 8000c5a:	4338      	orrs	r0, r7
 8000c5c:	0c01      	lsrs	r1, r0, #16
 8000c5e:	fbb3 f7fe 	udiv	r7, r3, lr
 8000c62:	fa1f f885 	uxth.w	r8, r5
 8000c66:	fb0e 3317 	mls	r3, lr, r7, r3
 8000c6a:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000c6e:	fb07 f308 	mul.w	r3, r7, r8
 8000c72:	428b      	cmp	r3, r1
 8000c74:	fa04 f402 	lsl.w	r4, r4, r2
 8000c78:	d907      	bls.n	8000c8a <__udivmoddi4+0x256>
 8000c7a:	1869      	adds	r1, r5, r1
 8000c7c:	f107 3cff 	add.w	ip, r7, #4294967295
 8000c80:	d22f      	bcs.n	8000ce2 <__udivmoddi4+0x2ae>
 8000c82:	428b      	cmp	r3, r1
 8000c84:	d92d      	bls.n	8000ce2 <__udivmoddi4+0x2ae>
 8000c86:	3f02      	subs	r7, #2
 8000c88:	4429      	add	r1, r5
 8000c8a:	1acb      	subs	r3, r1, r3
 8000c8c:	b281      	uxth	r1, r0
 8000c8e:	fbb3 f0fe 	udiv	r0, r3, lr
 8000c92:	fb0e 3310 	mls	r3, lr, r0, r3
 8000c96:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000c9a:	fb00 f308 	mul.w	r3, r0, r8
 8000c9e:	428b      	cmp	r3, r1
 8000ca0:	d907      	bls.n	8000cb2 <__udivmoddi4+0x27e>
 8000ca2:	1869      	adds	r1, r5, r1
 8000ca4:	f100 3cff 	add.w	ip, r0, #4294967295
 8000ca8:	d217      	bcs.n	8000cda <__udivmoddi4+0x2a6>
 8000caa:	428b      	cmp	r3, r1
 8000cac:	d915      	bls.n	8000cda <__udivmoddi4+0x2a6>
 8000cae:	3802      	subs	r0, #2
 8000cb0:	4429      	add	r1, r5
 8000cb2:	1ac9      	subs	r1, r1, r3
 8000cb4:	ea40 4707 	orr.w	r7, r0, r7, lsl #16
 8000cb8:	e73b      	b.n	8000b32 <__udivmoddi4+0xfe>
 8000cba:	4637      	mov	r7, r6
 8000cbc:	4630      	mov	r0, r6
 8000cbe:	e709      	b.n	8000ad4 <__udivmoddi4+0xa0>
 8000cc0:	4607      	mov	r7, r0
 8000cc2:	e6e7      	b.n	8000a94 <__udivmoddi4+0x60>
 8000cc4:	4618      	mov	r0, r3
 8000cc6:	e6fb      	b.n	8000ac0 <__udivmoddi4+0x8c>
 8000cc8:	4541      	cmp	r1, r8
 8000cca:	d2ab      	bcs.n	8000c24 <__udivmoddi4+0x1f0>
 8000ccc:	ebb8 0a02 	subs.w	sl, r8, r2
 8000cd0:	eb69 020e 	sbc.w	r2, r9, lr
 8000cd4:	3801      	subs	r0, #1
 8000cd6:	4613      	mov	r3, r2
 8000cd8:	e7a4      	b.n	8000c24 <__udivmoddi4+0x1f0>
 8000cda:	4660      	mov	r0, ip
 8000cdc:	e7e9      	b.n	8000cb2 <__udivmoddi4+0x27e>
 8000cde:	4618      	mov	r0, r3
 8000ce0:	e795      	b.n	8000c0e <__udivmoddi4+0x1da>
 8000ce2:	4667      	mov	r7, ip
 8000ce4:	e7d1      	b.n	8000c8a <__udivmoddi4+0x256>
 8000ce6:	4681      	mov	r9, r0
 8000ce8:	e77c      	b.n	8000be4 <__udivmoddi4+0x1b0>
 8000cea:	3802      	subs	r0, #2
 8000cec:	442c      	add	r4, r5
 8000cee:	e747      	b.n	8000b80 <__udivmoddi4+0x14c>
 8000cf0:	f1ac 0c02 	sub.w	ip, ip, #2
 8000cf4:	442b      	add	r3, r5
 8000cf6:	e72f      	b.n	8000b58 <__udivmoddi4+0x124>
 8000cf8:	4638      	mov	r0, r7
 8000cfa:	e708      	b.n	8000b0e <__udivmoddi4+0xda>
 8000cfc:	4637      	mov	r7, r6
 8000cfe:	e6e9      	b.n	8000ad4 <__udivmoddi4+0xa0>

08000d00 <__aeabi_idiv0>:
 8000d00:	4770      	bx	lr
 8000d02:	bf00      	nop

08000d04 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8000d04:	b580      	push	{r7, lr}
 8000d06:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 8000d08:	4b0e      	ldr	r3, [pc, #56]	; (8000d44 <HAL_Init+0x40>)
 8000d0a:	681b      	ldr	r3, [r3, #0]
 8000d0c:	4a0d      	ldr	r2, [pc, #52]	; (8000d44 <HAL_Init+0x40>)
 8000d0e:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8000d12:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 8000d14:	4b0b      	ldr	r3, [pc, #44]	; (8000d44 <HAL_Init+0x40>)
 8000d16:	681b      	ldr	r3, [r3, #0]
 8000d18:	4a0a      	ldr	r2, [pc, #40]	; (8000d44 <HAL_Init+0x40>)
 8000d1a:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8000d1e:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8000d20:	4b08      	ldr	r3, [pc, #32]	; (8000d44 <HAL_Init+0x40>)
 8000d22:	681b      	ldr	r3, [r3, #0]
 8000d24:	4a07      	ldr	r2, [pc, #28]	; (8000d44 <HAL_Init+0x40>)
 8000d26:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8000d2a:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8000d2c:	2003      	movs	r0, #3
 8000d2e:	f000 f92f 	bl	8000f90 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8000d32:	2000      	movs	r0, #0
 8000d34:	f000 f808 	bl	8000d48 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8000d38:	f002 f9ca 	bl	80030d0 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8000d3c:	2300      	movs	r3, #0
}
 8000d3e:	4618      	mov	r0, r3
 8000d40:	bd80      	pop	{r7, pc}
 8000d42:	bf00      	nop
 8000d44:	40023c00 	.word	0x40023c00

08000d48 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8000d48:	b580      	push	{r7, lr}
 8000d4a:	b082      	sub	sp, #8
 8000d4c:	af00      	add	r7, sp, #0
 8000d4e:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8000d50:	4b12      	ldr	r3, [pc, #72]	; (8000d9c <HAL_InitTick+0x54>)
 8000d52:	681a      	ldr	r2, [r3, #0]
 8000d54:	4b12      	ldr	r3, [pc, #72]	; (8000da0 <HAL_InitTick+0x58>)
 8000d56:	781b      	ldrb	r3, [r3, #0]
 8000d58:	4619      	mov	r1, r3
 8000d5a:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8000d5e:	fbb3 f3f1 	udiv	r3, r3, r1
 8000d62:	fbb2 f3f3 	udiv	r3, r2, r3
 8000d66:	4618      	mov	r0, r3
 8000d68:	f000 f939 	bl	8000fde <HAL_SYSTICK_Config>
 8000d6c:	4603      	mov	r3, r0
 8000d6e:	2b00      	cmp	r3, #0
 8000d70:	d001      	beq.n	8000d76 <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 8000d72:	2301      	movs	r3, #1
 8000d74:	e00e      	b.n	8000d94 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8000d76:	687b      	ldr	r3, [r7, #4]
 8000d78:	2b0f      	cmp	r3, #15
 8000d7a:	d80a      	bhi.n	8000d92 <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8000d7c:	2200      	movs	r2, #0
 8000d7e:	6879      	ldr	r1, [r7, #4]
 8000d80:	f04f 30ff 	mov.w	r0, #4294967295
 8000d84:	f000 f90f 	bl	8000fa6 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8000d88:	4a06      	ldr	r2, [pc, #24]	; (8000da4 <HAL_InitTick+0x5c>)
 8000d8a:	687b      	ldr	r3, [r7, #4]
 8000d8c:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 8000d8e:	2300      	movs	r3, #0
 8000d90:	e000      	b.n	8000d94 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 8000d92:	2301      	movs	r3, #1
}
 8000d94:	4618      	mov	r0, r3
 8000d96:	3708      	adds	r7, #8
 8000d98:	46bd      	mov	sp, r7
 8000d9a:	bd80      	pop	{r7, pc}
 8000d9c:	20000008 	.word	0x20000008
 8000da0:	20000004 	.word	0x20000004
 8000da4:	20000000 	.word	0x20000000

08000da8 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8000da8:	b480      	push	{r7}
 8000daa:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8000dac:	4b06      	ldr	r3, [pc, #24]	; (8000dc8 <HAL_IncTick+0x20>)
 8000dae:	781b      	ldrb	r3, [r3, #0]
 8000db0:	461a      	mov	r2, r3
 8000db2:	4b06      	ldr	r3, [pc, #24]	; (8000dcc <HAL_IncTick+0x24>)
 8000db4:	681b      	ldr	r3, [r3, #0]
 8000db6:	4413      	add	r3, r2
 8000db8:	4a04      	ldr	r2, [pc, #16]	; (8000dcc <HAL_IncTick+0x24>)
 8000dba:	6013      	str	r3, [r2, #0]
}
 8000dbc:	bf00      	nop
 8000dbe:	46bd      	mov	sp, r7
 8000dc0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000dc4:	4770      	bx	lr
 8000dc6:	bf00      	nop
 8000dc8:	20000004 	.word	0x20000004
 8000dcc:	20000028 	.word	0x20000028

08000dd0 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8000dd0:	b480      	push	{r7}
 8000dd2:	af00      	add	r7, sp, #0
  return uwTick;
 8000dd4:	4b03      	ldr	r3, [pc, #12]	; (8000de4 <HAL_GetTick+0x14>)
 8000dd6:	681b      	ldr	r3, [r3, #0]
}
 8000dd8:	4618      	mov	r0, r3
 8000dda:	46bd      	mov	sp, r7
 8000ddc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000de0:	4770      	bx	lr
 8000de2:	bf00      	nop
 8000de4:	20000028 	.word	0x20000028

08000de8 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8000de8:	b580      	push	{r7, lr}
 8000dea:	b084      	sub	sp, #16
 8000dec:	af00      	add	r7, sp, #0
 8000dee:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8000df0:	f7ff ffee 	bl	8000dd0 <HAL_GetTick>
 8000df4:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8000df6:	687b      	ldr	r3, [r7, #4]
 8000df8:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8000dfa:	68fb      	ldr	r3, [r7, #12]
 8000dfc:	f1b3 3fff 	cmp.w	r3, #4294967295
 8000e00:	d005      	beq.n	8000e0e <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 8000e02:	4b09      	ldr	r3, [pc, #36]	; (8000e28 <HAL_Delay+0x40>)
 8000e04:	781b      	ldrb	r3, [r3, #0]
 8000e06:	461a      	mov	r2, r3
 8000e08:	68fb      	ldr	r3, [r7, #12]
 8000e0a:	4413      	add	r3, r2
 8000e0c:	60fb      	str	r3, [r7, #12]
  }

  while((HAL_GetTick() - tickstart) < wait)
 8000e0e:	bf00      	nop
 8000e10:	f7ff ffde 	bl	8000dd0 <HAL_GetTick>
 8000e14:	4602      	mov	r2, r0
 8000e16:	68bb      	ldr	r3, [r7, #8]
 8000e18:	1ad3      	subs	r3, r2, r3
 8000e1a:	68fa      	ldr	r2, [r7, #12]
 8000e1c:	429a      	cmp	r2, r3
 8000e1e:	d8f7      	bhi.n	8000e10 <HAL_Delay+0x28>
  {
  }
}
 8000e20:	bf00      	nop
 8000e22:	3710      	adds	r7, #16
 8000e24:	46bd      	mov	sp, r7
 8000e26:	bd80      	pop	{r7, pc}
 8000e28:	20000004 	.word	0x20000004

08000e2c <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8000e2c:	b480      	push	{r7}
 8000e2e:	b085      	sub	sp, #20
 8000e30:	af00      	add	r7, sp, #0
 8000e32:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8000e34:	687b      	ldr	r3, [r7, #4]
 8000e36:	f003 0307 	and.w	r3, r3, #7
 8000e3a:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8000e3c:	4b0c      	ldr	r3, [pc, #48]	; (8000e70 <__NVIC_SetPriorityGrouping+0x44>)
 8000e3e:	68db      	ldr	r3, [r3, #12]
 8000e40:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8000e42:	68ba      	ldr	r2, [r7, #8]
 8000e44:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8000e48:	4013      	ands	r3, r2
 8000e4a:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8000e4c:	68fb      	ldr	r3, [r7, #12]
 8000e4e:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8000e50:	68bb      	ldr	r3, [r7, #8]
 8000e52:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8000e54:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8000e58:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8000e5c:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8000e5e:	4a04      	ldr	r2, [pc, #16]	; (8000e70 <__NVIC_SetPriorityGrouping+0x44>)
 8000e60:	68bb      	ldr	r3, [r7, #8]
 8000e62:	60d3      	str	r3, [r2, #12]
}
 8000e64:	bf00      	nop
 8000e66:	3714      	adds	r7, #20
 8000e68:	46bd      	mov	sp, r7
 8000e6a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000e6e:	4770      	bx	lr
 8000e70:	e000ed00 	.word	0xe000ed00

08000e74 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8000e74:	b480      	push	{r7}
 8000e76:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8000e78:	4b04      	ldr	r3, [pc, #16]	; (8000e8c <__NVIC_GetPriorityGrouping+0x18>)
 8000e7a:	68db      	ldr	r3, [r3, #12]
 8000e7c:	0a1b      	lsrs	r3, r3, #8
 8000e7e:	f003 0307 	and.w	r3, r3, #7
}
 8000e82:	4618      	mov	r0, r3
 8000e84:	46bd      	mov	sp, r7
 8000e86:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000e8a:	4770      	bx	lr
 8000e8c:	e000ed00 	.word	0xe000ed00

08000e90 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8000e90:	b480      	push	{r7}
 8000e92:	b083      	sub	sp, #12
 8000e94:	af00      	add	r7, sp, #0
 8000e96:	4603      	mov	r3, r0
 8000e98:	6039      	str	r1, [r7, #0]
 8000e9a:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8000e9c:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000ea0:	2b00      	cmp	r3, #0
 8000ea2:	db0a      	blt.n	8000eba <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000ea4:	683b      	ldr	r3, [r7, #0]
 8000ea6:	b2da      	uxtb	r2, r3
 8000ea8:	490c      	ldr	r1, [pc, #48]	; (8000edc <__NVIC_SetPriority+0x4c>)
 8000eaa:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000eae:	0112      	lsls	r2, r2, #4
 8000eb0:	b2d2      	uxtb	r2, r2
 8000eb2:	440b      	add	r3, r1
 8000eb4:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8000eb8:	e00a      	b.n	8000ed0 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000eba:	683b      	ldr	r3, [r7, #0]
 8000ebc:	b2da      	uxtb	r2, r3
 8000ebe:	4908      	ldr	r1, [pc, #32]	; (8000ee0 <__NVIC_SetPriority+0x50>)
 8000ec0:	79fb      	ldrb	r3, [r7, #7]
 8000ec2:	f003 030f 	and.w	r3, r3, #15
 8000ec6:	3b04      	subs	r3, #4
 8000ec8:	0112      	lsls	r2, r2, #4
 8000eca:	b2d2      	uxtb	r2, r2
 8000ecc:	440b      	add	r3, r1
 8000ece:	761a      	strb	r2, [r3, #24]
}
 8000ed0:	bf00      	nop
 8000ed2:	370c      	adds	r7, #12
 8000ed4:	46bd      	mov	sp, r7
 8000ed6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000eda:	4770      	bx	lr
 8000edc:	e000e100 	.word	0xe000e100
 8000ee0:	e000ed00 	.word	0xe000ed00

08000ee4 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8000ee4:	b480      	push	{r7}
 8000ee6:	b089      	sub	sp, #36	; 0x24
 8000ee8:	af00      	add	r7, sp, #0
 8000eea:	60f8      	str	r0, [r7, #12]
 8000eec:	60b9      	str	r1, [r7, #8]
 8000eee:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8000ef0:	68fb      	ldr	r3, [r7, #12]
 8000ef2:	f003 0307 	and.w	r3, r3, #7
 8000ef6:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8000ef8:	69fb      	ldr	r3, [r7, #28]
 8000efa:	f1c3 0307 	rsb	r3, r3, #7
 8000efe:	2b04      	cmp	r3, #4
 8000f00:	bf28      	it	cs
 8000f02:	2304      	movcs	r3, #4
 8000f04:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8000f06:	69fb      	ldr	r3, [r7, #28]
 8000f08:	3304      	adds	r3, #4
 8000f0a:	2b06      	cmp	r3, #6
 8000f0c:	d902      	bls.n	8000f14 <NVIC_EncodePriority+0x30>
 8000f0e:	69fb      	ldr	r3, [r7, #28]
 8000f10:	3b03      	subs	r3, #3
 8000f12:	e000      	b.n	8000f16 <NVIC_EncodePriority+0x32>
 8000f14:	2300      	movs	r3, #0
 8000f16:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000f18:	f04f 32ff 	mov.w	r2, #4294967295
 8000f1c:	69bb      	ldr	r3, [r7, #24]
 8000f1e:	fa02 f303 	lsl.w	r3, r2, r3
 8000f22:	43da      	mvns	r2, r3
 8000f24:	68bb      	ldr	r3, [r7, #8]
 8000f26:	401a      	ands	r2, r3
 8000f28:	697b      	ldr	r3, [r7, #20]
 8000f2a:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8000f2c:	f04f 31ff 	mov.w	r1, #4294967295
 8000f30:	697b      	ldr	r3, [r7, #20]
 8000f32:	fa01 f303 	lsl.w	r3, r1, r3
 8000f36:	43d9      	mvns	r1, r3
 8000f38:	687b      	ldr	r3, [r7, #4]
 8000f3a:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000f3c:	4313      	orrs	r3, r2
         );
}
 8000f3e:	4618      	mov	r0, r3
 8000f40:	3724      	adds	r7, #36	; 0x24
 8000f42:	46bd      	mov	sp, r7
 8000f44:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000f48:	4770      	bx	lr
	...

08000f4c <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8000f4c:	b580      	push	{r7, lr}
 8000f4e:	b082      	sub	sp, #8
 8000f50:	af00      	add	r7, sp, #0
 8000f52:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8000f54:	687b      	ldr	r3, [r7, #4]
 8000f56:	3b01      	subs	r3, #1
 8000f58:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8000f5c:	d301      	bcc.n	8000f62 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8000f5e:	2301      	movs	r3, #1
 8000f60:	e00f      	b.n	8000f82 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8000f62:	4a0a      	ldr	r2, [pc, #40]	; (8000f8c <SysTick_Config+0x40>)
 8000f64:	687b      	ldr	r3, [r7, #4]
 8000f66:	3b01      	subs	r3, #1
 8000f68:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8000f6a:	210f      	movs	r1, #15
 8000f6c:	f04f 30ff 	mov.w	r0, #4294967295
 8000f70:	f7ff ff8e 	bl	8000e90 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8000f74:	4b05      	ldr	r3, [pc, #20]	; (8000f8c <SysTick_Config+0x40>)
 8000f76:	2200      	movs	r2, #0
 8000f78:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8000f7a:	4b04      	ldr	r3, [pc, #16]	; (8000f8c <SysTick_Config+0x40>)
 8000f7c:	2207      	movs	r2, #7
 8000f7e:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8000f80:	2300      	movs	r3, #0
}
 8000f82:	4618      	mov	r0, r3
 8000f84:	3708      	adds	r7, #8
 8000f86:	46bd      	mov	sp, r7
 8000f88:	bd80      	pop	{r7, pc}
 8000f8a:	bf00      	nop
 8000f8c:	e000e010 	.word	0xe000e010

08000f90 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8000f90:	b580      	push	{r7, lr}
 8000f92:	b082      	sub	sp, #8
 8000f94:	af00      	add	r7, sp, #0
 8000f96:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8000f98:	6878      	ldr	r0, [r7, #4]
 8000f9a:	f7ff ff47 	bl	8000e2c <__NVIC_SetPriorityGrouping>
}
 8000f9e:	bf00      	nop
 8000fa0:	3708      	adds	r7, #8
 8000fa2:	46bd      	mov	sp, r7
 8000fa4:	bd80      	pop	{r7, pc}

08000fa6 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8000fa6:	b580      	push	{r7, lr}
 8000fa8:	b086      	sub	sp, #24
 8000faa:	af00      	add	r7, sp, #0
 8000fac:	4603      	mov	r3, r0
 8000fae:	60b9      	str	r1, [r7, #8]
 8000fb0:	607a      	str	r2, [r7, #4]
 8000fb2:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8000fb4:	2300      	movs	r3, #0
 8000fb6:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8000fb8:	f7ff ff5c 	bl	8000e74 <__NVIC_GetPriorityGrouping>
 8000fbc:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8000fbe:	687a      	ldr	r2, [r7, #4]
 8000fc0:	68b9      	ldr	r1, [r7, #8]
 8000fc2:	6978      	ldr	r0, [r7, #20]
 8000fc4:	f7ff ff8e 	bl	8000ee4 <NVIC_EncodePriority>
 8000fc8:	4602      	mov	r2, r0
 8000fca:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8000fce:	4611      	mov	r1, r2
 8000fd0:	4618      	mov	r0, r3
 8000fd2:	f7ff ff5d 	bl	8000e90 <__NVIC_SetPriority>
}
 8000fd6:	bf00      	nop
 8000fd8:	3718      	adds	r7, #24
 8000fda:	46bd      	mov	sp, r7
 8000fdc:	bd80      	pop	{r7, pc}

08000fde <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8000fde:	b580      	push	{r7, lr}
 8000fe0:	b082      	sub	sp, #8
 8000fe2:	af00      	add	r7, sp, #0
 8000fe4:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8000fe6:	6878      	ldr	r0, [r7, #4]
 8000fe8:	f7ff ffb0 	bl	8000f4c <SysTick_Config>
 8000fec:	4603      	mov	r3, r0
}
 8000fee:	4618      	mov	r0, r3
 8000ff0:	3708      	adds	r7, #8
 8000ff2:	46bd      	mov	sp, r7
 8000ff4:	bd80      	pop	{r7, pc}
	...

08000ff8 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8000ff8:	b480      	push	{r7}
 8000ffa:	b089      	sub	sp, #36	; 0x24
 8000ffc:	af00      	add	r7, sp, #0
 8000ffe:	6078      	str	r0, [r7, #4]
 8001000:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 8001002:	2300      	movs	r3, #0
 8001004:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 8001006:	2300      	movs	r3, #0
 8001008:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 800100a:	2300      	movs	r3, #0
 800100c:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));
  assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 800100e:	2300      	movs	r3, #0
 8001010:	61fb      	str	r3, [r7, #28]
 8001012:	e16b      	b.n	80012ec <HAL_GPIO_Init+0x2f4>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 8001014:	2201      	movs	r2, #1
 8001016:	69fb      	ldr	r3, [r7, #28]
 8001018:	fa02 f303 	lsl.w	r3, r2, r3
 800101c:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 800101e:	683b      	ldr	r3, [r7, #0]
 8001020:	681b      	ldr	r3, [r3, #0]
 8001022:	697a      	ldr	r2, [r7, #20]
 8001024:	4013      	ands	r3, r2
 8001026:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 8001028:	693a      	ldr	r2, [r7, #16]
 800102a:	697b      	ldr	r3, [r7, #20]
 800102c:	429a      	cmp	r2, r3
 800102e:	f040 815a 	bne.w	80012e6 <HAL_GPIO_Init+0x2ee>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode == GPIO_MODE_AF_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 8001032:	683b      	ldr	r3, [r7, #0]
 8001034:	685b      	ldr	r3, [r3, #4]
 8001036:	2b02      	cmp	r3, #2
 8001038:	d003      	beq.n	8001042 <HAL_GPIO_Init+0x4a>
 800103a:	683b      	ldr	r3, [r7, #0]
 800103c:	685b      	ldr	r3, [r3, #4]
 800103e:	2b12      	cmp	r3, #18
 8001040:	d123      	bne.n	800108a <HAL_GPIO_Init+0x92>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 8001042:	69fb      	ldr	r3, [r7, #28]
 8001044:	08da      	lsrs	r2, r3, #3
 8001046:	687b      	ldr	r3, [r7, #4]
 8001048:	3208      	adds	r2, #8
 800104a:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800104e:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 8001050:	69fb      	ldr	r3, [r7, #28]
 8001052:	f003 0307 	and.w	r3, r3, #7
 8001056:	009b      	lsls	r3, r3, #2
 8001058:	220f      	movs	r2, #15
 800105a:	fa02 f303 	lsl.w	r3, r2, r3
 800105e:	43db      	mvns	r3, r3
 8001060:	69ba      	ldr	r2, [r7, #24]
 8001062:	4013      	ands	r3, r2
 8001064:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 8001066:	683b      	ldr	r3, [r7, #0]
 8001068:	691a      	ldr	r2, [r3, #16]
 800106a:	69fb      	ldr	r3, [r7, #28]
 800106c:	f003 0307 	and.w	r3, r3, #7
 8001070:	009b      	lsls	r3, r3, #2
 8001072:	fa02 f303 	lsl.w	r3, r2, r3
 8001076:	69ba      	ldr	r2, [r7, #24]
 8001078:	4313      	orrs	r3, r2
 800107a:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 800107c:	69fb      	ldr	r3, [r7, #28]
 800107e:	08da      	lsrs	r2, r3, #3
 8001080:	687b      	ldr	r3, [r7, #4]
 8001082:	3208      	adds	r2, #8
 8001084:	69b9      	ldr	r1, [r7, #24]
 8001086:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 800108a:	687b      	ldr	r3, [r7, #4]
 800108c:	681b      	ldr	r3, [r3, #0]
 800108e:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 8001090:	69fb      	ldr	r3, [r7, #28]
 8001092:	005b      	lsls	r3, r3, #1
 8001094:	2203      	movs	r2, #3
 8001096:	fa02 f303 	lsl.w	r3, r2, r3
 800109a:	43db      	mvns	r3, r3
 800109c:	69ba      	ldr	r2, [r7, #24]
 800109e:	4013      	ands	r3, r2
 80010a0:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 80010a2:	683b      	ldr	r3, [r7, #0]
 80010a4:	685b      	ldr	r3, [r3, #4]
 80010a6:	f003 0203 	and.w	r2, r3, #3
 80010aa:	69fb      	ldr	r3, [r7, #28]
 80010ac:	005b      	lsls	r3, r3, #1
 80010ae:	fa02 f303 	lsl.w	r3, r2, r3
 80010b2:	69ba      	ldr	r2, [r7, #24]
 80010b4:	4313      	orrs	r3, r2
 80010b6:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 80010b8:	687b      	ldr	r3, [r7, #4]
 80010ba:	69ba      	ldr	r2, [r7, #24]
 80010bc:	601a      	str	r2, [r3, #0]

      /* In case of Output or Alternate function mode selection */
      if((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 80010be:	683b      	ldr	r3, [r7, #0]
 80010c0:	685b      	ldr	r3, [r3, #4]
 80010c2:	2b01      	cmp	r3, #1
 80010c4:	d00b      	beq.n	80010de <HAL_GPIO_Init+0xe6>
 80010c6:	683b      	ldr	r3, [r7, #0]
 80010c8:	685b      	ldr	r3, [r3, #4]
 80010ca:	2b02      	cmp	r3, #2
 80010cc:	d007      	beq.n	80010de <HAL_GPIO_Init+0xe6>
         (GPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 80010ce:	683b      	ldr	r3, [r7, #0]
 80010d0:	685b      	ldr	r3, [r3, #4]
      if((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 80010d2:	2b11      	cmp	r3, #17
 80010d4:	d003      	beq.n	80010de <HAL_GPIO_Init+0xe6>
         (GPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 80010d6:	683b      	ldr	r3, [r7, #0]
 80010d8:	685b      	ldr	r3, [r3, #4]
 80010da:	2b12      	cmp	r3, #18
 80010dc:	d130      	bne.n	8001140 <HAL_GPIO_Init+0x148>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 80010de:	687b      	ldr	r3, [r7, #4]
 80010e0:	689b      	ldr	r3, [r3, #8]
 80010e2:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 80010e4:	69fb      	ldr	r3, [r7, #28]
 80010e6:	005b      	lsls	r3, r3, #1
 80010e8:	2203      	movs	r2, #3
 80010ea:	fa02 f303 	lsl.w	r3, r2, r3
 80010ee:	43db      	mvns	r3, r3
 80010f0:	69ba      	ldr	r2, [r7, #24]
 80010f2:	4013      	ands	r3, r2
 80010f4:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 80010f6:	683b      	ldr	r3, [r7, #0]
 80010f8:	68da      	ldr	r2, [r3, #12]
 80010fa:	69fb      	ldr	r3, [r7, #28]
 80010fc:	005b      	lsls	r3, r3, #1
 80010fe:	fa02 f303 	lsl.w	r3, r2, r3
 8001102:	69ba      	ldr	r2, [r7, #24]
 8001104:	4313      	orrs	r3, r2
 8001106:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 8001108:	687b      	ldr	r3, [r7, #4]
 800110a:	69ba      	ldr	r2, [r7, #24]
 800110c:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 800110e:	687b      	ldr	r3, [r7, #4]
 8001110:	685b      	ldr	r3, [r3, #4]
 8001112:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8001114:	2201      	movs	r2, #1
 8001116:	69fb      	ldr	r3, [r7, #28]
 8001118:	fa02 f303 	lsl.w	r3, r2, r3
 800111c:	43db      	mvns	r3, r3
 800111e:	69ba      	ldr	r2, [r7, #24]
 8001120:	4013      	ands	r3, r2
 8001122:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & GPIO_OUTPUT_TYPE) >> 4U) << position);
 8001124:	683b      	ldr	r3, [r7, #0]
 8001126:	685b      	ldr	r3, [r3, #4]
 8001128:	091b      	lsrs	r3, r3, #4
 800112a:	f003 0201 	and.w	r2, r3, #1
 800112e:	69fb      	ldr	r3, [r7, #28]
 8001130:	fa02 f303 	lsl.w	r3, r2, r3
 8001134:	69ba      	ldr	r2, [r7, #24]
 8001136:	4313      	orrs	r3, r2
 8001138:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 800113a:	687b      	ldr	r3, [r7, #4]
 800113c:	69ba      	ldr	r2, [r7, #24]
 800113e:	605a      	str	r2, [r3, #4]
      }

      /* Activate the Pull-up or Pull down resistor for the current IO */
      temp = GPIOx->PUPDR;
 8001140:	687b      	ldr	r3, [r7, #4]
 8001142:	68db      	ldr	r3, [r3, #12]
 8001144:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 8001146:	69fb      	ldr	r3, [r7, #28]
 8001148:	005b      	lsls	r3, r3, #1
 800114a:	2203      	movs	r2, #3
 800114c:	fa02 f303 	lsl.w	r3, r2, r3
 8001150:	43db      	mvns	r3, r3
 8001152:	69ba      	ldr	r2, [r7, #24]
 8001154:	4013      	ands	r3, r2
 8001156:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Pull) << (position * 2U));
 8001158:	683b      	ldr	r3, [r7, #0]
 800115a:	689a      	ldr	r2, [r3, #8]
 800115c:	69fb      	ldr	r3, [r7, #28]
 800115e:	005b      	lsls	r3, r3, #1
 8001160:	fa02 f303 	lsl.w	r3, r2, r3
 8001164:	69ba      	ldr	r2, [r7, #24]
 8001166:	4313      	orrs	r3, r2
 8001168:	61bb      	str	r3, [r7, #24]
      GPIOx->PUPDR = temp;
 800116a:	687b      	ldr	r3, [r7, #4]
 800116c:	69ba      	ldr	r2, [r7, #24]
 800116e:	60da      	str	r2, [r3, #12]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 8001170:	683b      	ldr	r3, [r7, #0]
 8001172:	685b      	ldr	r3, [r3, #4]
 8001174:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001178:	2b00      	cmp	r3, #0
 800117a:	f000 80b4 	beq.w	80012e6 <HAL_GPIO_Init+0x2ee>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 800117e:	2300      	movs	r3, #0
 8001180:	60fb      	str	r3, [r7, #12]
 8001182:	4b5f      	ldr	r3, [pc, #380]	; (8001300 <HAL_GPIO_Init+0x308>)
 8001184:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001186:	4a5e      	ldr	r2, [pc, #376]	; (8001300 <HAL_GPIO_Init+0x308>)
 8001188:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 800118c:	6453      	str	r3, [r2, #68]	; 0x44
 800118e:	4b5c      	ldr	r3, [pc, #368]	; (8001300 <HAL_GPIO_Init+0x308>)
 8001190:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001192:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8001196:	60fb      	str	r3, [r7, #12]
 8001198:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 800119a:	4a5a      	ldr	r2, [pc, #360]	; (8001304 <HAL_GPIO_Init+0x30c>)
 800119c:	69fb      	ldr	r3, [r7, #28]
 800119e:	089b      	lsrs	r3, r3, #2
 80011a0:	3302      	adds	r3, #2
 80011a2:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80011a6:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 80011a8:	69fb      	ldr	r3, [r7, #28]
 80011aa:	f003 0303 	and.w	r3, r3, #3
 80011ae:	009b      	lsls	r3, r3, #2
 80011b0:	220f      	movs	r2, #15
 80011b2:	fa02 f303 	lsl.w	r3, r2, r3
 80011b6:	43db      	mvns	r3, r3
 80011b8:	69ba      	ldr	r2, [r7, #24]
 80011ba:	4013      	ands	r3, r2
 80011bc:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 80011be:	687b      	ldr	r3, [r7, #4]
 80011c0:	4a51      	ldr	r2, [pc, #324]	; (8001308 <HAL_GPIO_Init+0x310>)
 80011c2:	4293      	cmp	r3, r2
 80011c4:	d02b      	beq.n	800121e <HAL_GPIO_Init+0x226>
 80011c6:	687b      	ldr	r3, [r7, #4]
 80011c8:	4a50      	ldr	r2, [pc, #320]	; (800130c <HAL_GPIO_Init+0x314>)
 80011ca:	4293      	cmp	r3, r2
 80011cc:	d025      	beq.n	800121a <HAL_GPIO_Init+0x222>
 80011ce:	687b      	ldr	r3, [r7, #4]
 80011d0:	4a4f      	ldr	r2, [pc, #316]	; (8001310 <HAL_GPIO_Init+0x318>)
 80011d2:	4293      	cmp	r3, r2
 80011d4:	d01f      	beq.n	8001216 <HAL_GPIO_Init+0x21e>
 80011d6:	687b      	ldr	r3, [r7, #4]
 80011d8:	4a4e      	ldr	r2, [pc, #312]	; (8001314 <HAL_GPIO_Init+0x31c>)
 80011da:	4293      	cmp	r3, r2
 80011dc:	d019      	beq.n	8001212 <HAL_GPIO_Init+0x21a>
 80011de:	687b      	ldr	r3, [r7, #4]
 80011e0:	4a4d      	ldr	r2, [pc, #308]	; (8001318 <HAL_GPIO_Init+0x320>)
 80011e2:	4293      	cmp	r3, r2
 80011e4:	d013      	beq.n	800120e <HAL_GPIO_Init+0x216>
 80011e6:	687b      	ldr	r3, [r7, #4]
 80011e8:	4a4c      	ldr	r2, [pc, #304]	; (800131c <HAL_GPIO_Init+0x324>)
 80011ea:	4293      	cmp	r3, r2
 80011ec:	d00d      	beq.n	800120a <HAL_GPIO_Init+0x212>
 80011ee:	687b      	ldr	r3, [r7, #4]
 80011f0:	4a4b      	ldr	r2, [pc, #300]	; (8001320 <HAL_GPIO_Init+0x328>)
 80011f2:	4293      	cmp	r3, r2
 80011f4:	d007      	beq.n	8001206 <HAL_GPIO_Init+0x20e>
 80011f6:	687b      	ldr	r3, [r7, #4]
 80011f8:	4a4a      	ldr	r2, [pc, #296]	; (8001324 <HAL_GPIO_Init+0x32c>)
 80011fa:	4293      	cmp	r3, r2
 80011fc:	d101      	bne.n	8001202 <HAL_GPIO_Init+0x20a>
 80011fe:	2307      	movs	r3, #7
 8001200:	e00e      	b.n	8001220 <HAL_GPIO_Init+0x228>
 8001202:	2308      	movs	r3, #8
 8001204:	e00c      	b.n	8001220 <HAL_GPIO_Init+0x228>
 8001206:	2306      	movs	r3, #6
 8001208:	e00a      	b.n	8001220 <HAL_GPIO_Init+0x228>
 800120a:	2305      	movs	r3, #5
 800120c:	e008      	b.n	8001220 <HAL_GPIO_Init+0x228>
 800120e:	2304      	movs	r3, #4
 8001210:	e006      	b.n	8001220 <HAL_GPIO_Init+0x228>
 8001212:	2303      	movs	r3, #3
 8001214:	e004      	b.n	8001220 <HAL_GPIO_Init+0x228>
 8001216:	2302      	movs	r3, #2
 8001218:	e002      	b.n	8001220 <HAL_GPIO_Init+0x228>
 800121a:	2301      	movs	r3, #1
 800121c:	e000      	b.n	8001220 <HAL_GPIO_Init+0x228>
 800121e:	2300      	movs	r3, #0
 8001220:	69fa      	ldr	r2, [r7, #28]
 8001222:	f002 0203 	and.w	r2, r2, #3
 8001226:	0092      	lsls	r2, r2, #2
 8001228:	4093      	lsls	r3, r2
 800122a:	69ba      	ldr	r2, [r7, #24]
 800122c:	4313      	orrs	r3, r2
 800122e:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 8001230:	4934      	ldr	r1, [pc, #208]	; (8001304 <HAL_GPIO_Init+0x30c>)
 8001232:	69fb      	ldr	r3, [r7, #28]
 8001234:	089b      	lsrs	r3, r3, #2
 8001236:	3302      	adds	r3, #2
 8001238:	69ba      	ldr	r2, [r7, #24]
 800123a:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 800123e:	4b3a      	ldr	r3, [pc, #232]	; (8001328 <HAL_GPIO_Init+0x330>)
 8001240:	681b      	ldr	r3, [r3, #0]
 8001242:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8001244:	693b      	ldr	r3, [r7, #16]
 8001246:	43db      	mvns	r3, r3
 8001248:	69ba      	ldr	r2, [r7, #24]
 800124a:	4013      	ands	r3, r2
 800124c:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 800124e:	683b      	ldr	r3, [r7, #0]
 8001250:	685b      	ldr	r3, [r3, #4]
 8001252:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8001256:	2b00      	cmp	r3, #0
 8001258:	d003      	beq.n	8001262 <HAL_GPIO_Init+0x26a>
        {
          temp |= iocurrent;
 800125a:	69ba      	ldr	r2, [r7, #24]
 800125c:	693b      	ldr	r3, [r7, #16]
 800125e:	4313      	orrs	r3, r2
 8001260:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 8001262:	4a31      	ldr	r2, [pc, #196]	; (8001328 <HAL_GPIO_Init+0x330>)
 8001264:	69bb      	ldr	r3, [r7, #24]
 8001266:	6013      	str	r3, [r2, #0]

        temp = EXTI->EMR;
 8001268:	4b2f      	ldr	r3, [pc, #188]	; (8001328 <HAL_GPIO_Init+0x330>)
 800126a:	685b      	ldr	r3, [r3, #4]
 800126c:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 800126e:	693b      	ldr	r3, [r7, #16]
 8001270:	43db      	mvns	r3, r3
 8001272:	69ba      	ldr	r2, [r7, #24]
 8001274:	4013      	ands	r3, r2
 8001276:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 8001278:	683b      	ldr	r3, [r7, #0]
 800127a:	685b      	ldr	r3, [r3, #4]
 800127c:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001280:	2b00      	cmp	r3, #0
 8001282:	d003      	beq.n	800128c <HAL_GPIO_Init+0x294>
        {
          temp |= iocurrent;
 8001284:	69ba      	ldr	r2, [r7, #24]
 8001286:	693b      	ldr	r3, [r7, #16]
 8001288:	4313      	orrs	r3, r2
 800128a:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 800128c:	4a26      	ldr	r2, [pc, #152]	; (8001328 <HAL_GPIO_Init+0x330>)
 800128e:	69bb      	ldr	r3, [r7, #24]
 8001290:	6053      	str	r3, [r2, #4]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 8001292:	4b25      	ldr	r3, [pc, #148]	; (8001328 <HAL_GPIO_Init+0x330>)
 8001294:	689b      	ldr	r3, [r3, #8]
 8001296:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8001298:	693b      	ldr	r3, [r7, #16]
 800129a:	43db      	mvns	r3, r3
 800129c:	69ba      	ldr	r2, [r7, #24]
 800129e:	4013      	ands	r3, r2
 80012a0:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 80012a2:	683b      	ldr	r3, [r7, #0]
 80012a4:	685b      	ldr	r3, [r3, #4]
 80012a6:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 80012aa:	2b00      	cmp	r3, #0
 80012ac:	d003      	beq.n	80012b6 <HAL_GPIO_Init+0x2be>
        {
          temp |= iocurrent;
 80012ae:	69ba      	ldr	r2, [r7, #24]
 80012b0:	693b      	ldr	r3, [r7, #16]
 80012b2:	4313      	orrs	r3, r2
 80012b4:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 80012b6:	4a1c      	ldr	r2, [pc, #112]	; (8001328 <HAL_GPIO_Init+0x330>)
 80012b8:	69bb      	ldr	r3, [r7, #24]
 80012ba:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 80012bc:	4b1a      	ldr	r3, [pc, #104]	; (8001328 <HAL_GPIO_Init+0x330>)
 80012be:	68db      	ldr	r3, [r3, #12]
 80012c0:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80012c2:	693b      	ldr	r3, [r7, #16]
 80012c4:	43db      	mvns	r3, r3
 80012c6:	69ba      	ldr	r2, [r7, #24]
 80012c8:	4013      	ands	r3, r2
 80012ca:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 80012cc:	683b      	ldr	r3, [r7, #0]
 80012ce:	685b      	ldr	r3, [r3, #4]
 80012d0:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 80012d4:	2b00      	cmp	r3, #0
 80012d6:	d003      	beq.n	80012e0 <HAL_GPIO_Init+0x2e8>
        {
          temp |= iocurrent;
 80012d8:	69ba      	ldr	r2, [r7, #24]
 80012da:	693b      	ldr	r3, [r7, #16]
 80012dc:	4313      	orrs	r3, r2
 80012de:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 80012e0:	4a11      	ldr	r2, [pc, #68]	; (8001328 <HAL_GPIO_Init+0x330>)
 80012e2:	69bb      	ldr	r3, [r7, #24]
 80012e4:	60d3      	str	r3, [r2, #12]
  for(position = 0U; position < GPIO_NUMBER; position++)
 80012e6:	69fb      	ldr	r3, [r7, #28]
 80012e8:	3301      	adds	r3, #1
 80012ea:	61fb      	str	r3, [r7, #28]
 80012ec:	69fb      	ldr	r3, [r7, #28]
 80012ee:	2b0f      	cmp	r3, #15
 80012f0:	f67f ae90 	bls.w	8001014 <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 80012f4:	bf00      	nop
 80012f6:	3724      	adds	r7, #36	; 0x24
 80012f8:	46bd      	mov	sp, r7
 80012fa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80012fe:	4770      	bx	lr
 8001300:	40023800 	.word	0x40023800
 8001304:	40013800 	.word	0x40013800
 8001308:	40020000 	.word	0x40020000
 800130c:	40020400 	.word	0x40020400
 8001310:	40020800 	.word	0x40020800
 8001314:	40020c00 	.word	0x40020c00
 8001318:	40021000 	.word	0x40021000
 800131c:	40021400 	.word	0x40021400
 8001320:	40021800 	.word	0x40021800
 8001324:	40021c00 	.word	0x40021c00
 8001328:	40013c00 	.word	0x40013c00

0800132c <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 800132c:	b480      	push	{r7}
 800132e:	b083      	sub	sp, #12
 8001330:	af00      	add	r7, sp, #0
 8001332:	6078      	str	r0, [r7, #4]
 8001334:	460b      	mov	r3, r1
 8001336:	807b      	strh	r3, [r7, #2]
 8001338:	4613      	mov	r3, r2
 800133a:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 800133c:	787b      	ldrb	r3, [r7, #1]
 800133e:	2b00      	cmp	r3, #0
 8001340:	d003      	beq.n	800134a <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 8001342:	887a      	ldrh	r2, [r7, #2]
 8001344:	687b      	ldr	r3, [r7, #4]
 8001346:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
  }
}
 8001348:	e003      	b.n	8001352 <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 800134a:	887b      	ldrh	r3, [r7, #2]
 800134c:	041a      	lsls	r2, r3, #16
 800134e:	687b      	ldr	r3, [r7, #4]
 8001350:	619a      	str	r2, [r3, #24]
}
 8001352:	bf00      	nop
 8001354:	370c      	adds	r7, #12
 8001356:	46bd      	mov	sp, r7
 8001358:	f85d 7b04 	ldr.w	r7, [sp], #4
 800135c:	4770      	bx	lr

0800135e <HAL_GPIO_TogglePin>:
  *                      x can be (A..I) to select the GPIO peripheral for STM32F40XX and STM32F427X devices.
  * @param  GPIO_Pin Specifies the pins to be toggled.
  * @retval None
  */
void HAL_GPIO_TogglePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 800135e:	b480      	push	{r7}
 8001360:	b083      	sub	sp, #12
 8001362:	af00      	add	r7, sp, #0
 8001364:	6078      	str	r0, [r7, #4]
 8001366:	460b      	mov	r3, r1
 8001368:	807b      	strh	r3, [r7, #2]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if ((GPIOx->ODR & GPIO_Pin) == GPIO_Pin)
 800136a:	687b      	ldr	r3, [r7, #4]
 800136c:	695a      	ldr	r2, [r3, #20]
 800136e:	887b      	ldrh	r3, [r7, #2]
 8001370:	401a      	ands	r2, r3
 8001372:	887b      	ldrh	r3, [r7, #2]
 8001374:	429a      	cmp	r2, r3
 8001376:	d104      	bne.n	8001382 <HAL_GPIO_TogglePin+0x24>
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << GPIO_NUMBER;
 8001378:	887b      	ldrh	r3, [r7, #2]
 800137a:	041a      	lsls	r2, r3, #16
 800137c:	687b      	ldr	r3, [r7, #4]
 800137e:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = GPIO_Pin;
  }
}
 8001380:	e002      	b.n	8001388 <HAL_GPIO_TogglePin+0x2a>
    GPIOx->BSRR = GPIO_Pin;
 8001382:	887a      	ldrh	r2, [r7, #2]
 8001384:	687b      	ldr	r3, [r7, #4]
 8001386:	619a      	str	r2, [r3, #24]
}
 8001388:	bf00      	nop
 800138a:	370c      	adds	r7, #12
 800138c:	46bd      	mov	sp, r7
 800138e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001392:	4770      	bx	lr

08001394 <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 8001394:	b580      	push	{r7, lr}
 8001396:	b084      	sub	sp, #16
 8001398:	af00      	add	r7, sp, #0
 800139a:	6078      	str	r0, [r7, #4]
  uint32_t freqrange;
  uint32_t pclk1;

  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 800139c:	687b      	ldr	r3, [r7, #4]
 800139e:	2b00      	cmp	r3, #0
 80013a0:	d101      	bne.n	80013a6 <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 80013a2:	2301      	movs	r3, #1
 80013a4:	e10f      	b.n	80015c6 <HAL_I2C_Init+0x232>
  assert_param(IS_I2C_DUAL_ADDRESS(hi2c->Init.DualAddressMode));
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 80013a6:	687b      	ldr	r3, [r7, #4]
 80013a8:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80013ac:	b2db      	uxtb	r3, r3
 80013ae:	2b00      	cmp	r3, #0
 80013b0:	d106      	bne.n	80013c0 <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 80013b2:	687b      	ldr	r3, [r7, #4]
 80013b4:	2200      	movs	r2, #0
 80013b6:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_I2C_MspInit(hi2c);
 80013ba:	6878      	ldr	r0, [r7, #4]
 80013bc:	f001 feb0 	bl	8003120 <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 80013c0:	687b      	ldr	r3, [r7, #4]
 80013c2:	2224      	movs	r2, #36	; 0x24
 80013c4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 80013c8:	687b      	ldr	r3, [r7, #4]
 80013ca:	681b      	ldr	r3, [r3, #0]
 80013cc:	681a      	ldr	r2, [r3, #0]
 80013ce:	687b      	ldr	r3, [r7, #4]
 80013d0:	681b      	ldr	r3, [r3, #0]
 80013d2:	f022 0201 	bic.w	r2, r2, #1
 80013d6:	601a      	str	r2, [r3, #0]

  /* Get PCLK1 frequency */
  pclk1 = HAL_RCC_GetPCLK1Freq();
 80013d8:	f001 fc76 	bl	8002cc8 <HAL_RCC_GetPCLK1Freq>
 80013dc:	60f8      	str	r0, [r7, #12]

  /* Check the minimum allowed PCLK1 frequency */
  if (I2C_MIN_PCLK_FREQ(pclk1, hi2c->Init.ClockSpeed) == 1U)
 80013de:	687b      	ldr	r3, [r7, #4]
 80013e0:	685b      	ldr	r3, [r3, #4]
 80013e2:	4a7b      	ldr	r2, [pc, #492]	; (80015d0 <HAL_I2C_Init+0x23c>)
 80013e4:	4293      	cmp	r3, r2
 80013e6:	d807      	bhi.n	80013f8 <HAL_I2C_Init+0x64>
 80013e8:	68fb      	ldr	r3, [r7, #12]
 80013ea:	4a7a      	ldr	r2, [pc, #488]	; (80015d4 <HAL_I2C_Init+0x240>)
 80013ec:	4293      	cmp	r3, r2
 80013ee:	bf94      	ite	ls
 80013f0:	2301      	movls	r3, #1
 80013f2:	2300      	movhi	r3, #0
 80013f4:	b2db      	uxtb	r3, r3
 80013f6:	e006      	b.n	8001406 <HAL_I2C_Init+0x72>
 80013f8:	68fb      	ldr	r3, [r7, #12]
 80013fa:	4a77      	ldr	r2, [pc, #476]	; (80015d8 <HAL_I2C_Init+0x244>)
 80013fc:	4293      	cmp	r3, r2
 80013fe:	bf94      	ite	ls
 8001400:	2301      	movls	r3, #1
 8001402:	2300      	movhi	r3, #0
 8001404:	b2db      	uxtb	r3, r3
 8001406:	2b00      	cmp	r3, #0
 8001408:	d001      	beq.n	800140e <HAL_I2C_Init+0x7a>
  {
    return HAL_ERROR;
 800140a:	2301      	movs	r3, #1
 800140c:	e0db      	b.n	80015c6 <HAL_I2C_Init+0x232>
  }

  /* Calculate frequency range */
  freqrange = I2C_FREQRANGE(pclk1);
 800140e:	68fb      	ldr	r3, [r7, #12]
 8001410:	4a72      	ldr	r2, [pc, #456]	; (80015dc <HAL_I2C_Init+0x248>)
 8001412:	fba2 2303 	umull	r2, r3, r2, r3
 8001416:	0c9b      	lsrs	r3, r3, #18
 8001418:	60bb      	str	r3, [r7, #8]

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Frequency range */
  MODIFY_REG(hi2c->Instance->CR2, I2C_CR2_FREQ, freqrange);
 800141a:	687b      	ldr	r3, [r7, #4]
 800141c:	681b      	ldr	r3, [r3, #0]
 800141e:	685b      	ldr	r3, [r3, #4]
 8001420:	f023 013f 	bic.w	r1, r3, #63	; 0x3f
 8001424:	687b      	ldr	r3, [r7, #4]
 8001426:	681b      	ldr	r3, [r3, #0]
 8001428:	68ba      	ldr	r2, [r7, #8]
 800142a:	430a      	orrs	r2, r1
 800142c:	605a      	str	r2, [r3, #4]

  /*---------------------------- I2Cx TRISE Configuration --------------------*/
  /* Configure I2Cx: Rise Time */
  MODIFY_REG(hi2c->Instance->TRISE, I2C_TRISE_TRISE, I2C_RISE_TIME(freqrange, hi2c->Init.ClockSpeed));
 800142e:	687b      	ldr	r3, [r7, #4]
 8001430:	681b      	ldr	r3, [r3, #0]
 8001432:	6a1b      	ldr	r3, [r3, #32]
 8001434:	f023 013f 	bic.w	r1, r3, #63	; 0x3f
 8001438:	687b      	ldr	r3, [r7, #4]
 800143a:	685b      	ldr	r3, [r3, #4]
 800143c:	4a64      	ldr	r2, [pc, #400]	; (80015d0 <HAL_I2C_Init+0x23c>)
 800143e:	4293      	cmp	r3, r2
 8001440:	d802      	bhi.n	8001448 <HAL_I2C_Init+0xb4>
 8001442:	68bb      	ldr	r3, [r7, #8]
 8001444:	3301      	adds	r3, #1
 8001446:	e009      	b.n	800145c <HAL_I2C_Init+0xc8>
 8001448:	68bb      	ldr	r3, [r7, #8]
 800144a:	f44f 7296 	mov.w	r2, #300	; 0x12c
 800144e:	fb02 f303 	mul.w	r3, r2, r3
 8001452:	4a63      	ldr	r2, [pc, #396]	; (80015e0 <HAL_I2C_Init+0x24c>)
 8001454:	fba2 2303 	umull	r2, r3, r2, r3
 8001458:	099b      	lsrs	r3, r3, #6
 800145a:	3301      	adds	r3, #1
 800145c:	687a      	ldr	r2, [r7, #4]
 800145e:	6812      	ldr	r2, [r2, #0]
 8001460:	430b      	orrs	r3, r1
 8001462:	6213      	str	r3, [r2, #32]

  /*---------------------------- I2Cx CCR Configuration ----------------------*/
  /* Configure I2Cx: Speed */
  MODIFY_REG(hi2c->Instance->CCR, (I2C_CCR_FS | I2C_CCR_DUTY | I2C_CCR_CCR), I2C_SPEED(pclk1, hi2c->Init.ClockSpeed, hi2c->Init.DutyCycle));
 8001464:	687b      	ldr	r3, [r7, #4]
 8001466:	681b      	ldr	r3, [r3, #0]
 8001468:	69db      	ldr	r3, [r3, #28]
 800146a:	f423 424f 	bic.w	r2, r3, #52992	; 0xcf00
 800146e:	f022 02ff 	bic.w	r2, r2, #255	; 0xff
 8001472:	687b      	ldr	r3, [r7, #4]
 8001474:	685b      	ldr	r3, [r3, #4]
 8001476:	4956      	ldr	r1, [pc, #344]	; (80015d0 <HAL_I2C_Init+0x23c>)
 8001478:	428b      	cmp	r3, r1
 800147a:	d80d      	bhi.n	8001498 <HAL_I2C_Init+0x104>
 800147c:	68fb      	ldr	r3, [r7, #12]
 800147e:	1e59      	subs	r1, r3, #1
 8001480:	687b      	ldr	r3, [r7, #4]
 8001482:	685b      	ldr	r3, [r3, #4]
 8001484:	005b      	lsls	r3, r3, #1
 8001486:	fbb1 f3f3 	udiv	r3, r1, r3
 800148a:	3301      	adds	r3, #1
 800148c:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8001490:	2b04      	cmp	r3, #4
 8001492:	bf38      	it	cc
 8001494:	2304      	movcc	r3, #4
 8001496:	e04f      	b.n	8001538 <HAL_I2C_Init+0x1a4>
 8001498:	687b      	ldr	r3, [r7, #4]
 800149a:	689b      	ldr	r3, [r3, #8]
 800149c:	2b00      	cmp	r3, #0
 800149e:	d111      	bne.n	80014c4 <HAL_I2C_Init+0x130>
 80014a0:	68fb      	ldr	r3, [r7, #12]
 80014a2:	1e58      	subs	r0, r3, #1
 80014a4:	687b      	ldr	r3, [r7, #4]
 80014a6:	6859      	ldr	r1, [r3, #4]
 80014a8:	460b      	mov	r3, r1
 80014aa:	005b      	lsls	r3, r3, #1
 80014ac:	440b      	add	r3, r1
 80014ae:	fbb0 f3f3 	udiv	r3, r0, r3
 80014b2:	3301      	adds	r3, #1
 80014b4:	f3c3 030b 	ubfx	r3, r3, #0, #12
 80014b8:	2b00      	cmp	r3, #0
 80014ba:	bf0c      	ite	eq
 80014bc:	2301      	moveq	r3, #1
 80014be:	2300      	movne	r3, #0
 80014c0:	b2db      	uxtb	r3, r3
 80014c2:	e012      	b.n	80014ea <HAL_I2C_Init+0x156>
 80014c4:	68fb      	ldr	r3, [r7, #12]
 80014c6:	1e58      	subs	r0, r3, #1
 80014c8:	687b      	ldr	r3, [r7, #4]
 80014ca:	6859      	ldr	r1, [r3, #4]
 80014cc:	460b      	mov	r3, r1
 80014ce:	009b      	lsls	r3, r3, #2
 80014d0:	440b      	add	r3, r1
 80014d2:	0099      	lsls	r1, r3, #2
 80014d4:	440b      	add	r3, r1
 80014d6:	fbb0 f3f3 	udiv	r3, r0, r3
 80014da:	3301      	adds	r3, #1
 80014dc:	f3c3 030b 	ubfx	r3, r3, #0, #12
 80014e0:	2b00      	cmp	r3, #0
 80014e2:	bf0c      	ite	eq
 80014e4:	2301      	moveq	r3, #1
 80014e6:	2300      	movne	r3, #0
 80014e8:	b2db      	uxtb	r3, r3
 80014ea:	2b00      	cmp	r3, #0
 80014ec:	d001      	beq.n	80014f2 <HAL_I2C_Init+0x15e>
 80014ee:	2301      	movs	r3, #1
 80014f0:	e022      	b.n	8001538 <HAL_I2C_Init+0x1a4>
 80014f2:	687b      	ldr	r3, [r7, #4]
 80014f4:	689b      	ldr	r3, [r3, #8]
 80014f6:	2b00      	cmp	r3, #0
 80014f8:	d10e      	bne.n	8001518 <HAL_I2C_Init+0x184>
 80014fa:	68fb      	ldr	r3, [r7, #12]
 80014fc:	1e58      	subs	r0, r3, #1
 80014fe:	687b      	ldr	r3, [r7, #4]
 8001500:	6859      	ldr	r1, [r3, #4]
 8001502:	460b      	mov	r3, r1
 8001504:	005b      	lsls	r3, r3, #1
 8001506:	440b      	add	r3, r1
 8001508:	fbb0 f3f3 	udiv	r3, r0, r3
 800150c:	3301      	adds	r3, #1
 800150e:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8001512:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8001516:	e00f      	b.n	8001538 <HAL_I2C_Init+0x1a4>
 8001518:	68fb      	ldr	r3, [r7, #12]
 800151a:	1e58      	subs	r0, r3, #1
 800151c:	687b      	ldr	r3, [r7, #4]
 800151e:	6859      	ldr	r1, [r3, #4]
 8001520:	460b      	mov	r3, r1
 8001522:	009b      	lsls	r3, r3, #2
 8001524:	440b      	add	r3, r1
 8001526:	0099      	lsls	r1, r3, #2
 8001528:	440b      	add	r3, r1
 800152a:	fbb0 f3f3 	udiv	r3, r0, r3
 800152e:	3301      	adds	r3, #1
 8001530:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8001534:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8001538:	6879      	ldr	r1, [r7, #4]
 800153a:	6809      	ldr	r1, [r1, #0]
 800153c:	4313      	orrs	r3, r2
 800153e:	61cb      	str	r3, [r1, #28]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  MODIFY_REG(hi2c->Instance->CR1, (I2C_CR1_ENGC | I2C_CR1_NOSTRETCH), (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode));
 8001540:	687b      	ldr	r3, [r7, #4]
 8001542:	681b      	ldr	r3, [r3, #0]
 8001544:	681b      	ldr	r3, [r3, #0]
 8001546:	f023 01c0 	bic.w	r1, r3, #192	; 0xc0
 800154a:	687b      	ldr	r3, [r7, #4]
 800154c:	69da      	ldr	r2, [r3, #28]
 800154e:	687b      	ldr	r3, [r7, #4]
 8001550:	6a1b      	ldr	r3, [r3, #32]
 8001552:	431a      	orrs	r2, r3
 8001554:	687b      	ldr	r3, [r7, #4]
 8001556:	681b      	ldr	r3, [r3, #0]
 8001558:	430a      	orrs	r2, r1
 800155a:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Configure I2Cx: Own Address1 and addressing mode */
  MODIFY_REG(hi2c->Instance->OAR1, (I2C_OAR1_ADDMODE | I2C_OAR1_ADD8_9 | I2C_OAR1_ADD1_7 | I2C_OAR1_ADD0), (hi2c->Init.AddressingMode | hi2c->Init.OwnAddress1));
 800155c:	687b      	ldr	r3, [r7, #4]
 800155e:	681b      	ldr	r3, [r3, #0]
 8001560:	689b      	ldr	r3, [r3, #8]
 8001562:	f423 4303 	bic.w	r3, r3, #33536	; 0x8300
 8001566:	f023 03ff 	bic.w	r3, r3, #255	; 0xff
 800156a:	687a      	ldr	r2, [r7, #4]
 800156c:	6911      	ldr	r1, [r2, #16]
 800156e:	687a      	ldr	r2, [r7, #4]
 8001570:	68d2      	ldr	r2, [r2, #12]
 8001572:	4311      	orrs	r1, r2
 8001574:	687a      	ldr	r2, [r7, #4]
 8001576:	6812      	ldr	r2, [r2, #0]
 8001578:	430b      	orrs	r3, r1
 800157a:	6093      	str	r3, [r2, #8]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Configure I2Cx: Dual mode and Own Address2 */
  MODIFY_REG(hi2c->Instance->OAR2, (I2C_OAR2_ENDUAL | I2C_OAR2_ADD2), (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2));
 800157c:	687b      	ldr	r3, [r7, #4]
 800157e:	681b      	ldr	r3, [r3, #0]
 8001580:	68db      	ldr	r3, [r3, #12]
 8001582:	f023 01ff 	bic.w	r1, r3, #255	; 0xff
 8001586:	687b      	ldr	r3, [r7, #4]
 8001588:	695a      	ldr	r2, [r3, #20]
 800158a:	687b      	ldr	r3, [r7, #4]
 800158c:	699b      	ldr	r3, [r3, #24]
 800158e:	431a      	orrs	r2, r3
 8001590:	687b      	ldr	r3, [r7, #4]
 8001592:	681b      	ldr	r3, [r3, #0]
 8001594:	430a      	orrs	r2, r1
 8001596:	60da      	str	r2, [r3, #12]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 8001598:	687b      	ldr	r3, [r7, #4]
 800159a:	681b      	ldr	r3, [r3, #0]
 800159c:	681a      	ldr	r2, [r3, #0]
 800159e:	687b      	ldr	r3, [r7, #4]
 80015a0:	681b      	ldr	r3, [r3, #0]
 80015a2:	f042 0201 	orr.w	r2, r2, #1
 80015a6:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 80015a8:	687b      	ldr	r3, [r7, #4]
 80015aa:	2200      	movs	r2, #0
 80015ac:	641a      	str	r2, [r3, #64]	; 0x40
  hi2c->State = HAL_I2C_STATE_READY;
 80015ae:	687b      	ldr	r3, [r7, #4]
 80015b0:	2220      	movs	r2, #32
 80015b2:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
  hi2c->PreviousState = I2C_STATE_NONE;
 80015b6:	687b      	ldr	r3, [r7, #4]
 80015b8:	2200      	movs	r2, #0
 80015ba:	631a      	str	r2, [r3, #48]	; 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 80015bc:	687b      	ldr	r3, [r7, #4]
 80015be:	2200      	movs	r2, #0
 80015c0:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  return HAL_OK;
 80015c4:	2300      	movs	r3, #0
}
 80015c6:	4618      	mov	r0, r3
 80015c8:	3710      	adds	r7, #16
 80015ca:	46bd      	mov	sp, r7
 80015cc:	bd80      	pop	{r7, pc}
 80015ce:	bf00      	nop
 80015d0:	000186a0 	.word	0x000186a0
 80015d4:	001e847f 	.word	0x001e847f
 80015d8:	003d08ff 	.word	0x003d08ff
 80015dc:	431bde83 	.word	0x431bde83
 80015e0:	10624dd3 	.word	0x10624dd3

080015e4 <HAL_I2C_Master_Transmit>:
  * @param  Size Amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Master_Transmit(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 80015e4:	b580      	push	{r7, lr}
 80015e6:	b088      	sub	sp, #32
 80015e8:	af02      	add	r7, sp, #8
 80015ea:	60f8      	str	r0, [r7, #12]
 80015ec:	607a      	str	r2, [r7, #4]
 80015ee:	461a      	mov	r2, r3
 80015f0:	460b      	mov	r3, r1
 80015f2:	817b      	strh	r3, [r7, #10]
 80015f4:	4613      	mov	r3, r2
 80015f6:	813b      	strh	r3, [r7, #8]
  /* Init tickstart for timeout management*/
  uint32_t tickstart = HAL_GetTick();
 80015f8:	f7ff fbea 	bl	8000dd0 <HAL_GetTick>
 80015fc:	6178      	str	r0, [r7, #20]

  if (hi2c->State == HAL_I2C_STATE_READY)
 80015fe:	68fb      	ldr	r3, [r7, #12]
 8001600:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8001604:	b2db      	uxtb	r3, r3
 8001606:	2b20      	cmp	r3, #32
 8001608:	f040 80e0 	bne.w	80017cc <HAL_I2C_Master_Transmit+0x1e8>
  {
    /* Wait until BUSY flag is reset */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 800160c:	697b      	ldr	r3, [r7, #20]
 800160e:	9300      	str	r3, [sp, #0]
 8001610:	2319      	movs	r3, #25
 8001612:	2201      	movs	r2, #1
 8001614:	4970      	ldr	r1, [pc, #448]	; (80017d8 <HAL_I2C_Master_Transmit+0x1f4>)
 8001616:	68f8      	ldr	r0, [r7, #12]
 8001618:	f000 fd70 	bl	80020fc <I2C_WaitOnFlagUntilTimeout>
 800161c:	4603      	mov	r3, r0
 800161e:	2b00      	cmp	r3, #0
 8001620:	d001      	beq.n	8001626 <HAL_I2C_Master_Transmit+0x42>
    {
      return HAL_BUSY;
 8001622:	2302      	movs	r3, #2
 8001624:	e0d3      	b.n	80017ce <HAL_I2C_Master_Transmit+0x1ea>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 8001626:	68fb      	ldr	r3, [r7, #12]
 8001628:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 800162c:	2b01      	cmp	r3, #1
 800162e:	d101      	bne.n	8001634 <HAL_I2C_Master_Transmit+0x50>
 8001630:	2302      	movs	r3, #2
 8001632:	e0cc      	b.n	80017ce <HAL_I2C_Master_Transmit+0x1ea>
 8001634:	68fb      	ldr	r3, [r7, #12]
 8001636:	2201      	movs	r2, #1
 8001638:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Check if the I2C is already enabled */
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 800163c:	68fb      	ldr	r3, [r7, #12]
 800163e:	681b      	ldr	r3, [r3, #0]
 8001640:	681b      	ldr	r3, [r3, #0]
 8001642:	f003 0301 	and.w	r3, r3, #1
 8001646:	2b01      	cmp	r3, #1
 8001648:	d007      	beq.n	800165a <HAL_I2C_Master_Transmit+0x76>
    {
      /* Enable I2C peripheral */
      __HAL_I2C_ENABLE(hi2c);
 800164a:	68fb      	ldr	r3, [r7, #12]
 800164c:	681b      	ldr	r3, [r3, #0]
 800164e:	681a      	ldr	r2, [r3, #0]
 8001650:	68fb      	ldr	r3, [r7, #12]
 8001652:	681b      	ldr	r3, [r3, #0]
 8001654:	f042 0201 	orr.w	r2, r2, #1
 8001658:	601a      	str	r2, [r3, #0]
    }

    /* Disable Pos */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 800165a:	68fb      	ldr	r3, [r7, #12]
 800165c:	681b      	ldr	r3, [r3, #0]
 800165e:	681a      	ldr	r2, [r3, #0]
 8001660:	68fb      	ldr	r3, [r7, #12]
 8001662:	681b      	ldr	r3, [r3, #0]
 8001664:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8001668:	601a      	str	r2, [r3, #0]

    hi2c->State       = HAL_I2C_STATE_BUSY_TX;
 800166a:	68fb      	ldr	r3, [r7, #12]
 800166c:	2221      	movs	r2, #33	; 0x21
 800166e:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode        = HAL_I2C_MODE_MASTER;
 8001672:	68fb      	ldr	r3, [r7, #12]
 8001674:	2210      	movs	r2, #16
 8001676:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    hi2c->ErrorCode   = HAL_I2C_ERROR_NONE;
 800167a:	68fb      	ldr	r3, [r7, #12]
 800167c:	2200      	movs	r2, #0
 800167e:	641a      	str	r2, [r3, #64]	; 0x40

    /* Prepare transfer parameters */
    hi2c->pBuffPtr    = pData;
 8001680:	68fb      	ldr	r3, [r7, #12]
 8001682:	687a      	ldr	r2, [r7, #4]
 8001684:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount   = Size;
 8001686:	68fb      	ldr	r3, [r7, #12]
 8001688:	893a      	ldrh	r2, [r7, #8]
 800168a:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferSize    = hi2c->XferCount;
 800168c:	68fb      	ldr	r3, [r7, #12]
 800168e:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8001690:	b29a      	uxth	r2, r3
 8001692:	68fb      	ldr	r3, [r7, #12]
 8001694:	851a      	strh	r2, [r3, #40]	; 0x28
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 8001696:	68fb      	ldr	r3, [r7, #12]
 8001698:	4a50      	ldr	r2, [pc, #320]	; (80017dc <HAL_I2C_Master_Transmit+0x1f8>)
 800169a:	62da      	str	r2, [r3, #44]	; 0x2c

    /* Send Slave Address */
    if (I2C_MasterRequestWrite(hi2c, DevAddress, Timeout, tickstart) != HAL_OK)
 800169c:	8979      	ldrh	r1, [r7, #10]
 800169e:	697b      	ldr	r3, [r7, #20]
 80016a0:	6a3a      	ldr	r2, [r7, #32]
 80016a2:	68f8      	ldr	r0, [r7, #12]
 80016a4:	f000 fbe4 	bl	8001e70 <I2C_MasterRequestWrite>
 80016a8:	4603      	mov	r3, r0
 80016aa:	2b00      	cmp	r3, #0
 80016ac:	d001      	beq.n	80016b2 <HAL_I2C_Master_Transmit+0xce>
    {
      return HAL_ERROR;
 80016ae:	2301      	movs	r3, #1
 80016b0:	e08d      	b.n	80017ce <HAL_I2C_Master_Transmit+0x1ea>
    }

    /* Clear ADDR flag */
    __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 80016b2:	2300      	movs	r3, #0
 80016b4:	613b      	str	r3, [r7, #16]
 80016b6:	68fb      	ldr	r3, [r7, #12]
 80016b8:	681b      	ldr	r3, [r3, #0]
 80016ba:	695b      	ldr	r3, [r3, #20]
 80016bc:	613b      	str	r3, [r7, #16]
 80016be:	68fb      	ldr	r3, [r7, #12]
 80016c0:	681b      	ldr	r3, [r3, #0]
 80016c2:	699b      	ldr	r3, [r3, #24]
 80016c4:	613b      	str	r3, [r7, #16]
 80016c6:	693b      	ldr	r3, [r7, #16]

    while (hi2c->XferSize > 0U)
 80016c8:	e066      	b.n	8001798 <HAL_I2C_Master_Transmit+0x1b4>
    {
      /* Wait until TXE flag is set */
      if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 80016ca:	697a      	ldr	r2, [r7, #20]
 80016cc:	6a39      	ldr	r1, [r7, #32]
 80016ce:	68f8      	ldr	r0, [r7, #12]
 80016d0:	f000 fdea 	bl	80022a8 <I2C_WaitOnTXEFlagUntilTimeout>
 80016d4:	4603      	mov	r3, r0
 80016d6:	2b00      	cmp	r3, #0
 80016d8:	d00d      	beq.n	80016f6 <HAL_I2C_Master_Transmit+0x112>
      {
        if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 80016da:	68fb      	ldr	r3, [r7, #12]
 80016dc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80016de:	2b04      	cmp	r3, #4
 80016e0:	d107      	bne.n	80016f2 <HAL_I2C_Master_Transmit+0x10e>
        {
          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80016e2:	68fb      	ldr	r3, [r7, #12]
 80016e4:	681b      	ldr	r3, [r3, #0]
 80016e6:	681a      	ldr	r2, [r3, #0]
 80016e8:	68fb      	ldr	r3, [r7, #12]
 80016ea:	681b      	ldr	r3, [r3, #0]
 80016ec:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 80016f0:	601a      	str	r2, [r3, #0]
        }
        return HAL_ERROR;
 80016f2:	2301      	movs	r3, #1
 80016f4:	e06b      	b.n	80017ce <HAL_I2C_Master_Transmit+0x1ea>
      }

      /* Write data to DR */
      hi2c->Instance->DR = *hi2c->pBuffPtr;
 80016f6:	68fb      	ldr	r3, [r7, #12]
 80016f8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80016fa:	781a      	ldrb	r2, [r3, #0]
 80016fc:	68fb      	ldr	r3, [r7, #12]
 80016fe:	681b      	ldr	r3, [r3, #0]
 8001700:	611a      	str	r2, [r3, #16]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8001702:	68fb      	ldr	r3, [r7, #12]
 8001704:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001706:	1c5a      	adds	r2, r3, #1
 8001708:	68fb      	ldr	r3, [r7, #12]
 800170a:	625a      	str	r2, [r3, #36]	; 0x24

      /* Update counter */
      hi2c->XferCount--;
 800170c:	68fb      	ldr	r3, [r7, #12]
 800170e:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8001710:	b29b      	uxth	r3, r3
 8001712:	3b01      	subs	r3, #1
 8001714:	b29a      	uxth	r2, r3
 8001716:	68fb      	ldr	r3, [r7, #12]
 8001718:	855a      	strh	r2, [r3, #42]	; 0x2a
      hi2c->XferSize--;
 800171a:	68fb      	ldr	r3, [r7, #12]
 800171c:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800171e:	3b01      	subs	r3, #1
 8001720:	b29a      	uxth	r2, r3
 8001722:	68fb      	ldr	r3, [r7, #12]
 8001724:	851a      	strh	r2, [r3, #40]	; 0x28

      if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET) && (hi2c->XferSize != 0U))
 8001726:	68fb      	ldr	r3, [r7, #12]
 8001728:	681b      	ldr	r3, [r3, #0]
 800172a:	695b      	ldr	r3, [r3, #20]
 800172c:	f003 0304 	and.w	r3, r3, #4
 8001730:	2b04      	cmp	r3, #4
 8001732:	d11b      	bne.n	800176c <HAL_I2C_Master_Transmit+0x188>
 8001734:	68fb      	ldr	r3, [r7, #12]
 8001736:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8001738:	2b00      	cmp	r3, #0
 800173a:	d017      	beq.n	800176c <HAL_I2C_Master_Transmit+0x188>
      {
        /* Write data to DR */
        hi2c->Instance->DR = *hi2c->pBuffPtr;
 800173c:	68fb      	ldr	r3, [r7, #12]
 800173e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001740:	781a      	ldrb	r2, [r3, #0]
 8001742:	68fb      	ldr	r3, [r7, #12]
 8001744:	681b      	ldr	r3, [r3, #0]
 8001746:	611a      	str	r2, [r3, #16]

        /* Increment Buffer pointer */
        hi2c->pBuffPtr++;
 8001748:	68fb      	ldr	r3, [r7, #12]
 800174a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800174c:	1c5a      	adds	r2, r3, #1
 800174e:	68fb      	ldr	r3, [r7, #12]
 8001750:	625a      	str	r2, [r3, #36]	; 0x24

        /* Update counter */
        hi2c->XferCount--;
 8001752:	68fb      	ldr	r3, [r7, #12]
 8001754:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8001756:	b29b      	uxth	r3, r3
 8001758:	3b01      	subs	r3, #1
 800175a:	b29a      	uxth	r2, r3
 800175c:	68fb      	ldr	r3, [r7, #12]
 800175e:	855a      	strh	r2, [r3, #42]	; 0x2a
        hi2c->XferSize--;
 8001760:	68fb      	ldr	r3, [r7, #12]
 8001762:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8001764:	3b01      	subs	r3, #1
 8001766:	b29a      	uxth	r2, r3
 8001768:	68fb      	ldr	r3, [r7, #12]
 800176a:	851a      	strh	r2, [r3, #40]	; 0x28
      }

      /* Wait until BTF flag is set */
      if (I2C_WaitOnBTFFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 800176c:	697a      	ldr	r2, [r7, #20]
 800176e:	6a39      	ldr	r1, [r7, #32]
 8001770:	68f8      	ldr	r0, [r7, #12]
 8001772:	f000 fdda 	bl	800232a <I2C_WaitOnBTFFlagUntilTimeout>
 8001776:	4603      	mov	r3, r0
 8001778:	2b00      	cmp	r3, #0
 800177a:	d00d      	beq.n	8001798 <HAL_I2C_Master_Transmit+0x1b4>
      {
        if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 800177c:	68fb      	ldr	r3, [r7, #12]
 800177e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001780:	2b04      	cmp	r3, #4
 8001782:	d107      	bne.n	8001794 <HAL_I2C_Master_Transmit+0x1b0>
        {
          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8001784:	68fb      	ldr	r3, [r7, #12]
 8001786:	681b      	ldr	r3, [r3, #0]
 8001788:	681a      	ldr	r2, [r3, #0]
 800178a:	68fb      	ldr	r3, [r7, #12]
 800178c:	681b      	ldr	r3, [r3, #0]
 800178e:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8001792:	601a      	str	r2, [r3, #0]
        }
        return HAL_ERROR;
 8001794:	2301      	movs	r3, #1
 8001796:	e01a      	b.n	80017ce <HAL_I2C_Master_Transmit+0x1ea>
    while (hi2c->XferSize > 0U)
 8001798:	68fb      	ldr	r3, [r7, #12]
 800179a:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800179c:	2b00      	cmp	r3, #0
 800179e:	d194      	bne.n	80016ca <HAL_I2C_Master_Transmit+0xe6>
      }
    }

    /* Generate Stop */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80017a0:	68fb      	ldr	r3, [r7, #12]
 80017a2:	681b      	ldr	r3, [r3, #0]
 80017a4:	681a      	ldr	r2, [r3, #0]
 80017a6:	68fb      	ldr	r3, [r7, #12]
 80017a8:	681b      	ldr	r3, [r3, #0]
 80017aa:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 80017ae:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 80017b0:	68fb      	ldr	r3, [r7, #12]
 80017b2:	2220      	movs	r2, #32
 80017b4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode = HAL_I2C_MODE_NONE;
 80017b8:	68fb      	ldr	r3, [r7, #12]
 80017ba:	2200      	movs	r2, #0
 80017bc:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 80017c0:	68fb      	ldr	r3, [r7, #12]
 80017c2:	2200      	movs	r2, #0
 80017c4:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    return HAL_OK;
 80017c8:	2300      	movs	r3, #0
 80017ca:	e000      	b.n	80017ce <HAL_I2C_Master_Transmit+0x1ea>
  }
  else
  {
    return HAL_BUSY;
 80017cc:	2302      	movs	r3, #2
  }
}
 80017ce:	4618      	mov	r0, r3
 80017d0:	3718      	adds	r7, #24
 80017d2:	46bd      	mov	sp, r7
 80017d4:	bd80      	pop	{r7, pc}
 80017d6:	bf00      	nop
 80017d8:	00100002 	.word	0x00100002
 80017dc:	ffff0000 	.word	0xffff0000

080017e0 <HAL_I2C_Mem_Read>:
  * @param  Size Amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Mem_Read(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress, uint16_t MemAddSize, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 80017e0:	b580      	push	{r7, lr}
 80017e2:	b08c      	sub	sp, #48	; 0x30
 80017e4:	af02      	add	r7, sp, #8
 80017e6:	60f8      	str	r0, [r7, #12]
 80017e8:	4608      	mov	r0, r1
 80017ea:	4611      	mov	r1, r2
 80017ec:	461a      	mov	r2, r3
 80017ee:	4603      	mov	r3, r0
 80017f0:	817b      	strh	r3, [r7, #10]
 80017f2:	460b      	mov	r3, r1
 80017f4:	813b      	strh	r3, [r7, #8]
 80017f6:	4613      	mov	r3, r2
 80017f8:	80fb      	strh	r3, [r7, #6]
  /* Init tickstart for timeout management*/
  uint32_t tickstart = HAL_GetTick();
 80017fa:	f7ff fae9 	bl	8000dd0 <HAL_GetTick>
 80017fe:	6278      	str	r0, [r7, #36]	; 0x24

  /* Check the parameters */
  assert_param(IS_I2C_MEMADD_SIZE(MemAddSize));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8001800:	68fb      	ldr	r3, [r7, #12]
 8001802:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8001806:	b2db      	uxtb	r3, r3
 8001808:	2b20      	cmp	r3, #32
 800180a:	f040 8208 	bne.w	8001c1e <HAL_I2C_Mem_Read+0x43e>
  {
    /* Wait until BUSY flag is reset */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 800180e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001810:	9300      	str	r3, [sp, #0]
 8001812:	2319      	movs	r3, #25
 8001814:	2201      	movs	r2, #1
 8001816:	497b      	ldr	r1, [pc, #492]	; (8001a04 <HAL_I2C_Mem_Read+0x224>)
 8001818:	68f8      	ldr	r0, [r7, #12]
 800181a:	f000 fc6f 	bl	80020fc <I2C_WaitOnFlagUntilTimeout>
 800181e:	4603      	mov	r3, r0
 8001820:	2b00      	cmp	r3, #0
 8001822:	d001      	beq.n	8001828 <HAL_I2C_Mem_Read+0x48>
    {
      return HAL_BUSY;
 8001824:	2302      	movs	r3, #2
 8001826:	e1fb      	b.n	8001c20 <HAL_I2C_Mem_Read+0x440>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 8001828:	68fb      	ldr	r3, [r7, #12]
 800182a:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 800182e:	2b01      	cmp	r3, #1
 8001830:	d101      	bne.n	8001836 <HAL_I2C_Mem_Read+0x56>
 8001832:	2302      	movs	r3, #2
 8001834:	e1f4      	b.n	8001c20 <HAL_I2C_Mem_Read+0x440>
 8001836:	68fb      	ldr	r3, [r7, #12]
 8001838:	2201      	movs	r2, #1
 800183a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Check if the I2C is already enabled */
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 800183e:	68fb      	ldr	r3, [r7, #12]
 8001840:	681b      	ldr	r3, [r3, #0]
 8001842:	681b      	ldr	r3, [r3, #0]
 8001844:	f003 0301 	and.w	r3, r3, #1
 8001848:	2b01      	cmp	r3, #1
 800184a:	d007      	beq.n	800185c <HAL_I2C_Mem_Read+0x7c>
    {
      /* Enable I2C peripheral */
      __HAL_I2C_ENABLE(hi2c);
 800184c:	68fb      	ldr	r3, [r7, #12]
 800184e:	681b      	ldr	r3, [r3, #0]
 8001850:	681a      	ldr	r2, [r3, #0]
 8001852:	68fb      	ldr	r3, [r7, #12]
 8001854:	681b      	ldr	r3, [r3, #0]
 8001856:	f042 0201 	orr.w	r2, r2, #1
 800185a:	601a      	str	r2, [r3, #0]
    }

    /* Disable Pos */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 800185c:	68fb      	ldr	r3, [r7, #12]
 800185e:	681b      	ldr	r3, [r3, #0]
 8001860:	681a      	ldr	r2, [r3, #0]
 8001862:	68fb      	ldr	r3, [r7, #12]
 8001864:	681b      	ldr	r3, [r3, #0]
 8001866:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 800186a:	601a      	str	r2, [r3, #0]

    hi2c->State     = HAL_I2C_STATE_BUSY_RX;
 800186c:	68fb      	ldr	r3, [r7, #12]
 800186e:	2222      	movs	r2, #34	; 0x22
 8001870:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode      = HAL_I2C_MODE_MEM;
 8001874:	68fb      	ldr	r3, [r7, #12]
 8001876:	2240      	movs	r2, #64	; 0x40
 8001878:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 800187c:	68fb      	ldr	r3, [r7, #12]
 800187e:	2200      	movs	r2, #0
 8001880:	641a      	str	r2, [r3, #64]	; 0x40

    /* Prepare transfer parameters */
    hi2c->pBuffPtr    = pData;
 8001882:	68fb      	ldr	r3, [r7, #12]
 8001884:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8001886:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount   = Size;
 8001888:	68fb      	ldr	r3, [r7, #12]
 800188a:	8eba      	ldrh	r2, [r7, #52]	; 0x34
 800188c:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferSize    = hi2c->XferCount;
 800188e:	68fb      	ldr	r3, [r7, #12]
 8001890:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8001892:	b29a      	uxth	r2, r3
 8001894:	68fb      	ldr	r3, [r7, #12]
 8001896:	851a      	strh	r2, [r3, #40]	; 0x28
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 8001898:	68fb      	ldr	r3, [r7, #12]
 800189a:	4a5b      	ldr	r2, [pc, #364]	; (8001a08 <HAL_I2C_Mem_Read+0x228>)
 800189c:	62da      	str	r2, [r3, #44]	; 0x2c

    /* Send Slave Address and Memory Address */
    if (I2C_RequestMemoryRead(hi2c, DevAddress, MemAddress, MemAddSize, Timeout, tickstart) != HAL_OK)
 800189e:	88f8      	ldrh	r0, [r7, #6]
 80018a0:	893a      	ldrh	r2, [r7, #8]
 80018a2:	8979      	ldrh	r1, [r7, #10]
 80018a4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80018a6:	9301      	str	r3, [sp, #4]
 80018a8:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80018aa:	9300      	str	r3, [sp, #0]
 80018ac:	4603      	mov	r3, r0
 80018ae:	68f8      	ldr	r0, [r7, #12]
 80018b0:	f000 fb54 	bl	8001f5c <I2C_RequestMemoryRead>
 80018b4:	4603      	mov	r3, r0
 80018b6:	2b00      	cmp	r3, #0
 80018b8:	d001      	beq.n	80018be <HAL_I2C_Mem_Read+0xde>
    {
      return HAL_ERROR;
 80018ba:	2301      	movs	r3, #1
 80018bc:	e1b0      	b.n	8001c20 <HAL_I2C_Mem_Read+0x440>
    }

    if (hi2c->XferSize == 0U)
 80018be:	68fb      	ldr	r3, [r7, #12]
 80018c0:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80018c2:	2b00      	cmp	r3, #0
 80018c4:	d113      	bne.n	80018ee <HAL_I2C_Mem_Read+0x10e>
    {
      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 80018c6:	2300      	movs	r3, #0
 80018c8:	623b      	str	r3, [r7, #32]
 80018ca:	68fb      	ldr	r3, [r7, #12]
 80018cc:	681b      	ldr	r3, [r3, #0]
 80018ce:	695b      	ldr	r3, [r3, #20]
 80018d0:	623b      	str	r3, [r7, #32]
 80018d2:	68fb      	ldr	r3, [r7, #12]
 80018d4:	681b      	ldr	r3, [r3, #0]
 80018d6:	699b      	ldr	r3, [r3, #24]
 80018d8:	623b      	str	r3, [r7, #32]
 80018da:	6a3b      	ldr	r3, [r7, #32]

      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80018dc:	68fb      	ldr	r3, [r7, #12]
 80018de:	681b      	ldr	r3, [r3, #0]
 80018e0:	681a      	ldr	r2, [r3, #0]
 80018e2:	68fb      	ldr	r3, [r7, #12]
 80018e4:	681b      	ldr	r3, [r3, #0]
 80018e6:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 80018ea:	601a      	str	r2, [r3, #0]
 80018ec:	e184      	b.n	8001bf8 <HAL_I2C_Mem_Read+0x418>
    }
    else if (hi2c->XferSize == 1U)
 80018ee:	68fb      	ldr	r3, [r7, #12]
 80018f0:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80018f2:	2b01      	cmp	r3, #1
 80018f4:	d11b      	bne.n	800192e <HAL_I2C_Mem_Read+0x14e>
    {
      /* Disable Acknowledge */
      CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 80018f6:	68fb      	ldr	r3, [r7, #12]
 80018f8:	681b      	ldr	r3, [r3, #0]
 80018fa:	681a      	ldr	r2, [r3, #0]
 80018fc:	68fb      	ldr	r3, [r7, #12]
 80018fe:	681b      	ldr	r3, [r3, #0]
 8001900:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8001904:	601a      	str	r2, [r3, #0]

      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8001906:	2300      	movs	r3, #0
 8001908:	61fb      	str	r3, [r7, #28]
 800190a:	68fb      	ldr	r3, [r7, #12]
 800190c:	681b      	ldr	r3, [r3, #0]
 800190e:	695b      	ldr	r3, [r3, #20]
 8001910:	61fb      	str	r3, [r7, #28]
 8001912:	68fb      	ldr	r3, [r7, #12]
 8001914:	681b      	ldr	r3, [r3, #0]
 8001916:	699b      	ldr	r3, [r3, #24]
 8001918:	61fb      	str	r3, [r7, #28]
 800191a:	69fb      	ldr	r3, [r7, #28]

      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 800191c:	68fb      	ldr	r3, [r7, #12]
 800191e:	681b      	ldr	r3, [r3, #0]
 8001920:	681a      	ldr	r2, [r3, #0]
 8001922:	68fb      	ldr	r3, [r7, #12]
 8001924:	681b      	ldr	r3, [r3, #0]
 8001926:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 800192a:	601a      	str	r2, [r3, #0]
 800192c:	e164      	b.n	8001bf8 <HAL_I2C_Mem_Read+0x418>
    }
    else if (hi2c->XferSize == 2U)
 800192e:	68fb      	ldr	r3, [r7, #12]
 8001930:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8001932:	2b02      	cmp	r3, #2
 8001934:	d11b      	bne.n	800196e <HAL_I2C_Mem_Read+0x18e>
    {
      /* Disable Acknowledge */
      CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8001936:	68fb      	ldr	r3, [r7, #12]
 8001938:	681b      	ldr	r3, [r3, #0]
 800193a:	681a      	ldr	r2, [r3, #0]
 800193c:	68fb      	ldr	r3, [r7, #12]
 800193e:	681b      	ldr	r3, [r3, #0]
 8001940:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8001944:	601a      	str	r2, [r3, #0]

      /* Enable Pos */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 8001946:	68fb      	ldr	r3, [r7, #12]
 8001948:	681b      	ldr	r3, [r3, #0]
 800194a:	681a      	ldr	r2, [r3, #0]
 800194c:	68fb      	ldr	r3, [r7, #12]
 800194e:	681b      	ldr	r3, [r3, #0]
 8001950:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8001954:	601a      	str	r2, [r3, #0]

      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8001956:	2300      	movs	r3, #0
 8001958:	61bb      	str	r3, [r7, #24]
 800195a:	68fb      	ldr	r3, [r7, #12]
 800195c:	681b      	ldr	r3, [r3, #0]
 800195e:	695b      	ldr	r3, [r3, #20]
 8001960:	61bb      	str	r3, [r7, #24]
 8001962:	68fb      	ldr	r3, [r7, #12]
 8001964:	681b      	ldr	r3, [r3, #0]
 8001966:	699b      	ldr	r3, [r3, #24]
 8001968:	61bb      	str	r3, [r7, #24]
 800196a:	69bb      	ldr	r3, [r7, #24]
 800196c:	e144      	b.n	8001bf8 <HAL_I2C_Mem_Read+0x418>
    }
    else
    {
      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 800196e:	2300      	movs	r3, #0
 8001970:	617b      	str	r3, [r7, #20]
 8001972:	68fb      	ldr	r3, [r7, #12]
 8001974:	681b      	ldr	r3, [r3, #0]
 8001976:	695b      	ldr	r3, [r3, #20]
 8001978:	617b      	str	r3, [r7, #20]
 800197a:	68fb      	ldr	r3, [r7, #12]
 800197c:	681b      	ldr	r3, [r3, #0]
 800197e:	699b      	ldr	r3, [r3, #24]
 8001980:	617b      	str	r3, [r7, #20]
 8001982:	697b      	ldr	r3, [r7, #20]
    }

    while (hi2c->XferSize > 0U)
 8001984:	e138      	b.n	8001bf8 <HAL_I2C_Mem_Read+0x418>
    {
      if (hi2c->XferSize <= 3U)
 8001986:	68fb      	ldr	r3, [r7, #12]
 8001988:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800198a:	2b03      	cmp	r3, #3
 800198c:	f200 80f1 	bhi.w	8001b72 <HAL_I2C_Mem_Read+0x392>
      {
        /* One byte */
        if (hi2c->XferSize == 1U)
 8001990:	68fb      	ldr	r3, [r7, #12]
 8001992:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8001994:	2b01      	cmp	r3, #1
 8001996:	d123      	bne.n	80019e0 <HAL_I2C_Mem_Read+0x200>
        {
          /* Wait until RXNE flag is set */
          if (I2C_WaitOnRXNEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8001998:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800199a:	6bb9      	ldr	r1, [r7, #56]	; 0x38
 800199c:	68f8      	ldr	r0, [r7, #12]
 800199e:	f000 fd05 	bl	80023ac <I2C_WaitOnRXNEFlagUntilTimeout>
 80019a2:	4603      	mov	r3, r0
 80019a4:	2b00      	cmp	r3, #0
 80019a6:	d001      	beq.n	80019ac <HAL_I2C_Mem_Read+0x1cc>
          {
            return HAL_ERROR;
 80019a8:	2301      	movs	r3, #1
 80019aa:	e139      	b.n	8001c20 <HAL_I2C_Mem_Read+0x440>
          }

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 80019ac:	68fb      	ldr	r3, [r7, #12]
 80019ae:	681b      	ldr	r3, [r3, #0]
 80019b0:	691a      	ldr	r2, [r3, #16]
 80019b2:	68fb      	ldr	r3, [r7, #12]
 80019b4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80019b6:	b2d2      	uxtb	r2, r2
 80019b8:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 80019ba:	68fb      	ldr	r3, [r7, #12]
 80019bc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80019be:	1c5a      	adds	r2, r3, #1
 80019c0:	68fb      	ldr	r3, [r7, #12]
 80019c2:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 80019c4:	68fb      	ldr	r3, [r7, #12]
 80019c6:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80019c8:	3b01      	subs	r3, #1
 80019ca:	b29a      	uxth	r2, r3
 80019cc:	68fb      	ldr	r3, [r7, #12]
 80019ce:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 80019d0:	68fb      	ldr	r3, [r7, #12]
 80019d2:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80019d4:	b29b      	uxth	r3, r3
 80019d6:	3b01      	subs	r3, #1
 80019d8:	b29a      	uxth	r2, r3
 80019da:	68fb      	ldr	r3, [r7, #12]
 80019dc:	855a      	strh	r2, [r3, #42]	; 0x2a
 80019de:	e10b      	b.n	8001bf8 <HAL_I2C_Mem_Read+0x418>
        }
        /* Two bytes */
        else if (hi2c->XferSize == 2U)
 80019e0:	68fb      	ldr	r3, [r7, #12]
 80019e2:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80019e4:	2b02      	cmp	r3, #2
 80019e6:	d14e      	bne.n	8001a86 <HAL_I2C_Mem_Read+0x2a6>
        {
          /* Wait until BTF flag is set */
          if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BTF, RESET, Timeout, tickstart) != HAL_OK)
 80019e8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80019ea:	9300      	str	r3, [sp, #0]
 80019ec:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80019ee:	2200      	movs	r2, #0
 80019f0:	4906      	ldr	r1, [pc, #24]	; (8001a0c <HAL_I2C_Mem_Read+0x22c>)
 80019f2:	68f8      	ldr	r0, [r7, #12]
 80019f4:	f000 fb82 	bl	80020fc <I2C_WaitOnFlagUntilTimeout>
 80019f8:	4603      	mov	r3, r0
 80019fa:	2b00      	cmp	r3, #0
 80019fc:	d008      	beq.n	8001a10 <HAL_I2C_Mem_Read+0x230>
          {
            return HAL_ERROR;
 80019fe:	2301      	movs	r3, #1
 8001a00:	e10e      	b.n	8001c20 <HAL_I2C_Mem_Read+0x440>
 8001a02:	bf00      	nop
 8001a04:	00100002 	.word	0x00100002
 8001a08:	ffff0000 	.word	0xffff0000
 8001a0c:	00010004 	.word	0x00010004
          }

          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8001a10:	68fb      	ldr	r3, [r7, #12]
 8001a12:	681b      	ldr	r3, [r3, #0]
 8001a14:	681a      	ldr	r2, [r3, #0]
 8001a16:	68fb      	ldr	r3, [r7, #12]
 8001a18:	681b      	ldr	r3, [r3, #0]
 8001a1a:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8001a1e:	601a      	str	r2, [r3, #0]

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8001a20:	68fb      	ldr	r3, [r7, #12]
 8001a22:	681b      	ldr	r3, [r3, #0]
 8001a24:	691a      	ldr	r2, [r3, #16]
 8001a26:	68fb      	ldr	r3, [r7, #12]
 8001a28:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001a2a:	b2d2      	uxtb	r2, r2
 8001a2c:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8001a2e:	68fb      	ldr	r3, [r7, #12]
 8001a30:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001a32:	1c5a      	adds	r2, r3, #1
 8001a34:	68fb      	ldr	r3, [r7, #12]
 8001a36:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 8001a38:	68fb      	ldr	r3, [r7, #12]
 8001a3a:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8001a3c:	3b01      	subs	r3, #1
 8001a3e:	b29a      	uxth	r2, r3
 8001a40:	68fb      	ldr	r3, [r7, #12]
 8001a42:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 8001a44:	68fb      	ldr	r3, [r7, #12]
 8001a46:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8001a48:	b29b      	uxth	r3, r3
 8001a4a:	3b01      	subs	r3, #1
 8001a4c:	b29a      	uxth	r2, r3
 8001a4e:	68fb      	ldr	r3, [r7, #12]
 8001a50:	855a      	strh	r2, [r3, #42]	; 0x2a

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8001a52:	68fb      	ldr	r3, [r7, #12]
 8001a54:	681b      	ldr	r3, [r3, #0]
 8001a56:	691a      	ldr	r2, [r3, #16]
 8001a58:	68fb      	ldr	r3, [r7, #12]
 8001a5a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001a5c:	b2d2      	uxtb	r2, r2
 8001a5e:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8001a60:	68fb      	ldr	r3, [r7, #12]
 8001a62:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001a64:	1c5a      	adds	r2, r3, #1
 8001a66:	68fb      	ldr	r3, [r7, #12]
 8001a68:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 8001a6a:	68fb      	ldr	r3, [r7, #12]
 8001a6c:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8001a6e:	3b01      	subs	r3, #1
 8001a70:	b29a      	uxth	r2, r3
 8001a72:	68fb      	ldr	r3, [r7, #12]
 8001a74:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 8001a76:	68fb      	ldr	r3, [r7, #12]
 8001a78:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8001a7a:	b29b      	uxth	r3, r3
 8001a7c:	3b01      	subs	r3, #1
 8001a7e:	b29a      	uxth	r2, r3
 8001a80:	68fb      	ldr	r3, [r7, #12]
 8001a82:	855a      	strh	r2, [r3, #42]	; 0x2a
 8001a84:	e0b8      	b.n	8001bf8 <HAL_I2C_Mem_Read+0x418>
        }
        /* 3 Last bytes */
        else
        {
          /* Wait until BTF flag is set */
          if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BTF, RESET, Timeout, tickstart) != HAL_OK)
 8001a86:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001a88:	9300      	str	r3, [sp, #0]
 8001a8a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8001a8c:	2200      	movs	r2, #0
 8001a8e:	4966      	ldr	r1, [pc, #408]	; (8001c28 <HAL_I2C_Mem_Read+0x448>)
 8001a90:	68f8      	ldr	r0, [r7, #12]
 8001a92:	f000 fb33 	bl	80020fc <I2C_WaitOnFlagUntilTimeout>
 8001a96:	4603      	mov	r3, r0
 8001a98:	2b00      	cmp	r3, #0
 8001a9a:	d001      	beq.n	8001aa0 <HAL_I2C_Mem_Read+0x2c0>
          {
            return HAL_ERROR;
 8001a9c:	2301      	movs	r3, #1
 8001a9e:	e0bf      	b.n	8001c20 <HAL_I2C_Mem_Read+0x440>
          }

          /* Disable Acknowledge */
          CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8001aa0:	68fb      	ldr	r3, [r7, #12]
 8001aa2:	681b      	ldr	r3, [r3, #0]
 8001aa4:	681a      	ldr	r2, [r3, #0]
 8001aa6:	68fb      	ldr	r3, [r7, #12]
 8001aa8:	681b      	ldr	r3, [r3, #0]
 8001aaa:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8001aae:	601a      	str	r2, [r3, #0]

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8001ab0:	68fb      	ldr	r3, [r7, #12]
 8001ab2:	681b      	ldr	r3, [r3, #0]
 8001ab4:	691a      	ldr	r2, [r3, #16]
 8001ab6:	68fb      	ldr	r3, [r7, #12]
 8001ab8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001aba:	b2d2      	uxtb	r2, r2
 8001abc:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8001abe:	68fb      	ldr	r3, [r7, #12]
 8001ac0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001ac2:	1c5a      	adds	r2, r3, #1
 8001ac4:	68fb      	ldr	r3, [r7, #12]
 8001ac6:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 8001ac8:	68fb      	ldr	r3, [r7, #12]
 8001aca:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8001acc:	3b01      	subs	r3, #1
 8001ace:	b29a      	uxth	r2, r3
 8001ad0:	68fb      	ldr	r3, [r7, #12]
 8001ad2:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 8001ad4:	68fb      	ldr	r3, [r7, #12]
 8001ad6:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8001ad8:	b29b      	uxth	r3, r3
 8001ada:	3b01      	subs	r3, #1
 8001adc:	b29a      	uxth	r2, r3
 8001ade:	68fb      	ldr	r3, [r7, #12]
 8001ae0:	855a      	strh	r2, [r3, #42]	; 0x2a

          /* Wait until BTF flag is set */
          if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BTF, RESET, Timeout, tickstart) != HAL_OK)
 8001ae2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001ae4:	9300      	str	r3, [sp, #0]
 8001ae6:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8001ae8:	2200      	movs	r2, #0
 8001aea:	494f      	ldr	r1, [pc, #316]	; (8001c28 <HAL_I2C_Mem_Read+0x448>)
 8001aec:	68f8      	ldr	r0, [r7, #12]
 8001aee:	f000 fb05 	bl	80020fc <I2C_WaitOnFlagUntilTimeout>
 8001af2:	4603      	mov	r3, r0
 8001af4:	2b00      	cmp	r3, #0
 8001af6:	d001      	beq.n	8001afc <HAL_I2C_Mem_Read+0x31c>
          {
            return HAL_ERROR;
 8001af8:	2301      	movs	r3, #1
 8001afa:	e091      	b.n	8001c20 <HAL_I2C_Mem_Read+0x440>
          }

          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8001afc:	68fb      	ldr	r3, [r7, #12]
 8001afe:	681b      	ldr	r3, [r3, #0]
 8001b00:	681a      	ldr	r2, [r3, #0]
 8001b02:	68fb      	ldr	r3, [r7, #12]
 8001b04:	681b      	ldr	r3, [r3, #0]
 8001b06:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8001b0a:	601a      	str	r2, [r3, #0]

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8001b0c:	68fb      	ldr	r3, [r7, #12]
 8001b0e:	681b      	ldr	r3, [r3, #0]
 8001b10:	691a      	ldr	r2, [r3, #16]
 8001b12:	68fb      	ldr	r3, [r7, #12]
 8001b14:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001b16:	b2d2      	uxtb	r2, r2
 8001b18:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8001b1a:	68fb      	ldr	r3, [r7, #12]
 8001b1c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001b1e:	1c5a      	adds	r2, r3, #1
 8001b20:	68fb      	ldr	r3, [r7, #12]
 8001b22:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 8001b24:	68fb      	ldr	r3, [r7, #12]
 8001b26:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8001b28:	3b01      	subs	r3, #1
 8001b2a:	b29a      	uxth	r2, r3
 8001b2c:	68fb      	ldr	r3, [r7, #12]
 8001b2e:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 8001b30:	68fb      	ldr	r3, [r7, #12]
 8001b32:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8001b34:	b29b      	uxth	r3, r3
 8001b36:	3b01      	subs	r3, #1
 8001b38:	b29a      	uxth	r2, r3
 8001b3a:	68fb      	ldr	r3, [r7, #12]
 8001b3c:	855a      	strh	r2, [r3, #42]	; 0x2a

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8001b3e:	68fb      	ldr	r3, [r7, #12]
 8001b40:	681b      	ldr	r3, [r3, #0]
 8001b42:	691a      	ldr	r2, [r3, #16]
 8001b44:	68fb      	ldr	r3, [r7, #12]
 8001b46:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001b48:	b2d2      	uxtb	r2, r2
 8001b4a:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8001b4c:	68fb      	ldr	r3, [r7, #12]
 8001b4e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001b50:	1c5a      	adds	r2, r3, #1
 8001b52:	68fb      	ldr	r3, [r7, #12]
 8001b54:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 8001b56:	68fb      	ldr	r3, [r7, #12]
 8001b58:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8001b5a:	3b01      	subs	r3, #1
 8001b5c:	b29a      	uxth	r2, r3
 8001b5e:	68fb      	ldr	r3, [r7, #12]
 8001b60:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 8001b62:	68fb      	ldr	r3, [r7, #12]
 8001b64:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8001b66:	b29b      	uxth	r3, r3
 8001b68:	3b01      	subs	r3, #1
 8001b6a:	b29a      	uxth	r2, r3
 8001b6c:	68fb      	ldr	r3, [r7, #12]
 8001b6e:	855a      	strh	r2, [r3, #42]	; 0x2a
 8001b70:	e042      	b.n	8001bf8 <HAL_I2C_Mem_Read+0x418>
        }
      }
      else
      {
        /* Wait until RXNE flag is set */
        if (I2C_WaitOnRXNEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8001b72:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8001b74:	6bb9      	ldr	r1, [r7, #56]	; 0x38
 8001b76:	68f8      	ldr	r0, [r7, #12]
 8001b78:	f000 fc18 	bl	80023ac <I2C_WaitOnRXNEFlagUntilTimeout>
 8001b7c:	4603      	mov	r3, r0
 8001b7e:	2b00      	cmp	r3, #0
 8001b80:	d001      	beq.n	8001b86 <HAL_I2C_Mem_Read+0x3a6>
        {
          return HAL_ERROR;
 8001b82:	2301      	movs	r3, #1
 8001b84:	e04c      	b.n	8001c20 <HAL_I2C_Mem_Read+0x440>
        }

        /* Read data from DR */
        *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8001b86:	68fb      	ldr	r3, [r7, #12]
 8001b88:	681b      	ldr	r3, [r3, #0]
 8001b8a:	691a      	ldr	r2, [r3, #16]
 8001b8c:	68fb      	ldr	r3, [r7, #12]
 8001b8e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001b90:	b2d2      	uxtb	r2, r2
 8001b92:	701a      	strb	r2, [r3, #0]

        /* Increment Buffer pointer */
        hi2c->pBuffPtr++;
 8001b94:	68fb      	ldr	r3, [r7, #12]
 8001b96:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001b98:	1c5a      	adds	r2, r3, #1
 8001b9a:	68fb      	ldr	r3, [r7, #12]
 8001b9c:	625a      	str	r2, [r3, #36]	; 0x24

        /* Update counter */
        hi2c->XferSize--;
 8001b9e:	68fb      	ldr	r3, [r7, #12]
 8001ba0:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8001ba2:	3b01      	subs	r3, #1
 8001ba4:	b29a      	uxth	r2, r3
 8001ba6:	68fb      	ldr	r3, [r7, #12]
 8001ba8:	851a      	strh	r2, [r3, #40]	; 0x28
        hi2c->XferCount--;
 8001baa:	68fb      	ldr	r3, [r7, #12]
 8001bac:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8001bae:	b29b      	uxth	r3, r3
 8001bb0:	3b01      	subs	r3, #1
 8001bb2:	b29a      	uxth	r2, r3
 8001bb4:	68fb      	ldr	r3, [r7, #12]
 8001bb6:	855a      	strh	r2, [r3, #42]	; 0x2a

        if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET)
 8001bb8:	68fb      	ldr	r3, [r7, #12]
 8001bba:	681b      	ldr	r3, [r3, #0]
 8001bbc:	695b      	ldr	r3, [r3, #20]
 8001bbe:	f003 0304 	and.w	r3, r3, #4
 8001bc2:	2b04      	cmp	r3, #4
 8001bc4:	d118      	bne.n	8001bf8 <HAL_I2C_Mem_Read+0x418>
        {
          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8001bc6:	68fb      	ldr	r3, [r7, #12]
 8001bc8:	681b      	ldr	r3, [r3, #0]
 8001bca:	691a      	ldr	r2, [r3, #16]
 8001bcc:	68fb      	ldr	r3, [r7, #12]
 8001bce:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001bd0:	b2d2      	uxtb	r2, r2
 8001bd2:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8001bd4:	68fb      	ldr	r3, [r7, #12]
 8001bd6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001bd8:	1c5a      	adds	r2, r3, #1
 8001bda:	68fb      	ldr	r3, [r7, #12]
 8001bdc:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 8001bde:	68fb      	ldr	r3, [r7, #12]
 8001be0:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8001be2:	3b01      	subs	r3, #1
 8001be4:	b29a      	uxth	r2, r3
 8001be6:	68fb      	ldr	r3, [r7, #12]
 8001be8:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 8001bea:	68fb      	ldr	r3, [r7, #12]
 8001bec:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8001bee:	b29b      	uxth	r3, r3
 8001bf0:	3b01      	subs	r3, #1
 8001bf2:	b29a      	uxth	r2, r3
 8001bf4:	68fb      	ldr	r3, [r7, #12]
 8001bf6:	855a      	strh	r2, [r3, #42]	; 0x2a
    while (hi2c->XferSize > 0U)
 8001bf8:	68fb      	ldr	r3, [r7, #12]
 8001bfa:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8001bfc:	2b00      	cmp	r3, #0
 8001bfe:	f47f aec2 	bne.w	8001986 <HAL_I2C_Mem_Read+0x1a6>
        }
      }
    }

    hi2c->State = HAL_I2C_STATE_READY;
 8001c02:	68fb      	ldr	r3, [r7, #12]
 8001c04:	2220      	movs	r2, #32
 8001c06:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode = HAL_I2C_MODE_NONE;
 8001c0a:	68fb      	ldr	r3, [r7, #12]
 8001c0c:	2200      	movs	r2, #0
 8001c0e:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8001c12:	68fb      	ldr	r3, [r7, #12]
 8001c14:	2200      	movs	r2, #0
 8001c16:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    return HAL_OK;
 8001c1a:	2300      	movs	r3, #0
 8001c1c:	e000      	b.n	8001c20 <HAL_I2C_Mem_Read+0x440>
  }
  else
  {
    return HAL_BUSY;
 8001c1e:	2302      	movs	r3, #2
  }
}
 8001c20:	4618      	mov	r0, r3
 8001c22:	3728      	adds	r7, #40	; 0x28
 8001c24:	46bd      	mov	sp, r7
 8001c26:	bd80      	pop	{r7, pc}
 8001c28:	00010004 	.word	0x00010004

08001c2c <HAL_I2C_IsDeviceReady>:
  * @param  Trials Number of trials
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_IsDeviceReady(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint32_t Trials, uint32_t Timeout)
{
 8001c2c:	b580      	push	{r7, lr}
 8001c2e:	b08a      	sub	sp, #40	; 0x28
 8001c30:	af02      	add	r7, sp, #8
 8001c32:	60f8      	str	r0, [r7, #12]
 8001c34:	607a      	str	r2, [r7, #4]
 8001c36:	603b      	str	r3, [r7, #0]
 8001c38:	460b      	mov	r3, r1
 8001c3a:	817b      	strh	r3, [r7, #10]
  /* Get tick */
  uint32_t tickstart = HAL_GetTick();
 8001c3c:	f7ff f8c8 	bl	8000dd0 <HAL_GetTick>
 8001c40:	61f8      	str	r0, [r7, #28]
  uint32_t I2C_Trials = 1U;
 8001c42:	2301      	movs	r3, #1
 8001c44:	61bb      	str	r3, [r7, #24]
  FlagStatus tmp1;
  FlagStatus tmp2;

  if (hi2c->State == HAL_I2C_STATE_READY)
 8001c46:	68fb      	ldr	r3, [r7, #12]
 8001c48:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8001c4c:	b2db      	uxtb	r3, r3
 8001c4e:	2b20      	cmp	r3, #32
 8001c50:	f040 8105 	bne.w	8001e5e <HAL_I2C_IsDeviceReady+0x232>
  {
    /* Wait until BUSY flag is reset */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 8001c54:	69fb      	ldr	r3, [r7, #28]
 8001c56:	9300      	str	r3, [sp, #0]
 8001c58:	2319      	movs	r3, #25
 8001c5a:	2201      	movs	r2, #1
 8001c5c:	4982      	ldr	r1, [pc, #520]	; (8001e68 <HAL_I2C_IsDeviceReady+0x23c>)
 8001c5e:	68f8      	ldr	r0, [r7, #12]
 8001c60:	f000 fa4c 	bl	80020fc <I2C_WaitOnFlagUntilTimeout>
 8001c64:	4603      	mov	r3, r0
 8001c66:	2b00      	cmp	r3, #0
 8001c68:	d001      	beq.n	8001c6e <HAL_I2C_IsDeviceReady+0x42>
    {
      return HAL_BUSY;
 8001c6a:	2302      	movs	r3, #2
 8001c6c:	e0f8      	b.n	8001e60 <HAL_I2C_IsDeviceReady+0x234>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 8001c6e:	68fb      	ldr	r3, [r7, #12]
 8001c70:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8001c74:	2b01      	cmp	r3, #1
 8001c76:	d101      	bne.n	8001c7c <HAL_I2C_IsDeviceReady+0x50>
 8001c78:	2302      	movs	r3, #2
 8001c7a:	e0f1      	b.n	8001e60 <HAL_I2C_IsDeviceReady+0x234>
 8001c7c:	68fb      	ldr	r3, [r7, #12]
 8001c7e:	2201      	movs	r2, #1
 8001c80:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Check if the I2C is already enabled */
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 8001c84:	68fb      	ldr	r3, [r7, #12]
 8001c86:	681b      	ldr	r3, [r3, #0]
 8001c88:	681b      	ldr	r3, [r3, #0]
 8001c8a:	f003 0301 	and.w	r3, r3, #1
 8001c8e:	2b01      	cmp	r3, #1
 8001c90:	d007      	beq.n	8001ca2 <HAL_I2C_IsDeviceReady+0x76>
    {
      /* Enable I2C peripheral */
      __HAL_I2C_ENABLE(hi2c);
 8001c92:	68fb      	ldr	r3, [r7, #12]
 8001c94:	681b      	ldr	r3, [r3, #0]
 8001c96:	681a      	ldr	r2, [r3, #0]
 8001c98:	68fb      	ldr	r3, [r7, #12]
 8001c9a:	681b      	ldr	r3, [r3, #0]
 8001c9c:	f042 0201 	orr.w	r2, r2, #1
 8001ca0:	601a      	str	r2, [r3, #0]
    }

    /* Disable Pos */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 8001ca2:	68fb      	ldr	r3, [r7, #12]
 8001ca4:	681b      	ldr	r3, [r3, #0]
 8001ca6:	681a      	ldr	r2, [r3, #0]
 8001ca8:	68fb      	ldr	r3, [r7, #12]
 8001caa:	681b      	ldr	r3, [r3, #0]
 8001cac:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8001cb0:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_BUSY;
 8001cb2:	68fb      	ldr	r3, [r7, #12]
 8001cb4:	2224      	movs	r2, #36	; 0x24
 8001cb6:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8001cba:	68fb      	ldr	r3, [r7, #12]
 8001cbc:	2200      	movs	r2, #0
 8001cbe:	641a      	str	r2, [r3, #64]	; 0x40
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 8001cc0:	68fb      	ldr	r3, [r7, #12]
 8001cc2:	4a6a      	ldr	r2, [pc, #424]	; (8001e6c <HAL_I2C_IsDeviceReady+0x240>)
 8001cc4:	62da      	str	r2, [r3, #44]	; 0x2c

    do
    {
      /* Generate Start */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8001cc6:	68fb      	ldr	r3, [r7, #12]
 8001cc8:	681b      	ldr	r3, [r3, #0]
 8001cca:	681a      	ldr	r2, [r3, #0]
 8001ccc:	68fb      	ldr	r3, [r7, #12]
 8001cce:	681b      	ldr	r3, [r3, #0]
 8001cd0:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8001cd4:	601a      	str	r2, [r3, #0]

      /* Wait until SB flag is set */
      if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, tickstart) != HAL_OK)
 8001cd6:	69fb      	ldr	r3, [r7, #28]
 8001cd8:	9300      	str	r3, [sp, #0]
 8001cda:	683b      	ldr	r3, [r7, #0]
 8001cdc:	2200      	movs	r2, #0
 8001cde:	f04f 1101 	mov.w	r1, #65537	; 0x10001
 8001ce2:	68f8      	ldr	r0, [r7, #12]
 8001ce4:	f000 fa0a 	bl	80020fc <I2C_WaitOnFlagUntilTimeout>
 8001ce8:	4603      	mov	r3, r0
 8001cea:	2b00      	cmp	r3, #0
 8001cec:	d001      	beq.n	8001cf2 <HAL_I2C_IsDeviceReady+0xc6>
      {
        return HAL_ERROR;
 8001cee:	2301      	movs	r3, #1
 8001cf0:	e0b6      	b.n	8001e60 <HAL_I2C_IsDeviceReady+0x234>
      }

      /* Send slave address */
      hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(DevAddress);
 8001cf2:	897b      	ldrh	r3, [r7, #10]
 8001cf4:	b2db      	uxtb	r3, r3
 8001cf6:	461a      	mov	r2, r3
 8001cf8:	68fb      	ldr	r3, [r7, #12]
 8001cfa:	681b      	ldr	r3, [r3, #0]
 8001cfc:	f002 02fe 	and.w	r2, r2, #254	; 0xfe
 8001d00:	611a      	str	r2, [r3, #16]

      /* Wait until ADDR or AF flag are set */
      /* Get tick */
      tickstart = HAL_GetTick();
 8001d02:	f7ff f865 	bl	8000dd0 <HAL_GetTick>
 8001d06:	61f8      	str	r0, [r7, #28]

      tmp1 = __HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_ADDR);
 8001d08:	68fb      	ldr	r3, [r7, #12]
 8001d0a:	681b      	ldr	r3, [r3, #0]
 8001d0c:	695b      	ldr	r3, [r3, #20]
 8001d0e:	f003 0302 	and.w	r3, r3, #2
 8001d12:	2b02      	cmp	r3, #2
 8001d14:	bf0c      	ite	eq
 8001d16:	2301      	moveq	r3, #1
 8001d18:	2300      	movne	r3, #0
 8001d1a:	b2db      	uxtb	r3, r3
 8001d1c:	75fb      	strb	r3, [r7, #23]
      tmp2 = __HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF);
 8001d1e:	68fb      	ldr	r3, [r7, #12]
 8001d20:	681b      	ldr	r3, [r3, #0]
 8001d22:	695b      	ldr	r3, [r3, #20]
 8001d24:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8001d28:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8001d2c:	bf0c      	ite	eq
 8001d2e:	2301      	moveq	r3, #1
 8001d30:	2300      	movne	r3, #0
 8001d32:	b2db      	uxtb	r3, r3
 8001d34:	75bb      	strb	r3, [r7, #22]
      while ((hi2c->State != HAL_I2C_STATE_TIMEOUT) && (tmp1 == RESET) && (tmp2 == RESET))
 8001d36:	e025      	b.n	8001d84 <HAL_I2C_IsDeviceReady+0x158>
      {
        if (((HAL_GetTick() - tickstart) > Timeout) || (Timeout == 0U))
 8001d38:	f7ff f84a 	bl	8000dd0 <HAL_GetTick>
 8001d3c:	4602      	mov	r2, r0
 8001d3e:	69fb      	ldr	r3, [r7, #28]
 8001d40:	1ad3      	subs	r3, r2, r3
 8001d42:	683a      	ldr	r2, [r7, #0]
 8001d44:	429a      	cmp	r2, r3
 8001d46:	d302      	bcc.n	8001d4e <HAL_I2C_IsDeviceReady+0x122>
 8001d48:	683b      	ldr	r3, [r7, #0]
 8001d4a:	2b00      	cmp	r3, #0
 8001d4c:	d103      	bne.n	8001d56 <HAL_I2C_IsDeviceReady+0x12a>
        {
          hi2c->State = HAL_I2C_STATE_TIMEOUT;
 8001d4e:	68fb      	ldr	r3, [r7, #12]
 8001d50:	22a0      	movs	r2, #160	; 0xa0
 8001d52:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        }
        tmp1 = __HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_ADDR);
 8001d56:	68fb      	ldr	r3, [r7, #12]
 8001d58:	681b      	ldr	r3, [r3, #0]
 8001d5a:	695b      	ldr	r3, [r3, #20]
 8001d5c:	f003 0302 	and.w	r3, r3, #2
 8001d60:	2b02      	cmp	r3, #2
 8001d62:	bf0c      	ite	eq
 8001d64:	2301      	moveq	r3, #1
 8001d66:	2300      	movne	r3, #0
 8001d68:	b2db      	uxtb	r3, r3
 8001d6a:	75fb      	strb	r3, [r7, #23]
        tmp2 = __HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF);
 8001d6c:	68fb      	ldr	r3, [r7, #12]
 8001d6e:	681b      	ldr	r3, [r3, #0]
 8001d70:	695b      	ldr	r3, [r3, #20]
 8001d72:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8001d76:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8001d7a:	bf0c      	ite	eq
 8001d7c:	2301      	moveq	r3, #1
 8001d7e:	2300      	movne	r3, #0
 8001d80:	b2db      	uxtb	r3, r3
 8001d82:	75bb      	strb	r3, [r7, #22]
      while ((hi2c->State != HAL_I2C_STATE_TIMEOUT) && (tmp1 == RESET) && (tmp2 == RESET))
 8001d84:	68fb      	ldr	r3, [r7, #12]
 8001d86:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8001d8a:	b2db      	uxtb	r3, r3
 8001d8c:	2ba0      	cmp	r3, #160	; 0xa0
 8001d8e:	d005      	beq.n	8001d9c <HAL_I2C_IsDeviceReady+0x170>
 8001d90:	7dfb      	ldrb	r3, [r7, #23]
 8001d92:	2b00      	cmp	r3, #0
 8001d94:	d102      	bne.n	8001d9c <HAL_I2C_IsDeviceReady+0x170>
 8001d96:	7dbb      	ldrb	r3, [r7, #22]
 8001d98:	2b00      	cmp	r3, #0
 8001d9a:	d0cd      	beq.n	8001d38 <HAL_I2C_IsDeviceReady+0x10c>
      }

      hi2c->State = HAL_I2C_STATE_READY;
 8001d9c:	68fb      	ldr	r3, [r7, #12]
 8001d9e:	2220      	movs	r2, #32
 8001da0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

      /* Check if the ADDR flag has been set */
      if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_ADDR) == SET)
 8001da4:	68fb      	ldr	r3, [r7, #12]
 8001da6:	681b      	ldr	r3, [r3, #0]
 8001da8:	695b      	ldr	r3, [r3, #20]
 8001daa:	f003 0302 	and.w	r3, r3, #2
 8001dae:	2b02      	cmp	r3, #2
 8001db0:	d129      	bne.n	8001e06 <HAL_I2C_IsDeviceReady+0x1da>
      {
        /* Generate Stop */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8001db2:	68fb      	ldr	r3, [r7, #12]
 8001db4:	681b      	ldr	r3, [r3, #0]
 8001db6:	681a      	ldr	r2, [r3, #0]
 8001db8:	68fb      	ldr	r3, [r7, #12]
 8001dba:	681b      	ldr	r3, [r3, #0]
 8001dbc:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8001dc0:	601a      	str	r2, [r3, #0]

        /* Clear ADDR Flag */
        __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8001dc2:	2300      	movs	r3, #0
 8001dc4:	613b      	str	r3, [r7, #16]
 8001dc6:	68fb      	ldr	r3, [r7, #12]
 8001dc8:	681b      	ldr	r3, [r3, #0]
 8001dca:	695b      	ldr	r3, [r3, #20]
 8001dcc:	613b      	str	r3, [r7, #16]
 8001dce:	68fb      	ldr	r3, [r7, #12]
 8001dd0:	681b      	ldr	r3, [r3, #0]
 8001dd2:	699b      	ldr	r3, [r3, #24]
 8001dd4:	613b      	str	r3, [r7, #16]
 8001dd6:	693b      	ldr	r3, [r7, #16]

        /* Wait until BUSY flag is reset */
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 8001dd8:	69fb      	ldr	r3, [r7, #28]
 8001dda:	9300      	str	r3, [sp, #0]
 8001ddc:	2319      	movs	r3, #25
 8001dde:	2201      	movs	r2, #1
 8001de0:	4921      	ldr	r1, [pc, #132]	; (8001e68 <HAL_I2C_IsDeviceReady+0x23c>)
 8001de2:	68f8      	ldr	r0, [r7, #12]
 8001de4:	f000 f98a 	bl	80020fc <I2C_WaitOnFlagUntilTimeout>
 8001de8:	4603      	mov	r3, r0
 8001dea:	2b00      	cmp	r3, #0
 8001dec:	d001      	beq.n	8001df2 <HAL_I2C_IsDeviceReady+0x1c6>
        {
          return HAL_ERROR;
 8001dee:	2301      	movs	r3, #1
 8001df0:	e036      	b.n	8001e60 <HAL_I2C_IsDeviceReady+0x234>
        }

        hi2c->State = HAL_I2C_STATE_READY;
 8001df2:	68fb      	ldr	r3, [r7, #12]
 8001df4:	2220      	movs	r2, #32
 8001df6:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8001dfa:	68fb      	ldr	r3, [r7, #12]
 8001dfc:	2200      	movs	r2, #0
 8001dfe:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_OK;
 8001e02:	2300      	movs	r3, #0
 8001e04:	e02c      	b.n	8001e60 <HAL_I2C_IsDeviceReady+0x234>
      }
      else
      {
        /* Generate Stop */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8001e06:	68fb      	ldr	r3, [r7, #12]
 8001e08:	681b      	ldr	r3, [r3, #0]
 8001e0a:	681a      	ldr	r2, [r3, #0]
 8001e0c:	68fb      	ldr	r3, [r7, #12]
 8001e0e:	681b      	ldr	r3, [r3, #0]
 8001e10:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8001e14:	601a      	str	r2, [r3, #0]

        /* Clear AF Flag */
        __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8001e16:	68fb      	ldr	r3, [r7, #12]
 8001e18:	681b      	ldr	r3, [r3, #0]
 8001e1a:	f46f 6280 	mvn.w	r2, #1024	; 0x400
 8001e1e:	615a      	str	r2, [r3, #20]

        /* Wait until BUSY flag is reset */
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 8001e20:	69fb      	ldr	r3, [r7, #28]
 8001e22:	9300      	str	r3, [sp, #0]
 8001e24:	2319      	movs	r3, #25
 8001e26:	2201      	movs	r2, #1
 8001e28:	490f      	ldr	r1, [pc, #60]	; (8001e68 <HAL_I2C_IsDeviceReady+0x23c>)
 8001e2a:	68f8      	ldr	r0, [r7, #12]
 8001e2c:	f000 f966 	bl	80020fc <I2C_WaitOnFlagUntilTimeout>
 8001e30:	4603      	mov	r3, r0
 8001e32:	2b00      	cmp	r3, #0
 8001e34:	d001      	beq.n	8001e3a <HAL_I2C_IsDeviceReady+0x20e>
        {
          return HAL_ERROR;
 8001e36:	2301      	movs	r3, #1
 8001e38:	e012      	b.n	8001e60 <HAL_I2C_IsDeviceReady+0x234>
        }
      }

      /* Increment Trials */
      I2C_Trials++;
 8001e3a:	69bb      	ldr	r3, [r7, #24]
 8001e3c:	3301      	adds	r3, #1
 8001e3e:	61bb      	str	r3, [r7, #24]
    }
    while (I2C_Trials < Trials);
 8001e40:	69ba      	ldr	r2, [r7, #24]
 8001e42:	687b      	ldr	r3, [r7, #4]
 8001e44:	429a      	cmp	r2, r3
 8001e46:	f4ff af3e 	bcc.w	8001cc6 <HAL_I2C_IsDeviceReady+0x9a>

    hi2c->State = HAL_I2C_STATE_READY;
 8001e4a:	68fb      	ldr	r3, [r7, #12]
 8001e4c:	2220      	movs	r2, #32
 8001e4e:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8001e52:	68fb      	ldr	r3, [r7, #12]
 8001e54:	2200      	movs	r2, #0
 8001e56:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    return HAL_ERROR;
 8001e5a:	2301      	movs	r3, #1
 8001e5c:	e000      	b.n	8001e60 <HAL_I2C_IsDeviceReady+0x234>
  }
  else
  {
    return HAL_BUSY;
 8001e5e:	2302      	movs	r3, #2
  }
}
 8001e60:	4618      	mov	r0, r3
 8001e62:	3720      	adds	r7, #32
 8001e64:	46bd      	mov	sp, r7
 8001e66:	bd80      	pop	{r7, pc}
 8001e68:	00100002 	.word	0x00100002
 8001e6c:	ffff0000 	.word	0xffff0000

08001e70 <I2C_MasterRequestWrite>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_MasterRequestWrite(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint32_t Timeout, uint32_t Tickstart)
{
 8001e70:	b580      	push	{r7, lr}
 8001e72:	b088      	sub	sp, #32
 8001e74:	af02      	add	r7, sp, #8
 8001e76:	60f8      	str	r0, [r7, #12]
 8001e78:	607a      	str	r2, [r7, #4]
 8001e7a:	603b      	str	r3, [r7, #0]
 8001e7c:	460b      	mov	r3, r1
 8001e7e:	817b      	strh	r3, [r7, #10]
  /* Declaration of temporary variable to prevent undefined behavior of volatile usage */
  uint32_t CurrentXferOptions = hi2c->XferOptions;
 8001e80:	68fb      	ldr	r3, [r7, #12]
 8001e82:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001e84:	617b      	str	r3, [r7, #20]

  /* Generate Start condition if first transfer */
  if ((CurrentXferOptions == I2C_FIRST_AND_LAST_FRAME) || (CurrentXferOptions == I2C_FIRST_FRAME) || (CurrentXferOptions == I2C_NO_OPTION_FRAME))
 8001e86:	697b      	ldr	r3, [r7, #20]
 8001e88:	2b08      	cmp	r3, #8
 8001e8a:	d006      	beq.n	8001e9a <I2C_MasterRequestWrite+0x2a>
 8001e8c:	697b      	ldr	r3, [r7, #20]
 8001e8e:	2b01      	cmp	r3, #1
 8001e90:	d003      	beq.n	8001e9a <I2C_MasterRequestWrite+0x2a>
 8001e92:	697b      	ldr	r3, [r7, #20]
 8001e94:	f513 3f80 	cmn.w	r3, #65536	; 0x10000
 8001e98:	d108      	bne.n	8001eac <I2C_MasterRequestWrite+0x3c>
  {
    /* Generate Start */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8001e9a:	68fb      	ldr	r3, [r7, #12]
 8001e9c:	681b      	ldr	r3, [r3, #0]
 8001e9e:	681a      	ldr	r2, [r3, #0]
 8001ea0:	68fb      	ldr	r3, [r7, #12]
 8001ea2:	681b      	ldr	r3, [r3, #0]
 8001ea4:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8001ea8:	601a      	str	r2, [r3, #0]
 8001eaa:	e00b      	b.n	8001ec4 <I2C_MasterRequestWrite+0x54>
  }
  else if (hi2c->PreviousState == I2C_STATE_MASTER_BUSY_RX)
 8001eac:	68fb      	ldr	r3, [r7, #12]
 8001eae:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001eb0:	2b12      	cmp	r3, #18
 8001eb2:	d107      	bne.n	8001ec4 <I2C_MasterRequestWrite+0x54>
  {
    /* Generate ReStart */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8001eb4:	68fb      	ldr	r3, [r7, #12]
 8001eb6:	681b      	ldr	r3, [r3, #0]
 8001eb8:	681a      	ldr	r2, [r3, #0]
 8001eba:	68fb      	ldr	r3, [r7, #12]
 8001ebc:	681b      	ldr	r3, [r3, #0]
 8001ebe:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8001ec2:	601a      	str	r2, [r3, #0]
  {
    /* Do nothing */
  }

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 8001ec4:	683b      	ldr	r3, [r7, #0]
 8001ec6:	9300      	str	r3, [sp, #0]
 8001ec8:	687b      	ldr	r3, [r7, #4]
 8001eca:	2200      	movs	r2, #0
 8001ecc:	f04f 1101 	mov.w	r1, #65537	; 0x10001
 8001ed0:	68f8      	ldr	r0, [r7, #12]
 8001ed2:	f000 f913 	bl	80020fc <I2C_WaitOnFlagUntilTimeout>
 8001ed6:	4603      	mov	r3, r0
 8001ed8:	2b00      	cmp	r3, #0
 8001eda:	d001      	beq.n	8001ee0 <I2C_MasterRequestWrite+0x70>
  {
    return HAL_ERROR;
 8001edc:	2301      	movs	r3, #1
 8001ede:	e035      	b.n	8001f4c <I2C_MasterRequestWrite+0xdc>
  }

  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 8001ee0:	68fb      	ldr	r3, [r7, #12]
 8001ee2:	691b      	ldr	r3, [r3, #16]
 8001ee4:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8001ee8:	d108      	bne.n	8001efc <I2C_MasterRequestWrite+0x8c>
  {
    /* Send slave address */
    hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(DevAddress);
 8001eea:	897b      	ldrh	r3, [r7, #10]
 8001eec:	b2db      	uxtb	r3, r3
 8001eee:	461a      	mov	r2, r3
 8001ef0:	68fb      	ldr	r3, [r7, #12]
 8001ef2:	681b      	ldr	r3, [r3, #0]
 8001ef4:	f002 02fe 	and.w	r2, r2, #254	; 0xfe
 8001ef8:	611a      	str	r2, [r3, #16]
 8001efa:	e01b      	b.n	8001f34 <I2C_MasterRequestWrite+0xc4>
  }
  else
  {
    /* Send header of slave address */
    hi2c->Instance->DR = I2C_10BIT_HEADER_WRITE(DevAddress);
 8001efc:	897b      	ldrh	r3, [r7, #10]
 8001efe:	11db      	asrs	r3, r3, #7
 8001f00:	b2db      	uxtb	r3, r3
 8001f02:	f003 0306 	and.w	r3, r3, #6
 8001f06:	b2db      	uxtb	r3, r3
 8001f08:	f063 030f 	orn	r3, r3, #15
 8001f0c:	b2da      	uxtb	r2, r3
 8001f0e:	68fb      	ldr	r3, [r7, #12]
 8001f10:	681b      	ldr	r3, [r3, #0]
 8001f12:	611a      	str	r2, [r3, #16]

    /* Wait until ADD10 flag is set */
    if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADD10, Timeout, Tickstart) != HAL_OK)
 8001f14:	683b      	ldr	r3, [r7, #0]
 8001f16:	687a      	ldr	r2, [r7, #4]
 8001f18:	490e      	ldr	r1, [pc, #56]	; (8001f54 <I2C_MasterRequestWrite+0xe4>)
 8001f1a:	68f8      	ldr	r0, [r7, #12]
 8001f1c:	f000 f945 	bl	80021aa <I2C_WaitOnMasterAddressFlagUntilTimeout>
 8001f20:	4603      	mov	r3, r0
 8001f22:	2b00      	cmp	r3, #0
 8001f24:	d001      	beq.n	8001f2a <I2C_MasterRequestWrite+0xba>
    {
      return HAL_ERROR;
 8001f26:	2301      	movs	r3, #1
 8001f28:	e010      	b.n	8001f4c <I2C_MasterRequestWrite+0xdc>
    }

    /* Send slave address */
    hi2c->Instance->DR = I2C_10BIT_ADDRESS(DevAddress);
 8001f2a:	897b      	ldrh	r3, [r7, #10]
 8001f2c:	b2da      	uxtb	r2, r3
 8001f2e:	68fb      	ldr	r3, [r7, #12]
 8001f30:	681b      	ldr	r3, [r3, #0]
 8001f32:	611a      	str	r2, [r3, #16]
  }

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 8001f34:	683b      	ldr	r3, [r7, #0]
 8001f36:	687a      	ldr	r2, [r7, #4]
 8001f38:	4907      	ldr	r1, [pc, #28]	; (8001f58 <I2C_MasterRequestWrite+0xe8>)
 8001f3a:	68f8      	ldr	r0, [r7, #12]
 8001f3c:	f000 f935 	bl	80021aa <I2C_WaitOnMasterAddressFlagUntilTimeout>
 8001f40:	4603      	mov	r3, r0
 8001f42:	2b00      	cmp	r3, #0
 8001f44:	d001      	beq.n	8001f4a <I2C_MasterRequestWrite+0xda>
  {
    return HAL_ERROR;
 8001f46:	2301      	movs	r3, #1
 8001f48:	e000      	b.n	8001f4c <I2C_MasterRequestWrite+0xdc>
  }

  return HAL_OK;
 8001f4a:	2300      	movs	r3, #0
}
 8001f4c:	4618      	mov	r0, r3
 8001f4e:	3718      	adds	r7, #24
 8001f50:	46bd      	mov	sp, r7
 8001f52:	bd80      	pop	{r7, pc}
 8001f54:	00010008 	.word	0x00010008
 8001f58:	00010002 	.word	0x00010002

08001f5c <I2C_RequestMemoryRead>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_RequestMemoryRead(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress, uint16_t MemAddSize, uint32_t Timeout, uint32_t Tickstart)
{
 8001f5c:	b580      	push	{r7, lr}
 8001f5e:	b088      	sub	sp, #32
 8001f60:	af02      	add	r7, sp, #8
 8001f62:	60f8      	str	r0, [r7, #12]
 8001f64:	4608      	mov	r0, r1
 8001f66:	4611      	mov	r1, r2
 8001f68:	461a      	mov	r2, r3
 8001f6a:	4603      	mov	r3, r0
 8001f6c:	817b      	strh	r3, [r7, #10]
 8001f6e:	460b      	mov	r3, r1
 8001f70:	813b      	strh	r3, [r7, #8]
 8001f72:	4613      	mov	r3, r2
 8001f74:	80fb      	strh	r3, [r7, #6]
  /* Enable Acknowledge */
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8001f76:	68fb      	ldr	r3, [r7, #12]
 8001f78:	681b      	ldr	r3, [r3, #0]
 8001f7a:	681a      	ldr	r2, [r3, #0]
 8001f7c:	68fb      	ldr	r3, [r7, #12]
 8001f7e:	681b      	ldr	r3, [r3, #0]
 8001f80:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 8001f84:	601a      	str	r2, [r3, #0]

  /* Generate Start */
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8001f86:	68fb      	ldr	r3, [r7, #12]
 8001f88:	681b      	ldr	r3, [r3, #0]
 8001f8a:	681a      	ldr	r2, [r3, #0]
 8001f8c:	68fb      	ldr	r3, [r7, #12]
 8001f8e:	681b      	ldr	r3, [r3, #0]
 8001f90:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8001f94:	601a      	str	r2, [r3, #0]

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 8001f96:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001f98:	9300      	str	r3, [sp, #0]
 8001f9a:	6a3b      	ldr	r3, [r7, #32]
 8001f9c:	2200      	movs	r2, #0
 8001f9e:	f04f 1101 	mov.w	r1, #65537	; 0x10001
 8001fa2:	68f8      	ldr	r0, [r7, #12]
 8001fa4:	f000 f8aa 	bl	80020fc <I2C_WaitOnFlagUntilTimeout>
 8001fa8:	4603      	mov	r3, r0
 8001faa:	2b00      	cmp	r3, #0
 8001fac:	d001      	beq.n	8001fb2 <I2C_RequestMemoryRead+0x56>
  {
    return HAL_ERROR;
 8001fae:	2301      	movs	r3, #1
 8001fb0:	e09e      	b.n	80020f0 <I2C_RequestMemoryRead+0x194>
  }

  /* Send slave address */
  hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(DevAddress);
 8001fb2:	897b      	ldrh	r3, [r7, #10]
 8001fb4:	b2db      	uxtb	r3, r3
 8001fb6:	461a      	mov	r2, r3
 8001fb8:	68fb      	ldr	r3, [r7, #12]
 8001fba:	681b      	ldr	r3, [r3, #0]
 8001fbc:	f002 02fe 	and.w	r2, r2, #254	; 0xfe
 8001fc0:	611a      	str	r2, [r3, #16]

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 8001fc2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001fc4:	6a3a      	ldr	r2, [r7, #32]
 8001fc6:	494c      	ldr	r1, [pc, #304]	; (80020f8 <I2C_RequestMemoryRead+0x19c>)
 8001fc8:	68f8      	ldr	r0, [r7, #12]
 8001fca:	f000 f8ee 	bl	80021aa <I2C_WaitOnMasterAddressFlagUntilTimeout>
 8001fce:	4603      	mov	r3, r0
 8001fd0:	2b00      	cmp	r3, #0
 8001fd2:	d001      	beq.n	8001fd8 <I2C_RequestMemoryRead+0x7c>
  {
    return HAL_ERROR;
 8001fd4:	2301      	movs	r3, #1
 8001fd6:	e08b      	b.n	80020f0 <I2C_RequestMemoryRead+0x194>
  }

  /* Clear ADDR flag */
  __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8001fd8:	2300      	movs	r3, #0
 8001fda:	617b      	str	r3, [r7, #20]
 8001fdc:	68fb      	ldr	r3, [r7, #12]
 8001fde:	681b      	ldr	r3, [r3, #0]
 8001fe0:	695b      	ldr	r3, [r3, #20]
 8001fe2:	617b      	str	r3, [r7, #20]
 8001fe4:	68fb      	ldr	r3, [r7, #12]
 8001fe6:	681b      	ldr	r3, [r3, #0]
 8001fe8:	699b      	ldr	r3, [r3, #24]
 8001fea:	617b      	str	r3, [r7, #20]
 8001fec:	697b      	ldr	r3, [r7, #20]

  /* Wait until TXE flag is set */
  if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8001fee:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8001ff0:	6a39      	ldr	r1, [r7, #32]
 8001ff2:	68f8      	ldr	r0, [r7, #12]
 8001ff4:	f000 f958 	bl	80022a8 <I2C_WaitOnTXEFlagUntilTimeout>
 8001ff8:	4603      	mov	r3, r0
 8001ffa:	2b00      	cmp	r3, #0
 8001ffc:	d00d      	beq.n	800201a <I2C_RequestMemoryRead+0xbe>
  {
    if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8001ffe:	68fb      	ldr	r3, [r7, #12]
 8002000:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002002:	2b04      	cmp	r3, #4
 8002004:	d107      	bne.n	8002016 <I2C_RequestMemoryRead+0xba>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8002006:	68fb      	ldr	r3, [r7, #12]
 8002008:	681b      	ldr	r3, [r3, #0]
 800200a:	681a      	ldr	r2, [r3, #0]
 800200c:	68fb      	ldr	r3, [r7, #12]
 800200e:	681b      	ldr	r3, [r3, #0]
 8002010:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8002014:	601a      	str	r2, [r3, #0]
    }
    return HAL_ERROR;
 8002016:	2301      	movs	r3, #1
 8002018:	e06a      	b.n	80020f0 <I2C_RequestMemoryRead+0x194>
  }

  /* If Memory address size is 8Bit */
  if (MemAddSize == I2C_MEMADD_SIZE_8BIT)
 800201a:	88fb      	ldrh	r3, [r7, #6]
 800201c:	2b01      	cmp	r3, #1
 800201e:	d105      	bne.n	800202c <I2C_RequestMemoryRead+0xd0>
  {
    /* Send Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(MemAddress);
 8002020:	893b      	ldrh	r3, [r7, #8]
 8002022:	b2da      	uxtb	r2, r3
 8002024:	68fb      	ldr	r3, [r7, #12]
 8002026:	681b      	ldr	r3, [r3, #0]
 8002028:	611a      	str	r2, [r3, #16]
 800202a:	e021      	b.n	8002070 <I2C_RequestMemoryRead+0x114>
  }
  /* If Memory address size is 16Bit */
  else
  {
    /* Send MSB of Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_MSB(MemAddress);
 800202c:	893b      	ldrh	r3, [r7, #8]
 800202e:	0a1b      	lsrs	r3, r3, #8
 8002030:	b29b      	uxth	r3, r3
 8002032:	b2da      	uxtb	r2, r3
 8002034:	68fb      	ldr	r3, [r7, #12]
 8002036:	681b      	ldr	r3, [r3, #0]
 8002038:	611a      	str	r2, [r3, #16]

    /* Wait until TXE flag is set */
    if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 800203a:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800203c:	6a39      	ldr	r1, [r7, #32]
 800203e:	68f8      	ldr	r0, [r7, #12]
 8002040:	f000 f932 	bl	80022a8 <I2C_WaitOnTXEFlagUntilTimeout>
 8002044:	4603      	mov	r3, r0
 8002046:	2b00      	cmp	r3, #0
 8002048:	d00d      	beq.n	8002066 <I2C_RequestMemoryRead+0x10a>
    {
      if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 800204a:	68fb      	ldr	r3, [r7, #12]
 800204c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800204e:	2b04      	cmp	r3, #4
 8002050:	d107      	bne.n	8002062 <I2C_RequestMemoryRead+0x106>
      {
        /* Generate Stop */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8002052:	68fb      	ldr	r3, [r7, #12]
 8002054:	681b      	ldr	r3, [r3, #0]
 8002056:	681a      	ldr	r2, [r3, #0]
 8002058:	68fb      	ldr	r3, [r7, #12]
 800205a:	681b      	ldr	r3, [r3, #0]
 800205c:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8002060:	601a      	str	r2, [r3, #0]
      }
      return HAL_ERROR;
 8002062:	2301      	movs	r3, #1
 8002064:	e044      	b.n	80020f0 <I2C_RequestMemoryRead+0x194>
    }

    /* Send LSB of Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(MemAddress);
 8002066:	893b      	ldrh	r3, [r7, #8]
 8002068:	b2da      	uxtb	r2, r3
 800206a:	68fb      	ldr	r3, [r7, #12]
 800206c:	681b      	ldr	r3, [r3, #0]
 800206e:	611a      	str	r2, [r3, #16]
  }

  /* Wait until TXE flag is set */
  if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8002070:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8002072:	6a39      	ldr	r1, [r7, #32]
 8002074:	68f8      	ldr	r0, [r7, #12]
 8002076:	f000 f917 	bl	80022a8 <I2C_WaitOnTXEFlagUntilTimeout>
 800207a:	4603      	mov	r3, r0
 800207c:	2b00      	cmp	r3, #0
 800207e:	d00d      	beq.n	800209c <I2C_RequestMemoryRead+0x140>
  {
    if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8002080:	68fb      	ldr	r3, [r7, #12]
 8002082:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002084:	2b04      	cmp	r3, #4
 8002086:	d107      	bne.n	8002098 <I2C_RequestMemoryRead+0x13c>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8002088:	68fb      	ldr	r3, [r7, #12]
 800208a:	681b      	ldr	r3, [r3, #0]
 800208c:	681a      	ldr	r2, [r3, #0]
 800208e:	68fb      	ldr	r3, [r7, #12]
 8002090:	681b      	ldr	r3, [r3, #0]
 8002092:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8002096:	601a      	str	r2, [r3, #0]
    }
    return HAL_ERROR;
 8002098:	2301      	movs	r3, #1
 800209a:	e029      	b.n	80020f0 <I2C_RequestMemoryRead+0x194>
  }

  /* Generate Restart */
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 800209c:	68fb      	ldr	r3, [r7, #12]
 800209e:	681b      	ldr	r3, [r3, #0]
 80020a0:	681a      	ldr	r2, [r3, #0]
 80020a2:	68fb      	ldr	r3, [r7, #12]
 80020a4:	681b      	ldr	r3, [r3, #0]
 80020a6:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 80020aa:	601a      	str	r2, [r3, #0]

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 80020ac:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80020ae:	9300      	str	r3, [sp, #0]
 80020b0:	6a3b      	ldr	r3, [r7, #32]
 80020b2:	2200      	movs	r2, #0
 80020b4:	f04f 1101 	mov.w	r1, #65537	; 0x10001
 80020b8:	68f8      	ldr	r0, [r7, #12]
 80020ba:	f000 f81f 	bl	80020fc <I2C_WaitOnFlagUntilTimeout>
 80020be:	4603      	mov	r3, r0
 80020c0:	2b00      	cmp	r3, #0
 80020c2:	d001      	beq.n	80020c8 <I2C_RequestMemoryRead+0x16c>
  {
    return HAL_ERROR;
 80020c4:	2301      	movs	r3, #1
 80020c6:	e013      	b.n	80020f0 <I2C_RequestMemoryRead+0x194>
  }

  /* Send slave address */
  hi2c->Instance->DR = I2C_7BIT_ADD_READ(DevAddress);
 80020c8:	897b      	ldrh	r3, [r7, #10]
 80020ca:	b2db      	uxtb	r3, r3
 80020cc:	f043 0301 	orr.w	r3, r3, #1
 80020d0:	b2da      	uxtb	r2, r3
 80020d2:	68fb      	ldr	r3, [r7, #12]
 80020d4:	681b      	ldr	r3, [r3, #0]
 80020d6:	611a      	str	r2, [r3, #16]

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 80020d8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80020da:	6a3a      	ldr	r2, [r7, #32]
 80020dc:	4906      	ldr	r1, [pc, #24]	; (80020f8 <I2C_RequestMemoryRead+0x19c>)
 80020de:	68f8      	ldr	r0, [r7, #12]
 80020e0:	f000 f863 	bl	80021aa <I2C_WaitOnMasterAddressFlagUntilTimeout>
 80020e4:	4603      	mov	r3, r0
 80020e6:	2b00      	cmp	r3, #0
 80020e8:	d001      	beq.n	80020ee <I2C_RequestMemoryRead+0x192>
  {
    return HAL_ERROR;
 80020ea:	2301      	movs	r3, #1
 80020ec:	e000      	b.n	80020f0 <I2C_RequestMemoryRead+0x194>
  }

  return HAL_OK;
 80020ee:	2300      	movs	r3, #0
}
 80020f0:	4618      	mov	r0, r3
 80020f2:	3718      	adds	r7, #24
 80020f4:	46bd      	mov	sp, r7
 80020f6:	bd80      	pop	{r7, pc}
 80020f8:	00010002 	.word	0x00010002

080020fc <I2C_WaitOnFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, FlagStatus Status, uint32_t Timeout, uint32_t Tickstart)
{
 80020fc:	b580      	push	{r7, lr}
 80020fe:	b084      	sub	sp, #16
 8002100:	af00      	add	r7, sp, #0
 8002102:	60f8      	str	r0, [r7, #12]
 8002104:	60b9      	str	r1, [r7, #8]
 8002106:	603b      	str	r3, [r7, #0]
 8002108:	4613      	mov	r3, r2
 800210a:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 800210c:	e025      	b.n	800215a <I2C_WaitOnFlagUntilTimeout+0x5e>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 800210e:	683b      	ldr	r3, [r7, #0]
 8002110:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002114:	d021      	beq.n	800215a <I2C_WaitOnFlagUntilTimeout+0x5e>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8002116:	f7fe fe5b 	bl	8000dd0 <HAL_GetTick>
 800211a:	4602      	mov	r2, r0
 800211c:	69bb      	ldr	r3, [r7, #24]
 800211e:	1ad3      	subs	r3, r2, r3
 8002120:	683a      	ldr	r2, [r7, #0]
 8002122:	429a      	cmp	r2, r3
 8002124:	d302      	bcc.n	800212c <I2C_WaitOnFlagUntilTimeout+0x30>
 8002126:	683b      	ldr	r3, [r7, #0]
 8002128:	2b00      	cmp	r3, #0
 800212a:	d116      	bne.n	800215a <I2C_WaitOnFlagUntilTimeout+0x5e>
      {
        hi2c->PreviousState     = I2C_STATE_NONE;
 800212c:	68fb      	ldr	r3, [r7, #12]
 800212e:	2200      	movs	r2, #0
 8002130:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State             = HAL_I2C_STATE_READY;
 8002132:	68fb      	ldr	r3, [r7, #12]
 8002134:	2220      	movs	r2, #32
 8002136:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode              = HAL_I2C_MODE_NONE;
 800213a:	68fb      	ldr	r3, [r7, #12]
 800213c:	2200      	movs	r2, #0
 800213e:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode         |= HAL_I2C_ERROR_TIMEOUT;
 8002142:	68fb      	ldr	r3, [r7, #12]
 8002144:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002146:	f043 0220 	orr.w	r2, r3, #32
 800214a:	68fb      	ldr	r3, [r7, #12]
 800214c:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 800214e:	68fb      	ldr	r3, [r7, #12]
 8002150:	2200      	movs	r2, #0
 8002152:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 8002156:	2301      	movs	r3, #1
 8002158:	e023      	b.n	80021a2 <I2C_WaitOnFlagUntilTimeout+0xa6>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 800215a:	68bb      	ldr	r3, [r7, #8]
 800215c:	0c1b      	lsrs	r3, r3, #16
 800215e:	b2db      	uxtb	r3, r3
 8002160:	2b01      	cmp	r3, #1
 8002162:	d10d      	bne.n	8002180 <I2C_WaitOnFlagUntilTimeout+0x84>
 8002164:	68fb      	ldr	r3, [r7, #12]
 8002166:	681b      	ldr	r3, [r3, #0]
 8002168:	695b      	ldr	r3, [r3, #20]
 800216a:	43da      	mvns	r2, r3
 800216c:	68bb      	ldr	r3, [r7, #8]
 800216e:	4013      	ands	r3, r2
 8002170:	b29b      	uxth	r3, r3
 8002172:	2b00      	cmp	r3, #0
 8002174:	bf0c      	ite	eq
 8002176:	2301      	moveq	r3, #1
 8002178:	2300      	movne	r3, #0
 800217a:	b2db      	uxtb	r3, r3
 800217c:	461a      	mov	r2, r3
 800217e:	e00c      	b.n	800219a <I2C_WaitOnFlagUntilTimeout+0x9e>
 8002180:	68fb      	ldr	r3, [r7, #12]
 8002182:	681b      	ldr	r3, [r3, #0]
 8002184:	699b      	ldr	r3, [r3, #24]
 8002186:	43da      	mvns	r2, r3
 8002188:	68bb      	ldr	r3, [r7, #8]
 800218a:	4013      	ands	r3, r2
 800218c:	b29b      	uxth	r3, r3
 800218e:	2b00      	cmp	r3, #0
 8002190:	bf0c      	ite	eq
 8002192:	2301      	moveq	r3, #1
 8002194:	2300      	movne	r3, #0
 8002196:	b2db      	uxtb	r3, r3
 8002198:	461a      	mov	r2, r3
 800219a:	79fb      	ldrb	r3, [r7, #7]
 800219c:	429a      	cmp	r2, r3
 800219e:	d0b6      	beq.n	800210e <I2C_WaitOnFlagUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
 80021a0:	2300      	movs	r3, #0
}
 80021a2:	4618      	mov	r0, r3
 80021a4:	3710      	adds	r7, #16
 80021a6:	46bd      	mov	sp, r7
 80021a8:	bd80      	pop	{r7, pc}

080021aa <I2C_WaitOnMasterAddressFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnMasterAddressFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, uint32_t Timeout, uint32_t Tickstart)
{
 80021aa:	b580      	push	{r7, lr}
 80021ac:	b084      	sub	sp, #16
 80021ae:	af00      	add	r7, sp, #0
 80021b0:	60f8      	str	r0, [r7, #12]
 80021b2:	60b9      	str	r1, [r7, #8]
 80021b4:	607a      	str	r2, [r7, #4]
 80021b6:	603b      	str	r3, [r7, #0]
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET)
 80021b8:	e051      	b.n	800225e <I2C_WaitOnMasterAddressFlagUntilTimeout+0xb4>
  {
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 80021ba:	68fb      	ldr	r3, [r7, #12]
 80021bc:	681b      	ldr	r3, [r3, #0]
 80021be:	695b      	ldr	r3, [r3, #20]
 80021c0:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80021c4:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80021c8:	d123      	bne.n	8002212 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x68>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80021ca:	68fb      	ldr	r3, [r7, #12]
 80021cc:	681b      	ldr	r3, [r3, #0]
 80021ce:	681a      	ldr	r2, [r3, #0]
 80021d0:	68fb      	ldr	r3, [r7, #12]
 80021d2:	681b      	ldr	r3, [r3, #0]
 80021d4:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 80021d8:	601a      	str	r2, [r3, #0]

      /* Clear AF Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 80021da:	68fb      	ldr	r3, [r7, #12]
 80021dc:	681b      	ldr	r3, [r3, #0]
 80021de:	f46f 6280 	mvn.w	r2, #1024	; 0x400
 80021e2:	615a      	str	r2, [r3, #20]

      hi2c->PreviousState       = I2C_STATE_NONE;
 80021e4:	68fb      	ldr	r3, [r7, #12]
 80021e6:	2200      	movs	r2, #0
 80021e8:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State               = HAL_I2C_STATE_READY;
 80021ea:	68fb      	ldr	r3, [r7, #12]
 80021ec:	2220      	movs	r2, #32
 80021ee:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      hi2c->Mode                = HAL_I2C_MODE_NONE;
 80021f2:	68fb      	ldr	r3, [r7, #12]
 80021f4:	2200      	movs	r2, #0
 80021f6:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      hi2c->ErrorCode           |= HAL_I2C_ERROR_AF;
 80021fa:	68fb      	ldr	r3, [r7, #12]
 80021fc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80021fe:	f043 0204 	orr.w	r2, r3, #4
 8002202:	68fb      	ldr	r3, [r7, #12]
 8002204:	641a      	str	r2, [r3, #64]	; 0x40

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8002206:	68fb      	ldr	r3, [r7, #12]
 8002208:	2200      	movs	r2, #0
 800220a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

      return HAL_ERROR;
 800220e:	2301      	movs	r3, #1
 8002210:	e046      	b.n	80022a0 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf6>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8002212:	687b      	ldr	r3, [r7, #4]
 8002214:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002218:	d021      	beq.n	800225e <I2C_WaitOnMasterAddressFlagUntilTimeout+0xb4>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800221a:	f7fe fdd9 	bl	8000dd0 <HAL_GetTick>
 800221e:	4602      	mov	r2, r0
 8002220:	683b      	ldr	r3, [r7, #0]
 8002222:	1ad3      	subs	r3, r2, r3
 8002224:	687a      	ldr	r2, [r7, #4]
 8002226:	429a      	cmp	r2, r3
 8002228:	d302      	bcc.n	8002230 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x86>
 800222a:	687b      	ldr	r3, [r7, #4]
 800222c:	2b00      	cmp	r3, #0
 800222e:	d116      	bne.n	800225e <I2C_WaitOnMasterAddressFlagUntilTimeout+0xb4>
      {
        hi2c->PreviousState       = I2C_STATE_NONE;
 8002230:	68fb      	ldr	r3, [r7, #12]
 8002232:	2200      	movs	r2, #0
 8002234:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State               = HAL_I2C_STATE_READY;
 8002236:	68fb      	ldr	r3, [r7, #12]
 8002238:	2220      	movs	r2, #32
 800223a:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode                = HAL_I2C_MODE_NONE;
 800223e:	68fb      	ldr	r3, [r7, #12]
 8002240:	2200      	movs	r2, #0
 8002242:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8002246:	68fb      	ldr	r3, [r7, #12]
 8002248:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800224a:	f043 0220 	orr.w	r2, r3, #32
 800224e:	68fb      	ldr	r3, [r7, #12]
 8002250:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8002252:	68fb      	ldr	r3, [r7, #12]
 8002254:	2200      	movs	r2, #0
 8002256:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 800225a:	2301      	movs	r3, #1
 800225c:	e020      	b.n	80022a0 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf6>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET)
 800225e:	68bb      	ldr	r3, [r7, #8]
 8002260:	0c1b      	lsrs	r3, r3, #16
 8002262:	b2db      	uxtb	r3, r3
 8002264:	2b01      	cmp	r3, #1
 8002266:	d10c      	bne.n	8002282 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xd8>
 8002268:	68fb      	ldr	r3, [r7, #12]
 800226a:	681b      	ldr	r3, [r3, #0]
 800226c:	695b      	ldr	r3, [r3, #20]
 800226e:	43da      	mvns	r2, r3
 8002270:	68bb      	ldr	r3, [r7, #8]
 8002272:	4013      	ands	r3, r2
 8002274:	b29b      	uxth	r3, r3
 8002276:	2b00      	cmp	r3, #0
 8002278:	bf14      	ite	ne
 800227a:	2301      	movne	r3, #1
 800227c:	2300      	moveq	r3, #0
 800227e:	b2db      	uxtb	r3, r3
 8002280:	e00b      	b.n	800229a <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf0>
 8002282:	68fb      	ldr	r3, [r7, #12]
 8002284:	681b      	ldr	r3, [r3, #0]
 8002286:	699b      	ldr	r3, [r3, #24]
 8002288:	43da      	mvns	r2, r3
 800228a:	68bb      	ldr	r3, [r7, #8]
 800228c:	4013      	ands	r3, r2
 800228e:	b29b      	uxth	r3, r3
 8002290:	2b00      	cmp	r3, #0
 8002292:	bf14      	ite	ne
 8002294:	2301      	movne	r3, #1
 8002296:	2300      	moveq	r3, #0
 8002298:	b2db      	uxtb	r3, r3
 800229a:	2b00      	cmp	r3, #0
 800229c:	d18d      	bne.n	80021ba <I2C_WaitOnMasterAddressFlagUntilTimeout+0x10>
      }
    }
  }
  return HAL_OK;
 800229e:	2300      	movs	r3, #0
}
 80022a0:	4618      	mov	r0, r3
 80022a2:	3710      	adds	r7, #16
 80022a4:	46bd      	mov	sp, r7
 80022a6:	bd80      	pop	{r7, pc}

080022a8 <I2C_WaitOnTXEFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnTXEFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 80022a8:	b580      	push	{r7, lr}
 80022aa:	b084      	sub	sp, #16
 80022ac:	af00      	add	r7, sp, #0
 80022ae:	60f8      	str	r0, [r7, #12]
 80022b0:	60b9      	str	r1, [r7, #8]
 80022b2:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 80022b4:	e02d      	b.n	8002312 <I2C_WaitOnTXEFlagUntilTimeout+0x6a>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c) != HAL_OK)
 80022b6:	68f8      	ldr	r0, [r7, #12]
 80022b8:	f000 f8ce 	bl	8002458 <I2C_IsAcknowledgeFailed>
 80022bc:	4603      	mov	r3, r0
 80022be:	2b00      	cmp	r3, #0
 80022c0:	d001      	beq.n	80022c6 <I2C_WaitOnTXEFlagUntilTimeout+0x1e>
    {
      return HAL_ERROR;
 80022c2:	2301      	movs	r3, #1
 80022c4:	e02d      	b.n	8002322 <I2C_WaitOnTXEFlagUntilTimeout+0x7a>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 80022c6:	68bb      	ldr	r3, [r7, #8]
 80022c8:	f1b3 3fff 	cmp.w	r3, #4294967295
 80022cc:	d021      	beq.n	8002312 <I2C_WaitOnTXEFlagUntilTimeout+0x6a>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80022ce:	f7fe fd7f 	bl	8000dd0 <HAL_GetTick>
 80022d2:	4602      	mov	r2, r0
 80022d4:	687b      	ldr	r3, [r7, #4]
 80022d6:	1ad3      	subs	r3, r2, r3
 80022d8:	68ba      	ldr	r2, [r7, #8]
 80022da:	429a      	cmp	r2, r3
 80022dc:	d302      	bcc.n	80022e4 <I2C_WaitOnTXEFlagUntilTimeout+0x3c>
 80022de:	68bb      	ldr	r3, [r7, #8]
 80022e0:	2b00      	cmp	r3, #0
 80022e2:	d116      	bne.n	8002312 <I2C_WaitOnTXEFlagUntilTimeout+0x6a>
      {
        hi2c->PreviousState       = I2C_STATE_NONE;
 80022e4:	68fb      	ldr	r3, [r7, #12]
 80022e6:	2200      	movs	r2, #0
 80022e8:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State               = HAL_I2C_STATE_READY;
 80022ea:	68fb      	ldr	r3, [r7, #12]
 80022ec:	2220      	movs	r2, #32
 80022ee:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode                = HAL_I2C_MODE_NONE;
 80022f2:	68fb      	ldr	r3, [r7, #12]
 80022f4:	2200      	movs	r2, #0
 80022f6:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 80022fa:	68fb      	ldr	r3, [r7, #12]
 80022fc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80022fe:	f043 0220 	orr.w	r2, r3, #32
 8002302:	68fb      	ldr	r3, [r7, #12]
 8002304:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8002306:	68fb      	ldr	r3, [r7, #12]
 8002308:	2200      	movs	r2, #0
 800230a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 800230e:	2301      	movs	r3, #1
 8002310:	e007      	b.n	8002322 <I2C_WaitOnTXEFlagUntilTimeout+0x7a>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 8002312:	68fb      	ldr	r3, [r7, #12]
 8002314:	681b      	ldr	r3, [r3, #0]
 8002316:	695b      	ldr	r3, [r3, #20]
 8002318:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800231c:	2b80      	cmp	r3, #128	; 0x80
 800231e:	d1ca      	bne.n	80022b6 <I2C_WaitOnTXEFlagUntilTimeout+0xe>
      }
    }
  }
  return HAL_OK;
 8002320:	2300      	movs	r3, #0
}
 8002322:	4618      	mov	r0, r3
 8002324:	3710      	adds	r7, #16
 8002326:	46bd      	mov	sp, r7
 8002328:	bd80      	pop	{r7, pc}

0800232a <I2C_WaitOnBTFFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnBTFFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 800232a:	b580      	push	{r7, lr}
 800232c:	b084      	sub	sp, #16
 800232e:	af00      	add	r7, sp, #0
 8002330:	60f8      	str	r0, [r7, #12]
 8002332:	60b9      	str	r1, [r7, #8]
 8002334:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET)
 8002336:	e02d      	b.n	8002394 <I2C_WaitOnBTFFlagUntilTimeout+0x6a>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c) != HAL_OK)
 8002338:	68f8      	ldr	r0, [r7, #12]
 800233a:	f000 f88d 	bl	8002458 <I2C_IsAcknowledgeFailed>
 800233e:	4603      	mov	r3, r0
 8002340:	2b00      	cmp	r3, #0
 8002342:	d001      	beq.n	8002348 <I2C_WaitOnBTFFlagUntilTimeout+0x1e>
    {
      return HAL_ERROR;
 8002344:	2301      	movs	r3, #1
 8002346:	e02d      	b.n	80023a4 <I2C_WaitOnBTFFlagUntilTimeout+0x7a>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8002348:	68bb      	ldr	r3, [r7, #8]
 800234a:	f1b3 3fff 	cmp.w	r3, #4294967295
 800234e:	d021      	beq.n	8002394 <I2C_WaitOnBTFFlagUntilTimeout+0x6a>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8002350:	f7fe fd3e 	bl	8000dd0 <HAL_GetTick>
 8002354:	4602      	mov	r2, r0
 8002356:	687b      	ldr	r3, [r7, #4]
 8002358:	1ad3      	subs	r3, r2, r3
 800235a:	68ba      	ldr	r2, [r7, #8]
 800235c:	429a      	cmp	r2, r3
 800235e:	d302      	bcc.n	8002366 <I2C_WaitOnBTFFlagUntilTimeout+0x3c>
 8002360:	68bb      	ldr	r3, [r7, #8]
 8002362:	2b00      	cmp	r3, #0
 8002364:	d116      	bne.n	8002394 <I2C_WaitOnBTFFlagUntilTimeout+0x6a>
      {
        hi2c->PreviousState       = I2C_STATE_NONE;
 8002366:	68fb      	ldr	r3, [r7, #12]
 8002368:	2200      	movs	r2, #0
 800236a:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State               = HAL_I2C_STATE_READY;
 800236c:	68fb      	ldr	r3, [r7, #12]
 800236e:	2220      	movs	r2, #32
 8002370:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode                = HAL_I2C_MODE_NONE;
 8002374:	68fb      	ldr	r3, [r7, #12]
 8002376:	2200      	movs	r2, #0
 8002378:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 800237c:	68fb      	ldr	r3, [r7, #12]
 800237e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002380:	f043 0220 	orr.w	r2, r3, #32
 8002384:	68fb      	ldr	r3, [r7, #12]
 8002386:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8002388:	68fb      	ldr	r3, [r7, #12]
 800238a:	2200      	movs	r2, #0
 800238c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 8002390:	2301      	movs	r3, #1
 8002392:	e007      	b.n	80023a4 <I2C_WaitOnBTFFlagUntilTimeout+0x7a>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET)
 8002394:	68fb      	ldr	r3, [r7, #12]
 8002396:	681b      	ldr	r3, [r3, #0]
 8002398:	695b      	ldr	r3, [r3, #20]
 800239a:	f003 0304 	and.w	r3, r3, #4
 800239e:	2b04      	cmp	r3, #4
 80023a0:	d1ca      	bne.n	8002338 <I2C_WaitOnBTFFlagUntilTimeout+0xe>
      }
    }
  }
  return HAL_OK;
 80023a2:	2300      	movs	r3, #0
}
 80023a4:	4618      	mov	r0, r3
 80023a6:	3710      	adds	r7, #16
 80023a8:	46bd      	mov	sp, r7
 80023aa:	bd80      	pop	{r7, pc}

080023ac <I2C_WaitOnRXNEFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnRXNEFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 80023ac:	b580      	push	{r7, lr}
 80023ae:	b084      	sub	sp, #16
 80023b0:	af00      	add	r7, sp, #0
 80023b2:	60f8      	str	r0, [r7, #12]
 80023b4:	60b9      	str	r1, [r7, #8]
 80023b6:	607a      	str	r2, [r7, #4]

  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET)
 80023b8:	e042      	b.n	8002440 <I2C_WaitOnRXNEFlagUntilTimeout+0x94>
  {
    /* Check if a STOPF is detected */
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == SET)
 80023ba:	68fb      	ldr	r3, [r7, #12]
 80023bc:	681b      	ldr	r3, [r3, #0]
 80023be:	695b      	ldr	r3, [r3, #20]
 80023c0:	f003 0310 	and.w	r3, r3, #16
 80023c4:	2b10      	cmp	r3, #16
 80023c6:	d119      	bne.n	80023fc <I2C_WaitOnRXNEFlagUntilTimeout+0x50>
    {
      /* Clear STOP Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 80023c8:	68fb      	ldr	r3, [r7, #12]
 80023ca:	681b      	ldr	r3, [r3, #0]
 80023cc:	f06f 0210 	mvn.w	r2, #16
 80023d0:	615a      	str	r2, [r3, #20]

      hi2c->PreviousState       = I2C_STATE_NONE;
 80023d2:	68fb      	ldr	r3, [r7, #12]
 80023d4:	2200      	movs	r2, #0
 80023d6:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State               = HAL_I2C_STATE_READY;
 80023d8:	68fb      	ldr	r3, [r7, #12]
 80023da:	2220      	movs	r2, #32
 80023dc:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      hi2c->Mode                = HAL_I2C_MODE_NONE;
 80023e0:	68fb      	ldr	r3, [r7, #12]
 80023e2:	2200      	movs	r2, #0
 80023e4:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      hi2c->ErrorCode           |= HAL_I2C_ERROR_NONE;
 80023e8:	68fb      	ldr	r3, [r7, #12]
 80023ea:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 80023ec:	68fb      	ldr	r3, [r7, #12]
 80023ee:	641a      	str	r2, [r3, #64]	; 0x40

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 80023f0:	68fb      	ldr	r3, [r7, #12]
 80023f2:	2200      	movs	r2, #0
 80023f4:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

      return HAL_ERROR;
 80023f8:	2301      	movs	r3, #1
 80023fa:	e029      	b.n	8002450 <I2C_WaitOnRXNEFlagUntilTimeout+0xa4>
    }

    /* Check for the Timeout */
    if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80023fc:	f7fe fce8 	bl	8000dd0 <HAL_GetTick>
 8002400:	4602      	mov	r2, r0
 8002402:	687b      	ldr	r3, [r7, #4]
 8002404:	1ad3      	subs	r3, r2, r3
 8002406:	68ba      	ldr	r2, [r7, #8]
 8002408:	429a      	cmp	r2, r3
 800240a:	d302      	bcc.n	8002412 <I2C_WaitOnRXNEFlagUntilTimeout+0x66>
 800240c:	68bb      	ldr	r3, [r7, #8]
 800240e:	2b00      	cmp	r3, #0
 8002410:	d116      	bne.n	8002440 <I2C_WaitOnRXNEFlagUntilTimeout+0x94>
    {
      hi2c->PreviousState       = I2C_STATE_NONE;
 8002412:	68fb      	ldr	r3, [r7, #12]
 8002414:	2200      	movs	r2, #0
 8002416:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State               = HAL_I2C_STATE_READY;
 8002418:	68fb      	ldr	r3, [r7, #12]
 800241a:	2220      	movs	r2, #32
 800241c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      hi2c->Mode                = HAL_I2C_MODE_NONE;
 8002420:	68fb      	ldr	r3, [r7, #12]
 8002422:	2200      	movs	r2, #0
 8002424:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8002428:	68fb      	ldr	r3, [r7, #12]
 800242a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800242c:	f043 0220 	orr.w	r2, r3, #32
 8002430:	68fb      	ldr	r3, [r7, #12]
 8002432:	641a      	str	r2, [r3, #64]	; 0x40

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8002434:	68fb      	ldr	r3, [r7, #12]
 8002436:	2200      	movs	r2, #0
 8002438:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

      return HAL_ERROR;
 800243c:	2301      	movs	r3, #1
 800243e:	e007      	b.n	8002450 <I2C_WaitOnRXNEFlagUntilTimeout+0xa4>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET)
 8002440:	68fb      	ldr	r3, [r7, #12]
 8002442:	681b      	ldr	r3, [r3, #0]
 8002444:	695b      	ldr	r3, [r3, #20]
 8002446:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800244a:	2b40      	cmp	r3, #64	; 0x40
 800244c:	d1b5      	bne.n	80023ba <I2C_WaitOnRXNEFlagUntilTimeout+0xe>
    }
  }
  return HAL_OK;
 800244e:	2300      	movs	r3, #0
}
 8002450:	4618      	mov	r0, r3
 8002452:	3710      	adds	r7, #16
 8002454:	46bd      	mov	sp, r7
 8002456:	bd80      	pop	{r7, pc}

08002458 <I2C_IsAcknowledgeFailed>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_IsAcknowledgeFailed(I2C_HandleTypeDef *hi2c)
{
 8002458:	b480      	push	{r7}
 800245a:	b083      	sub	sp, #12
 800245c:	af00      	add	r7, sp, #0
 800245e:	6078      	str	r0, [r7, #4]
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 8002460:	687b      	ldr	r3, [r7, #4]
 8002462:	681b      	ldr	r3, [r3, #0]
 8002464:	695b      	ldr	r3, [r3, #20]
 8002466:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800246a:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800246e:	d11b      	bne.n	80024a8 <I2C_IsAcknowledgeFailed+0x50>
  {
    /* Clear NACKF Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8002470:	687b      	ldr	r3, [r7, #4]
 8002472:	681b      	ldr	r3, [r3, #0]
 8002474:	f46f 6280 	mvn.w	r2, #1024	; 0x400
 8002478:	615a      	str	r2, [r3, #20]

    hi2c->PreviousState       = I2C_STATE_NONE;
 800247a:	687b      	ldr	r3, [r7, #4]
 800247c:	2200      	movs	r2, #0
 800247e:	631a      	str	r2, [r3, #48]	; 0x30
    hi2c->State               = HAL_I2C_STATE_READY;
 8002480:	687b      	ldr	r3, [r7, #4]
 8002482:	2220      	movs	r2, #32
 8002484:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode                = HAL_I2C_MODE_NONE;
 8002488:	687b      	ldr	r3, [r7, #4]
 800248a:	2200      	movs	r2, #0
 800248c:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    hi2c->ErrorCode           |= HAL_I2C_ERROR_AF;
 8002490:	687b      	ldr	r3, [r7, #4]
 8002492:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002494:	f043 0204 	orr.w	r2, r3, #4
 8002498:	687b      	ldr	r3, [r7, #4]
 800249a:	641a      	str	r2, [r3, #64]	; 0x40

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 800249c:	687b      	ldr	r3, [r7, #4]
 800249e:	2200      	movs	r2, #0
 80024a0:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    return HAL_ERROR;
 80024a4:	2301      	movs	r3, #1
 80024a6:	e000      	b.n	80024aa <I2C_IsAcknowledgeFailed+0x52>
  }
  return HAL_OK;
 80024a8:	2300      	movs	r3, #0
}
 80024aa:	4618      	mov	r0, r3
 80024ac:	370c      	adds	r7, #12
 80024ae:	46bd      	mov	sp, r7
 80024b0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80024b4:	4770      	bx	lr
	...

080024b8 <HAL_RCC_OscConfig>:
  *         supported by this API. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 80024b8:	b580      	push	{r7, lr}
 80024ba:	b086      	sub	sp, #24
 80024bc:	af00      	add	r7, sp, #0
 80024be:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 80024c0:	687b      	ldr	r3, [r7, #4]
 80024c2:	2b00      	cmp	r3, #0
 80024c4:	d101      	bne.n	80024ca <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 80024c6:	2301      	movs	r3, #1
 80024c8:	e22d      	b.n	8002926 <HAL_RCC_OscConfig+0x46e>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 80024ca:	687b      	ldr	r3, [r7, #4]
 80024cc:	681b      	ldr	r3, [r3, #0]
 80024ce:	f003 0301 	and.w	r3, r3, #1
 80024d2:	2b00      	cmp	r3, #0
 80024d4:	d075      	beq.n	80025c2 <HAL_RCC_OscConfig+0x10a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 80024d6:	4ba3      	ldr	r3, [pc, #652]	; (8002764 <HAL_RCC_OscConfig+0x2ac>)
 80024d8:	689b      	ldr	r3, [r3, #8]
 80024da:	f003 030c 	and.w	r3, r3, #12
 80024de:	2b04      	cmp	r3, #4
 80024e0:	d00c      	beq.n	80024fc <HAL_RCC_OscConfig+0x44>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 80024e2:	4ba0      	ldr	r3, [pc, #640]	; (8002764 <HAL_RCC_OscConfig+0x2ac>)
 80024e4:	689b      	ldr	r3, [r3, #8]
 80024e6:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 80024ea:	2b08      	cmp	r3, #8
 80024ec:	d112      	bne.n	8002514 <HAL_RCC_OscConfig+0x5c>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 80024ee:	4b9d      	ldr	r3, [pc, #628]	; (8002764 <HAL_RCC_OscConfig+0x2ac>)
 80024f0:	685b      	ldr	r3, [r3, #4]
 80024f2:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80024f6:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 80024fa:	d10b      	bne.n	8002514 <HAL_RCC_OscConfig+0x5c>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80024fc:	4b99      	ldr	r3, [pc, #612]	; (8002764 <HAL_RCC_OscConfig+0x2ac>)
 80024fe:	681b      	ldr	r3, [r3, #0]
 8002500:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002504:	2b00      	cmp	r3, #0
 8002506:	d05b      	beq.n	80025c0 <HAL_RCC_OscConfig+0x108>
 8002508:	687b      	ldr	r3, [r7, #4]
 800250a:	685b      	ldr	r3, [r3, #4]
 800250c:	2b00      	cmp	r3, #0
 800250e:	d157      	bne.n	80025c0 <HAL_RCC_OscConfig+0x108>
      {
        return HAL_ERROR;
 8002510:	2301      	movs	r3, #1
 8002512:	e208      	b.n	8002926 <HAL_RCC_OscConfig+0x46e>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8002514:	687b      	ldr	r3, [r7, #4]
 8002516:	685b      	ldr	r3, [r3, #4]
 8002518:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800251c:	d106      	bne.n	800252c <HAL_RCC_OscConfig+0x74>
 800251e:	4b91      	ldr	r3, [pc, #580]	; (8002764 <HAL_RCC_OscConfig+0x2ac>)
 8002520:	681b      	ldr	r3, [r3, #0]
 8002522:	4a90      	ldr	r2, [pc, #576]	; (8002764 <HAL_RCC_OscConfig+0x2ac>)
 8002524:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8002528:	6013      	str	r3, [r2, #0]
 800252a:	e01d      	b.n	8002568 <HAL_RCC_OscConfig+0xb0>
 800252c:	687b      	ldr	r3, [r7, #4]
 800252e:	685b      	ldr	r3, [r3, #4]
 8002530:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8002534:	d10c      	bne.n	8002550 <HAL_RCC_OscConfig+0x98>
 8002536:	4b8b      	ldr	r3, [pc, #556]	; (8002764 <HAL_RCC_OscConfig+0x2ac>)
 8002538:	681b      	ldr	r3, [r3, #0]
 800253a:	4a8a      	ldr	r2, [pc, #552]	; (8002764 <HAL_RCC_OscConfig+0x2ac>)
 800253c:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8002540:	6013      	str	r3, [r2, #0]
 8002542:	4b88      	ldr	r3, [pc, #544]	; (8002764 <HAL_RCC_OscConfig+0x2ac>)
 8002544:	681b      	ldr	r3, [r3, #0]
 8002546:	4a87      	ldr	r2, [pc, #540]	; (8002764 <HAL_RCC_OscConfig+0x2ac>)
 8002548:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800254c:	6013      	str	r3, [r2, #0]
 800254e:	e00b      	b.n	8002568 <HAL_RCC_OscConfig+0xb0>
 8002550:	4b84      	ldr	r3, [pc, #528]	; (8002764 <HAL_RCC_OscConfig+0x2ac>)
 8002552:	681b      	ldr	r3, [r3, #0]
 8002554:	4a83      	ldr	r2, [pc, #524]	; (8002764 <HAL_RCC_OscConfig+0x2ac>)
 8002556:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 800255a:	6013      	str	r3, [r2, #0]
 800255c:	4b81      	ldr	r3, [pc, #516]	; (8002764 <HAL_RCC_OscConfig+0x2ac>)
 800255e:	681b      	ldr	r3, [r3, #0]
 8002560:	4a80      	ldr	r2, [pc, #512]	; (8002764 <HAL_RCC_OscConfig+0x2ac>)
 8002562:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8002566:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 8002568:	687b      	ldr	r3, [r7, #4]
 800256a:	685b      	ldr	r3, [r3, #4]
 800256c:	2b00      	cmp	r3, #0
 800256e:	d013      	beq.n	8002598 <HAL_RCC_OscConfig+0xe0>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002570:	f7fe fc2e 	bl	8000dd0 <HAL_GetTick>
 8002574:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8002576:	e008      	b.n	800258a <HAL_RCC_OscConfig+0xd2>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8002578:	f7fe fc2a 	bl	8000dd0 <HAL_GetTick>
 800257c:	4602      	mov	r2, r0
 800257e:	693b      	ldr	r3, [r7, #16]
 8002580:	1ad3      	subs	r3, r2, r3
 8002582:	2b64      	cmp	r3, #100	; 0x64
 8002584:	d901      	bls.n	800258a <HAL_RCC_OscConfig+0xd2>
          {
            return HAL_TIMEOUT;
 8002586:	2303      	movs	r3, #3
 8002588:	e1cd      	b.n	8002926 <HAL_RCC_OscConfig+0x46e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800258a:	4b76      	ldr	r3, [pc, #472]	; (8002764 <HAL_RCC_OscConfig+0x2ac>)
 800258c:	681b      	ldr	r3, [r3, #0]
 800258e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002592:	2b00      	cmp	r3, #0
 8002594:	d0f0      	beq.n	8002578 <HAL_RCC_OscConfig+0xc0>
 8002596:	e014      	b.n	80025c2 <HAL_RCC_OscConfig+0x10a>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002598:	f7fe fc1a 	bl	8000dd0 <HAL_GetTick>
 800259c:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 800259e:	e008      	b.n	80025b2 <HAL_RCC_OscConfig+0xfa>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 80025a0:	f7fe fc16 	bl	8000dd0 <HAL_GetTick>
 80025a4:	4602      	mov	r2, r0
 80025a6:	693b      	ldr	r3, [r7, #16]
 80025a8:	1ad3      	subs	r3, r2, r3
 80025aa:	2b64      	cmp	r3, #100	; 0x64
 80025ac:	d901      	bls.n	80025b2 <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 80025ae:	2303      	movs	r3, #3
 80025b0:	e1b9      	b.n	8002926 <HAL_RCC_OscConfig+0x46e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 80025b2:	4b6c      	ldr	r3, [pc, #432]	; (8002764 <HAL_RCC_OscConfig+0x2ac>)
 80025b4:	681b      	ldr	r3, [r3, #0]
 80025b6:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80025ba:	2b00      	cmp	r3, #0
 80025bc:	d1f0      	bne.n	80025a0 <HAL_RCC_OscConfig+0xe8>
 80025be:	e000      	b.n	80025c2 <HAL_RCC_OscConfig+0x10a>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80025c0:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 80025c2:	687b      	ldr	r3, [r7, #4]
 80025c4:	681b      	ldr	r3, [r3, #0]
 80025c6:	f003 0302 	and.w	r3, r3, #2
 80025ca:	2b00      	cmp	r3, #0
 80025cc:	d063      	beq.n	8002696 <HAL_RCC_OscConfig+0x1de>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 80025ce:	4b65      	ldr	r3, [pc, #404]	; (8002764 <HAL_RCC_OscConfig+0x2ac>)
 80025d0:	689b      	ldr	r3, [r3, #8]
 80025d2:	f003 030c 	and.w	r3, r3, #12
 80025d6:	2b00      	cmp	r3, #0
 80025d8:	d00b      	beq.n	80025f2 <HAL_RCC_OscConfig+0x13a>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 80025da:	4b62      	ldr	r3, [pc, #392]	; (8002764 <HAL_RCC_OscConfig+0x2ac>)
 80025dc:	689b      	ldr	r3, [r3, #8]
 80025de:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 80025e2:	2b08      	cmp	r3, #8
 80025e4:	d11c      	bne.n	8002620 <HAL_RCC_OscConfig+0x168>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 80025e6:	4b5f      	ldr	r3, [pc, #380]	; (8002764 <HAL_RCC_OscConfig+0x2ac>)
 80025e8:	685b      	ldr	r3, [r3, #4]
 80025ea:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80025ee:	2b00      	cmp	r3, #0
 80025f0:	d116      	bne.n	8002620 <HAL_RCC_OscConfig+0x168>
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 80025f2:	4b5c      	ldr	r3, [pc, #368]	; (8002764 <HAL_RCC_OscConfig+0x2ac>)
 80025f4:	681b      	ldr	r3, [r3, #0]
 80025f6:	f003 0302 	and.w	r3, r3, #2
 80025fa:	2b00      	cmp	r3, #0
 80025fc:	d005      	beq.n	800260a <HAL_RCC_OscConfig+0x152>
 80025fe:	687b      	ldr	r3, [r7, #4]
 8002600:	68db      	ldr	r3, [r3, #12]
 8002602:	2b01      	cmp	r3, #1
 8002604:	d001      	beq.n	800260a <HAL_RCC_OscConfig+0x152>
      {
        return HAL_ERROR;
 8002606:	2301      	movs	r3, #1
 8002608:	e18d      	b.n	8002926 <HAL_RCC_OscConfig+0x46e>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800260a:	4b56      	ldr	r3, [pc, #344]	; (8002764 <HAL_RCC_OscConfig+0x2ac>)
 800260c:	681b      	ldr	r3, [r3, #0]
 800260e:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8002612:	687b      	ldr	r3, [r7, #4]
 8002614:	691b      	ldr	r3, [r3, #16]
 8002616:	00db      	lsls	r3, r3, #3
 8002618:	4952      	ldr	r1, [pc, #328]	; (8002764 <HAL_RCC_OscConfig+0x2ac>)
 800261a:	4313      	orrs	r3, r2
 800261c:	600b      	str	r3, [r1, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 800261e:	e03a      	b.n	8002696 <HAL_RCC_OscConfig+0x1de>
      }
    }
    else
    {
      /* Check the HSI State */
      if((RCC_OscInitStruct->HSIState)!= RCC_HSI_OFF)
 8002620:	687b      	ldr	r3, [r7, #4]
 8002622:	68db      	ldr	r3, [r3, #12]
 8002624:	2b00      	cmp	r3, #0
 8002626:	d020      	beq.n	800266a <HAL_RCC_OscConfig+0x1b2>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8002628:	4b4f      	ldr	r3, [pc, #316]	; (8002768 <HAL_RCC_OscConfig+0x2b0>)
 800262a:	2201      	movs	r2, #1
 800262c:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800262e:	f7fe fbcf 	bl	8000dd0 <HAL_GetTick>
 8002632:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8002634:	e008      	b.n	8002648 <HAL_RCC_OscConfig+0x190>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8002636:	f7fe fbcb 	bl	8000dd0 <HAL_GetTick>
 800263a:	4602      	mov	r2, r0
 800263c:	693b      	ldr	r3, [r7, #16]
 800263e:	1ad3      	subs	r3, r2, r3
 8002640:	2b02      	cmp	r3, #2
 8002642:	d901      	bls.n	8002648 <HAL_RCC_OscConfig+0x190>
          {
            return HAL_TIMEOUT;
 8002644:	2303      	movs	r3, #3
 8002646:	e16e      	b.n	8002926 <HAL_RCC_OscConfig+0x46e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8002648:	4b46      	ldr	r3, [pc, #280]	; (8002764 <HAL_RCC_OscConfig+0x2ac>)
 800264a:	681b      	ldr	r3, [r3, #0]
 800264c:	f003 0302 	and.w	r3, r3, #2
 8002650:	2b00      	cmp	r3, #0
 8002652:	d0f0      	beq.n	8002636 <HAL_RCC_OscConfig+0x17e>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value. */
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8002654:	4b43      	ldr	r3, [pc, #268]	; (8002764 <HAL_RCC_OscConfig+0x2ac>)
 8002656:	681b      	ldr	r3, [r3, #0]
 8002658:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 800265c:	687b      	ldr	r3, [r7, #4]
 800265e:	691b      	ldr	r3, [r3, #16]
 8002660:	00db      	lsls	r3, r3, #3
 8002662:	4940      	ldr	r1, [pc, #256]	; (8002764 <HAL_RCC_OscConfig+0x2ac>)
 8002664:	4313      	orrs	r3, r2
 8002666:	600b      	str	r3, [r1, #0]
 8002668:	e015      	b.n	8002696 <HAL_RCC_OscConfig+0x1de>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 800266a:	4b3f      	ldr	r3, [pc, #252]	; (8002768 <HAL_RCC_OscConfig+0x2b0>)
 800266c:	2200      	movs	r2, #0
 800266e:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002670:	f7fe fbae 	bl	8000dd0 <HAL_GetTick>
 8002674:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8002676:	e008      	b.n	800268a <HAL_RCC_OscConfig+0x1d2>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8002678:	f7fe fbaa 	bl	8000dd0 <HAL_GetTick>
 800267c:	4602      	mov	r2, r0
 800267e:	693b      	ldr	r3, [r7, #16]
 8002680:	1ad3      	subs	r3, r2, r3
 8002682:	2b02      	cmp	r3, #2
 8002684:	d901      	bls.n	800268a <HAL_RCC_OscConfig+0x1d2>
          {
            return HAL_TIMEOUT;
 8002686:	2303      	movs	r3, #3
 8002688:	e14d      	b.n	8002926 <HAL_RCC_OscConfig+0x46e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 800268a:	4b36      	ldr	r3, [pc, #216]	; (8002764 <HAL_RCC_OscConfig+0x2ac>)
 800268c:	681b      	ldr	r3, [r3, #0]
 800268e:	f003 0302 	and.w	r3, r3, #2
 8002692:	2b00      	cmp	r3, #0
 8002694:	d1f0      	bne.n	8002678 <HAL_RCC_OscConfig+0x1c0>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8002696:	687b      	ldr	r3, [r7, #4]
 8002698:	681b      	ldr	r3, [r3, #0]
 800269a:	f003 0308 	and.w	r3, r3, #8
 800269e:	2b00      	cmp	r3, #0
 80026a0:	d030      	beq.n	8002704 <HAL_RCC_OscConfig+0x24c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if((RCC_OscInitStruct->LSIState)!= RCC_LSI_OFF)
 80026a2:	687b      	ldr	r3, [r7, #4]
 80026a4:	695b      	ldr	r3, [r3, #20]
 80026a6:	2b00      	cmp	r3, #0
 80026a8:	d016      	beq.n	80026d8 <HAL_RCC_OscConfig+0x220>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 80026aa:	4b30      	ldr	r3, [pc, #192]	; (800276c <HAL_RCC_OscConfig+0x2b4>)
 80026ac:	2201      	movs	r2, #1
 80026ae:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80026b0:	f7fe fb8e 	bl	8000dd0 <HAL_GetTick>
 80026b4:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 80026b6:	e008      	b.n	80026ca <HAL_RCC_OscConfig+0x212>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 80026b8:	f7fe fb8a 	bl	8000dd0 <HAL_GetTick>
 80026bc:	4602      	mov	r2, r0
 80026be:	693b      	ldr	r3, [r7, #16]
 80026c0:	1ad3      	subs	r3, r2, r3
 80026c2:	2b02      	cmp	r3, #2
 80026c4:	d901      	bls.n	80026ca <HAL_RCC_OscConfig+0x212>
        {
          return HAL_TIMEOUT;
 80026c6:	2303      	movs	r3, #3
 80026c8:	e12d      	b.n	8002926 <HAL_RCC_OscConfig+0x46e>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 80026ca:	4b26      	ldr	r3, [pc, #152]	; (8002764 <HAL_RCC_OscConfig+0x2ac>)
 80026cc:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80026ce:	f003 0302 	and.w	r3, r3, #2
 80026d2:	2b00      	cmp	r3, #0
 80026d4:	d0f0      	beq.n	80026b8 <HAL_RCC_OscConfig+0x200>
 80026d6:	e015      	b.n	8002704 <HAL_RCC_OscConfig+0x24c>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 80026d8:	4b24      	ldr	r3, [pc, #144]	; (800276c <HAL_RCC_OscConfig+0x2b4>)
 80026da:	2200      	movs	r2, #0
 80026dc:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80026de:	f7fe fb77 	bl	8000dd0 <HAL_GetTick>
 80026e2:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 80026e4:	e008      	b.n	80026f8 <HAL_RCC_OscConfig+0x240>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 80026e6:	f7fe fb73 	bl	8000dd0 <HAL_GetTick>
 80026ea:	4602      	mov	r2, r0
 80026ec:	693b      	ldr	r3, [r7, #16]
 80026ee:	1ad3      	subs	r3, r2, r3
 80026f0:	2b02      	cmp	r3, #2
 80026f2:	d901      	bls.n	80026f8 <HAL_RCC_OscConfig+0x240>
        {
          return HAL_TIMEOUT;
 80026f4:	2303      	movs	r3, #3
 80026f6:	e116      	b.n	8002926 <HAL_RCC_OscConfig+0x46e>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 80026f8:	4b1a      	ldr	r3, [pc, #104]	; (8002764 <HAL_RCC_OscConfig+0x2ac>)
 80026fa:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80026fc:	f003 0302 	and.w	r3, r3, #2
 8002700:	2b00      	cmp	r3, #0
 8002702:	d1f0      	bne.n	80026e6 <HAL_RCC_OscConfig+0x22e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8002704:	687b      	ldr	r3, [r7, #4]
 8002706:	681b      	ldr	r3, [r3, #0]
 8002708:	f003 0304 	and.w	r3, r3, #4
 800270c:	2b00      	cmp	r3, #0
 800270e:	f000 80a0 	beq.w	8002852 <HAL_RCC_OscConfig+0x39a>
  {
    FlagStatus       pwrclkchanged = RESET;
 8002712:	2300      	movs	r3, #0
 8002714:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8002716:	4b13      	ldr	r3, [pc, #76]	; (8002764 <HAL_RCC_OscConfig+0x2ac>)
 8002718:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800271a:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800271e:	2b00      	cmp	r3, #0
 8002720:	d10f      	bne.n	8002742 <HAL_RCC_OscConfig+0x28a>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8002722:	2300      	movs	r3, #0
 8002724:	60fb      	str	r3, [r7, #12]
 8002726:	4b0f      	ldr	r3, [pc, #60]	; (8002764 <HAL_RCC_OscConfig+0x2ac>)
 8002728:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800272a:	4a0e      	ldr	r2, [pc, #56]	; (8002764 <HAL_RCC_OscConfig+0x2ac>)
 800272c:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8002730:	6413      	str	r3, [r2, #64]	; 0x40
 8002732:	4b0c      	ldr	r3, [pc, #48]	; (8002764 <HAL_RCC_OscConfig+0x2ac>)
 8002734:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002736:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800273a:	60fb      	str	r3, [r7, #12]
 800273c:	68fb      	ldr	r3, [r7, #12]
      pwrclkchanged = SET;
 800273e:	2301      	movs	r3, #1
 8002740:	75fb      	strb	r3, [r7, #23]
    }

    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002742:	4b0b      	ldr	r3, [pc, #44]	; (8002770 <HAL_RCC_OscConfig+0x2b8>)
 8002744:	681b      	ldr	r3, [r3, #0]
 8002746:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800274a:	2b00      	cmp	r3, #0
 800274c:	d121      	bne.n	8002792 <HAL_RCC_OscConfig+0x2da>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 800274e:	4b08      	ldr	r3, [pc, #32]	; (8002770 <HAL_RCC_OscConfig+0x2b8>)
 8002750:	681b      	ldr	r3, [r3, #0]
 8002752:	4a07      	ldr	r2, [pc, #28]	; (8002770 <HAL_RCC_OscConfig+0x2b8>)
 8002754:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8002758:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 800275a:	f7fe fb39 	bl	8000dd0 <HAL_GetTick>
 800275e:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002760:	e011      	b.n	8002786 <HAL_RCC_OscConfig+0x2ce>
 8002762:	bf00      	nop
 8002764:	40023800 	.word	0x40023800
 8002768:	42470000 	.word	0x42470000
 800276c:	42470e80 	.word	0x42470e80
 8002770:	40007000 	.word	0x40007000
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8002774:	f7fe fb2c 	bl	8000dd0 <HAL_GetTick>
 8002778:	4602      	mov	r2, r0
 800277a:	693b      	ldr	r3, [r7, #16]
 800277c:	1ad3      	subs	r3, r2, r3
 800277e:	2b02      	cmp	r3, #2
 8002780:	d901      	bls.n	8002786 <HAL_RCC_OscConfig+0x2ce>
        {
          return HAL_TIMEOUT;
 8002782:	2303      	movs	r3, #3
 8002784:	e0cf      	b.n	8002926 <HAL_RCC_OscConfig+0x46e>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002786:	4b6a      	ldr	r3, [pc, #424]	; (8002930 <HAL_RCC_OscConfig+0x478>)
 8002788:	681b      	ldr	r3, [r3, #0]
 800278a:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800278e:	2b00      	cmp	r3, #0
 8002790:	d0f0      	beq.n	8002774 <HAL_RCC_OscConfig+0x2bc>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8002792:	687b      	ldr	r3, [r7, #4]
 8002794:	689b      	ldr	r3, [r3, #8]
 8002796:	2b01      	cmp	r3, #1
 8002798:	d106      	bne.n	80027a8 <HAL_RCC_OscConfig+0x2f0>
 800279a:	4b66      	ldr	r3, [pc, #408]	; (8002934 <HAL_RCC_OscConfig+0x47c>)
 800279c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800279e:	4a65      	ldr	r2, [pc, #404]	; (8002934 <HAL_RCC_OscConfig+0x47c>)
 80027a0:	f043 0301 	orr.w	r3, r3, #1
 80027a4:	6713      	str	r3, [r2, #112]	; 0x70
 80027a6:	e01c      	b.n	80027e2 <HAL_RCC_OscConfig+0x32a>
 80027a8:	687b      	ldr	r3, [r7, #4]
 80027aa:	689b      	ldr	r3, [r3, #8]
 80027ac:	2b05      	cmp	r3, #5
 80027ae:	d10c      	bne.n	80027ca <HAL_RCC_OscConfig+0x312>
 80027b0:	4b60      	ldr	r3, [pc, #384]	; (8002934 <HAL_RCC_OscConfig+0x47c>)
 80027b2:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80027b4:	4a5f      	ldr	r2, [pc, #380]	; (8002934 <HAL_RCC_OscConfig+0x47c>)
 80027b6:	f043 0304 	orr.w	r3, r3, #4
 80027ba:	6713      	str	r3, [r2, #112]	; 0x70
 80027bc:	4b5d      	ldr	r3, [pc, #372]	; (8002934 <HAL_RCC_OscConfig+0x47c>)
 80027be:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80027c0:	4a5c      	ldr	r2, [pc, #368]	; (8002934 <HAL_RCC_OscConfig+0x47c>)
 80027c2:	f043 0301 	orr.w	r3, r3, #1
 80027c6:	6713      	str	r3, [r2, #112]	; 0x70
 80027c8:	e00b      	b.n	80027e2 <HAL_RCC_OscConfig+0x32a>
 80027ca:	4b5a      	ldr	r3, [pc, #360]	; (8002934 <HAL_RCC_OscConfig+0x47c>)
 80027cc:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80027ce:	4a59      	ldr	r2, [pc, #356]	; (8002934 <HAL_RCC_OscConfig+0x47c>)
 80027d0:	f023 0301 	bic.w	r3, r3, #1
 80027d4:	6713      	str	r3, [r2, #112]	; 0x70
 80027d6:	4b57      	ldr	r3, [pc, #348]	; (8002934 <HAL_RCC_OscConfig+0x47c>)
 80027d8:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80027da:	4a56      	ldr	r2, [pc, #344]	; (8002934 <HAL_RCC_OscConfig+0x47c>)
 80027dc:	f023 0304 	bic.w	r3, r3, #4
 80027e0:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 80027e2:	687b      	ldr	r3, [r7, #4]
 80027e4:	689b      	ldr	r3, [r3, #8]
 80027e6:	2b00      	cmp	r3, #0
 80027e8:	d015      	beq.n	8002816 <HAL_RCC_OscConfig+0x35e>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80027ea:	f7fe faf1 	bl	8000dd0 <HAL_GetTick>
 80027ee:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80027f0:	e00a      	b.n	8002808 <HAL_RCC_OscConfig+0x350>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 80027f2:	f7fe faed 	bl	8000dd0 <HAL_GetTick>
 80027f6:	4602      	mov	r2, r0
 80027f8:	693b      	ldr	r3, [r7, #16]
 80027fa:	1ad3      	subs	r3, r2, r3
 80027fc:	f241 3288 	movw	r2, #5000	; 0x1388
 8002800:	4293      	cmp	r3, r2
 8002802:	d901      	bls.n	8002808 <HAL_RCC_OscConfig+0x350>
        {
          return HAL_TIMEOUT;
 8002804:	2303      	movs	r3, #3
 8002806:	e08e      	b.n	8002926 <HAL_RCC_OscConfig+0x46e>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8002808:	4b4a      	ldr	r3, [pc, #296]	; (8002934 <HAL_RCC_OscConfig+0x47c>)
 800280a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800280c:	f003 0302 	and.w	r3, r3, #2
 8002810:	2b00      	cmp	r3, #0
 8002812:	d0ee      	beq.n	80027f2 <HAL_RCC_OscConfig+0x33a>
 8002814:	e014      	b.n	8002840 <HAL_RCC_OscConfig+0x388>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8002816:	f7fe fadb 	bl	8000dd0 <HAL_GetTick>
 800281a:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 800281c:	e00a      	b.n	8002834 <HAL_RCC_OscConfig+0x37c>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 800281e:	f7fe fad7 	bl	8000dd0 <HAL_GetTick>
 8002822:	4602      	mov	r2, r0
 8002824:	693b      	ldr	r3, [r7, #16]
 8002826:	1ad3      	subs	r3, r2, r3
 8002828:	f241 3288 	movw	r2, #5000	; 0x1388
 800282c:	4293      	cmp	r3, r2
 800282e:	d901      	bls.n	8002834 <HAL_RCC_OscConfig+0x37c>
        {
          return HAL_TIMEOUT;
 8002830:	2303      	movs	r3, #3
 8002832:	e078      	b.n	8002926 <HAL_RCC_OscConfig+0x46e>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8002834:	4b3f      	ldr	r3, [pc, #252]	; (8002934 <HAL_RCC_OscConfig+0x47c>)
 8002836:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002838:	f003 0302 	and.w	r3, r3, #2
 800283c:	2b00      	cmp	r3, #0
 800283e:	d1ee      	bne.n	800281e <HAL_RCC_OscConfig+0x366>
        }
      }
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 8002840:	7dfb      	ldrb	r3, [r7, #23]
 8002842:	2b01      	cmp	r3, #1
 8002844:	d105      	bne.n	8002852 <HAL_RCC_OscConfig+0x39a>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8002846:	4b3b      	ldr	r3, [pc, #236]	; (8002934 <HAL_RCC_OscConfig+0x47c>)
 8002848:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800284a:	4a3a      	ldr	r2, [pc, #232]	; (8002934 <HAL_RCC_OscConfig+0x47c>)
 800284c:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8002850:	6413      	str	r3, [r2, #64]	; 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8002852:	687b      	ldr	r3, [r7, #4]
 8002854:	699b      	ldr	r3, [r3, #24]
 8002856:	2b00      	cmp	r3, #0
 8002858:	d064      	beq.n	8002924 <HAL_RCC_OscConfig+0x46c>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 800285a:	4b36      	ldr	r3, [pc, #216]	; (8002934 <HAL_RCC_OscConfig+0x47c>)
 800285c:	689b      	ldr	r3, [r3, #8]
 800285e:	f003 030c 	and.w	r3, r3, #12
 8002862:	2b08      	cmp	r3, #8
 8002864:	d05c      	beq.n	8002920 <HAL_RCC_OscConfig+0x468>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8002866:	687b      	ldr	r3, [r7, #4]
 8002868:	699b      	ldr	r3, [r3, #24]
 800286a:	2b02      	cmp	r3, #2
 800286c:	d141      	bne.n	80028f2 <HAL_RCC_OscConfig+0x43a>
        assert_param(IS_RCC_PLLN_VALUE(RCC_OscInitStruct->PLL.PLLN));
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 800286e:	4b32      	ldr	r3, [pc, #200]	; (8002938 <HAL_RCC_OscConfig+0x480>)
 8002870:	2200      	movs	r2, #0
 8002872:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002874:	f7fe faac 	bl	8000dd0 <HAL_GetTick>
 8002878:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800287a:	e008      	b.n	800288e <HAL_RCC_OscConfig+0x3d6>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 800287c:	f7fe faa8 	bl	8000dd0 <HAL_GetTick>
 8002880:	4602      	mov	r2, r0
 8002882:	693b      	ldr	r3, [r7, #16]
 8002884:	1ad3      	subs	r3, r2, r3
 8002886:	2b02      	cmp	r3, #2
 8002888:	d901      	bls.n	800288e <HAL_RCC_OscConfig+0x3d6>
          {
            return HAL_TIMEOUT;
 800288a:	2303      	movs	r3, #3
 800288c:	e04b      	b.n	8002926 <HAL_RCC_OscConfig+0x46e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800288e:	4b29      	ldr	r3, [pc, #164]	; (8002934 <HAL_RCC_OscConfig+0x47c>)
 8002890:	681b      	ldr	r3, [r3, #0]
 8002892:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002896:	2b00      	cmp	r3, #0
 8002898:	d1f0      	bne.n	800287c <HAL_RCC_OscConfig+0x3c4>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 800289a:	687b      	ldr	r3, [r7, #4]
 800289c:	69da      	ldr	r2, [r3, #28]
 800289e:	687b      	ldr	r3, [r7, #4]
 80028a0:	6a1b      	ldr	r3, [r3, #32]
 80028a2:	431a      	orrs	r2, r3
 80028a4:	687b      	ldr	r3, [r7, #4]
 80028a6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80028a8:	019b      	lsls	r3, r3, #6
 80028aa:	431a      	orrs	r2, r3
 80028ac:	687b      	ldr	r3, [r7, #4]
 80028ae:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80028b0:	085b      	lsrs	r3, r3, #1
 80028b2:	3b01      	subs	r3, #1
 80028b4:	041b      	lsls	r3, r3, #16
 80028b6:	431a      	orrs	r2, r3
 80028b8:	687b      	ldr	r3, [r7, #4]
 80028ba:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80028bc:	061b      	lsls	r3, r3, #24
 80028be:	491d      	ldr	r1, [pc, #116]	; (8002934 <HAL_RCC_OscConfig+0x47c>)
 80028c0:	4313      	orrs	r3, r2
 80028c2:	604b      	str	r3, [r1, #4]
                                 RCC_OscInitStruct->PLL.PLLM                                                 | \
                                 (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)             | \
                                 (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos) | \
                                 (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)));
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 80028c4:	4b1c      	ldr	r3, [pc, #112]	; (8002938 <HAL_RCC_OscConfig+0x480>)
 80028c6:	2201      	movs	r2, #1
 80028c8:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80028ca:	f7fe fa81 	bl	8000dd0 <HAL_GetTick>
 80028ce:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80028d0:	e008      	b.n	80028e4 <HAL_RCC_OscConfig+0x42c>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 80028d2:	f7fe fa7d 	bl	8000dd0 <HAL_GetTick>
 80028d6:	4602      	mov	r2, r0
 80028d8:	693b      	ldr	r3, [r7, #16]
 80028da:	1ad3      	subs	r3, r2, r3
 80028dc:	2b02      	cmp	r3, #2
 80028de:	d901      	bls.n	80028e4 <HAL_RCC_OscConfig+0x42c>
          {
            return HAL_TIMEOUT;
 80028e0:	2303      	movs	r3, #3
 80028e2:	e020      	b.n	8002926 <HAL_RCC_OscConfig+0x46e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80028e4:	4b13      	ldr	r3, [pc, #76]	; (8002934 <HAL_RCC_OscConfig+0x47c>)
 80028e6:	681b      	ldr	r3, [r3, #0]
 80028e8:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80028ec:	2b00      	cmp	r3, #0
 80028ee:	d0f0      	beq.n	80028d2 <HAL_RCC_OscConfig+0x41a>
 80028f0:	e018      	b.n	8002924 <HAL_RCC_OscConfig+0x46c>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80028f2:	4b11      	ldr	r3, [pc, #68]	; (8002938 <HAL_RCC_OscConfig+0x480>)
 80028f4:	2200      	movs	r2, #0
 80028f6:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80028f8:	f7fe fa6a 	bl	8000dd0 <HAL_GetTick>
 80028fc:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80028fe:	e008      	b.n	8002912 <HAL_RCC_OscConfig+0x45a>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8002900:	f7fe fa66 	bl	8000dd0 <HAL_GetTick>
 8002904:	4602      	mov	r2, r0
 8002906:	693b      	ldr	r3, [r7, #16]
 8002908:	1ad3      	subs	r3, r2, r3
 800290a:	2b02      	cmp	r3, #2
 800290c:	d901      	bls.n	8002912 <HAL_RCC_OscConfig+0x45a>
          {
            return HAL_TIMEOUT;
 800290e:	2303      	movs	r3, #3
 8002910:	e009      	b.n	8002926 <HAL_RCC_OscConfig+0x46e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8002912:	4b08      	ldr	r3, [pc, #32]	; (8002934 <HAL_RCC_OscConfig+0x47c>)
 8002914:	681b      	ldr	r3, [r3, #0]
 8002916:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800291a:	2b00      	cmp	r3, #0
 800291c:	d1f0      	bne.n	8002900 <HAL_RCC_OscConfig+0x448>
 800291e:	e001      	b.n	8002924 <HAL_RCC_OscConfig+0x46c>
        }
      }
    }
    else
    {
      return HAL_ERROR;
 8002920:	2301      	movs	r3, #1
 8002922:	e000      	b.n	8002926 <HAL_RCC_OscConfig+0x46e>
    }
  }
  return HAL_OK;
 8002924:	2300      	movs	r3, #0
}
 8002926:	4618      	mov	r0, r3
 8002928:	3718      	adds	r7, #24
 800292a:	46bd      	mov	sp, r7
 800292c:	bd80      	pop	{r7, pc}
 800292e:	bf00      	nop
 8002930:	40007000 	.word	0x40007000
 8002934:	40023800 	.word	0x40023800
 8002938:	42470060 	.word	0x42470060

0800293c <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 800293c:	b580      	push	{r7, lr}
 800293e:	b084      	sub	sp, #16
 8002940:	af00      	add	r7, sp, #0
 8002942:	6078      	str	r0, [r7, #4]
 8002944:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 8002946:	687b      	ldr	r3, [r7, #4]
 8002948:	2b00      	cmp	r3, #0
 800294a:	d101      	bne.n	8002950 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 800294c:	2301      	movs	r3, #1
 800294e:	e0ca      	b.n	8002ae6 <HAL_RCC_ClockConfig+0x1aa>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8002950:	4b67      	ldr	r3, [pc, #412]	; (8002af0 <HAL_RCC_ClockConfig+0x1b4>)
 8002952:	681b      	ldr	r3, [r3, #0]
 8002954:	f003 030f 	and.w	r3, r3, #15
 8002958:	683a      	ldr	r2, [r7, #0]
 800295a:	429a      	cmp	r2, r3
 800295c:	d90c      	bls.n	8002978 <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800295e:	4b64      	ldr	r3, [pc, #400]	; (8002af0 <HAL_RCC_ClockConfig+0x1b4>)
 8002960:	683a      	ldr	r2, [r7, #0]
 8002962:	b2d2      	uxtb	r2, r2
 8002964:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8002966:	4b62      	ldr	r3, [pc, #392]	; (8002af0 <HAL_RCC_ClockConfig+0x1b4>)
 8002968:	681b      	ldr	r3, [r3, #0]
 800296a:	f003 030f 	and.w	r3, r3, #15
 800296e:	683a      	ldr	r2, [r7, #0]
 8002970:	429a      	cmp	r2, r3
 8002972:	d001      	beq.n	8002978 <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 8002974:	2301      	movs	r3, #1
 8002976:	e0b6      	b.n	8002ae6 <HAL_RCC_ClockConfig+0x1aa>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8002978:	687b      	ldr	r3, [r7, #4]
 800297a:	681b      	ldr	r3, [r3, #0]
 800297c:	f003 0302 	and.w	r3, r3, #2
 8002980:	2b00      	cmp	r3, #0
 8002982:	d020      	beq.n	80029c6 <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8002984:	687b      	ldr	r3, [r7, #4]
 8002986:	681b      	ldr	r3, [r3, #0]
 8002988:	f003 0304 	and.w	r3, r3, #4
 800298c:	2b00      	cmp	r3, #0
 800298e:	d005      	beq.n	800299c <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8002990:	4b58      	ldr	r3, [pc, #352]	; (8002af4 <HAL_RCC_ClockConfig+0x1b8>)
 8002992:	689b      	ldr	r3, [r3, #8]
 8002994:	4a57      	ldr	r2, [pc, #348]	; (8002af4 <HAL_RCC_ClockConfig+0x1b8>)
 8002996:	f443 53e0 	orr.w	r3, r3, #7168	; 0x1c00
 800299a:	6093      	str	r3, [r2, #8]
    }

    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 800299c:	687b      	ldr	r3, [r7, #4]
 800299e:	681b      	ldr	r3, [r3, #0]
 80029a0:	f003 0308 	and.w	r3, r3, #8
 80029a4:	2b00      	cmp	r3, #0
 80029a6:	d005      	beq.n	80029b4 <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 80029a8:	4b52      	ldr	r3, [pc, #328]	; (8002af4 <HAL_RCC_ClockConfig+0x1b8>)
 80029aa:	689b      	ldr	r3, [r3, #8]
 80029ac:	4a51      	ldr	r2, [pc, #324]	; (8002af4 <HAL_RCC_ClockConfig+0x1b8>)
 80029ae:	f443 4360 	orr.w	r3, r3, #57344	; 0xe000
 80029b2:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 80029b4:	4b4f      	ldr	r3, [pc, #316]	; (8002af4 <HAL_RCC_ClockConfig+0x1b8>)
 80029b6:	689b      	ldr	r3, [r3, #8]
 80029b8:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 80029bc:	687b      	ldr	r3, [r7, #4]
 80029be:	689b      	ldr	r3, [r3, #8]
 80029c0:	494c      	ldr	r1, [pc, #304]	; (8002af4 <HAL_RCC_ClockConfig+0x1b8>)
 80029c2:	4313      	orrs	r3, r2
 80029c4:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 80029c6:	687b      	ldr	r3, [r7, #4]
 80029c8:	681b      	ldr	r3, [r3, #0]
 80029ca:	f003 0301 	and.w	r3, r3, #1
 80029ce:	2b00      	cmp	r3, #0
 80029d0:	d044      	beq.n	8002a5c <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 80029d2:	687b      	ldr	r3, [r7, #4]
 80029d4:	685b      	ldr	r3, [r3, #4]
 80029d6:	2b01      	cmp	r3, #1
 80029d8:	d107      	bne.n	80029ea <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80029da:	4b46      	ldr	r3, [pc, #280]	; (8002af4 <HAL_RCC_ClockConfig+0x1b8>)
 80029dc:	681b      	ldr	r3, [r3, #0]
 80029de:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80029e2:	2b00      	cmp	r3, #0
 80029e4:	d119      	bne.n	8002a1a <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80029e6:	2301      	movs	r3, #1
 80029e8:	e07d      	b.n	8002ae6 <HAL_RCC_ClockConfig+0x1aa>
      }
    }
    /* PLL is selected as System Clock Source */
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 80029ea:	687b      	ldr	r3, [r7, #4]
 80029ec:	685b      	ldr	r3, [r3, #4]
 80029ee:	2b02      	cmp	r3, #2
 80029f0:	d003      	beq.n	80029fa <HAL_RCC_ClockConfig+0xbe>
            (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 80029f2:	687b      	ldr	r3, [r7, #4]
 80029f4:	685b      	ldr	r3, [r3, #4]
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 80029f6:	2b03      	cmp	r3, #3
 80029f8:	d107      	bne.n	8002a0a <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80029fa:	4b3e      	ldr	r3, [pc, #248]	; (8002af4 <HAL_RCC_ClockConfig+0x1b8>)
 80029fc:	681b      	ldr	r3, [r3, #0]
 80029fe:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002a02:	2b00      	cmp	r3, #0
 8002a04:	d109      	bne.n	8002a1a <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8002a06:	2301      	movs	r3, #1
 8002a08:	e06d      	b.n	8002ae6 <HAL_RCC_ClockConfig+0x1aa>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8002a0a:	4b3a      	ldr	r3, [pc, #232]	; (8002af4 <HAL_RCC_ClockConfig+0x1b8>)
 8002a0c:	681b      	ldr	r3, [r3, #0]
 8002a0e:	f003 0302 	and.w	r3, r3, #2
 8002a12:	2b00      	cmp	r3, #0
 8002a14:	d101      	bne.n	8002a1a <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8002a16:	2301      	movs	r3, #1
 8002a18:	e065      	b.n	8002ae6 <HAL_RCC_ClockConfig+0x1aa>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8002a1a:	4b36      	ldr	r3, [pc, #216]	; (8002af4 <HAL_RCC_ClockConfig+0x1b8>)
 8002a1c:	689b      	ldr	r3, [r3, #8]
 8002a1e:	f023 0203 	bic.w	r2, r3, #3
 8002a22:	687b      	ldr	r3, [r7, #4]
 8002a24:	685b      	ldr	r3, [r3, #4]
 8002a26:	4933      	ldr	r1, [pc, #204]	; (8002af4 <HAL_RCC_ClockConfig+0x1b8>)
 8002a28:	4313      	orrs	r3, r2
 8002a2a:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8002a2c:	f7fe f9d0 	bl	8000dd0 <HAL_GetTick>
 8002a30:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8002a32:	e00a      	b.n	8002a4a <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8002a34:	f7fe f9cc 	bl	8000dd0 <HAL_GetTick>
 8002a38:	4602      	mov	r2, r0
 8002a3a:	68fb      	ldr	r3, [r7, #12]
 8002a3c:	1ad3      	subs	r3, r2, r3
 8002a3e:	f241 3288 	movw	r2, #5000	; 0x1388
 8002a42:	4293      	cmp	r3, r2
 8002a44:	d901      	bls.n	8002a4a <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 8002a46:	2303      	movs	r3, #3
 8002a48:	e04d      	b.n	8002ae6 <HAL_RCC_ClockConfig+0x1aa>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8002a4a:	4b2a      	ldr	r3, [pc, #168]	; (8002af4 <HAL_RCC_ClockConfig+0x1b8>)
 8002a4c:	689b      	ldr	r3, [r3, #8]
 8002a4e:	f003 020c 	and.w	r2, r3, #12
 8002a52:	687b      	ldr	r3, [r7, #4]
 8002a54:	685b      	ldr	r3, [r3, #4]
 8002a56:	009b      	lsls	r3, r3, #2
 8002a58:	429a      	cmp	r2, r3
 8002a5a:	d1eb      	bne.n	8002a34 <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8002a5c:	4b24      	ldr	r3, [pc, #144]	; (8002af0 <HAL_RCC_ClockConfig+0x1b4>)
 8002a5e:	681b      	ldr	r3, [r3, #0]
 8002a60:	f003 030f 	and.w	r3, r3, #15
 8002a64:	683a      	ldr	r2, [r7, #0]
 8002a66:	429a      	cmp	r2, r3
 8002a68:	d20c      	bcs.n	8002a84 <HAL_RCC_ClockConfig+0x148>
  {
     /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8002a6a:	4b21      	ldr	r3, [pc, #132]	; (8002af0 <HAL_RCC_ClockConfig+0x1b4>)
 8002a6c:	683a      	ldr	r2, [r7, #0]
 8002a6e:	b2d2      	uxtb	r2, r2
 8002a70:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8002a72:	4b1f      	ldr	r3, [pc, #124]	; (8002af0 <HAL_RCC_ClockConfig+0x1b4>)
 8002a74:	681b      	ldr	r3, [r3, #0]
 8002a76:	f003 030f 	and.w	r3, r3, #15
 8002a7a:	683a      	ldr	r2, [r7, #0]
 8002a7c:	429a      	cmp	r2, r3
 8002a7e:	d001      	beq.n	8002a84 <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 8002a80:	2301      	movs	r3, #1
 8002a82:	e030      	b.n	8002ae6 <HAL_RCC_ClockConfig+0x1aa>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8002a84:	687b      	ldr	r3, [r7, #4]
 8002a86:	681b      	ldr	r3, [r3, #0]
 8002a88:	f003 0304 	and.w	r3, r3, #4
 8002a8c:	2b00      	cmp	r3, #0
 8002a8e:	d008      	beq.n	8002aa2 <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8002a90:	4b18      	ldr	r3, [pc, #96]	; (8002af4 <HAL_RCC_ClockConfig+0x1b8>)
 8002a92:	689b      	ldr	r3, [r3, #8]
 8002a94:	f423 52e0 	bic.w	r2, r3, #7168	; 0x1c00
 8002a98:	687b      	ldr	r3, [r7, #4]
 8002a9a:	68db      	ldr	r3, [r3, #12]
 8002a9c:	4915      	ldr	r1, [pc, #84]	; (8002af4 <HAL_RCC_ClockConfig+0x1b8>)
 8002a9e:	4313      	orrs	r3, r2
 8002aa0:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8002aa2:	687b      	ldr	r3, [r7, #4]
 8002aa4:	681b      	ldr	r3, [r3, #0]
 8002aa6:	f003 0308 	and.w	r3, r3, #8
 8002aaa:	2b00      	cmp	r3, #0
 8002aac:	d009      	beq.n	8002ac2 <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8002aae:	4b11      	ldr	r3, [pc, #68]	; (8002af4 <HAL_RCC_ClockConfig+0x1b8>)
 8002ab0:	689b      	ldr	r3, [r3, #8]
 8002ab2:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 8002ab6:	687b      	ldr	r3, [r7, #4]
 8002ab8:	691b      	ldr	r3, [r3, #16]
 8002aba:	00db      	lsls	r3, r3, #3
 8002abc:	490d      	ldr	r1, [pc, #52]	; (8002af4 <HAL_RCC_ClockConfig+0x1b8>)
 8002abe:	4313      	orrs	r3, r2
 8002ac0:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 8002ac2:	f000 f81d 	bl	8002b00 <HAL_RCC_GetSysClockFreq>
 8002ac6:	4601      	mov	r1, r0
 8002ac8:	4b0a      	ldr	r3, [pc, #40]	; (8002af4 <HAL_RCC_ClockConfig+0x1b8>)
 8002aca:	689b      	ldr	r3, [r3, #8]
 8002acc:	091b      	lsrs	r3, r3, #4
 8002ace:	f003 030f 	and.w	r3, r3, #15
 8002ad2:	4a09      	ldr	r2, [pc, #36]	; (8002af8 <HAL_RCC_ClockConfig+0x1bc>)
 8002ad4:	5cd3      	ldrb	r3, [r2, r3]
 8002ad6:	fa21 f303 	lsr.w	r3, r1, r3
 8002ada:	4a08      	ldr	r2, [pc, #32]	; (8002afc <HAL_RCC_ClockConfig+0x1c0>)
 8002adc:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick (TICK_INT_PRIORITY);
 8002ade:	2000      	movs	r0, #0
 8002ae0:	f7fe f932 	bl	8000d48 <HAL_InitTick>

  return HAL_OK;
 8002ae4:	2300      	movs	r3, #0
}
 8002ae6:	4618      	mov	r0, r3
 8002ae8:	3710      	adds	r7, #16
 8002aea:	46bd      	mov	sp, r7
 8002aec:	bd80      	pop	{r7, pc}
 8002aee:	bf00      	nop
 8002af0:	40023c00 	.word	0x40023c00
 8002af4:	40023800 	.word	0x40023800
 8002af8:	0800333c 	.word	0x0800333c
 8002afc:	20000008 	.word	0x20000008

08002b00 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
__weak uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8002b00:	b5f0      	push	{r4, r5, r6, r7, lr}
 8002b02:	b085      	sub	sp, #20
 8002b04:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U, pllvco = 0U, pllp = 0U;
 8002b06:	2300      	movs	r3, #0
 8002b08:	607b      	str	r3, [r7, #4]
 8002b0a:	2300      	movs	r3, #0
 8002b0c:	60fb      	str	r3, [r7, #12]
 8002b0e:	2300      	movs	r3, #0
 8002b10:	603b      	str	r3, [r7, #0]
  uint32_t sysclockfreq = 0U;
 8002b12:	2300      	movs	r3, #0
 8002b14:	60bb      	str	r3, [r7, #8]

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 8002b16:	4b63      	ldr	r3, [pc, #396]	; (8002ca4 <HAL_RCC_GetSysClockFreq+0x1a4>)
 8002b18:	689b      	ldr	r3, [r3, #8]
 8002b1a:	f003 030c 	and.w	r3, r3, #12
 8002b1e:	2b04      	cmp	r3, #4
 8002b20:	d007      	beq.n	8002b32 <HAL_RCC_GetSysClockFreq+0x32>
 8002b22:	2b08      	cmp	r3, #8
 8002b24:	d008      	beq.n	8002b38 <HAL_RCC_GetSysClockFreq+0x38>
 8002b26:	2b00      	cmp	r3, #0
 8002b28:	f040 80b4 	bne.w	8002c94 <HAL_RCC_GetSysClockFreq+0x194>
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 8002b2c:	4b5e      	ldr	r3, [pc, #376]	; (8002ca8 <HAL_RCC_GetSysClockFreq+0x1a8>)
 8002b2e:	60bb      	str	r3, [r7, #8]
       break;
 8002b30:	e0b3      	b.n	8002c9a <HAL_RCC_GetSysClockFreq+0x19a>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 8002b32:	4b5e      	ldr	r3, [pc, #376]	; (8002cac <HAL_RCC_GetSysClockFreq+0x1ac>)
 8002b34:	60bb      	str	r3, [r7, #8]
      break;
 8002b36:	e0b0      	b.n	8002c9a <HAL_RCC_GetSysClockFreq+0x19a>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8002b38:	4b5a      	ldr	r3, [pc, #360]	; (8002ca4 <HAL_RCC_GetSysClockFreq+0x1a4>)
 8002b3a:	685b      	ldr	r3, [r3, #4]
 8002b3c:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8002b40:	607b      	str	r3, [r7, #4]
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 8002b42:	4b58      	ldr	r3, [pc, #352]	; (8002ca4 <HAL_RCC_GetSysClockFreq+0x1a4>)
 8002b44:	685b      	ldr	r3, [r3, #4]
 8002b46:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8002b4a:	2b00      	cmp	r3, #0
 8002b4c:	d04a      	beq.n	8002be4 <HAL_RCC_GetSysClockFreq+0xe4>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8002b4e:	4b55      	ldr	r3, [pc, #340]	; (8002ca4 <HAL_RCC_GetSysClockFreq+0x1a4>)
 8002b50:	685b      	ldr	r3, [r3, #4]
 8002b52:	099b      	lsrs	r3, r3, #6
 8002b54:	f04f 0400 	mov.w	r4, #0
 8002b58:	f240 11ff 	movw	r1, #511	; 0x1ff
 8002b5c:	f04f 0200 	mov.w	r2, #0
 8002b60:	ea03 0501 	and.w	r5, r3, r1
 8002b64:	ea04 0602 	and.w	r6, r4, r2
 8002b68:	4629      	mov	r1, r5
 8002b6a:	4632      	mov	r2, r6
 8002b6c:	f04f 0300 	mov.w	r3, #0
 8002b70:	f04f 0400 	mov.w	r4, #0
 8002b74:	0154      	lsls	r4, r2, #5
 8002b76:	ea44 64d1 	orr.w	r4, r4, r1, lsr #27
 8002b7a:	014b      	lsls	r3, r1, #5
 8002b7c:	4619      	mov	r1, r3
 8002b7e:	4622      	mov	r2, r4
 8002b80:	1b49      	subs	r1, r1, r5
 8002b82:	eb62 0206 	sbc.w	r2, r2, r6
 8002b86:	f04f 0300 	mov.w	r3, #0
 8002b8a:	f04f 0400 	mov.w	r4, #0
 8002b8e:	0194      	lsls	r4, r2, #6
 8002b90:	ea44 6491 	orr.w	r4, r4, r1, lsr #26
 8002b94:	018b      	lsls	r3, r1, #6
 8002b96:	1a5b      	subs	r3, r3, r1
 8002b98:	eb64 0402 	sbc.w	r4, r4, r2
 8002b9c:	f04f 0100 	mov.w	r1, #0
 8002ba0:	f04f 0200 	mov.w	r2, #0
 8002ba4:	00e2      	lsls	r2, r4, #3
 8002ba6:	ea42 7253 	orr.w	r2, r2, r3, lsr #29
 8002baa:	00d9      	lsls	r1, r3, #3
 8002bac:	460b      	mov	r3, r1
 8002bae:	4614      	mov	r4, r2
 8002bb0:	195b      	adds	r3, r3, r5
 8002bb2:	eb44 0406 	adc.w	r4, r4, r6
 8002bb6:	f04f 0100 	mov.w	r1, #0
 8002bba:	f04f 0200 	mov.w	r2, #0
 8002bbe:	0262      	lsls	r2, r4, #9
 8002bc0:	ea42 52d3 	orr.w	r2, r2, r3, lsr #23
 8002bc4:	0259      	lsls	r1, r3, #9
 8002bc6:	460b      	mov	r3, r1
 8002bc8:	4614      	mov	r4, r2
 8002bca:	4618      	mov	r0, r3
 8002bcc:	4621      	mov	r1, r4
 8002bce:	687b      	ldr	r3, [r7, #4]
 8002bd0:	f04f 0400 	mov.w	r4, #0
 8002bd4:	461a      	mov	r2, r3
 8002bd6:	4623      	mov	r3, r4
 8002bd8:	f7fd ff14 	bl	8000a04 <__aeabi_uldivmod>
 8002bdc:	4603      	mov	r3, r0
 8002bde:	460c      	mov	r4, r1
 8002be0:	60fb      	str	r3, [r7, #12]
 8002be2:	e049      	b.n	8002c78 <HAL_RCC_GetSysClockFreq+0x178>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8002be4:	4b2f      	ldr	r3, [pc, #188]	; (8002ca4 <HAL_RCC_GetSysClockFreq+0x1a4>)
 8002be6:	685b      	ldr	r3, [r3, #4]
 8002be8:	099b      	lsrs	r3, r3, #6
 8002bea:	f04f 0400 	mov.w	r4, #0
 8002bee:	f240 11ff 	movw	r1, #511	; 0x1ff
 8002bf2:	f04f 0200 	mov.w	r2, #0
 8002bf6:	ea03 0501 	and.w	r5, r3, r1
 8002bfa:	ea04 0602 	and.w	r6, r4, r2
 8002bfe:	4629      	mov	r1, r5
 8002c00:	4632      	mov	r2, r6
 8002c02:	f04f 0300 	mov.w	r3, #0
 8002c06:	f04f 0400 	mov.w	r4, #0
 8002c0a:	0154      	lsls	r4, r2, #5
 8002c0c:	ea44 64d1 	orr.w	r4, r4, r1, lsr #27
 8002c10:	014b      	lsls	r3, r1, #5
 8002c12:	4619      	mov	r1, r3
 8002c14:	4622      	mov	r2, r4
 8002c16:	1b49      	subs	r1, r1, r5
 8002c18:	eb62 0206 	sbc.w	r2, r2, r6
 8002c1c:	f04f 0300 	mov.w	r3, #0
 8002c20:	f04f 0400 	mov.w	r4, #0
 8002c24:	0194      	lsls	r4, r2, #6
 8002c26:	ea44 6491 	orr.w	r4, r4, r1, lsr #26
 8002c2a:	018b      	lsls	r3, r1, #6
 8002c2c:	1a5b      	subs	r3, r3, r1
 8002c2e:	eb64 0402 	sbc.w	r4, r4, r2
 8002c32:	f04f 0100 	mov.w	r1, #0
 8002c36:	f04f 0200 	mov.w	r2, #0
 8002c3a:	00e2      	lsls	r2, r4, #3
 8002c3c:	ea42 7253 	orr.w	r2, r2, r3, lsr #29
 8002c40:	00d9      	lsls	r1, r3, #3
 8002c42:	460b      	mov	r3, r1
 8002c44:	4614      	mov	r4, r2
 8002c46:	195b      	adds	r3, r3, r5
 8002c48:	eb44 0406 	adc.w	r4, r4, r6
 8002c4c:	f04f 0100 	mov.w	r1, #0
 8002c50:	f04f 0200 	mov.w	r2, #0
 8002c54:	02a2      	lsls	r2, r4, #10
 8002c56:	ea42 5293 	orr.w	r2, r2, r3, lsr #22
 8002c5a:	0299      	lsls	r1, r3, #10
 8002c5c:	460b      	mov	r3, r1
 8002c5e:	4614      	mov	r4, r2
 8002c60:	4618      	mov	r0, r3
 8002c62:	4621      	mov	r1, r4
 8002c64:	687b      	ldr	r3, [r7, #4]
 8002c66:	f04f 0400 	mov.w	r4, #0
 8002c6a:	461a      	mov	r2, r3
 8002c6c:	4623      	mov	r3, r4
 8002c6e:	f7fd fec9 	bl	8000a04 <__aeabi_uldivmod>
 8002c72:	4603      	mov	r3, r0
 8002c74:	460c      	mov	r4, r1
 8002c76:	60fb      	str	r3, [r7, #12]
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) *2U);
 8002c78:	4b0a      	ldr	r3, [pc, #40]	; (8002ca4 <HAL_RCC_GetSysClockFreq+0x1a4>)
 8002c7a:	685b      	ldr	r3, [r3, #4]
 8002c7c:	0c1b      	lsrs	r3, r3, #16
 8002c7e:	f003 0303 	and.w	r3, r3, #3
 8002c82:	3301      	adds	r3, #1
 8002c84:	005b      	lsls	r3, r3, #1
 8002c86:	603b      	str	r3, [r7, #0]

      sysclockfreq = pllvco/pllp;
 8002c88:	68fa      	ldr	r2, [r7, #12]
 8002c8a:	683b      	ldr	r3, [r7, #0]
 8002c8c:	fbb2 f3f3 	udiv	r3, r2, r3
 8002c90:	60bb      	str	r3, [r7, #8]
      break;
 8002c92:	e002      	b.n	8002c9a <HAL_RCC_GetSysClockFreq+0x19a>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 8002c94:	4b04      	ldr	r3, [pc, #16]	; (8002ca8 <HAL_RCC_GetSysClockFreq+0x1a8>)
 8002c96:	60bb      	str	r3, [r7, #8]
      break;
 8002c98:	bf00      	nop
    }
  }
  return sysclockfreq;
 8002c9a:	68bb      	ldr	r3, [r7, #8]
}
 8002c9c:	4618      	mov	r0, r3
 8002c9e:	3714      	adds	r7, #20
 8002ca0:	46bd      	mov	sp, r7
 8002ca2:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8002ca4:	40023800 	.word	0x40023800
 8002ca8:	00f42400 	.word	0x00f42400
 8002cac:	007a1200 	.word	0x007a1200

08002cb0 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8002cb0:	b480      	push	{r7}
 8002cb2:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8002cb4:	4b03      	ldr	r3, [pc, #12]	; (8002cc4 <HAL_RCC_GetHCLKFreq+0x14>)
 8002cb6:	681b      	ldr	r3, [r3, #0]
}
 8002cb8:	4618      	mov	r0, r3
 8002cba:	46bd      	mov	sp, r7
 8002cbc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002cc0:	4770      	bx	lr
 8002cc2:	bf00      	nop
 8002cc4:	20000008 	.word	0x20000008

08002cc8 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8002cc8:	b580      	push	{r7, lr}
 8002cca:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1)>> RCC_CFGR_PPRE1_Pos]);
 8002ccc:	f7ff fff0 	bl	8002cb0 <HAL_RCC_GetHCLKFreq>
 8002cd0:	4601      	mov	r1, r0
 8002cd2:	4b05      	ldr	r3, [pc, #20]	; (8002ce8 <HAL_RCC_GetPCLK1Freq+0x20>)
 8002cd4:	689b      	ldr	r3, [r3, #8]
 8002cd6:	0a9b      	lsrs	r3, r3, #10
 8002cd8:	f003 0307 	and.w	r3, r3, #7
 8002cdc:	4a03      	ldr	r2, [pc, #12]	; (8002cec <HAL_RCC_GetPCLK1Freq+0x24>)
 8002cde:	5cd3      	ldrb	r3, [r2, r3]
 8002ce0:	fa21 f303 	lsr.w	r3, r1, r3
}
 8002ce4:	4618      	mov	r0, r3
 8002ce6:	bd80      	pop	{r7, pc}
 8002ce8:	40023800 	.word	0x40023800
 8002cec:	0800334c 	.word	0x0800334c

08002cf0 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8002cf0:	b598      	push	{r3, r4, r7, lr}
 8002cf2:	af00      	add	r7, sp, #0
  

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8002cf4:	f7fe f806 	bl	8000d04 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8002cf8:	f000 f880 	bl	8002dfc <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8002cfc:	f000 f916 	bl	8002f2c <MX_GPIO_Init>
  MX_I2C1_Init();
 8002d00:	f000 f8e6 	bl	8002ed0 <MX_I2C1_Init>
  /* USER CODE BEGIN 2 */

  Scan_I2C_Address();
 8002d04:	f000 f964 	bl	8002fd0 <Scan_I2C_Address>

  ADXL_Init();
 8002d08:	f000 f9c6 	bl	8003098 <ADXL_Init>
  while (1)
  {
    /* USER CODE END WHILE */

    /* USER CODE BEGIN 3 */
	  ADXL_Read(0x32, 6);
 8002d0c:	2106      	movs	r1, #6
 8002d0e:	2032      	movs	r0, #50	; 0x32
 8002d10:	f000 f9a2 	bl	8003058 <ADXL_Read>
	  x = (data_rec[1] << 8) | data_rec[0];
 8002d14:	4b32      	ldr	r3, [pc, #200]	; (8002de0 <main+0xf0>)
 8002d16:	785b      	ldrb	r3, [r3, #1]
 8002d18:	021b      	lsls	r3, r3, #8
 8002d1a:	b21a      	sxth	r2, r3
 8002d1c:	4b30      	ldr	r3, [pc, #192]	; (8002de0 <main+0xf0>)
 8002d1e:	781b      	ldrb	r3, [r3, #0]
 8002d20:	b21b      	sxth	r3, r3
 8002d22:	4313      	orrs	r3, r2
 8002d24:	b21a      	sxth	r2, r3
 8002d26:	4b2f      	ldr	r3, [pc, #188]	; (8002de4 <main+0xf4>)
 8002d28:	801a      	strh	r2, [r3, #0]
	  y = (data_rec[3] << 8) | data_rec[2];
 8002d2a:	4b2d      	ldr	r3, [pc, #180]	; (8002de0 <main+0xf0>)
 8002d2c:	78db      	ldrb	r3, [r3, #3]
 8002d2e:	021b      	lsls	r3, r3, #8
 8002d30:	b21a      	sxth	r2, r3
 8002d32:	4b2b      	ldr	r3, [pc, #172]	; (8002de0 <main+0xf0>)
 8002d34:	789b      	ldrb	r3, [r3, #2]
 8002d36:	b21b      	sxth	r3, r3
 8002d38:	4313      	orrs	r3, r2
 8002d3a:	b21a      	sxth	r2, r3
 8002d3c:	4b2a      	ldr	r3, [pc, #168]	; (8002de8 <main+0xf8>)
 8002d3e:	801a      	strh	r2, [r3, #0]
	  z = (data_rec[5] << 8) | data_rec[4];
 8002d40:	4b27      	ldr	r3, [pc, #156]	; (8002de0 <main+0xf0>)
 8002d42:	795b      	ldrb	r3, [r3, #5]
 8002d44:	021b      	lsls	r3, r3, #8
 8002d46:	b21a      	sxth	r2, r3
 8002d48:	4b25      	ldr	r3, [pc, #148]	; (8002de0 <main+0xf0>)
 8002d4a:	791b      	ldrb	r3, [r3, #4]
 8002d4c:	b21b      	sxth	r3, r3
 8002d4e:	4313      	orrs	r3, r2
 8002d50:	b21a      	sxth	r2, r3
 8002d52:	4b26      	ldr	r3, [pc, #152]	; (8002dec <main+0xfc>)
 8002d54:	801a      	strh	r2, [r3, #0]
	  // Bu işlemin ardından eksendeki ivmeyi kontrol etmek için bu verileri g şeklinde dönüştürmemiz gerekir. Yukarıdakileri
	  // başlatma bölümünde +-4g aralığını belirttiğimiz gibi kontrol etmelisiniz. Datasheete göre +-4g aralığında ölçek faktörü 7,8mg/LSB'dir.

	  // Bu yüzden g'ye dönüştürmek için .0078 ile çarpmamız gerekiyor.

	  xg = x * .0078;	// convert the x value g
 8002d56:	4b23      	ldr	r3, [pc, #140]	; (8002de4 <main+0xf4>)
 8002d58:	f9b3 3000 	ldrsh.w	r3, [r3]
 8002d5c:	4618      	mov	r0, r3
 8002d5e:	f7fd fb85 	bl	800046c <__aeabi_i2d>
 8002d62:	a31d      	add	r3, pc, #116	; (adr r3, 8002dd8 <main+0xe8>)
 8002d64:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002d68:	f7fd fbea 	bl	8000540 <__aeabi_dmul>
 8002d6c:	4603      	mov	r3, r0
 8002d6e:	460c      	mov	r4, r1
 8002d70:	4618      	mov	r0, r3
 8002d72:	4621      	mov	r1, r4
 8002d74:	f7fd fdf6 	bl	8000964 <__aeabi_d2f>
 8002d78:	4602      	mov	r2, r0
 8002d7a:	4b1d      	ldr	r3, [pc, #116]	; (8002df0 <main+0x100>)
 8002d7c:	601a      	str	r2, [r3, #0]
	  yg = y * .0078;	// convert the y value g
 8002d7e:	4b1a      	ldr	r3, [pc, #104]	; (8002de8 <main+0xf8>)
 8002d80:	f9b3 3000 	ldrsh.w	r3, [r3]
 8002d84:	4618      	mov	r0, r3
 8002d86:	f7fd fb71 	bl	800046c <__aeabi_i2d>
 8002d8a:	a313      	add	r3, pc, #76	; (adr r3, 8002dd8 <main+0xe8>)
 8002d8c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002d90:	f7fd fbd6 	bl	8000540 <__aeabi_dmul>
 8002d94:	4603      	mov	r3, r0
 8002d96:	460c      	mov	r4, r1
 8002d98:	4618      	mov	r0, r3
 8002d9a:	4621      	mov	r1, r4
 8002d9c:	f7fd fde2 	bl	8000964 <__aeabi_d2f>
 8002da0:	4602      	mov	r2, r0
 8002da2:	4b14      	ldr	r3, [pc, #80]	; (8002df4 <main+0x104>)
 8002da4:	601a      	str	r2, [r3, #0]
	  zg = z * .0078;	// convert the z value g
 8002da6:	4b11      	ldr	r3, [pc, #68]	; (8002dec <main+0xfc>)
 8002da8:	f9b3 3000 	ldrsh.w	r3, [r3]
 8002dac:	4618      	mov	r0, r3
 8002dae:	f7fd fb5d 	bl	800046c <__aeabi_i2d>
 8002db2:	a309      	add	r3, pc, #36	; (adr r3, 8002dd8 <main+0xe8>)
 8002db4:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002db8:	f7fd fbc2 	bl	8000540 <__aeabi_dmul>
 8002dbc:	4603      	mov	r3, r0
 8002dbe:	460c      	mov	r4, r1
 8002dc0:	4618      	mov	r0, r3
 8002dc2:	4621      	mov	r1, r4
 8002dc4:	f7fd fdce 	bl	8000964 <__aeabi_d2f>
 8002dc8:	4602      	mov	r2, r0
 8002dca:	4b0b      	ldr	r3, [pc, #44]	; (8002df8 <main+0x108>)
 8002dcc:	601a      	str	r2, [r3, #0]

	  HAL_Delay(10);
 8002dce:	200a      	movs	r0, #10
 8002dd0:	f7fe f80a 	bl	8000de8 <HAL_Delay>
	  ADXL_Read(0x32, 6);
 8002dd4:	e79a      	b.n	8002d0c <main+0x1c>
 8002dd6:	bf00      	nop
 8002dd8:	8e8a71de 	.word	0x8e8a71de
 8002ddc:	3f7ff2e4 	.word	0x3f7ff2e4
 8002de0:	20000094 	.word	0x20000094
 8002de4:	2000002c 	.word	0x2000002c
 8002de8:	2000008c 	.word	0x2000008c
 8002dec:	20000088 	.word	0x20000088
 8002df0:	2000009c 	.word	0x2000009c
 8002df4:	20000090 	.word	0x20000090
 8002df8:	20000084 	.word	0x20000084

08002dfc <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8002dfc:	b580      	push	{r7, lr}
 8002dfe:	b094      	sub	sp, #80	; 0x50
 8002e00:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8002e02:	f107 0320 	add.w	r3, r7, #32
 8002e06:	2230      	movs	r2, #48	; 0x30
 8002e08:	2100      	movs	r1, #0
 8002e0a:	4618      	mov	r0, r3
 8002e0c:	f000 fa82 	bl	8003314 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8002e10:	f107 030c 	add.w	r3, r7, #12
 8002e14:	2200      	movs	r2, #0
 8002e16:	601a      	str	r2, [r3, #0]
 8002e18:	605a      	str	r2, [r3, #4]
 8002e1a:	609a      	str	r2, [r3, #8]
 8002e1c:	60da      	str	r2, [r3, #12]
 8002e1e:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage 
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 8002e20:	2300      	movs	r3, #0
 8002e22:	60bb      	str	r3, [r7, #8]
 8002e24:	4b28      	ldr	r3, [pc, #160]	; (8002ec8 <SystemClock_Config+0xcc>)
 8002e26:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002e28:	4a27      	ldr	r2, [pc, #156]	; (8002ec8 <SystemClock_Config+0xcc>)
 8002e2a:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8002e2e:	6413      	str	r3, [r2, #64]	; 0x40
 8002e30:	4b25      	ldr	r3, [pc, #148]	; (8002ec8 <SystemClock_Config+0xcc>)
 8002e32:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002e34:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002e38:	60bb      	str	r3, [r7, #8]
 8002e3a:	68bb      	ldr	r3, [r7, #8]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 8002e3c:	2300      	movs	r3, #0
 8002e3e:	607b      	str	r3, [r7, #4]
 8002e40:	4b22      	ldr	r3, [pc, #136]	; (8002ecc <SystemClock_Config+0xd0>)
 8002e42:	681b      	ldr	r3, [r3, #0]
 8002e44:	4a21      	ldr	r2, [pc, #132]	; (8002ecc <SystemClock_Config+0xd0>)
 8002e46:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8002e4a:	6013      	str	r3, [r2, #0]
 8002e4c:	4b1f      	ldr	r3, [pc, #124]	; (8002ecc <SystemClock_Config+0xd0>)
 8002e4e:	681b      	ldr	r3, [r3, #0]
 8002e50:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8002e54:	607b      	str	r3, [r7, #4]
 8002e56:	687b      	ldr	r3, [r7, #4]
  /** Initializes the CPU, AHB and APB busses clocks 
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 8002e58:	2301      	movs	r3, #1
 8002e5a:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 8002e5c:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8002e60:	627b      	str	r3, [r7, #36]	; 0x24
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8002e62:	2302      	movs	r3, #2
 8002e64:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 8002e66:	f44f 0380 	mov.w	r3, #4194304	; 0x400000
 8002e6a:	63fb      	str	r3, [r7, #60]	; 0x3c
  RCC_OscInitStruct.PLL.PLLM = 4;
 8002e6c:	2304      	movs	r3, #4
 8002e6e:	643b      	str	r3, [r7, #64]	; 0x40
  RCC_OscInitStruct.PLL.PLLN = 168;
 8002e70:	23a8      	movs	r3, #168	; 0xa8
 8002e72:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 8002e74:	2302      	movs	r3, #2
 8002e76:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLQ = 4;
 8002e78:	2304      	movs	r3, #4
 8002e7a:	64fb      	str	r3, [r7, #76]	; 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8002e7c:	f107 0320 	add.w	r3, r7, #32
 8002e80:	4618      	mov	r0, r3
 8002e82:	f7ff fb19 	bl	80024b8 <HAL_RCC_OscConfig>
 8002e86:	4603      	mov	r3, r0
 8002e88:	2b00      	cmp	r3, #0
 8002e8a:	d001      	beq.n	8002e90 <SystemClock_Config+0x94>
  {
    Error_Handler();
 8002e8c:	f000 f918 	bl	80030c0 <Error_Handler>
  }
  /** Initializes the CPU, AHB and APB busses clocks 
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8002e90:	230f      	movs	r3, #15
 8002e92:	60fb      	str	r3, [r7, #12]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8002e94:	2302      	movs	r3, #2
 8002e96:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8002e98:	2300      	movs	r3, #0
 8002e9a:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV4;
 8002e9c:	f44f 53a0 	mov.w	r3, #5120	; 0x1400
 8002ea0:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV2;
 8002ea2:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8002ea6:	61fb      	str	r3, [r7, #28]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_5) != HAL_OK)
 8002ea8:	f107 030c 	add.w	r3, r7, #12
 8002eac:	2105      	movs	r1, #5
 8002eae:	4618      	mov	r0, r3
 8002eb0:	f7ff fd44 	bl	800293c <HAL_RCC_ClockConfig>
 8002eb4:	4603      	mov	r3, r0
 8002eb6:	2b00      	cmp	r3, #0
 8002eb8:	d001      	beq.n	8002ebe <SystemClock_Config+0xc2>
  {
    Error_Handler();
 8002eba:	f000 f901 	bl	80030c0 <Error_Handler>
  }
}
 8002ebe:	bf00      	nop
 8002ec0:	3750      	adds	r7, #80	; 0x50
 8002ec2:	46bd      	mov	sp, r7
 8002ec4:	bd80      	pop	{r7, pc}
 8002ec6:	bf00      	nop
 8002ec8:	40023800 	.word	0x40023800
 8002ecc:	40007000 	.word	0x40007000

08002ed0 <MX_I2C1_Init>:
  * @brief I2C1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_I2C1_Init(void)
{
 8002ed0:	b580      	push	{r7, lr}
 8002ed2:	af00      	add	r7, sp, #0
  /* USER CODE END I2C1_Init 0 */

  /* USER CODE BEGIN I2C1_Init 1 */

  /* USER CODE END I2C1_Init 1 */
  hi2c1.Instance = I2C1;
 8002ed4:	4b12      	ldr	r3, [pc, #72]	; (8002f20 <MX_I2C1_Init+0x50>)
 8002ed6:	4a13      	ldr	r2, [pc, #76]	; (8002f24 <MX_I2C1_Init+0x54>)
 8002ed8:	601a      	str	r2, [r3, #0]
  hi2c1.Init.ClockSpeed = 100000;
 8002eda:	4b11      	ldr	r3, [pc, #68]	; (8002f20 <MX_I2C1_Init+0x50>)
 8002edc:	4a12      	ldr	r2, [pc, #72]	; (8002f28 <MX_I2C1_Init+0x58>)
 8002ede:	605a      	str	r2, [r3, #4]
  hi2c1.Init.DutyCycle = I2C_DUTYCYCLE_2;
 8002ee0:	4b0f      	ldr	r3, [pc, #60]	; (8002f20 <MX_I2C1_Init+0x50>)
 8002ee2:	2200      	movs	r2, #0
 8002ee4:	609a      	str	r2, [r3, #8]
  hi2c1.Init.OwnAddress1 = 0;
 8002ee6:	4b0e      	ldr	r3, [pc, #56]	; (8002f20 <MX_I2C1_Init+0x50>)
 8002ee8:	2200      	movs	r2, #0
 8002eea:	60da      	str	r2, [r3, #12]
  hi2c1.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 8002eec:	4b0c      	ldr	r3, [pc, #48]	; (8002f20 <MX_I2C1_Init+0x50>)
 8002eee:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 8002ef2:	611a      	str	r2, [r3, #16]
  hi2c1.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 8002ef4:	4b0a      	ldr	r3, [pc, #40]	; (8002f20 <MX_I2C1_Init+0x50>)
 8002ef6:	2200      	movs	r2, #0
 8002ef8:	615a      	str	r2, [r3, #20]
  hi2c1.Init.OwnAddress2 = 0;
 8002efa:	4b09      	ldr	r3, [pc, #36]	; (8002f20 <MX_I2C1_Init+0x50>)
 8002efc:	2200      	movs	r2, #0
 8002efe:	619a      	str	r2, [r3, #24]
  hi2c1.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 8002f00:	4b07      	ldr	r3, [pc, #28]	; (8002f20 <MX_I2C1_Init+0x50>)
 8002f02:	2200      	movs	r2, #0
 8002f04:	61da      	str	r2, [r3, #28]
  hi2c1.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 8002f06:	4b06      	ldr	r3, [pc, #24]	; (8002f20 <MX_I2C1_Init+0x50>)
 8002f08:	2200      	movs	r2, #0
 8002f0a:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c1) != HAL_OK)
 8002f0c:	4804      	ldr	r0, [pc, #16]	; (8002f20 <MX_I2C1_Init+0x50>)
 8002f0e:	f7fe fa41 	bl	8001394 <HAL_I2C_Init>
 8002f12:	4603      	mov	r3, r0
 8002f14:	2b00      	cmp	r3, #0
 8002f16:	d001      	beq.n	8002f1c <MX_I2C1_Init+0x4c>
  {
    Error_Handler();
 8002f18:	f000 f8d2 	bl	80030c0 <Error_Handler>
  }
  /* USER CODE BEGIN I2C1_Init 2 */

  /* USER CODE END I2C1_Init 2 */

}
 8002f1c:	bf00      	nop
 8002f1e:	bd80      	pop	{r7, pc}
 8002f20:	20000030 	.word	0x20000030
 8002f24:	40005400 	.word	0x40005400
 8002f28:	000186a0 	.word	0x000186a0

08002f2c <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8002f2c:	b580      	push	{r7, lr}
 8002f2e:	b088      	sub	sp, #32
 8002f30:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002f32:	f107 030c 	add.w	r3, r7, #12
 8002f36:	2200      	movs	r2, #0
 8002f38:	601a      	str	r2, [r3, #0]
 8002f3a:	605a      	str	r2, [r3, #4]
 8002f3c:	609a      	str	r2, [r3, #8]
 8002f3e:	60da      	str	r2, [r3, #12]
 8002f40:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOH_CLK_ENABLE();
 8002f42:	2300      	movs	r3, #0
 8002f44:	60bb      	str	r3, [r7, #8]
 8002f46:	4b20      	ldr	r3, [pc, #128]	; (8002fc8 <MX_GPIO_Init+0x9c>)
 8002f48:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002f4a:	4a1f      	ldr	r2, [pc, #124]	; (8002fc8 <MX_GPIO_Init+0x9c>)
 8002f4c:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8002f50:	6313      	str	r3, [r2, #48]	; 0x30
 8002f52:	4b1d      	ldr	r3, [pc, #116]	; (8002fc8 <MX_GPIO_Init+0x9c>)
 8002f54:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002f56:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8002f5a:	60bb      	str	r3, [r7, #8]
 8002f5c:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 8002f5e:	2300      	movs	r3, #0
 8002f60:	607b      	str	r3, [r7, #4]
 8002f62:	4b19      	ldr	r3, [pc, #100]	; (8002fc8 <MX_GPIO_Init+0x9c>)
 8002f64:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002f66:	4a18      	ldr	r2, [pc, #96]	; (8002fc8 <MX_GPIO_Init+0x9c>)
 8002f68:	f043 0308 	orr.w	r3, r3, #8
 8002f6c:	6313      	str	r3, [r2, #48]	; 0x30
 8002f6e:	4b16      	ldr	r3, [pc, #88]	; (8002fc8 <MX_GPIO_Init+0x9c>)
 8002f70:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002f72:	f003 0308 	and.w	r3, r3, #8
 8002f76:	607b      	str	r3, [r7, #4]
 8002f78:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8002f7a:	2300      	movs	r3, #0
 8002f7c:	603b      	str	r3, [r7, #0]
 8002f7e:	4b12      	ldr	r3, [pc, #72]	; (8002fc8 <MX_GPIO_Init+0x9c>)
 8002f80:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002f82:	4a11      	ldr	r2, [pc, #68]	; (8002fc8 <MX_GPIO_Init+0x9c>)
 8002f84:	f043 0302 	orr.w	r3, r3, #2
 8002f88:	6313      	str	r3, [r2, #48]	; 0x30
 8002f8a:	4b0f      	ldr	r3, [pc, #60]	; (8002fc8 <MX_GPIO_Init+0x9c>)
 8002f8c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002f8e:	f003 0302 	and.w	r3, r3, #2
 8002f92:	603b      	str	r3, [r7, #0]
 8002f94:	683b      	ldr	r3, [r7, #0]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOD, GPIO_PIN_11, GPIO_PIN_RESET);
 8002f96:	2200      	movs	r2, #0
 8002f98:	f44f 6100 	mov.w	r1, #2048	; 0x800
 8002f9c:	480b      	ldr	r0, [pc, #44]	; (8002fcc <MX_GPIO_Init+0xa0>)
 8002f9e:	f7fe f9c5 	bl	800132c <HAL_GPIO_WritePin>

  /*Configure GPIO pin : PD11 */
  GPIO_InitStruct.Pin = GPIO_PIN_11;
 8002fa2:	f44f 6300 	mov.w	r3, #2048	; 0x800
 8002fa6:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8002fa8:	2301      	movs	r3, #1
 8002faa:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002fac:	2300      	movs	r3, #0
 8002fae:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002fb0:	2300      	movs	r3, #0
 8002fb2:	61bb      	str	r3, [r7, #24]
  HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8002fb4:	f107 030c 	add.w	r3, r7, #12
 8002fb8:	4619      	mov	r1, r3
 8002fba:	4804      	ldr	r0, [pc, #16]	; (8002fcc <MX_GPIO_Init+0xa0>)
 8002fbc:	f7fe f81c 	bl	8000ff8 <HAL_GPIO_Init>

}
 8002fc0:	bf00      	nop
 8002fc2:	3720      	adds	r7, #32
 8002fc4:	46bd      	mov	sp, r7
 8002fc6:	bd80      	pop	{r7, pc}
 8002fc8:	40023800 	.word	0x40023800
 8002fcc:	40020c00 	.word	0x40020c00

08002fd0 <Scan_I2C_Address>:

/* USER CODE BEGIN 4 */

void Scan_I2C_Address()
{
 8002fd0:	b580      	push	{r7, lr}
 8002fd2:	af00      	add	r7, sp, #0
	for(i=0; i<=255; i++)
 8002fd4:	4b0e      	ldr	r3, [pc, #56]	; (8003010 <Scan_I2C_Address+0x40>)
 8002fd6:	2200      	movs	r2, #0
 8002fd8:	701a      	strb	r2, [r3, #0]
	{
		if(HAL_I2C_IsDeviceReady(&hi2c1, i, 1, 10) == HAL_OK)
 8002fda:	4b0d      	ldr	r3, [pc, #52]	; (8003010 <Scan_I2C_Address+0x40>)
 8002fdc:	781b      	ldrb	r3, [r3, #0]
 8002fde:	b299      	uxth	r1, r3
 8002fe0:	230a      	movs	r3, #10
 8002fe2:	2201      	movs	r2, #1
 8002fe4:	480b      	ldr	r0, [pc, #44]	; (8003014 <Scan_I2C_Address+0x44>)
 8002fe6:	f7fe fe21 	bl	8001c2c <HAL_I2C_IsDeviceReady>
 8002fea:	4603      	mov	r3, r0
 8002fec:	2b00      	cmp	r3, #0
 8002fee:	d105      	bne.n	8002ffc <Scan_I2C_Address+0x2c>
		{
			HAL_GPIO_TogglePin(GPIOD, GPIO_PIN_11);
 8002ff0:	f44f 6100 	mov.w	r1, #2048	; 0x800
 8002ff4:	4808      	ldr	r0, [pc, #32]	; (8003018 <Scan_I2C_Address+0x48>)
 8002ff6:	f7fe f9b2 	bl	800135e <HAL_GPIO_TogglePin>
			break;
 8002ffa:	e006      	b.n	800300a <Scan_I2C_Address+0x3a>
	for(i=0; i<=255; i++)
 8002ffc:	4b04      	ldr	r3, [pc, #16]	; (8003010 <Scan_I2C_Address+0x40>)
 8002ffe:	781b      	ldrb	r3, [r3, #0]
 8003000:	3301      	adds	r3, #1
 8003002:	b2da      	uxtb	r2, r3
 8003004:	4b02      	ldr	r3, [pc, #8]	; (8003010 <Scan_I2C_Address+0x40>)
 8003006:	701a      	strb	r2, [r3, #0]
		if(HAL_I2C_IsDeviceReady(&hi2c1, i, 1, 10) == HAL_OK)
 8003008:	e7e7      	b.n	8002fda <Scan_I2C_Address+0xa>
		}
	}
}
 800300a:	bf00      	nop
 800300c:	bd80      	pop	{r7, pc}
 800300e:	bf00      	nop
 8003010:	2000008a 	.word	0x2000008a
 8003014:	20000030 	.word	0x20000030
 8003018:	40020c00 	.word	0x40020c00

0800301c <ADXL_Write>:

void ADXL_Write(uint8_t reg, uint8_t value)
{
 800301c:	b580      	push	{r7, lr}
 800301e:	b086      	sub	sp, #24
 8003020:	af02      	add	r7, sp, #8
 8003022:	4603      	mov	r3, r0
 8003024:	460a      	mov	r2, r1
 8003026:	71fb      	strb	r3, [r7, #7]
 8003028:	4613      	mov	r3, r2
 800302a:	71bb      	strb	r3, [r7, #6]
	uint8_t data[2]={0};
 800302c:	2300      	movs	r3, #0
 800302e:	81bb      	strh	r3, [r7, #12]
	data[0] = reg;
 8003030:	79fb      	ldrb	r3, [r7, #7]
 8003032:	733b      	strb	r3, [r7, #12]
	data[1] = value;
 8003034:	79bb      	ldrb	r3, [r7, #6]
 8003036:	737b      	strb	r3, [r7, #13]
	HAL_I2C_Master_Transmit(&hi2c1, ADXL_ADDRESS, data, 2, 100);
 8003038:	f107 020c 	add.w	r2, r7, #12
 800303c:	2364      	movs	r3, #100	; 0x64
 800303e:	9300      	str	r3, [sp, #0]
 8003040:	2302      	movs	r3, #2
 8003042:	21a6      	movs	r1, #166	; 0xa6
 8003044:	4803      	ldr	r0, [pc, #12]	; (8003054 <ADXL_Write+0x38>)
 8003046:	f7fe facd 	bl	80015e4 <HAL_I2C_Master_Transmit>
}
 800304a:	bf00      	nop
 800304c:	3710      	adds	r7, #16
 800304e:	46bd      	mov	sp, r7
 8003050:	bd80      	pop	{r7, pc}
 8003052:	bf00      	nop
 8003054:	20000030 	.word	0x20000030

08003058 <ADXL_Read>:

void ADXL_Read(uint8_t reg, uint8_t numberOfBytes)
{
 8003058:	b580      	push	{r7, lr}
 800305a:	b086      	sub	sp, #24
 800305c:	af04      	add	r7, sp, #16
 800305e:	4603      	mov	r3, r0
 8003060:	460a      	mov	r2, r1
 8003062:	71fb      	strb	r3, [r7, #7]
 8003064:	4613      	mov	r3, r2
 8003066:	71bb      	strb	r3, [r7, #6]
	HAL_I2C_Mem_Read(&hi2c1, ADXL_ADDRESS, reg, 1, data_rec, numberOfBytes, 100);
 8003068:	79fb      	ldrb	r3, [r7, #7]
 800306a:	b299      	uxth	r1, r3
 800306c:	79bb      	ldrb	r3, [r7, #6]
 800306e:	b29b      	uxth	r3, r3
 8003070:	2264      	movs	r2, #100	; 0x64
 8003072:	9202      	str	r2, [sp, #8]
 8003074:	9301      	str	r3, [sp, #4]
 8003076:	4b06      	ldr	r3, [pc, #24]	; (8003090 <ADXL_Read+0x38>)
 8003078:	9300      	str	r3, [sp, #0]
 800307a:	2301      	movs	r3, #1
 800307c:	460a      	mov	r2, r1
 800307e:	21a6      	movs	r1, #166	; 0xa6
 8003080:	4804      	ldr	r0, [pc, #16]	; (8003094 <ADXL_Read+0x3c>)
 8003082:	f7fe fbad 	bl	80017e0 <HAL_I2C_Mem_Read>
	// 281.satır ve sonrasının ardından bu noktaya gelip, verileri okuruz. Veriler, DATAX0, DATAX1, DATAY0, DATAY1, DATAZ0, DATAZ1
	//şeklinde 0x32 ila 0x37 arasındaki Kayıtlarda depolanır. Her kayıt 8 bit veri depolar. bu sebeple 8 bitlik bir değişkene 6 farklı değeri kaydettik.

	// Burada MEM Read yapıyoruz. Çünkü belirli bir bellek adresinden yani 0x32'den okuyoruz ve bu adresten itibaren 6 byte veri okumak zorundayız.
	// Bundan sonra yapılması gereken işlem DATAX0 ve DATAX1 deki veriler tek bir veriye dönüştürülmeli bu işlem 125.satırda yapılır
}
 8003086:	bf00      	nop
 8003088:	3708      	adds	r7, #8
 800308a:	46bd      	mov	sp, r7
 800308c:	bd80      	pop	{r7, pc}
 800308e:	bf00      	nop
 8003090:	20000094 	.word	0x20000094
 8003094:	20000030 	.word	0x20000030

08003098 <ADXL_Init>:

void ADXL_Init()
{
 8003098:	b580      	push	{r7, lr}
 800309a:	af00      	add	r7, sp, #0
	ADXL_Read(0x00, 1);		// Read adres: 0x00 and 1 bit if bits = 0xE5 sensor is true work
 800309c:	2101      	movs	r1, #1
 800309e:	2000      	movs	r0, #0
 80030a0:	f7ff ffda 	bl	8003058 <ADXL_Read>
	// Kodlarımızı yazmadan önce, cihazın DEVID değerini kontrol ederek her şeyin yolunda olup olmadığından emin olmakta fayda var.
	// DEVID kaydı (0x00), 0xE5 sabit bir cihaz kimliği koduna sahiptir. Kod 0xE5 ile eşleşirse, çalışmaya devam edebilir, dataları okuyabiliriz.
	// 271.satır

	ADXL_Write(0x2D, 0);	// Reset all bits
 80030a4:	2100      	movs	r1, #0
 80030a6:	202d      	movs	r0, #45	; 0x2d
 80030a8:	f7ff ffb8 	bl	800301c <ADXL_Write>

	// Setup for measurement
	ADXL_Write(0x2D, 0x08);	// Measure bit-1, wake up 0, 0 at 8 hz (Ölçüm bitini set, wake up bitini reset ve frekansı 8Hz olarak ayarladık.)
 80030ac:	2108      	movs	r1, #8
 80030ae:	202d      	movs	r0, #45	; 0x2d
 80030b0:	f7ff ffb4 	bl	800301c <ADXL_Write>
	// Set to Range +- 4g
	ADXL_Write(0x31, 0x01);	// +- 4g range
 80030b4:	2101      	movs	r1, #1
 80030b6:	2031      	movs	r0, #49	; 0x31
 80030b8:	f7ff ffb0 	bl	800301c <ADXL_Write>
	// And ok ready to read for value
}
 80030bc:	bf00      	nop
 80030be:	bd80      	pop	{r7, pc}

080030c0 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 80030c0:	b480      	push	{r7}
 80030c2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */

  /* USER CODE END Error_Handler_Debug */
}
 80030c4:	bf00      	nop
 80030c6:	46bd      	mov	sp, r7
 80030c8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80030cc:	4770      	bx	lr
	...

080030d0 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 80030d0:	b480      	push	{r7}
 80030d2:	b083      	sub	sp, #12
 80030d4:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 80030d6:	2300      	movs	r3, #0
 80030d8:	607b      	str	r3, [r7, #4]
 80030da:	4b10      	ldr	r3, [pc, #64]	; (800311c <HAL_MspInit+0x4c>)
 80030dc:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80030de:	4a0f      	ldr	r2, [pc, #60]	; (800311c <HAL_MspInit+0x4c>)
 80030e0:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 80030e4:	6453      	str	r3, [r2, #68]	; 0x44
 80030e6:	4b0d      	ldr	r3, [pc, #52]	; (800311c <HAL_MspInit+0x4c>)
 80030e8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80030ea:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80030ee:	607b      	str	r3, [r7, #4]
 80030f0:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 80030f2:	2300      	movs	r3, #0
 80030f4:	603b      	str	r3, [r7, #0]
 80030f6:	4b09      	ldr	r3, [pc, #36]	; (800311c <HAL_MspInit+0x4c>)
 80030f8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80030fa:	4a08      	ldr	r2, [pc, #32]	; (800311c <HAL_MspInit+0x4c>)
 80030fc:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8003100:	6413      	str	r3, [r2, #64]	; 0x40
 8003102:	4b06      	ldr	r3, [pc, #24]	; (800311c <HAL_MspInit+0x4c>)
 8003104:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003106:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800310a:	603b      	str	r3, [r7, #0]
 800310c:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 800310e:	bf00      	nop
 8003110:	370c      	adds	r7, #12
 8003112:	46bd      	mov	sp, r7
 8003114:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003118:	4770      	bx	lr
 800311a:	bf00      	nop
 800311c:	40023800 	.word	0x40023800

08003120 <HAL_I2C_MspInit>:
* This function configures the hardware resources used in this example
* @param hi2c: I2C handle pointer
* @retval None
*/
void HAL_I2C_MspInit(I2C_HandleTypeDef* hi2c)
{
 8003120:	b580      	push	{r7, lr}
 8003122:	b08a      	sub	sp, #40	; 0x28
 8003124:	af00      	add	r7, sp, #0
 8003126:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8003128:	f107 0314 	add.w	r3, r7, #20
 800312c:	2200      	movs	r2, #0
 800312e:	601a      	str	r2, [r3, #0]
 8003130:	605a      	str	r2, [r3, #4]
 8003132:	609a      	str	r2, [r3, #8]
 8003134:	60da      	str	r2, [r3, #12]
 8003136:	611a      	str	r2, [r3, #16]
  if(hi2c->Instance==I2C1)
 8003138:	687b      	ldr	r3, [r7, #4]
 800313a:	681b      	ldr	r3, [r3, #0]
 800313c:	4a19      	ldr	r2, [pc, #100]	; (80031a4 <HAL_I2C_MspInit+0x84>)
 800313e:	4293      	cmp	r3, r2
 8003140:	d12b      	bne.n	800319a <HAL_I2C_MspInit+0x7a>
  {
  /* USER CODE BEGIN I2C1_MspInit 0 */

  /* USER CODE END I2C1_MspInit 0 */
  
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8003142:	2300      	movs	r3, #0
 8003144:	613b      	str	r3, [r7, #16]
 8003146:	4b18      	ldr	r3, [pc, #96]	; (80031a8 <HAL_I2C_MspInit+0x88>)
 8003148:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800314a:	4a17      	ldr	r2, [pc, #92]	; (80031a8 <HAL_I2C_MspInit+0x88>)
 800314c:	f043 0302 	orr.w	r3, r3, #2
 8003150:	6313      	str	r3, [r2, #48]	; 0x30
 8003152:	4b15      	ldr	r3, [pc, #84]	; (80031a8 <HAL_I2C_MspInit+0x88>)
 8003154:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003156:	f003 0302 	and.w	r3, r3, #2
 800315a:	613b      	str	r3, [r7, #16]
 800315c:	693b      	ldr	r3, [r7, #16]
    /**I2C1 GPIO Configuration    
    PB6     ------> I2C1_SCL
    PB7     ------> I2C1_SDA 
    */
    GPIO_InitStruct.Pin = GPIO_PIN_6|GPIO_PIN_7;
 800315e:	23c0      	movs	r3, #192	; 0xc0
 8003160:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8003162:	2312      	movs	r3, #18
 8003164:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_PULLUP;
 8003166:	2301      	movs	r3, #1
 8003168:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800316a:	2303      	movs	r3, #3
 800316c:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C1;
 800316e:	2304      	movs	r3, #4
 8003170:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8003172:	f107 0314 	add.w	r3, r7, #20
 8003176:	4619      	mov	r1, r3
 8003178:	480c      	ldr	r0, [pc, #48]	; (80031ac <HAL_I2C_MspInit+0x8c>)
 800317a:	f7fd ff3d 	bl	8000ff8 <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_I2C1_CLK_ENABLE();
 800317e:	2300      	movs	r3, #0
 8003180:	60fb      	str	r3, [r7, #12]
 8003182:	4b09      	ldr	r3, [pc, #36]	; (80031a8 <HAL_I2C_MspInit+0x88>)
 8003184:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003186:	4a08      	ldr	r2, [pc, #32]	; (80031a8 <HAL_I2C_MspInit+0x88>)
 8003188:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 800318c:	6413      	str	r3, [r2, #64]	; 0x40
 800318e:	4b06      	ldr	r3, [pc, #24]	; (80031a8 <HAL_I2C_MspInit+0x88>)
 8003190:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003192:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8003196:	60fb      	str	r3, [r7, #12]
 8003198:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN I2C1_MspInit 1 */

  /* USER CODE END I2C1_MspInit 1 */
  }

}
 800319a:	bf00      	nop
 800319c:	3728      	adds	r7, #40	; 0x28
 800319e:	46bd      	mov	sp, r7
 80031a0:	bd80      	pop	{r7, pc}
 80031a2:	bf00      	nop
 80031a4:	40005400 	.word	0x40005400
 80031a8:	40023800 	.word	0x40023800
 80031ac:	40020400 	.word	0x40020400

080031b0 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 80031b0:	b480      	push	{r7}
 80031b2:	af00      	add	r7, sp, #0

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */

  /* USER CODE END NonMaskableInt_IRQn 1 */
}
 80031b4:	bf00      	nop
 80031b6:	46bd      	mov	sp, r7
 80031b8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80031bc:	4770      	bx	lr

080031be <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 80031be:	b480      	push	{r7}
 80031c0:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 80031c2:	e7fe      	b.n	80031c2 <HardFault_Handler+0x4>

080031c4 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 80031c4:	b480      	push	{r7}
 80031c6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 80031c8:	e7fe      	b.n	80031c8 <MemManage_Handler+0x4>

080031ca <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 80031ca:	b480      	push	{r7}
 80031cc:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 80031ce:	e7fe      	b.n	80031ce <BusFault_Handler+0x4>

080031d0 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 80031d0:	b480      	push	{r7}
 80031d2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 80031d4:	e7fe      	b.n	80031d4 <UsageFault_Handler+0x4>

080031d6 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 80031d6:	b480      	push	{r7}
 80031d8:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 80031da:	bf00      	nop
 80031dc:	46bd      	mov	sp, r7
 80031de:	f85d 7b04 	ldr.w	r7, [sp], #4
 80031e2:	4770      	bx	lr

080031e4 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 80031e4:	b480      	push	{r7}
 80031e6:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 80031e8:	bf00      	nop
 80031ea:	46bd      	mov	sp, r7
 80031ec:	f85d 7b04 	ldr.w	r7, [sp], #4
 80031f0:	4770      	bx	lr

080031f2 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 80031f2:	b480      	push	{r7}
 80031f4:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 80031f6:	bf00      	nop
 80031f8:	46bd      	mov	sp, r7
 80031fa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80031fe:	4770      	bx	lr

08003200 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8003200:	b580      	push	{r7, lr}
 8003202:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8003204:	f7fd fdd0 	bl	8000da8 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8003208:	bf00      	nop
 800320a:	bd80      	pop	{r7, pc}

0800320c <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 800320c:	b480      	push	{r7}
 800320e:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8003210:	4b16      	ldr	r3, [pc, #88]	; (800326c <SystemInit+0x60>)
 8003212:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003216:	4a15      	ldr	r2, [pc, #84]	; (800326c <SystemInit+0x60>)
 8003218:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 800321c:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88
  #endif
  /* Reset the RCC clock configuration to the default reset state ------------*/
  /* Set HSION bit */
  RCC->CR |= (uint32_t)0x00000001;
 8003220:	4b13      	ldr	r3, [pc, #76]	; (8003270 <SystemInit+0x64>)
 8003222:	681b      	ldr	r3, [r3, #0]
 8003224:	4a12      	ldr	r2, [pc, #72]	; (8003270 <SystemInit+0x64>)
 8003226:	f043 0301 	orr.w	r3, r3, #1
 800322a:	6013      	str	r3, [r2, #0]

  /* Reset CFGR register */
  RCC->CFGR = 0x00000000;
 800322c:	4b10      	ldr	r3, [pc, #64]	; (8003270 <SystemInit+0x64>)
 800322e:	2200      	movs	r2, #0
 8003230:	609a      	str	r2, [r3, #8]

  /* Reset HSEON, CSSON and PLLON bits */
  RCC->CR &= (uint32_t)0xFEF6FFFF;
 8003232:	4b0f      	ldr	r3, [pc, #60]	; (8003270 <SystemInit+0x64>)
 8003234:	681b      	ldr	r3, [r3, #0]
 8003236:	4a0e      	ldr	r2, [pc, #56]	; (8003270 <SystemInit+0x64>)
 8003238:	f023 7384 	bic.w	r3, r3, #17301504	; 0x1080000
 800323c:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8003240:	6013      	str	r3, [r2, #0]

  /* Reset PLLCFGR register */
  RCC->PLLCFGR = 0x24003010;
 8003242:	4b0b      	ldr	r3, [pc, #44]	; (8003270 <SystemInit+0x64>)
 8003244:	4a0b      	ldr	r2, [pc, #44]	; (8003274 <SystemInit+0x68>)
 8003246:	605a      	str	r2, [r3, #4]

  /* Reset HSEBYP bit */
  RCC->CR &= (uint32_t)0xFFFBFFFF;
 8003248:	4b09      	ldr	r3, [pc, #36]	; (8003270 <SystemInit+0x64>)
 800324a:	681b      	ldr	r3, [r3, #0]
 800324c:	4a08      	ldr	r2, [pc, #32]	; (8003270 <SystemInit+0x64>)
 800324e:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8003252:	6013      	str	r3, [r2, #0]

  /* Disable all interrupts */
  RCC->CIR = 0x00000000;
 8003254:	4b06      	ldr	r3, [pc, #24]	; (8003270 <SystemInit+0x64>)
 8003256:	2200      	movs	r2, #0
 8003258:	60da      	str	r2, [r3, #12]

  /* Configure the Vector Table location add offset address ------------------*/
#ifdef VECT_TAB_SRAM
  SCB->VTOR = SRAM_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#else
  SCB->VTOR = FLASH_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal FLASH */
 800325a:	4b04      	ldr	r3, [pc, #16]	; (800326c <SystemInit+0x60>)
 800325c:	f04f 6200 	mov.w	r2, #134217728	; 0x8000000
 8003260:	609a      	str	r2, [r3, #8]
#endif
}
 8003262:	bf00      	nop
 8003264:	46bd      	mov	sp, r7
 8003266:	f85d 7b04 	ldr.w	r7, [sp], #4
 800326a:	4770      	bx	lr
 800326c:	e000ed00 	.word	0xe000ed00
 8003270:	40023800 	.word	0x40023800
 8003274:	24003010 	.word	0x24003010

08003278 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack     /* set stack pointer */
 8003278:	f8df d034 	ldr.w	sp, [pc, #52]	; 80032b0 <LoopFillZerobss+0x14>

/* Copy the data segment initializers from flash to SRAM */  
  movs  r1, #0
 800327c:	2100      	movs	r1, #0
  b  LoopCopyDataInit
 800327e:	e003      	b.n	8003288 <LoopCopyDataInit>

08003280 <CopyDataInit>:

CopyDataInit:
  ldr  r3, =_sidata
 8003280:	4b0c      	ldr	r3, [pc, #48]	; (80032b4 <LoopFillZerobss+0x18>)
  ldr  r3, [r3, r1]
 8003282:	585b      	ldr	r3, [r3, r1]
  str  r3, [r0, r1]
 8003284:	5043      	str	r3, [r0, r1]
  adds  r1, r1, #4
 8003286:	3104      	adds	r1, #4

08003288 <LoopCopyDataInit>:
    
LoopCopyDataInit:
  ldr  r0, =_sdata
 8003288:	480b      	ldr	r0, [pc, #44]	; (80032b8 <LoopFillZerobss+0x1c>)
  ldr  r3, =_edata
 800328a:	4b0c      	ldr	r3, [pc, #48]	; (80032bc <LoopFillZerobss+0x20>)
  adds  r2, r0, r1
 800328c:	1842      	adds	r2, r0, r1
  cmp  r2, r3
 800328e:	429a      	cmp	r2, r3
  bcc  CopyDataInit
 8003290:	d3f6      	bcc.n	8003280 <CopyDataInit>
  ldr  r2, =_sbss
 8003292:	4a0b      	ldr	r2, [pc, #44]	; (80032c0 <LoopFillZerobss+0x24>)
  b  LoopFillZerobss
 8003294:	e002      	b.n	800329c <LoopFillZerobss>

08003296 <FillZerobss>:
/* Zero fill the bss segment. */  
FillZerobss:
  movs  r3, #0
 8003296:	2300      	movs	r3, #0
  str  r3, [r2], #4
 8003298:	f842 3b04 	str.w	r3, [r2], #4

0800329c <LoopFillZerobss>:
    
LoopFillZerobss:
  ldr  r3, = _ebss
 800329c:	4b09      	ldr	r3, [pc, #36]	; (80032c4 <LoopFillZerobss+0x28>)
  cmp  r2, r3
 800329e:	429a      	cmp	r2, r3
  bcc  FillZerobss
 80032a0:	d3f9      	bcc.n	8003296 <FillZerobss>

/* Call the clock system intitialization function.*/
  bl  SystemInit   
 80032a2:	f7ff ffb3 	bl	800320c <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 80032a6:	f000 f811 	bl	80032cc <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 80032aa:	f7ff fd21 	bl	8002cf0 <main>
  bx  lr    
 80032ae:	4770      	bx	lr
  ldr   sp, =_estack     /* set stack pointer */
 80032b0:	20020000 	.word	0x20020000
  ldr  r3, =_sidata
 80032b4:	08003364 	.word	0x08003364
  ldr  r0, =_sdata
 80032b8:	20000000 	.word	0x20000000
  ldr  r3, =_edata
 80032bc:	2000000c 	.word	0x2000000c
  ldr  r2, =_sbss
 80032c0:	2000000c 	.word	0x2000000c
  ldr  r3, = _ebss
 80032c4:	200000a0 	.word	0x200000a0

080032c8 <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 80032c8:	e7fe      	b.n	80032c8 <ADC_IRQHandler>
	...

080032cc <__libc_init_array>:
 80032cc:	b570      	push	{r4, r5, r6, lr}
 80032ce:	4e0d      	ldr	r6, [pc, #52]	; (8003304 <__libc_init_array+0x38>)
 80032d0:	4c0d      	ldr	r4, [pc, #52]	; (8003308 <__libc_init_array+0x3c>)
 80032d2:	1ba4      	subs	r4, r4, r6
 80032d4:	10a4      	asrs	r4, r4, #2
 80032d6:	2500      	movs	r5, #0
 80032d8:	42a5      	cmp	r5, r4
 80032da:	d109      	bne.n	80032f0 <__libc_init_array+0x24>
 80032dc:	4e0b      	ldr	r6, [pc, #44]	; (800330c <__libc_init_array+0x40>)
 80032de:	4c0c      	ldr	r4, [pc, #48]	; (8003310 <__libc_init_array+0x44>)
 80032e0:	f000 f820 	bl	8003324 <_init>
 80032e4:	1ba4      	subs	r4, r4, r6
 80032e6:	10a4      	asrs	r4, r4, #2
 80032e8:	2500      	movs	r5, #0
 80032ea:	42a5      	cmp	r5, r4
 80032ec:	d105      	bne.n	80032fa <__libc_init_array+0x2e>
 80032ee:	bd70      	pop	{r4, r5, r6, pc}
 80032f0:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 80032f4:	4798      	blx	r3
 80032f6:	3501      	adds	r5, #1
 80032f8:	e7ee      	b.n	80032d8 <__libc_init_array+0xc>
 80032fa:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 80032fe:	4798      	blx	r3
 8003300:	3501      	adds	r5, #1
 8003302:	e7f2      	b.n	80032ea <__libc_init_array+0x1e>
 8003304:	0800335c 	.word	0x0800335c
 8003308:	0800335c 	.word	0x0800335c
 800330c:	0800335c 	.word	0x0800335c
 8003310:	08003360 	.word	0x08003360

08003314 <memset>:
 8003314:	4402      	add	r2, r0
 8003316:	4603      	mov	r3, r0
 8003318:	4293      	cmp	r3, r2
 800331a:	d100      	bne.n	800331e <memset+0xa>
 800331c:	4770      	bx	lr
 800331e:	f803 1b01 	strb.w	r1, [r3], #1
 8003322:	e7f9      	b.n	8003318 <memset+0x4>

08003324 <_init>:
 8003324:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8003326:	bf00      	nop
 8003328:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800332a:	bc08      	pop	{r3}
 800332c:	469e      	mov	lr, r3
 800332e:	4770      	bx	lr

08003330 <_fini>:
 8003330:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8003332:	bf00      	nop
 8003334:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8003336:	bc08      	pop	{r3}
 8003338:	469e      	mov	lr, r3
 800333a:	4770      	bx	lr
