
EXAMPLE_02_I2C_ADXL345_TAP.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000188  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00002628  08000188  08000188  00010188  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000018  080027b0  080027b0  000127b0  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  080027c8  080027c8  0002000c  2**0
                  CONTENTS
  4 .ARM          00000008  080027c8  080027c8  000127c8  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  080027d0  080027d0  0002000c  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  080027d0  080027d0  000127d0  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  080027d4  080027d4  000127d4  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         0000000c  20000000  080027d8  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00000078  2000000c  080027e4  0002000c  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  20000084  080027e4  00020084  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  0002000c  2**0
                  CONTENTS, READONLY
 12 .debug_info   000066ab  00000000  00000000  0002003c  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_abbrev 000010e2  00000000  00000000  000266e7  2**0
                  CONTENTS, READONLY, DEBUGGING
 14 .debug_aranges 000006b8  00000000  00000000  000277d0  2**3
                  CONTENTS, READONLY, DEBUGGING
 15 .debug_ranges 00000640  00000000  00000000  00027e88  2**3
                  CONTENTS, READONLY, DEBUGGING
 16 .debug_macro  0001ef89  00000000  00000000  000284c8  2**0
                  CONTENTS, READONLY, DEBUGGING
 17 .debug_line   00005b2b  00000000  00000000  00047451  2**0
                  CONTENTS, READONLY, DEBUGGING
 18 .debug_str    000bd21b  00000000  00000000  0004cf7c  2**0
                  CONTENTS, READONLY, DEBUGGING
 19 .comment      0000007b  00000000  00000000  0010a197  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00001b18  00000000  00000000  0010a214  2**2
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

08000188 <__do_global_dtors_aux>:
 8000188:	b510      	push	{r4, lr}
 800018a:	4c05      	ldr	r4, [pc, #20]	; (80001a0 <__do_global_dtors_aux+0x18>)
 800018c:	7823      	ldrb	r3, [r4, #0]
 800018e:	b933      	cbnz	r3, 800019e <__do_global_dtors_aux+0x16>
 8000190:	4b04      	ldr	r3, [pc, #16]	; (80001a4 <__do_global_dtors_aux+0x1c>)
 8000192:	b113      	cbz	r3, 800019a <__do_global_dtors_aux+0x12>
 8000194:	4804      	ldr	r0, [pc, #16]	; (80001a8 <__do_global_dtors_aux+0x20>)
 8000196:	f3af 8000 	nop.w
 800019a:	2301      	movs	r3, #1
 800019c:	7023      	strb	r3, [r4, #0]
 800019e:	bd10      	pop	{r4, pc}
 80001a0:	2000000c 	.word	0x2000000c
 80001a4:	00000000 	.word	0x00000000
 80001a8:	08002798 	.word	0x08002798

080001ac <frame_dummy>:
 80001ac:	b508      	push	{r3, lr}
 80001ae:	4b03      	ldr	r3, [pc, #12]	; (80001bc <frame_dummy+0x10>)
 80001b0:	b11b      	cbz	r3, 80001ba <frame_dummy+0xe>
 80001b2:	4903      	ldr	r1, [pc, #12]	; (80001c0 <frame_dummy+0x14>)
 80001b4:	4803      	ldr	r0, [pc, #12]	; (80001c4 <frame_dummy+0x18>)
 80001b6:	f3af 8000 	nop.w
 80001ba:	bd08      	pop	{r3, pc}
 80001bc:	00000000 	.word	0x00000000
 80001c0:	20000010 	.word	0x20000010
 80001c4:	08002798 	.word	0x08002798

080001c8 <__aeabi_uldivmod>:
 80001c8:	b953      	cbnz	r3, 80001e0 <__aeabi_uldivmod+0x18>
 80001ca:	b94a      	cbnz	r2, 80001e0 <__aeabi_uldivmod+0x18>
 80001cc:	2900      	cmp	r1, #0
 80001ce:	bf08      	it	eq
 80001d0:	2800      	cmpeq	r0, #0
 80001d2:	bf1c      	itt	ne
 80001d4:	f04f 31ff 	movne.w	r1, #4294967295
 80001d8:	f04f 30ff 	movne.w	r0, #4294967295
 80001dc:	f000 b972 	b.w	80004c4 <__aeabi_idiv0>
 80001e0:	f1ad 0c08 	sub.w	ip, sp, #8
 80001e4:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 80001e8:	f000 f806 	bl	80001f8 <__udivmoddi4>
 80001ec:	f8dd e004 	ldr.w	lr, [sp, #4]
 80001f0:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 80001f4:	b004      	add	sp, #16
 80001f6:	4770      	bx	lr

080001f8 <__udivmoddi4>:
 80001f8:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80001fc:	9e08      	ldr	r6, [sp, #32]
 80001fe:	4604      	mov	r4, r0
 8000200:	4688      	mov	r8, r1
 8000202:	2b00      	cmp	r3, #0
 8000204:	d14b      	bne.n	800029e <__udivmoddi4+0xa6>
 8000206:	428a      	cmp	r2, r1
 8000208:	4615      	mov	r5, r2
 800020a:	d967      	bls.n	80002dc <__udivmoddi4+0xe4>
 800020c:	fab2 f282 	clz	r2, r2
 8000210:	b14a      	cbz	r2, 8000226 <__udivmoddi4+0x2e>
 8000212:	f1c2 0720 	rsb	r7, r2, #32
 8000216:	fa01 f302 	lsl.w	r3, r1, r2
 800021a:	fa20 f707 	lsr.w	r7, r0, r7
 800021e:	4095      	lsls	r5, r2
 8000220:	ea47 0803 	orr.w	r8, r7, r3
 8000224:	4094      	lsls	r4, r2
 8000226:	ea4f 4e15 	mov.w	lr, r5, lsr #16
 800022a:	0c23      	lsrs	r3, r4, #16
 800022c:	fbb8 f7fe 	udiv	r7, r8, lr
 8000230:	fa1f fc85 	uxth.w	ip, r5
 8000234:	fb0e 8817 	mls	r8, lr, r7, r8
 8000238:	ea43 4308 	orr.w	r3, r3, r8, lsl #16
 800023c:	fb07 f10c 	mul.w	r1, r7, ip
 8000240:	4299      	cmp	r1, r3
 8000242:	d909      	bls.n	8000258 <__udivmoddi4+0x60>
 8000244:	18eb      	adds	r3, r5, r3
 8000246:	f107 30ff 	add.w	r0, r7, #4294967295
 800024a:	f080 811b 	bcs.w	8000484 <__udivmoddi4+0x28c>
 800024e:	4299      	cmp	r1, r3
 8000250:	f240 8118 	bls.w	8000484 <__udivmoddi4+0x28c>
 8000254:	3f02      	subs	r7, #2
 8000256:	442b      	add	r3, r5
 8000258:	1a5b      	subs	r3, r3, r1
 800025a:	b2a4      	uxth	r4, r4
 800025c:	fbb3 f0fe 	udiv	r0, r3, lr
 8000260:	fb0e 3310 	mls	r3, lr, r0, r3
 8000264:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000268:	fb00 fc0c 	mul.w	ip, r0, ip
 800026c:	45a4      	cmp	ip, r4
 800026e:	d909      	bls.n	8000284 <__udivmoddi4+0x8c>
 8000270:	192c      	adds	r4, r5, r4
 8000272:	f100 33ff 	add.w	r3, r0, #4294967295
 8000276:	f080 8107 	bcs.w	8000488 <__udivmoddi4+0x290>
 800027a:	45a4      	cmp	ip, r4
 800027c:	f240 8104 	bls.w	8000488 <__udivmoddi4+0x290>
 8000280:	3802      	subs	r0, #2
 8000282:	442c      	add	r4, r5
 8000284:	ea40 4007 	orr.w	r0, r0, r7, lsl #16
 8000288:	eba4 040c 	sub.w	r4, r4, ip
 800028c:	2700      	movs	r7, #0
 800028e:	b11e      	cbz	r6, 8000298 <__udivmoddi4+0xa0>
 8000290:	40d4      	lsrs	r4, r2
 8000292:	2300      	movs	r3, #0
 8000294:	e9c6 4300 	strd	r4, r3, [r6]
 8000298:	4639      	mov	r1, r7
 800029a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800029e:	428b      	cmp	r3, r1
 80002a0:	d909      	bls.n	80002b6 <__udivmoddi4+0xbe>
 80002a2:	2e00      	cmp	r6, #0
 80002a4:	f000 80eb 	beq.w	800047e <__udivmoddi4+0x286>
 80002a8:	2700      	movs	r7, #0
 80002aa:	e9c6 0100 	strd	r0, r1, [r6]
 80002ae:	4638      	mov	r0, r7
 80002b0:	4639      	mov	r1, r7
 80002b2:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80002b6:	fab3 f783 	clz	r7, r3
 80002ba:	2f00      	cmp	r7, #0
 80002bc:	d147      	bne.n	800034e <__udivmoddi4+0x156>
 80002be:	428b      	cmp	r3, r1
 80002c0:	d302      	bcc.n	80002c8 <__udivmoddi4+0xd0>
 80002c2:	4282      	cmp	r2, r0
 80002c4:	f200 80fa 	bhi.w	80004bc <__udivmoddi4+0x2c4>
 80002c8:	1a84      	subs	r4, r0, r2
 80002ca:	eb61 0303 	sbc.w	r3, r1, r3
 80002ce:	2001      	movs	r0, #1
 80002d0:	4698      	mov	r8, r3
 80002d2:	2e00      	cmp	r6, #0
 80002d4:	d0e0      	beq.n	8000298 <__udivmoddi4+0xa0>
 80002d6:	e9c6 4800 	strd	r4, r8, [r6]
 80002da:	e7dd      	b.n	8000298 <__udivmoddi4+0xa0>
 80002dc:	b902      	cbnz	r2, 80002e0 <__udivmoddi4+0xe8>
 80002de:	deff      	udf	#255	; 0xff
 80002e0:	fab2 f282 	clz	r2, r2
 80002e4:	2a00      	cmp	r2, #0
 80002e6:	f040 808f 	bne.w	8000408 <__udivmoddi4+0x210>
 80002ea:	1b49      	subs	r1, r1, r5
 80002ec:	ea4f 4e15 	mov.w	lr, r5, lsr #16
 80002f0:	fa1f f885 	uxth.w	r8, r5
 80002f4:	2701      	movs	r7, #1
 80002f6:	fbb1 fcfe 	udiv	ip, r1, lr
 80002fa:	0c23      	lsrs	r3, r4, #16
 80002fc:	fb0e 111c 	mls	r1, lr, ip, r1
 8000300:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000304:	fb08 f10c 	mul.w	r1, r8, ip
 8000308:	4299      	cmp	r1, r3
 800030a:	d907      	bls.n	800031c <__udivmoddi4+0x124>
 800030c:	18eb      	adds	r3, r5, r3
 800030e:	f10c 30ff 	add.w	r0, ip, #4294967295
 8000312:	d202      	bcs.n	800031a <__udivmoddi4+0x122>
 8000314:	4299      	cmp	r1, r3
 8000316:	f200 80cd 	bhi.w	80004b4 <__udivmoddi4+0x2bc>
 800031a:	4684      	mov	ip, r0
 800031c:	1a59      	subs	r1, r3, r1
 800031e:	b2a3      	uxth	r3, r4
 8000320:	fbb1 f0fe 	udiv	r0, r1, lr
 8000324:	fb0e 1410 	mls	r4, lr, r0, r1
 8000328:	ea43 4404 	orr.w	r4, r3, r4, lsl #16
 800032c:	fb08 f800 	mul.w	r8, r8, r0
 8000330:	45a0      	cmp	r8, r4
 8000332:	d907      	bls.n	8000344 <__udivmoddi4+0x14c>
 8000334:	192c      	adds	r4, r5, r4
 8000336:	f100 33ff 	add.w	r3, r0, #4294967295
 800033a:	d202      	bcs.n	8000342 <__udivmoddi4+0x14a>
 800033c:	45a0      	cmp	r8, r4
 800033e:	f200 80b6 	bhi.w	80004ae <__udivmoddi4+0x2b6>
 8000342:	4618      	mov	r0, r3
 8000344:	eba4 0408 	sub.w	r4, r4, r8
 8000348:	ea40 400c 	orr.w	r0, r0, ip, lsl #16
 800034c:	e79f      	b.n	800028e <__udivmoddi4+0x96>
 800034e:	f1c7 0c20 	rsb	ip, r7, #32
 8000352:	40bb      	lsls	r3, r7
 8000354:	fa22 fe0c 	lsr.w	lr, r2, ip
 8000358:	ea4e 0e03 	orr.w	lr, lr, r3
 800035c:	fa01 f407 	lsl.w	r4, r1, r7
 8000360:	fa20 f50c 	lsr.w	r5, r0, ip
 8000364:	fa21 f30c 	lsr.w	r3, r1, ip
 8000368:	ea4f 481e 	mov.w	r8, lr, lsr #16
 800036c:	4325      	orrs	r5, r4
 800036e:	fbb3 f9f8 	udiv	r9, r3, r8
 8000372:	0c2c      	lsrs	r4, r5, #16
 8000374:	fb08 3319 	mls	r3, r8, r9, r3
 8000378:	fa1f fa8e 	uxth.w	sl, lr
 800037c:	ea44 4303 	orr.w	r3, r4, r3, lsl #16
 8000380:	fb09 f40a 	mul.w	r4, r9, sl
 8000384:	429c      	cmp	r4, r3
 8000386:	fa02 f207 	lsl.w	r2, r2, r7
 800038a:	fa00 f107 	lsl.w	r1, r0, r7
 800038e:	d90b      	bls.n	80003a8 <__udivmoddi4+0x1b0>
 8000390:	eb1e 0303 	adds.w	r3, lr, r3
 8000394:	f109 30ff 	add.w	r0, r9, #4294967295
 8000398:	f080 8087 	bcs.w	80004aa <__udivmoddi4+0x2b2>
 800039c:	429c      	cmp	r4, r3
 800039e:	f240 8084 	bls.w	80004aa <__udivmoddi4+0x2b2>
 80003a2:	f1a9 0902 	sub.w	r9, r9, #2
 80003a6:	4473      	add	r3, lr
 80003a8:	1b1b      	subs	r3, r3, r4
 80003aa:	b2ad      	uxth	r5, r5
 80003ac:	fbb3 f0f8 	udiv	r0, r3, r8
 80003b0:	fb08 3310 	mls	r3, r8, r0, r3
 80003b4:	ea45 4403 	orr.w	r4, r5, r3, lsl #16
 80003b8:	fb00 fa0a 	mul.w	sl, r0, sl
 80003bc:	45a2      	cmp	sl, r4
 80003be:	d908      	bls.n	80003d2 <__udivmoddi4+0x1da>
 80003c0:	eb1e 0404 	adds.w	r4, lr, r4
 80003c4:	f100 33ff 	add.w	r3, r0, #4294967295
 80003c8:	d26b      	bcs.n	80004a2 <__udivmoddi4+0x2aa>
 80003ca:	45a2      	cmp	sl, r4
 80003cc:	d969      	bls.n	80004a2 <__udivmoddi4+0x2aa>
 80003ce:	3802      	subs	r0, #2
 80003d0:	4474      	add	r4, lr
 80003d2:	ea40 4009 	orr.w	r0, r0, r9, lsl #16
 80003d6:	fba0 8902 	umull	r8, r9, r0, r2
 80003da:	eba4 040a 	sub.w	r4, r4, sl
 80003de:	454c      	cmp	r4, r9
 80003e0:	46c2      	mov	sl, r8
 80003e2:	464b      	mov	r3, r9
 80003e4:	d354      	bcc.n	8000490 <__udivmoddi4+0x298>
 80003e6:	d051      	beq.n	800048c <__udivmoddi4+0x294>
 80003e8:	2e00      	cmp	r6, #0
 80003ea:	d069      	beq.n	80004c0 <__udivmoddi4+0x2c8>
 80003ec:	ebb1 050a 	subs.w	r5, r1, sl
 80003f0:	eb64 0403 	sbc.w	r4, r4, r3
 80003f4:	fa04 fc0c 	lsl.w	ip, r4, ip
 80003f8:	40fd      	lsrs	r5, r7
 80003fa:	40fc      	lsrs	r4, r7
 80003fc:	ea4c 0505 	orr.w	r5, ip, r5
 8000400:	e9c6 5400 	strd	r5, r4, [r6]
 8000404:	2700      	movs	r7, #0
 8000406:	e747      	b.n	8000298 <__udivmoddi4+0xa0>
 8000408:	f1c2 0320 	rsb	r3, r2, #32
 800040c:	fa20 f703 	lsr.w	r7, r0, r3
 8000410:	4095      	lsls	r5, r2
 8000412:	fa01 f002 	lsl.w	r0, r1, r2
 8000416:	fa21 f303 	lsr.w	r3, r1, r3
 800041a:	ea4f 4e15 	mov.w	lr, r5, lsr #16
 800041e:	4338      	orrs	r0, r7
 8000420:	0c01      	lsrs	r1, r0, #16
 8000422:	fbb3 f7fe 	udiv	r7, r3, lr
 8000426:	fa1f f885 	uxth.w	r8, r5
 800042a:	fb0e 3317 	mls	r3, lr, r7, r3
 800042e:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000432:	fb07 f308 	mul.w	r3, r7, r8
 8000436:	428b      	cmp	r3, r1
 8000438:	fa04 f402 	lsl.w	r4, r4, r2
 800043c:	d907      	bls.n	800044e <__udivmoddi4+0x256>
 800043e:	1869      	adds	r1, r5, r1
 8000440:	f107 3cff 	add.w	ip, r7, #4294967295
 8000444:	d22f      	bcs.n	80004a6 <__udivmoddi4+0x2ae>
 8000446:	428b      	cmp	r3, r1
 8000448:	d92d      	bls.n	80004a6 <__udivmoddi4+0x2ae>
 800044a:	3f02      	subs	r7, #2
 800044c:	4429      	add	r1, r5
 800044e:	1acb      	subs	r3, r1, r3
 8000450:	b281      	uxth	r1, r0
 8000452:	fbb3 f0fe 	udiv	r0, r3, lr
 8000456:	fb0e 3310 	mls	r3, lr, r0, r3
 800045a:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 800045e:	fb00 f308 	mul.w	r3, r0, r8
 8000462:	428b      	cmp	r3, r1
 8000464:	d907      	bls.n	8000476 <__udivmoddi4+0x27e>
 8000466:	1869      	adds	r1, r5, r1
 8000468:	f100 3cff 	add.w	ip, r0, #4294967295
 800046c:	d217      	bcs.n	800049e <__udivmoddi4+0x2a6>
 800046e:	428b      	cmp	r3, r1
 8000470:	d915      	bls.n	800049e <__udivmoddi4+0x2a6>
 8000472:	3802      	subs	r0, #2
 8000474:	4429      	add	r1, r5
 8000476:	1ac9      	subs	r1, r1, r3
 8000478:	ea40 4707 	orr.w	r7, r0, r7, lsl #16
 800047c:	e73b      	b.n	80002f6 <__udivmoddi4+0xfe>
 800047e:	4637      	mov	r7, r6
 8000480:	4630      	mov	r0, r6
 8000482:	e709      	b.n	8000298 <__udivmoddi4+0xa0>
 8000484:	4607      	mov	r7, r0
 8000486:	e6e7      	b.n	8000258 <__udivmoddi4+0x60>
 8000488:	4618      	mov	r0, r3
 800048a:	e6fb      	b.n	8000284 <__udivmoddi4+0x8c>
 800048c:	4541      	cmp	r1, r8
 800048e:	d2ab      	bcs.n	80003e8 <__udivmoddi4+0x1f0>
 8000490:	ebb8 0a02 	subs.w	sl, r8, r2
 8000494:	eb69 020e 	sbc.w	r2, r9, lr
 8000498:	3801      	subs	r0, #1
 800049a:	4613      	mov	r3, r2
 800049c:	e7a4      	b.n	80003e8 <__udivmoddi4+0x1f0>
 800049e:	4660      	mov	r0, ip
 80004a0:	e7e9      	b.n	8000476 <__udivmoddi4+0x27e>
 80004a2:	4618      	mov	r0, r3
 80004a4:	e795      	b.n	80003d2 <__udivmoddi4+0x1da>
 80004a6:	4667      	mov	r7, ip
 80004a8:	e7d1      	b.n	800044e <__udivmoddi4+0x256>
 80004aa:	4681      	mov	r9, r0
 80004ac:	e77c      	b.n	80003a8 <__udivmoddi4+0x1b0>
 80004ae:	3802      	subs	r0, #2
 80004b0:	442c      	add	r4, r5
 80004b2:	e747      	b.n	8000344 <__udivmoddi4+0x14c>
 80004b4:	f1ac 0c02 	sub.w	ip, ip, #2
 80004b8:	442b      	add	r3, r5
 80004ba:	e72f      	b.n	800031c <__udivmoddi4+0x124>
 80004bc:	4638      	mov	r0, r7
 80004be:	e708      	b.n	80002d2 <__udivmoddi4+0xda>
 80004c0:	4637      	mov	r7, r6
 80004c2:	e6e9      	b.n	8000298 <__udivmoddi4+0xa0>

080004c4 <__aeabi_idiv0>:
 80004c4:	4770      	bx	lr
 80004c6:	bf00      	nop

080004c8 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 80004c8:	b580      	push	{r7, lr}
 80004ca:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 80004cc:	4b0e      	ldr	r3, [pc, #56]	; (8000508 <HAL_Init+0x40>)
 80004ce:	681b      	ldr	r3, [r3, #0]
 80004d0:	4a0d      	ldr	r2, [pc, #52]	; (8000508 <HAL_Init+0x40>)
 80004d2:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 80004d6:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 80004d8:	4b0b      	ldr	r3, [pc, #44]	; (8000508 <HAL_Init+0x40>)
 80004da:	681b      	ldr	r3, [r3, #0]
 80004dc:	4a0a      	ldr	r2, [pc, #40]	; (8000508 <HAL_Init+0x40>)
 80004de:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 80004e2:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 80004e4:	4b08      	ldr	r3, [pc, #32]	; (8000508 <HAL_Init+0x40>)
 80004e6:	681b      	ldr	r3, [r3, #0]
 80004e8:	4a07      	ldr	r2, [pc, #28]	; (8000508 <HAL_Init+0x40>)
 80004ea:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80004ee:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 80004f0:	2003      	movs	r0, #3
 80004f2:	f000 f90d 	bl	8000710 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 80004f6:	2000      	movs	r0, #0
 80004f8:	f000 f808 	bl	800050c <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 80004fc:	f002 f822 	bl	8002544 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8000500:	2300      	movs	r3, #0
}
 8000502:	4618      	mov	r0, r3
 8000504:	bd80      	pop	{r7, pc}
 8000506:	bf00      	nop
 8000508:	40023c00 	.word	0x40023c00

0800050c <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 800050c:	b580      	push	{r7, lr}
 800050e:	b082      	sub	sp, #8
 8000510:	af00      	add	r7, sp, #0
 8000512:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8000514:	4b12      	ldr	r3, [pc, #72]	; (8000560 <HAL_InitTick+0x54>)
 8000516:	681a      	ldr	r2, [r3, #0]
 8000518:	4b12      	ldr	r3, [pc, #72]	; (8000564 <HAL_InitTick+0x58>)
 800051a:	781b      	ldrb	r3, [r3, #0]
 800051c:	4619      	mov	r1, r3
 800051e:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8000522:	fbb3 f3f1 	udiv	r3, r3, r1
 8000526:	fbb2 f3f3 	udiv	r3, r2, r3
 800052a:	4618      	mov	r0, r3
 800052c:	f000 f917 	bl	800075e <HAL_SYSTICK_Config>
 8000530:	4603      	mov	r3, r0
 8000532:	2b00      	cmp	r3, #0
 8000534:	d001      	beq.n	800053a <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 8000536:	2301      	movs	r3, #1
 8000538:	e00e      	b.n	8000558 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 800053a:	687b      	ldr	r3, [r7, #4]
 800053c:	2b0f      	cmp	r3, #15
 800053e:	d80a      	bhi.n	8000556 <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8000540:	2200      	movs	r2, #0
 8000542:	6879      	ldr	r1, [r7, #4]
 8000544:	f04f 30ff 	mov.w	r0, #4294967295
 8000548:	f000 f8ed 	bl	8000726 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 800054c:	4a06      	ldr	r2, [pc, #24]	; (8000568 <HAL_InitTick+0x5c>)
 800054e:	687b      	ldr	r3, [r7, #4]
 8000550:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 8000552:	2300      	movs	r3, #0
 8000554:	e000      	b.n	8000558 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 8000556:	2301      	movs	r3, #1
}
 8000558:	4618      	mov	r0, r3
 800055a:	3708      	adds	r7, #8
 800055c:	46bd      	mov	sp, r7
 800055e:	bd80      	pop	{r7, pc}
 8000560:	20000008 	.word	0x20000008
 8000564:	20000004 	.word	0x20000004
 8000568:	20000000 	.word	0x20000000

0800056c <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 800056c:	b480      	push	{r7}
 800056e:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8000570:	4b06      	ldr	r3, [pc, #24]	; (800058c <HAL_IncTick+0x20>)
 8000572:	781b      	ldrb	r3, [r3, #0]
 8000574:	461a      	mov	r2, r3
 8000576:	4b06      	ldr	r3, [pc, #24]	; (8000590 <HAL_IncTick+0x24>)
 8000578:	681b      	ldr	r3, [r3, #0]
 800057a:	4413      	add	r3, r2
 800057c:	4a04      	ldr	r2, [pc, #16]	; (8000590 <HAL_IncTick+0x24>)
 800057e:	6013      	str	r3, [r2, #0]
}
 8000580:	bf00      	nop
 8000582:	46bd      	mov	sp, r7
 8000584:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000588:	4770      	bx	lr
 800058a:	bf00      	nop
 800058c:	20000004 	.word	0x20000004
 8000590:	20000028 	.word	0x20000028

08000594 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8000594:	b480      	push	{r7}
 8000596:	af00      	add	r7, sp, #0
  return uwTick;
 8000598:	4b03      	ldr	r3, [pc, #12]	; (80005a8 <HAL_GetTick+0x14>)
 800059a:	681b      	ldr	r3, [r3, #0]
}
 800059c:	4618      	mov	r0, r3
 800059e:	46bd      	mov	sp, r7
 80005a0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80005a4:	4770      	bx	lr
 80005a6:	bf00      	nop
 80005a8:	20000028 	.word	0x20000028

080005ac <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80005ac:	b480      	push	{r7}
 80005ae:	b085      	sub	sp, #20
 80005b0:	af00      	add	r7, sp, #0
 80005b2:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 80005b4:	687b      	ldr	r3, [r7, #4]
 80005b6:	f003 0307 	and.w	r3, r3, #7
 80005ba:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 80005bc:	4b0c      	ldr	r3, [pc, #48]	; (80005f0 <__NVIC_SetPriorityGrouping+0x44>)
 80005be:	68db      	ldr	r3, [r3, #12]
 80005c0:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 80005c2:	68ba      	ldr	r2, [r7, #8]
 80005c4:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 80005c8:	4013      	ands	r3, r2
 80005ca:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 80005cc:	68fb      	ldr	r3, [r7, #12]
 80005ce:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 80005d0:	68bb      	ldr	r3, [r7, #8]
 80005d2:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 80005d4:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 80005d8:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80005dc:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 80005de:	4a04      	ldr	r2, [pc, #16]	; (80005f0 <__NVIC_SetPriorityGrouping+0x44>)
 80005e0:	68bb      	ldr	r3, [r7, #8]
 80005e2:	60d3      	str	r3, [r2, #12]
}
 80005e4:	bf00      	nop
 80005e6:	3714      	adds	r7, #20
 80005e8:	46bd      	mov	sp, r7
 80005ea:	f85d 7b04 	ldr.w	r7, [sp], #4
 80005ee:	4770      	bx	lr
 80005f0:	e000ed00 	.word	0xe000ed00

080005f4 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 80005f4:	b480      	push	{r7}
 80005f6:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 80005f8:	4b04      	ldr	r3, [pc, #16]	; (800060c <__NVIC_GetPriorityGrouping+0x18>)
 80005fa:	68db      	ldr	r3, [r3, #12]
 80005fc:	0a1b      	lsrs	r3, r3, #8
 80005fe:	f003 0307 	and.w	r3, r3, #7
}
 8000602:	4618      	mov	r0, r3
 8000604:	46bd      	mov	sp, r7
 8000606:	f85d 7b04 	ldr.w	r7, [sp], #4
 800060a:	4770      	bx	lr
 800060c:	e000ed00 	.word	0xe000ed00

08000610 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8000610:	b480      	push	{r7}
 8000612:	b083      	sub	sp, #12
 8000614:	af00      	add	r7, sp, #0
 8000616:	4603      	mov	r3, r0
 8000618:	6039      	str	r1, [r7, #0]
 800061a:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 800061c:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000620:	2b00      	cmp	r3, #0
 8000622:	db0a      	blt.n	800063a <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000624:	683b      	ldr	r3, [r7, #0]
 8000626:	b2da      	uxtb	r2, r3
 8000628:	490c      	ldr	r1, [pc, #48]	; (800065c <__NVIC_SetPriority+0x4c>)
 800062a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800062e:	0112      	lsls	r2, r2, #4
 8000630:	b2d2      	uxtb	r2, r2
 8000632:	440b      	add	r3, r1
 8000634:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8000638:	e00a      	b.n	8000650 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800063a:	683b      	ldr	r3, [r7, #0]
 800063c:	b2da      	uxtb	r2, r3
 800063e:	4908      	ldr	r1, [pc, #32]	; (8000660 <__NVIC_SetPriority+0x50>)
 8000640:	79fb      	ldrb	r3, [r7, #7]
 8000642:	f003 030f 	and.w	r3, r3, #15
 8000646:	3b04      	subs	r3, #4
 8000648:	0112      	lsls	r2, r2, #4
 800064a:	b2d2      	uxtb	r2, r2
 800064c:	440b      	add	r3, r1
 800064e:	761a      	strb	r2, [r3, #24]
}
 8000650:	bf00      	nop
 8000652:	370c      	adds	r7, #12
 8000654:	46bd      	mov	sp, r7
 8000656:	f85d 7b04 	ldr.w	r7, [sp], #4
 800065a:	4770      	bx	lr
 800065c:	e000e100 	.word	0xe000e100
 8000660:	e000ed00 	.word	0xe000ed00

08000664 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8000664:	b480      	push	{r7}
 8000666:	b089      	sub	sp, #36	; 0x24
 8000668:	af00      	add	r7, sp, #0
 800066a:	60f8      	str	r0, [r7, #12]
 800066c:	60b9      	str	r1, [r7, #8]
 800066e:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8000670:	68fb      	ldr	r3, [r7, #12]
 8000672:	f003 0307 	and.w	r3, r3, #7
 8000676:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8000678:	69fb      	ldr	r3, [r7, #28]
 800067a:	f1c3 0307 	rsb	r3, r3, #7
 800067e:	2b04      	cmp	r3, #4
 8000680:	bf28      	it	cs
 8000682:	2304      	movcs	r3, #4
 8000684:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8000686:	69fb      	ldr	r3, [r7, #28]
 8000688:	3304      	adds	r3, #4
 800068a:	2b06      	cmp	r3, #6
 800068c:	d902      	bls.n	8000694 <NVIC_EncodePriority+0x30>
 800068e:	69fb      	ldr	r3, [r7, #28]
 8000690:	3b03      	subs	r3, #3
 8000692:	e000      	b.n	8000696 <NVIC_EncodePriority+0x32>
 8000694:	2300      	movs	r3, #0
 8000696:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000698:	f04f 32ff 	mov.w	r2, #4294967295
 800069c:	69bb      	ldr	r3, [r7, #24]
 800069e:	fa02 f303 	lsl.w	r3, r2, r3
 80006a2:	43da      	mvns	r2, r3
 80006a4:	68bb      	ldr	r3, [r7, #8]
 80006a6:	401a      	ands	r2, r3
 80006a8:	697b      	ldr	r3, [r7, #20]
 80006aa:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 80006ac:	f04f 31ff 	mov.w	r1, #4294967295
 80006b0:	697b      	ldr	r3, [r7, #20]
 80006b2:	fa01 f303 	lsl.w	r3, r1, r3
 80006b6:	43d9      	mvns	r1, r3
 80006b8:	687b      	ldr	r3, [r7, #4]
 80006ba:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80006bc:	4313      	orrs	r3, r2
         );
}
 80006be:	4618      	mov	r0, r3
 80006c0:	3724      	adds	r7, #36	; 0x24
 80006c2:	46bd      	mov	sp, r7
 80006c4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80006c8:	4770      	bx	lr
	...

080006cc <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 80006cc:	b580      	push	{r7, lr}
 80006ce:	b082      	sub	sp, #8
 80006d0:	af00      	add	r7, sp, #0
 80006d2:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 80006d4:	687b      	ldr	r3, [r7, #4]
 80006d6:	3b01      	subs	r3, #1
 80006d8:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 80006dc:	d301      	bcc.n	80006e2 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 80006de:	2301      	movs	r3, #1
 80006e0:	e00f      	b.n	8000702 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 80006e2:	4a0a      	ldr	r2, [pc, #40]	; (800070c <SysTick_Config+0x40>)
 80006e4:	687b      	ldr	r3, [r7, #4]
 80006e6:	3b01      	subs	r3, #1
 80006e8:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 80006ea:	210f      	movs	r1, #15
 80006ec:	f04f 30ff 	mov.w	r0, #4294967295
 80006f0:	f7ff ff8e 	bl	8000610 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 80006f4:	4b05      	ldr	r3, [pc, #20]	; (800070c <SysTick_Config+0x40>)
 80006f6:	2200      	movs	r2, #0
 80006f8:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 80006fa:	4b04      	ldr	r3, [pc, #16]	; (800070c <SysTick_Config+0x40>)
 80006fc:	2207      	movs	r2, #7
 80006fe:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8000700:	2300      	movs	r3, #0
}
 8000702:	4618      	mov	r0, r3
 8000704:	3708      	adds	r7, #8
 8000706:	46bd      	mov	sp, r7
 8000708:	bd80      	pop	{r7, pc}
 800070a:	bf00      	nop
 800070c:	e000e010 	.word	0xe000e010

08000710 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8000710:	b580      	push	{r7, lr}
 8000712:	b082      	sub	sp, #8
 8000714:	af00      	add	r7, sp, #0
 8000716:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8000718:	6878      	ldr	r0, [r7, #4]
 800071a:	f7ff ff47 	bl	80005ac <__NVIC_SetPriorityGrouping>
}
 800071e:	bf00      	nop
 8000720:	3708      	adds	r7, #8
 8000722:	46bd      	mov	sp, r7
 8000724:	bd80      	pop	{r7, pc}

08000726 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8000726:	b580      	push	{r7, lr}
 8000728:	b086      	sub	sp, #24
 800072a:	af00      	add	r7, sp, #0
 800072c:	4603      	mov	r3, r0
 800072e:	60b9      	str	r1, [r7, #8]
 8000730:	607a      	str	r2, [r7, #4]
 8000732:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8000734:	2300      	movs	r3, #0
 8000736:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8000738:	f7ff ff5c 	bl	80005f4 <__NVIC_GetPriorityGrouping>
 800073c:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 800073e:	687a      	ldr	r2, [r7, #4]
 8000740:	68b9      	ldr	r1, [r7, #8]
 8000742:	6978      	ldr	r0, [r7, #20]
 8000744:	f7ff ff8e 	bl	8000664 <NVIC_EncodePriority>
 8000748:	4602      	mov	r2, r0
 800074a:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800074e:	4611      	mov	r1, r2
 8000750:	4618      	mov	r0, r3
 8000752:	f7ff ff5d 	bl	8000610 <__NVIC_SetPriority>
}
 8000756:	bf00      	nop
 8000758:	3718      	adds	r7, #24
 800075a:	46bd      	mov	sp, r7
 800075c:	bd80      	pop	{r7, pc}

0800075e <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 800075e:	b580      	push	{r7, lr}
 8000760:	b082      	sub	sp, #8
 8000762:	af00      	add	r7, sp, #0
 8000764:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8000766:	6878      	ldr	r0, [r7, #4]
 8000768:	f7ff ffb0 	bl	80006cc <SysTick_Config>
 800076c:	4603      	mov	r3, r0
}
 800076e:	4618      	mov	r0, r3
 8000770:	3708      	adds	r7, #8
 8000772:	46bd      	mov	sp, r7
 8000774:	bd80      	pop	{r7, pc}
	...

08000778 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8000778:	b480      	push	{r7}
 800077a:	b089      	sub	sp, #36	; 0x24
 800077c:	af00      	add	r7, sp, #0
 800077e:	6078      	str	r0, [r7, #4]
 8000780:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 8000782:	2300      	movs	r3, #0
 8000784:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 8000786:	2300      	movs	r3, #0
 8000788:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 800078a:	2300      	movs	r3, #0
 800078c:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));
  assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 800078e:	2300      	movs	r3, #0
 8000790:	61fb      	str	r3, [r7, #28]
 8000792:	e16b      	b.n	8000a6c <HAL_GPIO_Init+0x2f4>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 8000794:	2201      	movs	r2, #1
 8000796:	69fb      	ldr	r3, [r7, #28]
 8000798:	fa02 f303 	lsl.w	r3, r2, r3
 800079c:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 800079e:	683b      	ldr	r3, [r7, #0]
 80007a0:	681b      	ldr	r3, [r3, #0]
 80007a2:	697a      	ldr	r2, [r7, #20]
 80007a4:	4013      	ands	r3, r2
 80007a6:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 80007a8:	693a      	ldr	r2, [r7, #16]
 80007aa:	697b      	ldr	r3, [r7, #20]
 80007ac:	429a      	cmp	r2, r3
 80007ae:	f040 815a 	bne.w	8000a66 <HAL_GPIO_Init+0x2ee>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode == GPIO_MODE_AF_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 80007b2:	683b      	ldr	r3, [r7, #0]
 80007b4:	685b      	ldr	r3, [r3, #4]
 80007b6:	2b02      	cmp	r3, #2
 80007b8:	d003      	beq.n	80007c2 <HAL_GPIO_Init+0x4a>
 80007ba:	683b      	ldr	r3, [r7, #0]
 80007bc:	685b      	ldr	r3, [r3, #4]
 80007be:	2b12      	cmp	r3, #18
 80007c0:	d123      	bne.n	800080a <HAL_GPIO_Init+0x92>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 80007c2:	69fb      	ldr	r3, [r7, #28]
 80007c4:	08da      	lsrs	r2, r3, #3
 80007c6:	687b      	ldr	r3, [r7, #4]
 80007c8:	3208      	adds	r2, #8
 80007ca:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80007ce:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 80007d0:	69fb      	ldr	r3, [r7, #28]
 80007d2:	f003 0307 	and.w	r3, r3, #7
 80007d6:	009b      	lsls	r3, r3, #2
 80007d8:	220f      	movs	r2, #15
 80007da:	fa02 f303 	lsl.w	r3, r2, r3
 80007de:	43db      	mvns	r3, r3
 80007e0:	69ba      	ldr	r2, [r7, #24]
 80007e2:	4013      	ands	r3, r2
 80007e4:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 80007e6:	683b      	ldr	r3, [r7, #0]
 80007e8:	691a      	ldr	r2, [r3, #16]
 80007ea:	69fb      	ldr	r3, [r7, #28]
 80007ec:	f003 0307 	and.w	r3, r3, #7
 80007f0:	009b      	lsls	r3, r3, #2
 80007f2:	fa02 f303 	lsl.w	r3, r2, r3
 80007f6:	69ba      	ldr	r2, [r7, #24]
 80007f8:	4313      	orrs	r3, r2
 80007fa:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 80007fc:	69fb      	ldr	r3, [r7, #28]
 80007fe:	08da      	lsrs	r2, r3, #3
 8000800:	687b      	ldr	r3, [r7, #4]
 8000802:	3208      	adds	r2, #8
 8000804:	69b9      	ldr	r1, [r7, #24]
 8000806:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 800080a:	687b      	ldr	r3, [r7, #4]
 800080c:	681b      	ldr	r3, [r3, #0]
 800080e:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 8000810:	69fb      	ldr	r3, [r7, #28]
 8000812:	005b      	lsls	r3, r3, #1
 8000814:	2203      	movs	r2, #3
 8000816:	fa02 f303 	lsl.w	r3, r2, r3
 800081a:	43db      	mvns	r3, r3
 800081c:	69ba      	ldr	r2, [r7, #24]
 800081e:	4013      	ands	r3, r2
 8000820:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8000822:	683b      	ldr	r3, [r7, #0]
 8000824:	685b      	ldr	r3, [r3, #4]
 8000826:	f003 0203 	and.w	r2, r3, #3
 800082a:	69fb      	ldr	r3, [r7, #28]
 800082c:	005b      	lsls	r3, r3, #1
 800082e:	fa02 f303 	lsl.w	r3, r2, r3
 8000832:	69ba      	ldr	r2, [r7, #24]
 8000834:	4313      	orrs	r3, r2
 8000836:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 8000838:	687b      	ldr	r3, [r7, #4]
 800083a:	69ba      	ldr	r2, [r7, #24]
 800083c:	601a      	str	r2, [r3, #0]

      /* In case of Output or Alternate function mode selection */
      if((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 800083e:	683b      	ldr	r3, [r7, #0]
 8000840:	685b      	ldr	r3, [r3, #4]
 8000842:	2b01      	cmp	r3, #1
 8000844:	d00b      	beq.n	800085e <HAL_GPIO_Init+0xe6>
 8000846:	683b      	ldr	r3, [r7, #0]
 8000848:	685b      	ldr	r3, [r3, #4]
 800084a:	2b02      	cmp	r3, #2
 800084c:	d007      	beq.n	800085e <HAL_GPIO_Init+0xe6>
         (GPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 800084e:	683b      	ldr	r3, [r7, #0]
 8000850:	685b      	ldr	r3, [r3, #4]
      if((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 8000852:	2b11      	cmp	r3, #17
 8000854:	d003      	beq.n	800085e <HAL_GPIO_Init+0xe6>
         (GPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 8000856:	683b      	ldr	r3, [r7, #0]
 8000858:	685b      	ldr	r3, [r3, #4]
 800085a:	2b12      	cmp	r3, #18
 800085c:	d130      	bne.n	80008c0 <HAL_GPIO_Init+0x148>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 800085e:	687b      	ldr	r3, [r7, #4]
 8000860:	689b      	ldr	r3, [r3, #8]
 8000862:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 8000864:	69fb      	ldr	r3, [r7, #28]
 8000866:	005b      	lsls	r3, r3, #1
 8000868:	2203      	movs	r2, #3
 800086a:	fa02 f303 	lsl.w	r3, r2, r3
 800086e:	43db      	mvns	r3, r3
 8000870:	69ba      	ldr	r2, [r7, #24]
 8000872:	4013      	ands	r3, r2
 8000874:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 8000876:	683b      	ldr	r3, [r7, #0]
 8000878:	68da      	ldr	r2, [r3, #12]
 800087a:	69fb      	ldr	r3, [r7, #28]
 800087c:	005b      	lsls	r3, r3, #1
 800087e:	fa02 f303 	lsl.w	r3, r2, r3
 8000882:	69ba      	ldr	r2, [r7, #24]
 8000884:	4313      	orrs	r3, r2
 8000886:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 8000888:	687b      	ldr	r3, [r7, #4]
 800088a:	69ba      	ldr	r2, [r7, #24]
 800088c:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 800088e:	687b      	ldr	r3, [r7, #4]
 8000890:	685b      	ldr	r3, [r3, #4]
 8000892:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8000894:	2201      	movs	r2, #1
 8000896:	69fb      	ldr	r3, [r7, #28]
 8000898:	fa02 f303 	lsl.w	r3, r2, r3
 800089c:	43db      	mvns	r3, r3
 800089e:	69ba      	ldr	r2, [r7, #24]
 80008a0:	4013      	ands	r3, r2
 80008a2:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & GPIO_OUTPUT_TYPE) >> 4U) << position);
 80008a4:	683b      	ldr	r3, [r7, #0]
 80008a6:	685b      	ldr	r3, [r3, #4]
 80008a8:	091b      	lsrs	r3, r3, #4
 80008aa:	f003 0201 	and.w	r2, r3, #1
 80008ae:	69fb      	ldr	r3, [r7, #28]
 80008b0:	fa02 f303 	lsl.w	r3, r2, r3
 80008b4:	69ba      	ldr	r2, [r7, #24]
 80008b6:	4313      	orrs	r3, r2
 80008b8:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 80008ba:	687b      	ldr	r3, [r7, #4]
 80008bc:	69ba      	ldr	r2, [r7, #24]
 80008be:	605a      	str	r2, [r3, #4]
      }

      /* Activate the Pull-up or Pull down resistor for the current IO */
      temp = GPIOx->PUPDR;
 80008c0:	687b      	ldr	r3, [r7, #4]
 80008c2:	68db      	ldr	r3, [r3, #12]
 80008c4:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 80008c6:	69fb      	ldr	r3, [r7, #28]
 80008c8:	005b      	lsls	r3, r3, #1
 80008ca:	2203      	movs	r2, #3
 80008cc:	fa02 f303 	lsl.w	r3, r2, r3
 80008d0:	43db      	mvns	r3, r3
 80008d2:	69ba      	ldr	r2, [r7, #24]
 80008d4:	4013      	ands	r3, r2
 80008d6:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Pull) << (position * 2U));
 80008d8:	683b      	ldr	r3, [r7, #0]
 80008da:	689a      	ldr	r2, [r3, #8]
 80008dc:	69fb      	ldr	r3, [r7, #28]
 80008de:	005b      	lsls	r3, r3, #1
 80008e0:	fa02 f303 	lsl.w	r3, r2, r3
 80008e4:	69ba      	ldr	r2, [r7, #24]
 80008e6:	4313      	orrs	r3, r2
 80008e8:	61bb      	str	r3, [r7, #24]
      GPIOx->PUPDR = temp;
 80008ea:	687b      	ldr	r3, [r7, #4]
 80008ec:	69ba      	ldr	r2, [r7, #24]
 80008ee:	60da      	str	r2, [r3, #12]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 80008f0:	683b      	ldr	r3, [r7, #0]
 80008f2:	685b      	ldr	r3, [r3, #4]
 80008f4:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80008f8:	2b00      	cmp	r3, #0
 80008fa:	f000 80b4 	beq.w	8000a66 <HAL_GPIO_Init+0x2ee>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 80008fe:	2300      	movs	r3, #0
 8000900:	60fb      	str	r3, [r7, #12]
 8000902:	4b5f      	ldr	r3, [pc, #380]	; (8000a80 <HAL_GPIO_Init+0x308>)
 8000904:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000906:	4a5e      	ldr	r2, [pc, #376]	; (8000a80 <HAL_GPIO_Init+0x308>)
 8000908:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 800090c:	6453      	str	r3, [r2, #68]	; 0x44
 800090e:	4b5c      	ldr	r3, [pc, #368]	; (8000a80 <HAL_GPIO_Init+0x308>)
 8000910:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000912:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8000916:	60fb      	str	r3, [r7, #12]
 8000918:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 800091a:	4a5a      	ldr	r2, [pc, #360]	; (8000a84 <HAL_GPIO_Init+0x30c>)
 800091c:	69fb      	ldr	r3, [r7, #28]
 800091e:	089b      	lsrs	r3, r3, #2
 8000920:	3302      	adds	r3, #2
 8000922:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8000926:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 8000928:	69fb      	ldr	r3, [r7, #28]
 800092a:	f003 0303 	and.w	r3, r3, #3
 800092e:	009b      	lsls	r3, r3, #2
 8000930:	220f      	movs	r2, #15
 8000932:	fa02 f303 	lsl.w	r3, r2, r3
 8000936:	43db      	mvns	r3, r3
 8000938:	69ba      	ldr	r2, [r7, #24]
 800093a:	4013      	ands	r3, r2
 800093c:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 800093e:	687b      	ldr	r3, [r7, #4]
 8000940:	4a51      	ldr	r2, [pc, #324]	; (8000a88 <HAL_GPIO_Init+0x310>)
 8000942:	4293      	cmp	r3, r2
 8000944:	d02b      	beq.n	800099e <HAL_GPIO_Init+0x226>
 8000946:	687b      	ldr	r3, [r7, #4]
 8000948:	4a50      	ldr	r2, [pc, #320]	; (8000a8c <HAL_GPIO_Init+0x314>)
 800094a:	4293      	cmp	r3, r2
 800094c:	d025      	beq.n	800099a <HAL_GPIO_Init+0x222>
 800094e:	687b      	ldr	r3, [r7, #4]
 8000950:	4a4f      	ldr	r2, [pc, #316]	; (8000a90 <HAL_GPIO_Init+0x318>)
 8000952:	4293      	cmp	r3, r2
 8000954:	d01f      	beq.n	8000996 <HAL_GPIO_Init+0x21e>
 8000956:	687b      	ldr	r3, [r7, #4]
 8000958:	4a4e      	ldr	r2, [pc, #312]	; (8000a94 <HAL_GPIO_Init+0x31c>)
 800095a:	4293      	cmp	r3, r2
 800095c:	d019      	beq.n	8000992 <HAL_GPIO_Init+0x21a>
 800095e:	687b      	ldr	r3, [r7, #4]
 8000960:	4a4d      	ldr	r2, [pc, #308]	; (8000a98 <HAL_GPIO_Init+0x320>)
 8000962:	4293      	cmp	r3, r2
 8000964:	d013      	beq.n	800098e <HAL_GPIO_Init+0x216>
 8000966:	687b      	ldr	r3, [r7, #4]
 8000968:	4a4c      	ldr	r2, [pc, #304]	; (8000a9c <HAL_GPIO_Init+0x324>)
 800096a:	4293      	cmp	r3, r2
 800096c:	d00d      	beq.n	800098a <HAL_GPIO_Init+0x212>
 800096e:	687b      	ldr	r3, [r7, #4]
 8000970:	4a4b      	ldr	r2, [pc, #300]	; (8000aa0 <HAL_GPIO_Init+0x328>)
 8000972:	4293      	cmp	r3, r2
 8000974:	d007      	beq.n	8000986 <HAL_GPIO_Init+0x20e>
 8000976:	687b      	ldr	r3, [r7, #4]
 8000978:	4a4a      	ldr	r2, [pc, #296]	; (8000aa4 <HAL_GPIO_Init+0x32c>)
 800097a:	4293      	cmp	r3, r2
 800097c:	d101      	bne.n	8000982 <HAL_GPIO_Init+0x20a>
 800097e:	2307      	movs	r3, #7
 8000980:	e00e      	b.n	80009a0 <HAL_GPIO_Init+0x228>
 8000982:	2308      	movs	r3, #8
 8000984:	e00c      	b.n	80009a0 <HAL_GPIO_Init+0x228>
 8000986:	2306      	movs	r3, #6
 8000988:	e00a      	b.n	80009a0 <HAL_GPIO_Init+0x228>
 800098a:	2305      	movs	r3, #5
 800098c:	e008      	b.n	80009a0 <HAL_GPIO_Init+0x228>
 800098e:	2304      	movs	r3, #4
 8000990:	e006      	b.n	80009a0 <HAL_GPIO_Init+0x228>
 8000992:	2303      	movs	r3, #3
 8000994:	e004      	b.n	80009a0 <HAL_GPIO_Init+0x228>
 8000996:	2302      	movs	r3, #2
 8000998:	e002      	b.n	80009a0 <HAL_GPIO_Init+0x228>
 800099a:	2301      	movs	r3, #1
 800099c:	e000      	b.n	80009a0 <HAL_GPIO_Init+0x228>
 800099e:	2300      	movs	r3, #0
 80009a0:	69fa      	ldr	r2, [r7, #28]
 80009a2:	f002 0203 	and.w	r2, r2, #3
 80009a6:	0092      	lsls	r2, r2, #2
 80009a8:	4093      	lsls	r3, r2
 80009aa:	69ba      	ldr	r2, [r7, #24]
 80009ac:	4313      	orrs	r3, r2
 80009ae:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 80009b0:	4934      	ldr	r1, [pc, #208]	; (8000a84 <HAL_GPIO_Init+0x30c>)
 80009b2:	69fb      	ldr	r3, [r7, #28]
 80009b4:	089b      	lsrs	r3, r3, #2
 80009b6:	3302      	adds	r3, #2
 80009b8:	69ba      	ldr	r2, [r7, #24]
 80009ba:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 80009be:	4b3a      	ldr	r3, [pc, #232]	; (8000aa8 <HAL_GPIO_Init+0x330>)
 80009c0:	681b      	ldr	r3, [r3, #0]
 80009c2:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80009c4:	693b      	ldr	r3, [r7, #16]
 80009c6:	43db      	mvns	r3, r3
 80009c8:	69ba      	ldr	r2, [r7, #24]
 80009ca:	4013      	ands	r3, r2
 80009cc:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 80009ce:	683b      	ldr	r3, [r7, #0]
 80009d0:	685b      	ldr	r3, [r3, #4]
 80009d2:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80009d6:	2b00      	cmp	r3, #0
 80009d8:	d003      	beq.n	80009e2 <HAL_GPIO_Init+0x26a>
        {
          temp |= iocurrent;
 80009da:	69ba      	ldr	r2, [r7, #24]
 80009dc:	693b      	ldr	r3, [r7, #16]
 80009de:	4313      	orrs	r3, r2
 80009e0:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 80009e2:	4a31      	ldr	r2, [pc, #196]	; (8000aa8 <HAL_GPIO_Init+0x330>)
 80009e4:	69bb      	ldr	r3, [r7, #24]
 80009e6:	6013      	str	r3, [r2, #0]

        temp = EXTI->EMR;
 80009e8:	4b2f      	ldr	r3, [pc, #188]	; (8000aa8 <HAL_GPIO_Init+0x330>)
 80009ea:	685b      	ldr	r3, [r3, #4]
 80009ec:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80009ee:	693b      	ldr	r3, [r7, #16]
 80009f0:	43db      	mvns	r3, r3
 80009f2:	69ba      	ldr	r2, [r7, #24]
 80009f4:	4013      	ands	r3, r2
 80009f6:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 80009f8:	683b      	ldr	r3, [r7, #0]
 80009fa:	685b      	ldr	r3, [r3, #4]
 80009fc:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8000a00:	2b00      	cmp	r3, #0
 8000a02:	d003      	beq.n	8000a0c <HAL_GPIO_Init+0x294>
        {
          temp |= iocurrent;
 8000a04:	69ba      	ldr	r2, [r7, #24]
 8000a06:	693b      	ldr	r3, [r7, #16]
 8000a08:	4313      	orrs	r3, r2
 8000a0a:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 8000a0c:	4a26      	ldr	r2, [pc, #152]	; (8000aa8 <HAL_GPIO_Init+0x330>)
 8000a0e:	69bb      	ldr	r3, [r7, #24]
 8000a10:	6053      	str	r3, [r2, #4]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 8000a12:	4b25      	ldr	r3, [pc, #148]	; (8000aa8 <HAL_GPIO_Init+0x330>)
 8000a14:	689b      	ldr	r3, [r3, #8]
 8000a16:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8000a18:	693b      	ldr	r3, [r7, #16]
 8000a1a:	43db      	mvns	r3, r3
 8000a1c:	69ba      	ldr	r2, [r7, #24]
 8000a1e:	4013      	ands	r3, r2
 8000a20:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 8000a22:	683b      	ldr	r3, [r7, #0]
 8000a24:	685b      	ldr	r3, [r3, #4]
 8000a26:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8000a2a:	2b00      	cmp	r3, #0
 8000a2c:	d003      	beq.n	8000a36 <HAL_GPIO_Init+0x2be>
        {
          temp |= iocurrent;
 8000a2e:	69ba      	ldr	r2, [r7, #24]
 8000a30:	693b      	ldr	r3, [r7, #16]
 8000a32:	4313      	orrs	r3, r2
 8000a34:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 8000a36:	4a1c      	ldr	r2, [pc, #112]	; (8000aa8 <HAL_GPIO_Init+0x330>)
 8000a38:	69bb      	ldr	r3, [r7, #24]
 8000a3a:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 8000a3c:	4b1a      	ldr	r3, [pc, #104]	; (8000aa8 <HAL_GPIO_Init+0x330>)
 8000a3e:	68db      	ldr	r3, [r3, #12]
 8000a40:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8000a42:	693b      	ldr	r3, [r7, #16]
 8000a44:	43db      	mvns	r3, r3
 8000a46:	69ba      	ldr	r2, [r7, #24]
 8000a48:	4013      	ands	r3, r2
 8000a4a:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 8000a4c:	683b      	ldr	r3, [r7, #0]
 8000a4e:	685b      	ldr	r3, [r3, #4]
 8000a50:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8000a54:	2b00      	cmp	r3, #0
 8000a56:	d003      	beq.n	8000a60 <HAL_GPIO_Init+0x2e8>
        {
          temp |= iocurrent;
 8000a58:	69ba      	ldr	r2, [r7, #24]
 8000a5a:	693b      	ldr	r3, [r7, #16]
 8000a5c:	4313      	orrs	r3, r2
 8000a5e:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 8000a60:	4a11      	ldr	r2, [pc, #68]	; (8000aa8 <HAL_GPIO_Init+0x330>)
 8000a62:	69bb      	ldr	r3, [r7, #24]
 8000a64:	60d3      	str	r3, [r2, #12]
  for(position = 0U; position < GPIO_NUMBER; position++)
 8000a66:	69fb      	ldr	r3, [r7, #28]
 8000a68:	3301      	adds	r3, #1
 8000a6a:	61fb      	str	r3, [r7, #28]
 8000a6c:	69fb      	ldr	r3, [r7, #28]
 8000a6e:	2b0f      	cmp	r3, #15
 8000a70:	f67f ae90 	bls.w	8000794 <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 8000a74:	bf00      	nop
 8000a76:	3724      	adds	r7, #36	; 0x24
 8000a78:	46bd      	mov	sp, r7
 8000a7a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000a7e:	4770      	bx	lr
 8000a80:	40023800 	.word	0x40023800
 8000a84:	40013800 	.word	0x40013800
 8000a88:	40020000 	.word	0x40020000
 8000a8c:	40020400 	.word	0x40020400
 8000a90:	40020800 	.word	0x40020800
 8000a94:	40020c00 	.word	0x40020c00
 8000a98:	40021000 	.word	0x40021000
 8000a9c:	40021400 	.word	0x40021400
 8000aa0:	40021800 	.word	0x40021800
 8000aa4:	40021c00 	.word	0x40021c00
 8000aa8:	40013c00 	.word	0x40013c00

08000aac <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8000aac:	b480      	push	{r7}
 8000aae:	b083      	sub	sp, #12
 8000ab0:	af00      	add	r7, sp, #0
 8000ab2:	6078      	str	r0, [r7, #4]
 8000ab4:	460b      	mov	r3, r1
 8000ab6:	807b      	strh	r3, [r7, #2]
 8000ab8:	4613      	mov	r3, r2
 8000aba:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8000abc:	787b      	ldrb	r3, [r7, #1]
 8000abe:	2b00      	cmp	r3, #0
 8000ac0:	d003      	beq.n	8000aca <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 8000ac2:	887a      	ldrh	r2, [r7, #2]
 8000ac4:	687b      	ldr	r3, [r7, #4]
 8000ac6:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
  }
}
 8000ac8:	e003      	b.n	8000ad2 <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 8000aca:	887b      	ldrh	r3, [r7, #2]
 8000acc:	041a      	lsls	r2, r3, #16
 8000ace:	687b      	ldr	r3, [r7, #4]
 8000ad0:	619a      	str	r2, [r3, #24]
}
 8000ad2:	bf00      	nop
 8000ad4:	370c      	adds	r7, #12
 8000ad6:	46bd      	mov	sp, r7
 8000ad8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000adc:	4770      	bx	lr

08000ade <HAL_GPIO_TogglePin>:
  *                      x can be (A..I) to select the GPIO peripheral for STM32F40XX and STM32F427X devices.
  * @param  GPIO_Pin Specifies the pins to be toggled.
  * @retval None
  */
void HAL_GPIO_TogglePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 8000ade:	b480      	push	{r7}
 8000ae0:	b083      	sub	sp, #12
 8000ae2:	af00      	add	r7, sp, #0
 8000ae4:	6078      	str	r0, [r7, #4]
 8000ae6:	460b      	mov	r3, r1
 8000ae8:	807b      	strh	r3, [r7, #2]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if ((GPIOx->ODR & GPIO_Pin) == GPIO_Pin)
 8000aea:	687b      	ldr	r3, [r7, #4]
 8000aec:	695a      	ldr	r2, [r3, #20]
 8000aee:	887b      	ldrh	r3, [r7, #2]
 8000af0:	401a      	ands	r2, r3
 8000af2:	887b      	ldrh	r3, [r7, #2]
 8000af4:	429a      	cmp	r2, r3
 8000af6:	d104      	bne.n	8000b02 <HAL_GPIO_TogglePin+0x24>
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << GPIO_NUMBER;
 8000af8:	887b      	ldrh	r3, [r7, #2]
 8000afa:	041a      	lsls	r2, r3, #16
 8000afc:	687b      	ldr	r3, [r7, #4]
 8000afe:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = GPIO_Pin;
  }
}
 8000b00:	e002      	b.n	8000b08 <HAL_GPIO_TogglePin+0x2a>
    GPIOx->BSRR = GPIO_Pin;
 8000b02:	887a      	ldrh	r2, [r7, #2]
 8000b04:	687b      	ldr	r3, [r7, #4]
 8000b06:	619a      	str	r2, [r3, #24]
}
 8000b08:	bf00      	nop
 8000b0a:	370c      	adds	r7, #12
 8000b0c:	46bd      	mov	sp, r7
 8000b0e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000b12:	4770      	bx	lr

08000b14 <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 8000b14:	b580      	push	{r7, lr}
 8000b16:	b084      	sub	sp, #16
 8000b18:	af00      	add	r7, sp, #0
 8000b1a:	6078      	str	r0, [r7, #4]
  uint32_t freqrange;
  uint32_t pclk1;

  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 8000b1c:	687b      	ldr	r3, [r7, #4]
 8000b1e:	2b00      	cmp	r3, #0
 8000b20:	d101      	bne.n	8000b26 <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 8000b22:	2301      	movs	r3, #1
 8000b24:	e10f      	b.n	8000d46 <HAL_I2C_Init+0x232>
  assert_param(IS_I2C_DUAL_ADDRESS(hi2c->Init.DualAddressMode));
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 8000b26:	687b      	ldr	r3, [r7, #4]
 8000b28:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8000b2c:	b2db      	uxtb	r3, r3
 8000b2e:	2b00      	cmp	r3, #0
 8000b30:	d106      	bne.n	8000b40 <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 8000b32:	687b      	ldr	r3, [r7, #4]
 8000b34:	2200      	movs	r2, #0
 8000b36:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_I2C_MspInit(hi2c);
 8000b3a:	6878      	ldr	r0, [r7, #4]
 8000b3c:	f001 fd2a 	bl	8002594 <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 8000b40:	687b      	ldr	r3, [r7, #4]
 8000b42:	2224      	movs	r2, #36	; 0x24
 8000b44:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 8000b48:	687b      	ldr	r3, [r7, #4]
 8000b4a:	681b      	ldr	r3, [r3, #0]
 8000b4c:	681a      	ldr	r2, [r3, #0]
 8000b4e:	687b      	ldr	r3, [r7, #4]
 8000b50:	681b      	ldr	r3, [r3, #0]
 8000b52:	f022 0201 	bic.w	r2, r2, #1
 8000b56:	601a      	str	r2, [r3, #0]

  /* Get PCLK1 frequency */
  pclk1 = HAL_RCC_GetPCLK1Freq();
 8000b58:	f001 fb54 	bl	8002204 <HAL_RCC_GetPCLK1Freq>
 8000b5c:	60f8      	str	r0, [r7, #12]

  /* Check the minimum allowed PCLK1 frequency */
  if (I2C_MIN_PCLK_FREQ(pclk1, hi2c->Init.ClockSpeed) == 1U)
 8000b5e:	687b      	ldr	r3, [r7, #4]
 8000b60:	685b      	ldr	r3, [r3, #4]
 8000b62:	4a7b      	ldr	r2, [pc, #492]	; (8000d50 <HAL_I2C_Init+0x23c>)
 8000b64:	4293      	cmp	r3, r2
 8000b66:	d807      	bhi.n	8000b78 <HAL_I2C_Init+0x64>
 8000b68:	68fb      	ldr	r3, [r7, #12]
 8000b6a:	4a7a      	ldr	r2, [pc, #488]	; (8000d54 <HAL_I2C_Init+0x240>)
 8000b6c:	4293      	cmp	r3, r2
 8000b6e:	bf94      	ite	ls
 8000b70:	2301      	movls	r3, #1
 8000b72:	2300      	movhi	r3, #0
 8000b74:	b2db      	uxtb	r3, r3
 8000b76:	e006      	b.n	8000b86 <HAL_I2C_Init+0x72>
 8000b78:	68fb      	ldr	r3, [r7, #12]
 8000b7a:	4a77      	ldr	r2, [pc, #476]	; (8000d58 <HAL_I2C_Init+0x244>)
 8000b7c:	4293      	cmp	r3, r2
 8000b7e:	bf94      	ite	ls
 8000b80:	2301      	movls	r3, #1
 8000b82:	2300      	movhi	r3, #0
 8000b84:	b2db      	uxtb	r3, r3
 8000b86:	2b00      	cmp	r3, #0
 8000b88:	d001      	beq.n	8000b8e <HAL_I2C_Init+0x7a>
  {
    return HAL_ERROR;
 8000b8a:	2301      	movs	r3, #1
 8000b8c:	e0db      	b.n	8000d46 <HAL_I2C_Init+0x232>
  }

  /* Calculate frequency range */
  freqrange = I2C_FREQRANGE(pclk1);
 8000b8e:	68fb      	ldr	r3, [r7, #12]
 8000b90:	4a72      	ldr	r2, [pc, #456]	; (8000d5c <HAL_I2C_Init+0x248>)
 8000b92:	fba2 2303 	umull	r2, r3, r2, r3
 8000b96:	0c9b      	lsrs	r3, r3, #18
 8000b98:	60bb      	str	r3, [r7, #8]

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Frequency range */
  MODIFY_REG(hi2c->Instance->CR2, I2C_CR2_FREQ, freqrange);
 8000b9a:	687b      	ldr	r3, [r7, #4]
 8000b9c:	681b      	ldr	r3, [r3, #0]
 8000b9e:	685b      	ldr	r3, [r3, #4]
 8000ba0:	f023 013f 	bic.w	r1, r3, #63	; 0x3f
 8000ba4:	687b      	ldr	r3, [r7, #4]
 8000ba6:	681b      	ldr	r3, [r3, #0]
 8000ba8:	68ba      	ldr	r2, [r7, #8]
 8000baa:	430a      	orrs	r2, r1
 8000bac:	605a      	str	r2, [r3, #4]

  /*---------------------------- I2Cx TRISE Configuration --------------------*/
  /* Configure I2Cx: Rise Time */
  MODIFY_REG(hi2c->Instance->TRISE, I2C_TRISE_TRISE, I2C_RISE_TIME(freqrange, hi2c->Init.ClockSpeed));
 8000bae:	687b      	ldr	r3, [r7, #4]
 8000bb0:	681b      	ldr	r3, [r3, #0]
 8000bb2:	6a1b      	ldr	r3, [r3, #32]
 8000bb4:	f023 013f 	bic.w	r1, r3, #63	; 0x3f
 8000bb8:	687b      	ldr	r3, [r7, #4]
 8000bba:	685b      	ldr	r3, [r3, #4]
 8000bbc:	4a64      	ldr	r2, [pc, #400]	; (8000d50 <HAL_I2C_Init+0x23c>)
 8000bbe:	4293      	cmp	r3, r2
 8000bc0:	d802      	bhi.n	8000bc8 <HAL_I2C_Init+0xb4>
 8000bc2:	68bb      	ldr	r3, [r7, #8]
 8000bc4:	3301      	adds	r3, #1
 8000bc6:	e009      	b.n	8000bdc <HAL_I2C_Init+0xc8>
 8000bc8:	68bb      	ldr	r3, [r7, #8]
 8000bca:	f44f 7296 	mov.w	r2, #300	; 0x12c
 8000bce:	fb02 f303 	mul.w	r3, r2, r3
 8000bd2:	4a63      	ldr	r2, [pc, #396]	; (8000d60 <HAL_I2C_Init+0x24c>)
 8000bd4:	fba2 2303 	umull	r2, r3, r2, r3
 8000bd8:	099b      	lsrs	r3, r3, #6
 8000bda:	3301      	adds	r3, #1
 8000bdc:	687a      	ldr	r2, [r7, #4]
 8000bde:	6812      	ldr	r2, [r2, #0]
 8000be0:	430b      	orrs	r3, r1
 8000be2:	6213      	str	r3, [r2, #32]

  /*---------------------------- I2Cx CCR Configuration ----------------------*/
  /* Configure I2Cx: Speed */
  MODIFY_REG(hi2c->Instance->CCR, (I2C_CCR_FS | I2C_CCR_DUTY | I2C_CCR_CCR), I2C_SPEED(pclk1, hi2c->Init.ClockSpeed, hi2c->Init.DutyCycle));
 8000be4:	687b      	ldr	r3, [r7, #4]
 8000be6:	681b      	ldr	r3, [r3, #0]
 8000be8:	69db      	ldr	r3, [r3, #28]
 8000bea:	f423 424f 	bic.w	r2, r3, #52992	; 0xcf00
 8000bee:	f022 02ff 	bic.w	r2, r2, #255	; 0xff
 8000bf2:	687b      	ldr	r3, [r7, #4]
 8000bf4:	685b      	ldr	r3, [r3, #4]
 8000bf6:	4956      	ldr	r1, [pc, #344]	; (8000d50 <HAL_I2C_Init+0x23c>)
 8000bf8:	428b      	cmp	r3, r1
 8000bfa:	d80d      	bhi.n	8000c18 <HAL_I2C_Init+0x104>
 8000bfc:	68fb      	ldr	r3, [r7, #12]
 8000bfe:	1e59      	subs	r1, r3, #1
 8000c00:	687b      	ldr	r3, [r7, #4]
 8000c02:	685b      	ldr	r3, [r3, #4]
 8000c04:	005b      	lsls	r3, r3, #1
 8000c06:	fbb1 f3f3 	udiv	r3, r1, r3
 8000c0a:	3301      	adds	r3, #1
 8000c0c:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8000c10:	2b04      	cmp	r3, #4
 8000c12:	bf38      	it	cc
 8000c14:	2304      	movcc	r3, #4
 8000c16:	e04f      	b.n	8000cb8 <HAL_I2C_Init+0x1a4>
 8000c18:	687b      	ldr	r3, [r7, #4]
 8000c1a:	689b      	ldr	r3, [r3, #8]
 8000c1c:	2b00      	cmp	r3, #0
 8000c1e:	d111      	bne.n	8000c44 <HAL_I2C_Init+0x130>
 8000c20:	68fb      	ldr	r3, [r7, #12]
 8000c22:	1e58      	subs	r0, r3, #1
 8000c24:	687b      	ldr	r3, [r7, #4]
 8000c26:	6859      	ldr	r1, [r3, #4]
 8000c28:	460b      	mov	r3, r1
 8000c2a:	005b      	lsls	r3, r3, #1
 8000c2c:	440b      	add	r3, r1
 8000c2e:	fbb0 f3f3 	udiv	r3, r0, r3
 8000c32:	3301      	adds	r3, #1
 8000c34:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8000c38:	2b00      	cmp	r3, #0
 8000c3a:	bf0c      	ite	eq
 8000c3c:	2301      	moveq	r3, #1
 8000c3e:	2300      	movne	r3, #0
 8000c40:	b2db      	uxtb	r3, r3
 8000c42:	e012      	b.n	8000c6a <HAL_I2C_Init+0x156>
 8000c44:	68fb      	ldr	r3, [r7, #12]
 8000c46:	1e58      	subs	r0, r3, #1
 8000c48:	687b      	ldr	r3, [r7, #4]
 8000c4a:	6859      	ldr	r1, [r3, #4]
 8000c4c:	460b      	mov	r3, r1
 8000c4e:	009b      	lsls	r3, r3, #2
 8000c50:	440b      	add	r3, r1
 8000c52:	0099      	lsls	r1, r3, #2
 8000c54:	440b      	add	r3, r1
 8000c56:	fbb0 f3f3 	udiv	r3, r0, r3
 8000c5a:	3301      	adds	r3, #1
 8000c5c:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8000c60:	2b00      	cmp	r3, #0
 8000c62:	bf0c      	ite	eq
 8000c64:	2301      	moveq	r3, #1
 8000c66:	2300      	movne	r3, #0
 8000c68:	b2db      	uxtb	r3, r3
 8000c6a:	2b00      	cmp	r3, #0
 8000c6c:	d001      	beq.n	8000c72 <HAL_I2C_Init+0x15e>
 8000c6e:	2301      	movs	r3, #1
 8000c70:	e022      	b.n	8000cb8 <HAL_I2C_Init+0x1a4>
 8000c72:	687b      	ldr	r3, [r7, #4]
 8000c74:	689b      	ldr	r3, [r3, #8]
 8000c76:	2b00      	cmp	r3, #0
 8000c78:	d10e      	bne.n	8000c98 <HAL_I2C_Init+0x184>
 8000c7a:	68fb      	ldr	r3, [r7, #12]
 8000c7c:	1e58      	subs	r0, r3, #1
 8000c7e:	687b      	ldr	r3, [r7, #4]
 8000c80:	6859      	ldr	r1, [r3, #4]
 8000c82:	460b      	mov	r3, r1
 8000c84:	005b      	lsls	r3, r3, #1
 8000c86:	440b      	add	r3, r1
 8000c88:	fbb0 f3f3 	udiv	r3, r0, r3
 8000c8c:	3301      	adds	r3, #1
 8000c8e:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8000c92:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8000c96:	e00f      	b.n	8000cb8 <HAL_I2C_Init+0x1a4>
 8000c98:	68fb      	ldr	r3, [r7, #12]
 8000c9a:	1e58      	subs	r0, r3, #1
 8000c9c:	687b      	ldr	r3, [r7, #4]
 8000c9e:	6859      	ldr	r1, [r3, #4]
 8000ca0:	460b      	mov	r3, r1
 8000ca2:	009b      	lsls	r3, r3, #2
 8000ca4:	440b      	add	r3, r1
 8000ca6:	0099      	lsls	r1, r3, #2
 8000ca8:	440b      	add	r3, r1
 8000caa:	fbb0 f3f3 	udiv	r3, r0, r3
 8000cae:	3301      	adds	r3, #1
 8000cb0:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8000cb4:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8000cb8:	6879      	ldr	r1, [r7, #4]
 8000cba:	6809      	ldr	r1, [r1, #0]
 8000cbc:	4313      	orrs	r3, r2
 8000cbe:	61cb      	str	r3, [r1, #28]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  MODIFY_REG(hi2c->Instance->CR1, (I2C_CR1_ENGC | I2C_CR1_NOSTRETCH), (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode));
 8000cc0:	687b      	ldr	r3, [r7, #4]
 8000cc2:	681b      	ldr	r3, [r3, #0]
 8000cc4:	681b      	ldr	r3, [r3, #0]
 8000cc6:	f023 01c0 	bic.w	r1, r3, #192	; 0xc0
 8000cca:	687b      	ldr	r3, [r7, #4]
 8000ccc:	69da      	ldr	r2, [r3, #28]
 8000cce:	687b      	ldr	r3, [r7, #4]
 8000cd0:	6a1b      	ldr	r3, [r3, #32]
 8000cd2:	431a      	orrs	r2, r3
 8000cd4:	687b      	ldr	r3, [r7, #4]
 8000cd6:	681b      	ldr	r3, [r3, #0]
 8000cd8:	430a      	orrs	r2, r1
 8000cda:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Configure I2Cx: Own Address1 and addressing mode */
  MODIFY_REG(hi2c->Instance->OAR1, (I2C_OAR1_ADDMODE | I2C_OAR1_ADD8_9 | I2C_OAR1_ADD1_7 | I2C_OAR1_ADD0), (hi2c->Init.AddressingMode | hi2c->Init.OwnAddress1));
 8000cdc:	687b      	ldr	r3, [r7, #4]
 8000cde:	681b      	ldr	r3, [r3, #0]
 8000ce0:	689b      	ldr	r3, [r3, #8]
 8000ce2:	f423 4303 	bic.w	r3, r3, #33536	; 0x8300
 8000ce6:	f023 03ff 	bic.w	r3, r3, #255	; 0xff
 8000cea:	687a      	ldr	r2, [r7, #4]
 8000cec:	6911      	ldr	r1, [r2, #16]
 8000cee:	687a      	ldr	r2, [r7, #4]
 8000cf0:	68d2      	ldr	r2, [r2, #12]
 8000cf2:	4311      	orrs	r1, r2
 8000cf4:	687a      	ldr	r2, [r7, #4]
 8000cf6:	6812      	ldr	r2, [r2, #0]
 8000cf8:	430b      	orrs	r3, r1
 8000cfa:	6093      	str	r3, [r2, #8]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Configure I2Cx: Dual mode and Own Address2 */
  MODIFY_REG(hi2c->Instance->OAR2, (I2C_OAR2_ENDUAL | I2C_OAR2_ADD2), (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2));
 8000cfc:	687b      	ldr	r3, [r7, #4]
 8000cfe:	681b      	ldr	r3, [r3, #0]
 8000d00:	68db      	ldr	r3, [r3, #12]
 8000d02:	f023 01ff 	bic.w	r1, r3, #255	; 0xff
 8000d06:	687b      	ldr	r3, [r7, #4]
 8000d08:	695a      	ldr	r2, [r3, #20]
 8000d0a:	687b      	ldr	r3, [r7, #4]
 8000d0c:	699b      	ldr	r3, [r3, #24]
 8000d0e:	431a      	orrs	r2, r3
 8000d10:	687b      	ldr	r3, [r7, #4]
 8000d12:	681b      	ldr	r3, [r3, #0]
 8000d14:	430a      	orrs	r2, r1
 8000d16:	60da      	str	r2, [r3, #12]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 8000d18:	687b      	ldr	r3, [r7, #4]
 8000d1a:	681b      	ldr	r3, [r3, #0]
 8000d1c:	681a      	ldr	r2, [r3, #0]
 8000d1e:	687b      	ldr	r3, [r7, #4]
 8000d20:	681b      	ldr	r3, [r3, #0]
 8000d22:	f042 0201 	orr.w	r2, r2, #1
 8000d26:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8000d28:	687b      	ldr	r3, [r7, #4]
 8000d2a:	2200      	movs	r2, #0
 8000d2c:	641a      	str	r2, [r3, #64]	; 0x40
  hi2c->State = HAL_I2C_STATE_READY;
 8000d2e:	687b      	ldr	r3, [r7, #4]
 8000d30:	2220      	movs	r2, #32
 8000d32:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
  hi2c->PreviousState = I2C_STATE_NONE;
 8000d36:	687b      	ldr	r3, [r7, #4]
 8000d38:	2200      	movs	r2, #0
 8000d3a:	631a      	str	r2, [r3, #48]	; 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 8000d3c:	687b      	ldr	r3, [r7, #4]
 8000d3e:	2200      	movs	r2, #0
 8000d40:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  return HAL_OK;
 8000d44:	2300      	movs	r3, #0
}
 8000d46:	4618      	mov	r0, r3
 8000d48:	3710      	adds	r7, #16
 8000d4a:	46bd      	mov	sp, r7
 8000d4c:	bd80      	pop	{r7, pc}
 8000d4e:	bf00      	nop
 8000d50:	000186a0 	.word	0x000186a0
 8000d54:	001e847f 	.word	0x001e847f
 8000d58:	003d08ff 	.word	0x003d08ff
 8000d5c:	431bde83 	.word	0x431bde83
 8000d60:	10624dd3 	.word	0x10624dd3

08000d64 <HAL_I2C_Master_Transmit>:
  * @param  Size Amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Master_Transmit(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8000d64:	b580      	push	{r7, lr}
 8000d66:	b088      	sub	sp, #32
 8000d68:	af02      	add	r7, sp, #8
 8000d6a:	60f8      	str	r0, [r7, #12]
 8000d6c:	607a      	str	r2, [r7, #4]
 8000d6e:	461a      	mov	r2, r3
 8000d70:	460b      	mov	r3, r1
 8000d72:	817b      	strh	r3, [r7, #10]
 8000d74:	4613      	mov	r3, r2
 8000d76:	813b      	strh	r3, [r7, #8]
  /* Init tickstart for timeout management*/
  uint32_t tickstart = HAL_GetTick();
 8000d78:	f7ff fc0c 	bl	8000594 <HAL_GetTick>
 8000d7c:	6178      	str	r0, [r7, #20]

  if (hi2c->State == HAL_I2C_STATE_READY)
 8000d7e:	68fb      	ldr	r3, [r7, #12]
 8000d80:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8000d84:	b2db      	uxtb	r3, r3
 8000d86:	2b20      	cmp	r3, #32
 8000d88:	f040 80e0 	bne.w	8000f4c <HAL_I2C_Master_Transmit+0x1e8>
  {
    /* Wait until BUSY flag is reset */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 8000d8c:	697b      	ldr	r3, [r7, #20]
 8000d8e:	9300      	str	r3, [sp, #0]
 8000d90:	2319      	movs	r3, #25
 8000d92:	2201      	movs	r2, #1
 8000d94:	4970      	ldr	r1, [pc, #448]	; (8000f58 <HAL_I2C_Master_Transmit+0x1f4>)
 8000d96:	68f8      	ldr	r0, [r7, #12]
 8000d98:	f000 fc4e 	bl	8001638 <I2C_WaitOnFlagUntilTimeout>
 8000d9c:	4603      	mov	r3, r0
 8000d9e:	2b00      	cmp	r3, #0
 8000da0:	d001      	beq.n	8000da6 <HAL_I2C_Master_Transmit+0x42>
    {
      return HAL_BUSY;
 8000da2:	2302      	movs	r3, #2
 8000da4:	e0d3      	b.n	8000f4e <HAL_I2C_Master_Transmit+0x1ea>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 8000da6:	68fb      	ldr	r3, [r7, #12]
 8000da8:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8000dac:	2b01      	cmp	r3, #1
 8000dae:	d101      	bne.n	8000db4 <HAL_I2C_Master_Transmit+0x50>
 8000db0:	2302      	movs	r3, #2
 8000db2:	e0cc      	b.n	8000f4e <HAL_I2C_Master_Transmit+0x1ea>
 8000db4:	68fb      	ldr	r3, [r7, #12]
 8000db6:	2201      	movs	r2, #1
 8000db8:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Check if the I2C is already enabled */
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 8000dbc:	68fb      	ldr	r3, [r7, #12]
 8000dbe:	681b      	ldr	r3, [r3, #0]
 8000dc0:	681b      	ldr	r3, [r3, #0]
 8000dc2:	f003 0301 	and.w	r3, r3, #1
 8000dc6:	2b01      	cmp	r3, #1
 8000dc8:	d007      	beq.n	8000dda <HAL_I2C_Master_Transmit+0x76>
    {
      /* Enable I2C peripheral */
      __HAL_I2C_ENABLE(hi2c);
 8000dca:	68fb      	ldr	r3, [r7, #12]
 8000dcc:	681b      	ldr	r3, [r3, #0]
 8000dce:	681a      	ldr	r2, [r3, #0]
 8000dd0:	68fb      	ldr	r3, [r7, #12]
 8000dd2:	681b      	ldr	r3, [r3, #0]
 8000dd4:	f042 0201 	orr.w	r2, r2, #1
 8000dd8:	601a      	str	r2, [r3, #0]
    }

    /* Disable Pos */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 8000dda:	68fb      	ldr	r3, [r7, #12]
 8000ddc:	681b      	ldr	r3, [r3, #0]
 8000dde:	681a      	ldr	r2, [r3, #0]
 8000de0:	68fb      	ldr	r3, [r7, #12]
 8000de2:	681b      	ldr	r3, [r3, #0]
 8000de4:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8000de8:	601a      	str	r2, [r3, #0]

    hi2c->State       = HAL_I2C_STATE_BUSY_TX;
 8000dea:	68fb      	ldr	r3, [r7, #12]
 8000dec:	2221      	movs	r2, #33	; 0x21
 8000dee:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode        = HAL_I2C_MODE_MASTER;
 8000df2:	68fb      	ldr	r3, [r7, #12]
 8000df4:	2210      	movs	r2, #16
 8000df6:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    hi2c->ErrorCode   = HAL_I2C_ERROR_NONE;
 8000dfa:	68fb      	ldr	r3, [r7, #12]
 8000dfc:	2200      	movs	r2, #0
 8000dfe:	641a      	str	r2, [r3, #64]	; 0x40

    /* Prepare transfer parameters */
    hi2c->pBuffPtr    = pData;
 8000e00:	68fb      	ldr	r3, [r7, #12]
 8000e02:	687a      	ldr	r2, [r7, #4]
 8000e04:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount   = Size;
 8000e06:	68fb      	ldr	r3, [r7, #12]
 8000e08:	893a      	ldrh	r2, [r7, #8]
 8000e0a:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferSize    = hi2c->XferCount;
 8000e0c:	68fb      	ldr	r3, [r7, #12]
 8000e0e:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8000e10:	b29a      	uxth	r2, r3
 8000e12:	68fb      	ldr	r3, [r7, #12]
 8000e14:	851a      	strh	r2, [r3, #40]	; 0x28
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 8000e16:	68fb      	ldr	r3, [r7, #12]
 8000e18:	4a50      	ldr	r2, [pc, #320]	; (8000f5c <HAL_I2C_Master_Transmit+0x1f8>)
 8000e1a:	62da      	str	r2, [r3, #44]	; 0x2c

    /* Send Slave Address */
    if (I2C_MasterRequestWrite(hi2c, DevAddress, Timeout, tickstart) != HAL_OK)
 8000e1c:	8979      	ldrh	r1, [r7, #10]
 8000e1e:	697b      	ldr	r3, [r7, #20]
 8000e20:	6a3a      	ldr	r2, [r7, #32]
 8000e22:	68f8      	ldr	r0, [r7, #12]
 8000e24:	f000 fac2 	bl	80013ac <I2C_MasterRequestWrite>
 8000e28:	4603      	mov	r3, r0
 8000e2a:	2b00      	cmp	r3, #0
 8000e2c:	d001      	beq.n	8000e32 <HAL_I2C_Master_Transmit+0xce>
    {
      return HAL_ERROR;
 8000e2e:	2301      	movs	r3, #1
 8000e30:	e08d      	b.n	8000f4e <HAL_I2C_Master_Transmit+0x1ea>
    }

    /* Clear ADDR flag */
    __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8000e32:	2300      	movs	r3, #0
 8000e34:	613b      	str	r3, [r7, #16]
 8000e36:	68fb      	ldr	r3, [r7, #12]
 8000e38:	681b      	ldr	r3, [r3, #0]
 8000e3a:	695b      	ldr	r3, [r3, #20]
 8000e3c:	613b      	str	r3, [r7, #16]
 8000e3e:	68fb      	ldr	r3, [r7, #12]
 8000e40:	681b      	ldr	r3, [r3, #0]
 8000e42:	699b      	ldr	r3, [r3, #24]
 8000e44:	613b      	str	r3, [r7, #16]
 8000e46:	693b      	ldr	r3, [r7, #16]

    while (hi2c->XferSize > 0U)
 8000e48:	e066      	b.n	8000f18 <HAL_I2C_Master_Transmit+0x1b4>
    {
      /* Wait until TXE flag is set */
      if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8000e4a:	697a      	ldr	r2, [r7, #20]
 8000e4c:	6a39      	ldr	r1, [r7, #32]
 8000e4e:	68f8      	ldr	r0, [r7, #12]
 8000e50:	f000 fcc8 	bl	80017e4 <I2C_WaitOnTXEFlagUntilTimeout>
 8000e54:	4603      	mov	r3, r0
 8000e56:	2b00      	cmp	r3, #0
 8000e58:	d00d      	beq.n	8000e76 <HAL_I2C_Master_Transmit+0x112>
      {
        if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8000e5a:	68fb      	ldr	r3, [r7, #12]
 8000e5c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000e5e:	2b04      	cmp	r3, #4
 8000e60:	d107      	bne.n	8000e72 <HAL_I2C_Master_Transmit+0x10e>
        {
          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8000e62:	68fb      	ldr	r3, [r7, #12]
 8000e64:	681b      	ldr	r3, [r3, #0]
 8000e66:	681a      	ldr	r2, [r3, #0]
 8000e68:	68fb      	ldr	r3, [r7, #12]
 8000e6a:	681b      	ldr	r3, [r3, #0]
 8000e6c:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8000e70:	601a      	str	r2, [r3, #0]
        }
        return HAL_ERROR;
 8000e72:	2301      	movs	r3, #1
 8000e74:	e06b      	b.n	8000f4e <HAL_I2C_Master_Transmit+0x1ea>
      }

      /* Write data to DR */
      hi2c->Instance->DR = *hi2c->pBuffPtr;
 8000e76:	68fb      	ldr	r3, [r7, #12]
 8000e78:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8000e7a:	781a      	ldrb	r2, [r3, #0]
 8000e7c:	68fb      	ldr	r3, [r7, #12]
 8000e7e:	681b      	ldr	r3, [r3, #0]
 8000e80:	611a      	str	r2, [r3, #16]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8000e82:	68fb      	ldr	r3, [r7, #12]
 8000e84:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8000e86:	1c5a      	adds	r2, r3, #1
 8000e88:	68fb      	ldr	r3, [r7, #12]
 8000e8a:	625a      	str	r2, [r3, #36]	; 0x24

      /* Update counter */
      hi2c->XferCount--;
 8000e8c:	68fb      	ldr	r3, [r7, #12]
 8000e8e:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8000e90:	b29b      	uxth	r3, r3
 8000e92:	3b01      	subs	r3, #1
 8000e94:	b29a      	uxth	r2, r3
 8000e96:	68fb      	ldr	r3, [r7, #12]
 8000e98:	855a      	strh	r2, [r3, #42]	; 0x2a
      hi2c->XferSize--;
 8000e9a:	68fb      	ldr	r3, [r7, #12]
 8000e9c:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8000e9e:	3b01      	subs	r3, #1
 8000ea0:	b29a      	uxth	r2, r3
 8000ea2:	68fb      	ldr	r3, [r7, #12]
 8000ea4:	851a      	strh	r2, [r3, #40]	; 0x28

      if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET) && (hi2c->XferSize != 0U))
 8000ea6:	68fb      	ldr	r3, [r7, #12]
 8000ea8:	681b      	ldr	r3, [r3, #0]
 8000eaa:	695b      	ldr	r3, [r3, #20]
 8000eac:	f003 0304 	and.w	r3, r3, #4
 8000eb0:	2b04      	cmp	r3, #4
 8000eb2:	d11b      	bne.n	8000eec <HAL_I2C_Master_Transmit+0x188>
 8000eb4:	68fb      	ldr	r3, [r7, #12]
 8000eb6:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8000eb8:	2b00      	cmp	r3, #0
 8000eba:	d017      	beq.n	8000eec <HAL_I2C_Master_Transmit+0x188>
      {
        /* Write data to DR */
        hi2c->Instance->DR = *hi2c->pBuffPtr;
 8000ebc:	68fb      	ldr	r3, [r7, #12]
 8000ebe:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8000ec0:	781a      	ldrb	r2, [r3, #0]
 8000ec2:	68fb      	ldr	r3, [r7, #12]
 8000ec4:	681b      	ldr	r3, [r3, #0]
 8000ec6:	611a      	str	r2, [r3, #16]

        /* Increment Buffer pointer */
        hi2c->pBuffPtr++;
 8000ec8:	68fb      	ldr	r3, [r7, #12]
 8000eca:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8000ecc:	1c5a      	adds	r2, r3, #1
 8000ece:	68fb      	ldr	r3, [r7, #12]
 8000ed0:	625a      	str	r2, [r3, #36]	; 0x24

        /* Update counter */
        hi2c->XferCount--;
 8000ed2:	68fb      	ldr	r3, [r7, #12]
 8000ed4:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8000ed6:	b29b      	uxth	r3, r3
 8000ed8:	3b01      	subs	r3, #1
 8000eda:	b29a      	uxth	r2, r3
 8000edc:	68fb      	ldr	r3, [r7, #12]
 8000ede:	855a      	strh	r2, [r3, #42]	; 0x2a
        hi2c->XferSize--;
 8000ee0:	68fb      	ldr	r3, [r7, #12]
 8000ee2:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8000ee4:	3b01      	subs	r3, #1
 8000ee6:	b29a      	uxth	r2, r3
 8000ee8:	68fb      	ldr	r3, [r7, #12]
 8000eea:	851a      	strh	r2, [r3, #40]	; 0x28
      }

      /* Wait until BTF flag is set */
      if (I2C_WaitOnBTFFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8000eec:	697a      	ldr	r2, [r7, #20]
 8000eee:	6a39      	ldr	r1, [r7, #32]
 8000ef0:	68f8      	ldr	r0, [r7, #12]
 8000ef2:	f000 fcb8 	bl	8001866 <I2C_WaitOnBTFFlagUntilTimeout>
 8000ef6:	4603      	mov	r3, r0
 8000ef8:	2b00      	cmp	r3, #0
 8000efa:	d00d      	beq.n	8000f18 <HAL_I2C_Master_Transmit+0x1b4>
      {
        if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8000efc:	68fb      	ldr	r3, [r7, #12]
 8000efe:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000f00:	2b04      	cmp	r3, #4
 8000f02:	d107      	bne.n	8000f14 <HAL_I2C_Master_Transmit+0x1b0>
        {
          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8000f04:	68fb      	ldr	r3, [r7, #12]
 8000f06:	681b      	ldr	r3, [r3, #0]
 8000f08:	681a      	ldr	r2, [r3, #0]
 8000f0a:	68fb      	ldr	r3, [r7, #12]
 8000f0c:	681b      	ldr	r3, [r3, #0]
 8000f0e:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8000f12:	601a      	str	r2, [r3, #0]
        }
        return HAL_ERROR;
 8000f14:	2301      	movs	r3, #1
 8000f16:	e01a      	b.n	8000f4e <HAL_I2C_Master_Transmit+0x1ea>
    while (hi2c->XferSize > 0U)
 8000f18:	68fb      	ldr	r3, [r7, #12]
 8000f1a:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8000f1c:	2b00      	cmp	r3, #0
 8000f1e:	d194      	bne.n	8000e4a <HAL_I2C_Master_Transmit+0xe6>
      }
    }

    /* Generate Stop */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8000f20:	68fb      	ldr	r3, [r7, #12]
 8000f22:	681b      	ldr	r3, [r3, #0]
 8000f24:	681a      	ldr	r2, [r3, #0]
 8000f26:	68fb      	ldr	r3, [r7, #12]
 8000f28:	681b      	ldr	r3, [r3, #0]
 8000f2a:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8000f2e:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 8000f30:	68fb      	ldr	r3, [r7, #12]
 8000f32:	2220      	movs	r2, #32
 8000f34:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode = HAL_I2C_MODE_NONE;
 8000f38:	68fb      	ldr	r3, [r7, #12]
 8000f3a:	2200      	movs	r2, #0
 8000f3c:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8000f40:	68fb      	ldr	r3, [r7, #12]
 8000f42:	2200      	movs	r2, #0
 8000f44:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    return HAL_OK;
 8000f48:	2300      	movs	r3, #0
 8000f4a:	e000      	b.n	8000f4e <HAL_I2C_Master_Transmit+0x1ea>
  }
  else
  {
    return HAL_BUSY;
 8000f4c:	2302      	movs	r3, #2
  }
}
 8000f4e:	4618      	mov	r0, r3
 8000f50:	3718      	adds	r7, #24
 8000f52:	46bd      	mov	sp, r7
 8000f54:	bd80      	pop	{r7, pc}
 8000f56:	bf00      	nop
 8000f58:	00100002 	.word	0x00100002
 8000f5c:	ffff0000 	.word	0xffff0000

08000f60 <HAL_I2C_Mem_Read>:
  * @param  Size Amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Mem_Read(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress, uint16_t MemAddSize, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8000f60:	b580      	push	{r7, lr}
 8000f62:	b08c      	sub	sp, #48	; 0x30
 8000f64:	af02      	add	r7, sp, #8
 8000f66:	60f8      	str	r0, [r7, #12]
 8000f68:	4608      	mov	r0, r1
 8000f6a:	4611      	mov	r1, r2
 8000f6c:	461a      	mov	r2, r3
 8000f6e:	4603      	mov	r3, r0
 8000f70:	817b      	strh	r3, [r7, #10]
 8000f72:	460b      	mov	r3, r1
 8000f74:	813b      	strh	r3, [r7, #8]
 8000f76:	4613      	mov	r3, r2
 8000f78:	80fb      	strh	r3, [r7, #6]
  /* Init tickstart for timeout management*/
  uint32_t tickstart = HAL_GetTick();
 8000f7a:	f7ff fb0b 	bl	8000594 <HAL_GetTick>
 8000f7e:	6278      	str	r0, [r7, #36]	; 0x24

  /* Check the parameters */
  assert_param(IS_I2C_MEMADD_SIZE(MemAddSize));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8000f80:	68fb      	ldr	r3, [r7, #12]
 8000f82:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8000f86:	b2db      	uxtb	r3, r3
 8000f88:	2b20      	cmp	r3, #32
 8000f8a:	f040 8208 	bne.w	800139e <HAL_I2C_Mem_Read+0x43e>
  {
    /* Wait until BUSY flag is reset */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 8000f8e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000f90:	9300      	str	r3, [sp, #0]
 8000f92:	2319      	movs	r3, #25
 8000f94:	2201      	movs	r2, #1
 8000f96:	497b      	ldr	r1, [pc, #492]	; (8001184 <HAL_I2C_Mem_Read+0x224>)
 8000f98:	68f8      	ldr	r0, [r7, #12]
 8000f9a:	f000 fb4d 	bl	8001638 <I2C_WaitOnFlagUntilTimeout>
 8000f9e:	4603      	mov	r3, r0
 8000fa0:	2b00      	cmp	r3, #0
 8000fa2:	d001      	beq.n	8000fa8 <HAL_I2C_Mem_Read+0x48>
    {
      return HAL_BUSY;
 8000fa4:	2302      	movs	r3, #2
 8000fa6:	e1fb      	b.n	80013a0 <HAL_I2C_Mem_Read+0x440>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 8000fa8:	68fb      	ldr	r3, [r7, #12]
 8000faa:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8000fae:	2b01      	cmp	r3, #1
 8000fb0:	d101      	bne.n	8000fb6 <HAL_I2C_Mem_Read+0x56>
 8000fb2:	2302      	movs	r3, #2
 8000fb4:	e1f4      	b.n	80013a0 <HAL_I2C_Mem_Read+0x440>
 8000fb6:	68fb      	ldr	r3, [r7, #12]
 8000fb8:	2201      	movs	r2, #1
 8000fba:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Check if the I2C is already enabled */
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 8000fbe:	68fb      	ldr	r3, [r7, #12]
 8000fc0:	681b      	ldr	r3, [r3, #0]
 8000fc2:	681b      	ldr	r3, [r3, #0]
 8000fc4:	f003 0301 	and.w	r3, r3, #1
 8000fc8:	2b01      	cmp	r3, #1
 8000fca:	d007      	beq.n	8000fdc <HAL_I2C_Mem_Read+0x7c>
    {
      /* Enable I2C peripheral */
      __HAL_I2C_ENABLE(hi2c);
 8000fcc:	68fb      	ldr	r3, [r7, #12]
 8000fce:	681b      	ldr	r3, [r3, #0]
 8000fd0:	681a      	ldr	r2, [r3, #0]
 8000fd2:	68fb      	ldr	r3, [r7, #12]
 8000fd4:	681b      	ldr	r3, [r3, #0]
 8000fd6:	f042 0201 	orr.w	r2, r2, #1
 8000fda:	601a      	str	r2, [r3, #0]
    }

    /* Disable Pos */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 8000fdc:	68fb      	ldr	r3, [r7, #12]
 8000fde:	681b      	ldr	r3, [r3, #0]
 8000fe0:	681a      	ldr	r2, [r3, #0]
 8000fe2:	68fb      	ldr	r3, [r7, #12]
 8000fe4:	681b      	ldr	r3, [r3, #0]
 8000fe6:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8000fea:	601a      	str	r2, [r3, #0]

    hi2c->State     = HAL_I2C_STATE_BUSY_RX;
 8000fec:	68fb      	ldr	r3, [r7, #12]
 8000fee:	2222      	movs	r2, #34	; 0x22
 8000ff0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode      = HAL_I2C_MODE_MEM;
 8000ff4:	68fb      	ldr	r3, [r7, #12]
 8000ff6:	2240      	movs	r2, #64	; 0x40
 8000ff8:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8000ffc:	68fb      	ldr	r3, [r7, #12]
 8000ffe:	2200      	movs	r2, #0
 8001000:	641a      	str	r2, [r3, #64]	; 0x40

    /* Prepare transfer parameters */
    hi2c->pBuffPtr    = pData;
 8001002:	68fb      	ldr	r3, [r7, #12]
 8001004:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8001006:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount   = Size;
 8001008:	68fb      	ldr	r3, [r7, #12]
 800100a:	8eba      	ldrh	r2, [r7, #52]	; 0x34
 800100c:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferSize    = hi2c->XferCount;
 800100e:	68fb      	ldr	r3, [r7, #12]
 8001010:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8001012:	b29a      	uxth	r2, r3
 8001014:	68fb      	ldr	r3, [r7, #12]
 8001016:	851a      	strh	r2, [r3, #40]	; 0x28
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 8001018:	68fb      	ldr	r3, [r7, #12]
 800101a:	4a5b      	ldr	r2, [pc, #364]	; (8001188 <HAL_I2C_Mem_Read+0x228>)
 800101c:	62da      	str	r2, [r3, #44]	; 0x2c

    /* Send Slave Address and Memory Address */
    if (I2C_RequestMemoryRead(hi2c, DevAddress, MemAddress, MemAddSize, Timeout, tickstart) != HAL_OK)
 800101e:	88f8      	ldrh	r0, [r7, #6]
 8001020:	893a      	ldrh	r2, [r7, #8]
 8001022:	8979      	ldrh	r1, [r7, #10]
 8001024:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001026:	9301      	str	r3, [sp, #4]
 8001028:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800102a:	9300      	str	r3, [sp, #0]
 800102c:	4603      	mov	r3, r0
 800102e:	68f8      	ldr	r0, [r7, #12]
 8001030:	f000 fa32 	bl	8001498 <I2C_RequestMemoryRead>
 8001034:	4603      	mov	r3, r0
 8001036:	2b00      	cmp	r3, #0
 8001038:	d001      	beq.n	800103e <HAL_I2C_Mem_Read+0xde>
    {
      return HAL_ERROR;
 800103a:	2301      	movs	r3, #1
 800103c:	e1b0      	b.n	80013a0 <HAL_I2C_Mem_Read+0x440>
    }

    if (hi2c->XferSize == 0U)
 800103e:	68fb      	ldr	r3, [r7, #12]
 8001040:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8001042:	2b00      	cmp	r3, #0
 8001044:	d113      	bne.n	800106e <HAL_I2C_Mem_Read+0x10e>
    {
      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8001046:	2300      	movs	r3, #0
 8001048:	623b      	str	r3, [r7, #32]
 800104a:	68fb      	ldr	r3, [r7, #12]
 800104c:	681b      	ldr	r3, [r3, #0]
 800104e:	695b      	ldr	r3, [r3, #20]
 8001050:	623b      	str	r3, [r7, #32]
 8001052:	68fb      	ldr	r3, [r7, #12]
 8001054:	681b      	ldr	r3, [r3, #0]
 8001056:	699b      	ldr	r3, [r3, #24]
 8001058:	623b      	str	r3, [r7, #32]
 800105a:	6a3b      	ldr	r3, [r7, #32]

      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 800105c:	68fb      	ldr	r3, [r7, #12]
 800105e:	681b      	ldr	r3, [r3, #0]
 8001060:	681a      	ldr	r2, [r3, #0]
 8001062:	68fb      	ldr	r3, [r7, #12]
 8001064:	681b      	ldr	r3, [r3, #0]
 8001066:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 800106a:	601a      	str	r2, [r3, #0]
 800106c:	e184      	b.n	8001378 <HAL_I2C_Mem_Read+0x418>
    }
    else if (hi2c->XferSize == 1U)
 800106e:	68fb      	ldr	r3, [r7, #12]
 8001070:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8001072:	2b01      	cmp	r3, #1
 8001074:	d11b      	bne.n	80010ae <HAL_I2C_Mem_Read+0x14e>
    {
      /* Disable Acknowledge */
      CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8001076:	68fb      	ldr	r3, [r7, #12]
 8001078:	681b      	ldr	r3, [r3, #0]
 800107a:	681a      	ldr	r2, [r3, #0]
 800107c:	68fb      	ldr	r3, [r7, #12]
 800107e:	681b      	ldr	r3, [r3, #0]
 8001080:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8001084:	601a      	str	r2, [r3, #0]

      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8001086:	2300      	movs	r3, #0
 8001088:	61fb      	str	r3, [r7, #28]
 800108a:	68fb      	ldr	r3, [r7, #12]
 800108c:	681b      	ldr	r3, [r3, #0]
 800108e:	695b      	ldr	r3, [r3, #20]
 8001090:	61fb      	str	r3, [r7, #28]
 8001092:	68fb      	ldr	r3, [r7, #12]
 8001094:	681b      	ldr	r3, [r3, #0]
 8001096:	699b      	ldr	r3, [r3, #24]
 8001098:	61fb      	str	r3, [r7, #28]
 800109a:	69fb      	ldr	r3, [r7, #28]

      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 800109c:	68fb      	ldr	r3, [r7, #12]
 800109e:	681b      	ldr	r3, [r3, #0]
 80010a0:	681a      	ldr	r2, [r3, #0]
 80010a2:	68fb      	ldr	r3, [r7, #12]
 80010a4:	681b      	ldr	r3, [r3, #0]
 80010a6:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 80010aa:	601a      	str	r2, [r3, #0]
 80010ac:	e164      	b.n	8001378 <HAL_I2C_Mem_Read+0x418>
    }
    else if (hi2c->XferSize == 2U)
 80010ae:	68fb      	ldr	r3, [r7, #12]
 80010b0:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80010b2:	2b02      	cmp	r3, #2
 80010b4:	d11b      	bne.n	80010ee <HAL_I2C_Mem_Read+0x18e>
    {
      /* Disable Acknowledge */
      CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 80010b6:	68fb      	ldr	r3, [r7, #12]
 80010b8:	681b      	ldr	r3, [r3, #0]
 80010ba:	681a      	ldr	r2, [r3, #0]
 80010bc:	68fb      	ldr	r3, [r7, #12]
 80010be:	681b      	ldr	r3, [r3, #0]
 80010c0:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 80010c4:	601a      	str	r2, [r3, #0]

      /* Enable Pos */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 80010c6:	68fb      	ldr	r3, [r7, #12]
 80010c8:	681b      	ldr	r3, [r3, #0]
 80010ca:	681a      	ldr	r2, [r3, #0]
 80010cc:	68fb      	ldr	r3, [r7, #12]
 80010ce:	681b      	ldr	r3, [r3, #0]
 80010d0:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 80010d4:	601a      	str	r2, [r3, #0]

      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 80010d6:	2300      	movs	r3, #0
 80010d8:	61bb      	str	r3, [r7, #24]
 80010da:	68fb      	ldr	r3, [r7, #12]
 80010dc:	681b      	ldr	r3, [r3, #0]
 80010de:	695b      	ldr	r3, [r3, #20]
 80010e0:	61bb      	str	r3, [r7, #24]
 80010e2:	68fb      	ldr	r3, [r7, #12]
 80010e4:	681b      	ldr	r3, [r3, #0]
 80010e6:	699b      	ldr	r3, [r3, #24]
 80010e8:	61bb      	str	r3, [r7, #24]
 80010ea:	69bb      	ldr	r3, [r7, #24]
 80010ec:	e144      	b.n	8001378 <HAL_I2C_Mem_Read+0x418>
    }
    else
    {
      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 80010ee:	2300      	movs	r3, #0
 80010f0:	617b      	str	r3, [r7, #20]
 80010f2:	68fb      	ldr	r3, [r7, #12]
 80010f4:	681b      	ldr	r3, [r3, #0]
 80010f6:	695b      	ldr	r3, [r3, #20]
 80010f8:	617b      	str	r3, [r7, #20]
 80010fa:	68fb      	ldr	r3, [r7, #12]
 80010fc:	681b      	ldr	r3, [r3, #0]
 80010fe:	699b      	ldr	r3, [r3, #24]
 8001100:	617b      	str	r3, [r7, #20]
 8001102:	697b      	ldr	r3, [r7, #20]
    }

    while (hi2c->XferSize > 0U)
 8001104:	e138      	b.n	8001378 <HAL_I2C_Mem_Read+0x418>
    {
      if (hi2c->XferSize <= 3U)
 8001106:	68fb      	ldr	r3, [r7, #12]
 8001108:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800110a:	2b03      	cmp	r3, #3
 800110c:	f200 80f1 	bhi.w	80012f2 <HAL_I2C_Mem_Read+0x392>
      {
        /* One byte */
        if (hi2c->XferSize == 1U)
 8001110:	68fb      	ldr	r3, [r7, #12]
 8001112:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8001114:	2b01      	cmp	r3, #1
 8001116:	d123      	bne.n	8001160 <HAL_I2C_Mem_Read+0x200>
        {
          /* Wait until RXNE flag is set */
          if (I2C_WaitOnRXNEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8001118:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800111a:	6bb9      	ldr	r1, [r7, #56]	; 0x38
 800111c:	68f8      	ldr	r0, [r7, #12]
 800111e:	f000 fbe3 	bl	80018e8 <I2C_WaitOnRXNEFlagUntilTimeout>
 8001122:	4603      	mov	r3, r0
 8001124:	2b00      	cmp	r3, #0
 8001126:	d001      	beq.n	800112c <HAL_I2C_Mem_Read+0x1cc>
          {
            return HAL_ERROR;
 8001128:	2301      	movs	r3, #1
 800112a:	e139      	b.n	80013a0 <HAL_I2C_Mem_Read+0x440>
          }

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 800112c:	68fb      	ldr	r3, [r7, #12]
 800112e:	681b      	ldr	r3, [r3, #0]
 8001130:	691a      	ldr	r2, [r3, #16]
 8001132:	68fb      	ldr	r3, [r7, #12]
 8001134:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001136:	b2d2      	uxtb	r2, r2
 8001138:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 800113a:	68fb      	ldr	r3, [r7, #12]
 800113c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800113e:	1c5a      	adds	r2, r3, #1
 8001140:	68fb      	ldr	r3, [r7, #12]
 8001142:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 8001144:	68fb      	ldr	r3, [r7, #12]
 8001146:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8001148:	3b01      	subs	r3, #1
 800114a:	b29a      	uxth	r2, r3
 800114c:	68fb      	ldr	r3, [r7, #12]
 800114e:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 8001150:	68fb      	ldr	r3, [r7, #12]
 8001152:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8001154:	b29b      	uxth	r3, r3
 8001156:	3b01      	subs	r3, #1
 8001158:	b29a      	uxth	r2, r3
 800115a:	68fb      	ldr	r3, [r7, #12]
 800115c:	855a      	strh	r2, [r3, #42]	; 0x2a
 800115e:	e10b      	b.n	8001378 <HAL_I2C_Mem_Read+0x418>
        }
        /* Two bytes */
        else if (hi2c->XferSize == 2U)
 8001160:	68fb      	ldr	r3, [r7, #12]
 8001162:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8001164:	2b02      	cmp	r3, #2
 8001166:	d14e      	bne.n	8001206 <HAL_I2C_Mem_Read+0x2a6>
        {
          /* Wait until BTF flag is set */
          if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BTF, RESET, Timeout, tickstart) != HAL_OK)
 8001168:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800116a:	9300      	str	r3, [sp, #0]
 800116c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800116e:	2200      	movs	r2, #0
 8001170:	4906      	ldr	r1, [pc, #24]	; (800118c <HAL_I2C_Mem_Read+0x22c>)
 8001172:	68f8      	ldr	r0, [r7, #12]
 8001174:	f000 fa60 	bl	8001638 <I2C_WaitOnFlagUntilTimeout>
 8001178:	4603      	mov	r3, r0
 800117a:	2b00      	cmp	r3, #0
 800117c:	d008      	beq.n	8001190 <HAL_I2C_Mem_Read+0x230>
          {
            return HAL_ERROR;
 800117e:	2301      	movs	r3, #1
 8001180:	e10e      	b.n	80013a0 <HAL_I2C_Mem_Read+0x440>
 8001182:	bf00      	nop
 8001184:	00100002 	.word	0x00100002
 8001188:	ffff0000 	.word	0xffff0000
 800118c:	00010004 	.word	0x00010004
          }

          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8001190:	68fb      	ldr	r3, [r7, #12]
 8001192:	681b      	ldr	r3, [r3, #0]
 8001194:	681a      	ldr	r2, [r3, #0]
 8001196:	68fb      	ldr	r3, [r7, #12]
 8001198:	681b      	ldr	r3, [r3, #0]
 800119a:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 800119e:	601a      	str	r2, [r3, #0]

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 80011a0:	68fb      	ldr	r3, [r7, #12]
 80011a2:	681b      	ldr	r3, [r3, #0]
 80011a4:	691a      	ldr	r2, [r3, #16]
 80011a6:	68fb      	ldr	r3, [r7, #12]
 80011a8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80011aa:	b2d2      	uxtb	r2, r2
 80011ac:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 80011ae:	68fb      	ldr	r3, [r7, #12]
 80011b0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80011b2:	1c5a      	adds	r2, r3, #1
 80011b4:	68fb      	ldr	r3, [r7, #12]
 80011b6:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 80011b8:	68fb      	ldr	r3, [r7, #12]
 80011ba:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80011bc:	3b01      	subs	r3, #1
 80011be:	b29a      	uxth	r2, r3
 80011c0:	68fb      	ldr	r3, [r7, #12]
 80011c2:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 80011c4:	68fb      	ldr	r3, [r7, #12]
 80011c6:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80011c8:	b29b      	uxth	r3, r3
 80011ca:	3b01      	subs	r3, #1
 80011cc:	b29a      	uxth	r2, r3
 80011ce:	68fb      	ldr	r3, [r7, #12]
 80011d0:	855a      	strh	r2, [r3, #42]	; 0x2a

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 80011d2:	68fb      	ldr	r3, [r7, #12]
 80011d4:	681b      	ldr	r3, [r3, #0]
 80011d6:	691a      	ldr	r2, [r3, #16]
 80011d8:	68fb      	ldr	r3, [r7, #12]
 80011da:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80011dc:	b2d2      	uxtb	r2, r2
 80011de:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 80011e0:	68fb      	ldr	r3, [r7, #12]
 80011e2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80011e4:	1c5a      	adds	r2, r3, #1
 80011e6:	68fb      	ldr	r3, [r7, #12]
 80011e8:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 80011ea:	68fb      	ldr	r3, [r7, #12]
 80011ec:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80011ee:	3b01      	subs	r3, #1
 80011f0:	b29a      	uxth	r2, r3
 80011f2:	68fb      	ldr	r3, [r7, #12]
 80011f4:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 80011f6:	68fb      	ldr	r3, [r7, #12]
 80011f8:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80011fa:	b29b      	uxth	r3, r3
 80011fc:	3b01      	subs	r3, #1
 80011fe:	b29a      	uxth	r2, r3
 8001200:	68fb      	ldr	r3, [r7, #12]
 8001202:	855a      	strh	r2, [r3, #42]	; 0x2a
 8001204:	e0b8      	b.n	8001378 <HAL_I2C_Mem_Read+0x418>
        }
        /* 3 Last bytes */
        else
        {
          /* Wait until BTF flag is set */
          if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BTF, RESET, Timeout, tickstart) != HAL_OK)
 8001206:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001208:	9300      	str	r3, [sp, #0]
 800120a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800120c:	2200      	movs	r2, #0
 800120e:	4966      	ldr	r1, [pc, #408]	; (80013a8 <HAL_I2C_Mem_Read+0x448>)
 8001210:	68f8      	ldr	r0, [r7, #12]
 8001212:	f000 fa11 	bl	8001638 <I2C_WaitOnFlagUntilTimeout>
 8001216:	4603      	mov	r3, r0
 8001218:	2b00      	cmp	r3, #0
 800121a:	d001      	beq.n	8001220 <HAL_I2C_Mem_Read+0x2c0>
          {
            return HAL_ERROR;
 800121c:	2301      	movs	r3, #1
 800121e:	e0bf      	b.n	80013a0 <HAL_I2C_Mem_Read+0x440>
          }

          /* Disable Acknowledge */
          CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8001220:	68fb      	ldr	r3, [r7, #12]
 8001222:	681b      	ldr	r3, [r3, #0]
 8001224:	681a      	ldr	r2, [r3, #0]
 8001226:	68fb      	ldr	r3, [r7, #12]
 8001228:	681b      	ldr	r3, [r3, #0]
 800122a:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 800122e:	601a      	str	r2, [r3, #0]

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8001230:	68fb      	ldr	r3, [r7, #12]
 8001232:	681b      	ldr	r3, [r3, #0]
 8001234:	691a      	ldr	r2, [r3, #16]
 8001236:	68fb      	ldr	r3, [r7, #12]
 8001238:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800123a:	b2d2      	uxtb	r2, r2
 800123c:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 800123e:	68fb      	ldr	r3, [r7, #12]
 8001240:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001242:	1c5a      	adds	r2, r3, #1
 8001244:	68fb      	ldr	r3, [r7, #12]
 8001246:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 8001248:	68fb      	ldr	r3, [r7, #12]
 800124a:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800124c:	3b01      	subs	r3, #1
 800124e:	b29a      	uxth	r2, r3
 8001250:	68fb      	ldr	r3, [r7, #12]
 8001252:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 8001254:	68fb      	ldr	r3, [r7, #12]
 8001256:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8001258:	b29b      	uxth	r3, r3
 800125a:	3b01      	subs	r3, #1
 800125c:	b29a      	uxth	r2, r3
 800125e:	68fb      	ldr	r3, [r7, #12]
 8001260:	855a      	strh	r2, [r3, #42]	; 0x2a

          /* Wait until BTF flag is set */
          if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BTF, RESET, Timeout, tickstart) != HAL_OK)
 8001262:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001264:	9300      	str	r3, [sp, #0]
 8001266:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8001268:	2200      	movs	r2, #0
 800126a:	494f      	ldr	r1, [pc, #316]	; (80013a8 <HAL_I2C_Mem_Read+0x448>)
 800126c:	68f8      	ldr	r0, [r7, #12]
 800126e:	f000 f9e3 	bl	8001638 <I2C_WaitOnFlagUntilTimeout>
 8001272:	4603      	mov	r3, r0
 8001274:	2b00      	cmp	r3, #0
 8001276:	d001      	beq.n	800127c <HAL_I2C_Mem_Read+0x31c>
          {
            return HAL_ERROR;
 8001278:	2301      	movs	r3, #1
 800127a:	e091      	b.n	80013a0 <HAL_I2C_Mem_Read+0x440>
          }

          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 800127c:	68fb      	ldr	r3, [r7, #12]
 800127e:	681b      	ldr	r3, [r3, #0]
 8001280:	681a      	ldr	r2, [r3, #0]
 8001282:	68fb      	ldr	r3, [r7, #12]
 8001284:	681b      	ldr	r3, [r3, #0]
 8001286:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 800128a:	601a      	str	r2, [r3, #0]

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 800128c:	68fb      	ldr	r3, [r7, #12]
 800128e:	681b      	ldr	r3, [r3, #0]
 8001290:	691a      	ldr	r2, [r3, #16]
 8001292:	68fb      	ldr	r3, [r7, #12]
 8001294:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001296:	b2d2      	uxtb	r2, r2
 8001298:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 800129a:	68fb      	ldr	r3, [r7, #12]
 800129c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800129e:	1c5a      	adds	r2, r3, #1
 80012a0:	68fb      	ldr	r3, [r7, #12]
 80012a2:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 80012a4:	68fb      	ldr	r3, [r7, #12]
 80012a6:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80012a8:	3b01      	subs	r3, #1
 80012aa:	b29a      	uxth	r2, r3
 80012ac:	68fb      	ldr	r3, [r7, #12]
 80012ae:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 80012b0:	68fb      	ldr	r3, [r7, #12]
 80012b2:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80012b4:	b29b      	uxth	r3, r3
 80012b6:	3b01      	subs	r3, #1
 80012b8:	b29a      	uxth	r2, r3
 80012ba:	68fb      	ldr	r3, [r7, #12]
 80012bc:	855a      	strh	r2, [r3, #42]	; 0x2a

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 80012be:	68fb      	ldr	r3, [r7, #12]
 80012c0:	681b      	ldr	r3, [r3, #0]
 80012c2:	691a      	ldr	r2, [r3, #16]
 80012c4:	68fb      	ldr	r3, [r7, #12]
 80012c6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80012c8:	b2d2      	uxtb	r2, r2
 80012ca:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 80012cc:	68fb      	ldr	r3, [r7, #12]
 80012ce:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80012d0:	1c5a      	adds	r2, r3, #1
 80012d2:	68fb      	ldr	r3, [r7, #12]
 80012d4:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 80012d6:	68fb      	ldr	r3, [r7, #12]
 80012d8:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80012da:	3b01      	subs	r3, #1
 80012dc:	b29a      	uxth	r2, r3
 80012de:	68fb      	ldr	r3, [r7, #12]
 80012e0:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 80012e2:	68fb      	ldr	r3, [r7, #12]
 80012e4:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80012e6:	b29b      	uxth	r3, r3
 80012e8:	3b01      	subs	r3, #1
 80012ea:	b29a      	uxth	r2, r3
 80012ec:	68fb      	ldr	r3, [r7, #12]
 80012ee:	855a      	strh	r2, [r3, #42]	; 0x2a
 80012f0:	e042      	b.n	8001378 <HAL_I2C_Mem_Read+0x418>
        }
      }
      else
      {
        /* Wait until RXNE flag is set */
        if (I2C_WaitOnRXNEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 80012f2:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80012f4:	6bb9      	ldr	r1, [r7, #56]	; 0x38
 80012f6:	68f8      	ldr	r0, [r7, #12]
 80012f8:	f000 faf6 	bl	80018e8 <I2C_WaitOnRXNEFlagUntilTimeout>
 80012fc:	4603      	mov	r3, r0
 80012fe:	2b00      	cmp	r3, #0
 8001300:	d001      	beq.n	8001306 <HAL_I2C_Mem_Read+0x3a6>
        {
          return HAL_ERROR;
 8001302:	2301      	movs	r3, #1
 8001304:	e04c      	b.n	80013a0 <HAL_I2C_Mem_Read+0x440>
        }

        /* Read data from DR */
        *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8001306:	68fb      	ldr	r3, [r7, #12]
 8001308:	681b      	ldr	r3, [r3, #0]
 800130a:	691a      	ldr	r2, [r3, #16]
 800130c:	68fb      	ldr	r3, [r7, #12]
 800130e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001310:	b2d2      	uxtb	r2, r2
 8001312:	701a      	strb	r2, [r3, #0]

        /* Increment Buffer pointer */
        hi2c->pBuffPtr++;
 8001314:	68fb      	ldr	r3, [r7, #12]
 8001316:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001318:	1c5a      	adds	r2, r3, #1
 800131a:	68fb      	ldr	r3, [r7, #12]
 800131c:	625a      	str	r2, [r3, #36]	; 0x24

        /* Update counter */
        hi2c->XferSize--;
 800131e:	68fb      	ldr	r3, [r7, #12]
 8001320:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8001322:	3b01      	subs	r3, #1
 8001324:	b29a      	uxth	r2, r3
 8001326:	68fb      	ldr	r3, [r7, #12]
 8001328:	851a      	strh	r2, [r3, #40]	; 0x28
        hi2c->XferCount--;
 800132a:	68fb      	ldr	r3, [r7, #12]
 800132c:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800132e:	b29b      	uxth	r3, r3
 8001330:	3b01      	subs	r3, #1
 8001332:	b29a      	uxth	r2, r3
 8001334:	68fb      	ldr	r3, [r7, #12]
 8001336:	855a      	strh	r2, [r3, #42]	; 0x2a

        if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET)
 8001338:	68fb      	ldr	r3, [r7, #12]
 800133a:	681b      	ldr	r3, [r3, #0]
 800133c:	695b      	ldr	r3, [r3, #20]
 800133e:	f003 0304 	and.w	r3, r3, #4
 8001342:	2b04      	cmp	r3, #4
 8001344:	d118      	bne.n	8001378 <HAL_I2C_Mem_Read+0x418>
        {
          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8001346:	68fb      	ldr	r3, [r7, #12]
 8001348:	681b      	ldr	r3, [r3, #0]
 800134a:	691a      	ldr	r2, [r3, #16]
 800134c:	68fb      	ldr	r3, [r7, #12]
 800134e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001350:	b2d2      	uxtb	r2, r2
 8001352:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8001354:	68fb      	ldr	r3, [r7, #12]
 8001356:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001358:	1c5a      	adds	r2, r3, #1
 800135a:	68fb      	ldr	r3, [r7, #12]
 800135c:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 800135e:	68fb      	ldr	r3, [r7, #12]
 8001360:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8001362:	3b01      	subs	r3, #1
 8001364:	b29a      	uxth	r2, r3
 8001366:	68fb      	ldr	r3, [r7, #12]
 8001368:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 800136a:	68fb      	ldr	r3, [r7, #12]
 800136c:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800136e:	b29b      	uxth	r3, r3
 8001370:	3b01      	subs	r3, #1
 8001372:	b29a      	uxth	r2, r3
 8001374:	68fb      	ldr	r3, [r7, #12]
 8001376:	855a      	strh	r2, [r3, #42]	; 0x2a
    while (hi2c->XferSize > 0U)
 8001378:	68fb      	ldr	r3, [r7, #12]
 800137a:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800137c:	2b00      	cmp	r3, #0
 800137e:	f47f aec2 	bne.w	8001106 <HAL_I2C_Mem_Read+0x1a6>
        }
      }
    }

    hi2c->State = HAL_I2C_STATE_READY;
 8001382:	68fb      	ldr	r3, [r7, #12]
 8001384:	2220      	movs	r2, #32
 8001386:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode = HAL_I2C_MODE_NONE;
 800138a:	68fb      	ldr	r3, [r7, #12]
 800138c:	2200      	movs	r2, #0
 800138e:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8001392:	68fb      	ldr	r3, [r7, #12]
 8001394:	2200      	movs	r2, #0
 8001396:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    return HAL_OK;
 800139a:	2300      	movs	r3, #0
 800139c:	e000      	b.n	80013a0 <HAL_I2C_Mem_Read+0x440>
  }
  else
  {
    return HAL_BUSY;
 800139e:	2302      	movs	r3, #2
  }
}
 80013a0:	4618      	mov	r0, r3
 80013a2:	3728      	adds	r7, #40	; 0x28
 80013a4:	46bd      	mov	sp, r7
 80013a6:	bd80      	pop	{r7, pc}
 80013a8:	00010004 	.word	0x00010004

080013ac <I2C_MasterRequestWrite>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_MasterRequestWrite(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint32_t Timeout, uint32_t Tickstart)
{
 80013ac:	b580      	push	{r7, lr}
 80013ae:	b088      	sub	sp, #32
 80013b0:	af02      	add	r7, sp, #8
 80013b2:	60f8      	str	r0, [r7, #12]
 80013b4:	607a      	str	r2, [r7, #4]
 80013b6:	603b      	str	r3, [r7, #0]
 80013b8:	460b      	mov	r3, r1
 80013ba:	817b      	strh	r3, [r7, #10]
  /* Declaration of temporary variable to prevent undefined behavior of volatile usage */
  uint32_t CurrentXferOptions = hi2c->XferOptions;
 80013bc:	68fb      	ldr	r3, [r7, #12]
 80013be:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80013c0:	617b      	str	r3, [r7, #20]

  /* Generate Start condition if first transfer */
  if ((CurrentXferOptions == I2C_FIRST_AND_LAST_FRAME) || (CurrentXferOptions == I2C_FIRST_FRAME) || (CurrentXferOptions == I2C_NO_OPTION_FRAME))
 80013c2:	697b      	ldr	r3, [r7, #20]
 80013c4:	2b08      	cmp	r3, #8
 80013c6:	d006      	beq.n	80013d6 <I2C_MasterRequestWrite+0x2a>
 80013c8:	697b      	ldr	r3, [r7, #20]
 80013ca:	2b01      	cmp	r3, #1
 80013cc:	d003      	beq.n	80013d6 <I2C_MasterRequestWrite+0x2a>
 80013ce:	697b      	ldr	r3, [r7, #20]
 80013d0:	f513 3f80 	cmn.w	r3, #65536	; 0x10000
 80013d4:	d108      	bne.n	80013e8 <I2C_MasterRequestWrite+0x3c>
  {
    /* Generate Start */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 80013d6:	68fb      	ldr	r3, [r7, #12]
 80013d8:	681b      	ldr	r3, [r3, #0]
 80013da:	681a      	ldr	r2, [r3, #0]
 80013dc:	68fb      	ldr	r3, [r7, #12]
 80013de:	681b      	ldr	r3, [r3, #0]
 80013e0:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 80013e4:	601a      	str	r2, [r3, #0]
 80013e6:	e00b      	b.n	8001400 <I2C_MasterRequestWrite+0x54>
  }
  else if (hi2c->PreviousState == I2C_STATE_MASTER_BUSY_RX)
 80013e8:	68fb      	ldr	r3, [r7, #12]
 80013ea:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80013ec:	2b12      	cmp	r3, #18
 80013ee:	d107      	bne.n	8001400 <I2C_MasterRequestWrite+0x54>
  {
    /* Generate ReStart */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 80013f0:	68fb      	ldr	r3, [r7, #12]
 80013f2:	681b      	ldr	r3, [r3, #0]
 80013f4:	681a      	ldr	r2, [r3, #0]
 80013f6:	68fb      	ldr	r3, [r7, #12]
 80013f8:	681b      	ldr	r3, [r3, #0]
 80013fa:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 80013fe:	601a      	str	r2, [r3, #0]
  {
    /* Do nothing */
  }

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 8001400:	683b      	ldr	r3, [r7, #0]
 8001402:	9300      	str	r3, [sp, #0]
 8001404:	687b      	ldr	r3, [r7, #4]
 8001406:	2200      	movs	r2, #0
 8001408:	f04f 1101 	mov.w	r1, #65537	; 0x10001
 800140c:	68f8      	ldr	r0, [r7, #12]
 800140e:	f000 f913 	bl	8001638 <I2C_WaitOnFlagUntilTimeout>
 8001412:	4603      	mov	r3, r0
 8001414:	2b00      	cmp	r3, #0
 8001416:	d001      	beq.n	800141c <I2C_MasterRequestWrite+0x70>
  {
    return HAL_ERROR;
 8001418:	2301      	movs	r3, #1
 800141a:	e035      	b.n	8001488 <I2C_MasterRequestWrite+0xdc>
  }

  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 800141c:	68fb      	ldr	r3, [r7, #12]
 800141e:	691b      	ldr	r3, [r3, #16]
 8001420:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8001424:	d108      	bne.n	8001438 <I2C_MasterRequestWrite+0x8c>
  {
    /* Send slave address */
    hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(DevAddress);
 8001426:	897b      	ldrh	r3, [r7, #10]
 8001428:	b2db      	uxtb	r3, r3
 800142a:	461a      	mov	r2, r3
 800142c:	68fb      	ldr	r3, [r7, #12]
 800142e:	681b      	ldr	r3, [r3, #0]
 8001430:	f002 02fe 	and.w	r2, r2, #254	; 0xfe
 8001434:	611a      	str	r2, [r3, #16]
 8001436:	e01b      	b.n	8001470 <I2C_MasterRequestWrite+0xc4>
  }
  else
  {
    /* Send header of slave address */
    hi2c->Instance->DR = I2C_10BIT_HEADER_WRITE(DevAddress);
 8001438:	897b      	ldrh	r3, [r7, #10]
 800143a:	11db      	asrs	r3, r3, #7
 800143c:	b2db      	uxtb	r3, r3
 800143e:	f003 0306 	and.w	r3, r3, #6
 8001442:	b2db      	uxtb	r3, r3
 8001444:	f063 030f 	orn	r3, r3, #15
 8001448:	b2da      	uxtb	r2, r3
 800144a:	68fb      	ldr	r3, [r7, #12]
 800144c:	681b      	ldr	r3, [r3, #0]
 800144e:	611a      	str	r2, [r3, #16]

    /* Wait until ADD10 flag is set */
    if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADD10, Timeout, Tickstart) != HAL_OK)
 8001450:	683b      	ldr	r3, [r7, #0]
 8001452:	687a      	ldr	r2, [r7, #4]
 8001454:	490e      	ldr	r1, [pc, #56]	; (8001490 <I2C_MasterRequestWrite+0xe4>)
 8001456:	68f8      	ldr	r0, [r7, #12]
 8001458:	f000 f945 	bl	80016e6 <I2C_WaitOnMasterAddressFlagUntilTimeout>
 800145c:	4603      	mov	r3, r0
 800145e:	2b00      	cmp	r3, #0
 8001460:	d001      	beq.n	8001466 <I2C_MasterRequestWrite+0xba>
    {
      return HAL_ERROR;
 8001462:	2301      	movs	r3, #1
 8001464:	e010      	b.n	8001488 <I2C_MasterRequestWrite+0xdc>
    }

    /* Send slave address */
    hi2c->Instance->DR = I2C_10BIT_ADDRESS(DevAddress);
 8001466:	897b      	ldrh	r3, [r7, #10]
 8001468:	b2da      	uxtb	r2, r3
 800146a:	68fb      	ldr	r3, [r7, #12]
 800146c:	681b      	ldr	r3, [r3, #0]
 800146e:	611a      	str	r2, [r3, #16]
  }

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 8001470:	683b      	ldr	r3, [r7, #0]
 8001472:	687a      	ldr	r2, [r7, #4]
 8001474:	4907      	ldr	r1, [pc, #28]	; (8001494 <I2C_MasterRequestWrite+0xe8>)
 8001476:	68f8      	ldr	r0, [r7, #12]
 8001478:	f000 f935 	bl	80016e6 <I2C_WaitOnMasterAddressFlagUntilTimeout>
 800147c:	4603      	mov	r3, r0
 800147e:	2b00      	cmp	r3, #0
 8001480:	d001      	beq.n	8001486 <I2C_MasterRequestWrite+0xda>
  {
    return HAL_ERROR;
 8001482:	2301      	movs	r3, #1
 8001484:	e000      	b.n	8001488 <I2C_MasterRequestWrite+0xdc>
  }

  return HAL_OK;
 8001486:	2300      	movs	r3, #0
}
 8001488:	4618      	mov	r0, r3
 800148a:	3718      	adds	r7, #24
 800148c:	46bd      	mov	sp, r7
 800148e:	bd80      	pop	{r7, pc}
 8001490:	00010008 	.word	0x00010008
 8001494:	00010002 	.word	0x00010002

08001498 <I2C_RequestMemoryRead>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_RequestMemoryRead(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress, uint16_t MemAddSize, uint32_t Timeout, uint32_t Tickstart)
{
 8001498:	b580      	push	{r7, lr}
 800149a:	b088      	sub	sp, #32
 800149c:	af02      	add	r7, sp, #8
 800149e:	60f8      	str	r0, [r7, #12]
 80014a0:	4608      	mov	r0, r1
 80014a2:	4611      	mov	r1, r2
 80014a4:	461a      	mov	r2, r3
 80014a6:	4603      	mov	r3, r0
 80014a8:	817b      	strh	r3, [r7, #10]
 80014aa:	460b      	mov	r3, r1
 80014ac:	813b      	strh	r3, [r7, #8]
 80014ae:	4613      	mov	r3, r2
 80014b0:	80fb      	strh	r3, [r7, #6]
  /* Enable Acknowledge */
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 80014b2:	68fb      	ldr	r3, [r7, #12]
 80014b4:	681b      	ldr	r3, [r3, #0]
 80014b6:	681a      	ldr	r2, [r3, #0]
 80014b8:	68fb      	ldr	r3, [r7, #12]
 80014ba:	681b      	ldr	r3, [r3, #0]
 80014bc:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 80014c0:	601a      	str	r2, [r3, #0]

  /* Generate Start */
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 80014c2:	68fb      	ldr	r3, [r7, #12]
 80014c4:	681b      	ldr	r3, [r3, #0]
 80014c6:	681a      	ldr	r2, [r3, #0]
 80014c8:	68fb      	ldr	r3, [r7, #12]
 80014ca:	681b      	ldr	r3, [r3, #0]
 80014cc:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 80014d0:	601a      	str	r2, [r3, #0]

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 80014d2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80014d4:	9300      	str	r3, [sp, #0]
 80014d6:	6a3b      	ldr	r3, [r7, #32]
 80014d8:	2200      	movs	r2, #0
 80014da:	f04f 1101 	mov.w	r1, #65537	; 0x10001
 80014de:	68f8      	ldr	r0, [r7, #12]
 80014e0:	f000 f8aa 	bl	8001638 <I2C_WaitOnFlagUntilTimeout>
 80014e4:	4603      	mov	r3, r0
 80014e6:	2b00      	cmp	r3, #0
 80014e8:	d001      	beq.n	80014ee <I2C_RequestMemoryRead+0x56>
  {
    return HAL_ERROR;
 80014ea:	2301      	movs	r3, #1
 80014ec:	e09e      	b.n	800162c <I2C_RequestMemoryRead+0x194>
  }

  /* Send slave address */
  hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(DevAddress);
 80014ee:	897b      	ldrh	r3, [r7, #10]
 80014f0:	b2db      	uxtb	r3, r3
 80014f2:	461a      	mov	r2, r3
 80014f4:	68fb      	ldr	r3, [r7, #12]
 80014f6:	681b      	ldr	r3, [r3, #0]
 80014f8:	f002 02fe 	and.w	r2, r2, #254	; 0xfe
 80014fc:	611a      	str	r2, [r3, #16]

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 80014fe:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001500:	6a3a      	ldr	r2, [r7, #32]
 8001502:	494c      	ldr	r1, [pc, #304]	; (8001634 <I2C_RequestMemoryRead+0x19c>)
 8001504:	68f8      	ldr	r0, [r7, #12]
 8001506:	f000 f8ee 	bl	80016e6 <I2C_WaitOnMasterAddressFlagUntilTimeout>
 800150a:	4603      	mov	r3, r0
 800150c:	2b00      	cmp	r3, #0
 800150e:	d001      	beq.n	8001514 <I2C_RequestMemoryRead+0x7c>
  {
    return HAL_ERROR;
 8001510:	2301      	movs	r3, #1
 8001512:	e08b      	b.n	800162c <I2C_RequestMemoryRead+0x194>
  }

  /* Clear ADDR flag */
  __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8001514:	2300      	movs	r3, #0
 8001516:	617b      	str	r3, [r7, #20]
 8001518:	68fb      	ldr	r3, [r7, #12]
 800151a:	681b      	ldr	r3, [r3, #0]
 800151c:	695b      	ldr	r3, [r3, #20]
 800151e:	617b      	str	r3, [r7, #20]
 8001520:	68fb      	ldr	r3, [r7, #12]
 8001522:	681b      	ldr	r3, [r3, #0]
 8001524:	699b      	ldr	r3, [r3, #24]
 8001526:	617b      	str	r3, [r7, #20]
 8001528:	697b      	ldr	r3, [r7, #20]

  /* Wait until TXE flag is set */
  if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 800152a:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800152c:	6a39      	ldr	r1, [r7, #32]
 800152e:	68f8      	ldr	r0, [r7, #12]
 8001530:	f000 f958 	bl	80017e4 <I2C_WaitOnTXEFlagUntilTimeout>
 8001534:	4603      	mov	r3, r0
 8001536:	2b00      	cmp	r3, #0
 8001538:	d00d      	beq.n	8001556 <I2C_RequestMemoryRead+0xbe>
  {
    if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 800153a:	68fb      	ldr	r3, [r7, #12]
 800153c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800153e:	2b04      	cmp	r3, #4
 8001540:	d107      	bne.n	8001552 <I2C_RequestMemoryRead+0xba>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8001542:	68fb      	ldr	r3, [r7, #12]
 8001544:	681b      	ldr	r3, [r3, #0]
 8001546:	681a      	ldr	r2, [r3, #0]
 8001548:	68fb      	ldr	r3, [r7, #12]
 800154a:	681b      	ldr	r3, [r3, #0]
 800154c:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8001550:	601a      	str	r2, [r3, #0]
    }
    return HAL_ERROR;
 8001552:	2301      	movs	r3, #1
 8001554:	e06a      	b.n	800162c <I2C_RequestMemoryRead+0x194>
  }

  /* If Memory address size is 8Bit */
  if (MemAddSize == I2C_MEMADD_SIZE_8BIT)
 8001556:	88fb      	ldrh	r3, [r7, #6]
 8001558:	2b01      	cmp	r3, #1
 800155a:	d105      	bne.n	8001568 <I2C_RequestMemoryRead+0xd0>
  {
    /* Send Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(MemAddress);
 800155c:	893b      	ldrh	r3, [r7, #8]
 800155e:	b2da      	uxtb	r2, r3
 8001560:	68fb      	ldr	r3, [r7, #12]
 8001562:	681b      	ldr	r3, [r3, #0]
 8001564:	611a      	str	r2, [r3, #16]
 8001566:	e021      	b.n	80015ac <I2C_RequestMemoryRead+0x114>
  }
  /* If Memory address size is 16Bit */
  else
  {
    /* Send MSB of Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_MSB(MemAddress);
 8001568:	893b      	ldrh	r3, [r7, #8]
 800156a:	0a1b      	lsrs	r3, r3, #8
 800156c:	b29b      	uxth	r3, r3
 800156e:	b2da      	uxtb	r2, r3
 8001570:	68fb      	ldr	r3, [r7, #12]
 8001572:	681b      	ldr	r3, [r3, #0]
 8001574:	611a      	str	r2, [r3, #16]

    /* Wait until TXE flag is set */
    if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8001576:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8001578:	6a39      	ldr	r1, [r7, #32]
 800157a:	68f8      	ldr	r0, [r7, #12]
 800157c:	f000 f932 	bl	80017e4 <I2C_WaitOnTXEFlagUntilTimeout>
 8001580:	4603      	mov	r3, r0
 8001582:	2b00      	cmp	r3, #0
 8001584:	d00d      	beq.n	80015a2 <I2C_RequestMemoryRead+0x10a>
    {
      if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8001586:	68fb      	ldr	r3, [r7, #12]
 8001588:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800158a:	2b04      	cmp	r3, #4
 800158c:	d107      	bne.n	800159e <I2C_RequestMemoryRead+0x106>
      {
        /* Generate Stop */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 800158e:	68fb      	ldr	r3, [r7, #12]
 8001590:	681b      	ldr	r3, [r3, #0]
 8001592:	681a      	ldr	r2, [r3, #0]
 8001594:	68fb      	ldr	r3, [r7, #12]
 8001596:	681b      	ldr	r3, [r3, #0]
 8001598:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 800159c:	601a      	str	r2, [r3, #0]
      }
      return HAL_ERROR;
 800159e:	2301      	movs	r3, #1
 80015a0:	e044      	b.n	800162c <I2C_RequestMemoryRead+0x194>
    }

    /* Send LSB of Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(MemAddress);
 80015a2:	893b      	ldrh	r3, [r7, #8]
 80015a4:	b2da      	uxtb	r2, r3
 80015a6:	68fb      	ldr	r3, [r7, #12]
 80015a8:	681b      	ldr	r3, [r3, #0]
 80015aa:	611a      	str	r2, [r3, #16]
  }

  /* Wait until TXE flag is set */
  if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 80015ac:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80015ae:	6a39      	ldr	r1, [r7, #32]
 80015b0:	68f8      	ldr	r0, [r7, #12]
 80015b2:	f000 f917 	bl	80017e4 <I2C_WaitOnTXEFlagUntilTimeout>
 80015b6:	4603      	mov	r3, r0
 80015b8:	2b00      	cmp	r3, #0
 80015ba:	d00d      	beq.n	80015d8 <I2C_RequestMemoryRead+0x140>
  {
    if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 80015bc:	68fb      	ldr	r3, [r7, #12]
 80015be:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80015c0:	2b04      	cmp	r3, #4
 80015c2:	d107      	bne.n	80015d4 <I2C_RequestMemoryRead+0x13c>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80015c4:	68fb      	ldr	r3, [r7, #12]
 80015c6:	681b      	ldr	r3, [r3, #0]
 80015c8:	681a      	ldr	r2, [r3, #0]
 80015ca:	68fb      	ldr	r3, [r7, #12]
 80015cc:	681b      	ldr	r3, [r3, #0]
 80015ce:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 80015d2:	601a      	str	r2, [r3, #0]
    }
    return HAL_ERROR;
 80015d4:	2301      	movs	r3, #1
 80015d6:	e029      	b.n	800162c <I2C_RequestMemoryRead+0x194>
  }

  /* Generate Restart */
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 80015d8:	68fb      	ldr	r3, [r7, #12]
 80015da:	681b      	ldr	r3, [r3, #0]
 80015dc:	681a      	ldr	r2, [r3, #0]
 80015de:	68fb      	ldr	r3, [r7, #12]
 80015e0:	681b      	ldr	r3, [r3, #0]
 80015e2:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 80015e6:	601a      	str	r2, [r3, #0]

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 80015e8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80015ea:	9300      	str	r3, [sp, #0]
 80015ec:	6a3b      	ldr	r3, [r7, #32]
 80015ee:	2200      	movs	r2, #0
 80015f0:	f04f 1101 	mov.w	r1, #65537	; 0x10001
 80015f4:	68f8      	ldr	r0, [r7, #12]
 80015f6:	f000 f81f 	bl	8001638 <I2C_WaitOnFlagUntilTimeout>
 80015fa:	4603      	mov	r3, r0
 80015fc:	2b00      	cmp	r3, #0
 80015fe:	d001      	beq.n	8001604 <I2C_RequestMemoryRead+0x16c>
  {
    return HAL_ERROR;
 8001600:	2301      	movs	r3, #1
 8001602:	e013      	b.n	800162c <I2C_RequestMemoryRead+0x194>
  }

  /* Send slave address */
  hi2c->Instance->DR = I2C_7BIT_ADD_READ(DevAddress);
 8001604:	897b      	ldrh	r3, [r7, #10]
 8001606:	b2db      	uxtb	r3, r3
 8001608:	f043 0301 	orr.w	r3, r3, #1
 800160c:	b2da      	uxtb	r2, r3
 800160e:	68fb      	ldr	r3, [r7, #12]
 8001610:	681b      	ldr	r3, [r3, #0]
 8001612:	611a      	str	r2, [r3, #16]

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 8001614:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001616:	6a3a      	ldr	r2, [r7, #32]
 8001618:	4906      	ldr	r1, [pc, #24]	; (8001634 <I2C_RequestMemoryRead+0x19c>)
 800161a:	68f8      	ldr	r0, [r7, #12]
 800161c:	f000 f863 	bl	80016e6 <I2C_WaitOnMasterAddressFlagUntilTimeout>
 8001620:	4603      	mov	r3, r0
 8001622:	2b00      	cmp	r3, #0
 8001624:	d001      	beq.n	800162a <I2C_RequestMemoryRead+0x192>
  {
    return HAL_ERROR;
 8001626:	2301      	movs	r3, #1
 8001628:	e000      	b.n	800162c <I2C_RequestMemoryRead+0x194>
  }

  return HAL_OK;
 800162a:	2300      	movs	r3, #0
}
 800162c:	4618      	mov	r0, r3
 800162e:	3718      	adds	r7, #24
 8001630:	46bd      	mov	sp, r7
 8001632:	bd80      	pop	{r7, pc}
 8001634:	00010002 	.word	0x00010002

08001638 <I2C_WaitOnFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, FlagStatus Status, uint32_t Timeout, uint32_t Tickstart)
{
 8001638:	b580      	push	{r7, lr}
 800163a:	b084      	sub	sp, #16
 800163c:	af00      	add	r7, sp, #0
 800163e:	60f8      	str	r0, [r7, #12]
 8001640:	60b9      	str	r1, [r7, #8]
 8001642:	603b      	str	r3, [r7, #0]
 8001644:	4613      	mov	r3, r2
 8001646:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8001648:	e025      	b.n	8001696 <I2C_WaitOnFlagUntilTimeout+0x5e>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 800164a:	683b      	ldr	r3, [r7, #0]
 800164c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8001650:	d021      	beq.n	8001696 <I2C_WaitOnFlagUntilTimeout+0x5e>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8001652:	f7fe ff9f 	bl	8000594 <HAL_GetTick>
 8001656:	4602      	mov	r2, r0
 8001658:	69bb      	ldr	r3, [r7, #24]
 800165a:	1ad3      	subs	r3, r2, r3
 800165c:	683a      	ldr	r2, [r7, #0]
 800165e:	429a      	cmp	r2, r3
 8001660:	d302      	bcc.n	8001668 <I2C_WaitOnFlagUntilTimeout+0x30>
 8001662:	683b      	ldr	r3, [r7, #0]
 8001664:	2b00      	cmp	r3, #0
 8001666:	d116      	bne.n	8001696 <I2C_WaitOnFlagUntilTimeout+0x5e>
      {
        hi2c->PreviousState     = I2C_STATE_NONE;
 8001668:	68fb      	ldr	r3, [r7, #12]
 800166a:	2200      	movs	r2, #0
 800166c:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State             = HAL_I2C_STATE_READY;
 800166e:	68fb      	ldr	r3, [r7, #12]
 8001670:	2220      	movs	r2, #32
 8001672:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode              = HAL_I2C_MODE_NONE;
 8001676:	68fb      	ldr	r3, [r7, #12]
 8001678:	2200      	movs	r2, #0
 800167a:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode         |= HAL_I2C_ERROR_TIMEOUT;
 800167e:	68fb      	ldr	r3, [r7, #12]
 8001680:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001682:	f043 0220 	orr.w	r2, r3, #32
 8001686:	68fb      	ldr	r3, [r7, #12]
 8001688:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 800168a:	68fb      	ldr	r3, [r7, #12]
 800168c:	2200      	movs	r2, #0
 800168e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 8001692:	2301      	movs	r3, #1
 8001694:	e023      	b.n	80016de <I2C_WaitOnFlagUntilTimeout+0xa6>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8001696:	68bb      	ldr	r3, [r7, #8]
 8001698:	0c1b      	lsrs	r3, r3, #16
 800169a:	b2db      	uxtb	r3, r3
 800169c:	2b01      	cmp	r3, #1
 800169e:	d10d      	bne.n	80016bc <I2C_WaitOnFlagUntilTimeout+0x84>
 80016a0:	68fb      	ldr	r3, [r7, #12]
 80016a2:	681b      	ldr	r3, [r3, #0]
 80016a4:	695b      	ldr	r3, [r3, #20]
 80016a6:	43da      	mvns	r2, r3
 80016a8:	68bb      	ldr	r3, [r7, #8]
 80016aa:	4013      	ands	r3, r2
 80016ac:	b29b      	uxth	r3, r3
 80016ae:	2b00      	cmp	r3, #0
 80016b0:	bf0c      	ite	eq
 80016b2:	2301      	moveq	r3, #1
 80016b4:	2300      	movne	r3, #0
 80016b6:	b2db      	uxtb	r3, r3
 80016b8:	461a      	mov	r2, r3
 80016ba:	e00c      	b.n	80016d6 <I2C_WaitOnFlagUntilTimeout+0x9e>
 80016bc:	68fb      	ldr	r3, [r7, #12]
 80016be:	681b      	ldr	r3, [r3, #0]
 80016c0:	699b      	ldr	r3, [r3, #24]
 80016c2:	43da      	mvns	r2, r3
 80016c4:	68bb      	ldr	r3, [r7, #8]
 80016c6:	4013      	ands	r3, r2
 80016c8:	b29b      	uxth	r3, r3
 80016ca:	2b00      	cmp	r3, #0
 80016cc:	bf0c      	ite	eq
 80016ce:	2301      	moveq	r3, #1
 80016d0:	2300      	movne	r3, #0
 80016d2:	b2db      	uxtb	r3, r3
 80016d4:	461a      	mov	r2, r3
 80016d6:	79fb      	ldrb	r3, [r7, #7]
 80016d8:	429a      	cmp	r2, r3
 80016da:	d0b6      	beq.n	800164a <I2C_WaitOnFlagUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
 80016dc:	2300      	movs	r3, #0
}
 80016de:	4618      	mov	r0, r3
 80016e0:	3710      	adds	r7, #16
 80016e2:	46bd      	mov	sp, r7
 80016e4:	bd80      	pop	{r7, pc}

080016e6 <I2C_WaitOnMasterAddressFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnMasterAddressFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, uint32_t Timeout, uint32_t Tickstart)
{
 80016e6:	b580      	push	{r7, lr}
 80016e8:	b084      	sub	sp, #16
 80016ea:	af00      	add	r7, sp, #0
 80016ec:	60f8      	str	r0, [r7, #12]
 80016ee:	60b9      	str	r1, [r7, #8]
 80016f0:	607a      	str	r2, [r7, #4]
 80016f2:	603b      	str	r3, [r7, #0]
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET)
 80016f4:	e051      	b.n	800179a <I2C_WaitOnMasterAddressFlagUntilTimeout+0xb4>
  {
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 80016f6:	68fb      	ldr	r3, [r7, #12]
 80016f8:	681b      	ldr	r3, [r3, #0]
 80016fa:	695b      	ldr	r3, [r3, #20]
 80016fc:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8001700:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8001704:	d123      	bne.n	800174e <I2C_WaitOnMasterAddressFlagUntilTimeout+0x68>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8001706:	68fb      	ldr	r3, [r7, #12]
 8001708:	681b      	ldr	r3, [r3, #0]
 800170a:	681a      	ldr	r2, [r3, #0]
 800170c:	68fb      	ldr	r3, [r7, #12]
 800170e:	681b      	ldr	r3, [r3, #0]
 8001710:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8001714:	601a      	str	r2, [r3, #0]

      /* Clear AF Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8001716:	68fb      	ldr	r3, [r7, #12]
 8001718:	681b      	ldr	r3, [r3, #0]
 800171a:	f46f 6280 	mvn.w	r2, #1024	; 0x400
 800171e:	615a      	str	r2, [r3, #20]

      hi2c->PreviousState       = I2C_STATE_NONE;
 8001720:	68fb      	ldr	r3, [r7, #12]
 8001722:	2200      	movs	r2, #0
 8001724:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State               = HAL_I2C_STATE_READY;
 8001726:	68fb      	ldr	r3, [r7, #12]
 8001728:	2220      	movs	r2, #32
 800172a:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      hi2c->Mode                = HAL_I2C_MODE_NONE;
 800172e:	68fb      	ldr	r3, [r7, #12]
 8001730:	2200      	movs	r2, #0
 8001732:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      hi2c->ErrorCode           |= HAL_I2C_ERROR_AF;
 8001736:	68fb      	ldr	r3, [r7, #12]
 8001738:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800173a:	f043 0204 	orr.w	r2, r3, #4
 800173e:	68fb      	ldr	r3, [r7, #12]
 8001740:	641a      	str	r2, [r3, #64]	; 0x40

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8001742:	68fb      	ldr	r3, [r7, #12]
 8001744:	2200      	movs	r2, #0
 8001746:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

      return HAL_ERROR;
 800174a:	2301      	movs	r3, #1
 800174c:	e046      	b.n	80017dc <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf6>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 800174e:	687b      	ldr	r3, [r7, #4]
 8001750:	f1b3 3fff 	cmp.w	r3, #4294967295
 8001754:	d021      	beq.n	800179a <I2C_WaitOnMasterAddressFlagUntilTimeout+0xb4>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8001756:	f7fe ff1d 	bl	8000594 <HAL_GetTick>
 800175a:	4602      	mov	r2, r0
 800175c:	683b      	ldr	r3, [r7, #0]
 800175e:	1ad3      	subs	r3, r2, r3
 8001760:	687a      	ldr	r2, [r7, #4]
 8001762:	429a      	cmp	r2, r3
 8001764:	d302      	bcc.n	800176c <I2C_WaitOnMasterAddressFlagUntilTimeout+0x86>
 8001766:	687b      	ldr	r3, [r7, #4]
 8001768:	2b00      	cmp	r3, #0
 800176a:	d116      	bne.n	800179a <I2C_WaitOnMasterAddressFlagUntilTimeout+0xb4>
      {
        hi2c->PreviousState       = I2C_STATE_NONE;
 800176c:	68fb      	ldr	r3, [r7, #12]
 800176e:	2200      	movs	r2, #0
 8001770:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State               = HAL_I2C_STATE_READY;
 8001772:	68fb      	ldr	r3, [r7, #12]
 8001774:	2220      	movs	r2, #32
 8001776:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode                = HAL_I2C_MODE_NONE;
 800177a:	68fb      	ldr	r3, [r7, #12]
 800177c:	2200      	movs	r2, #0
 800177e:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8001782:	68fb      	ldr	r3, [r7, #12]
 8001784:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001786:	f043 0220 	orr.w	r2, r3, #32
 800178a:	68fb      	ldr	r3, [r7, #12]
 800178c:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 800178e:	68fb      	ldr	r3, [r7, #12]
 8001790:	2200      	movs	r2, #0
 8001792:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 8001796:	2301      	movs	r3, #1
 8001798:	e020      	b.n	80017dc <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf6>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET)
 800179a:	68bb      	ldr	r3, [r7, #8]
 800179c:	0c1b      	lsrs	r3, r3, #16
 800179e:	b2db      	uxtb	r3, r3
 80017a0:	2b01      	cmp	r3, #1
 80017a2:	d10c      	bne.n	80017be <I2C_WaitOnMasterAddressFlagUntilTimeout+0xd8>
 80017a4:	68fb      	ldr	r3, [r7, #12]
 80017a6:	681b      	ldr	r3, [r3, #0]
 80017a8:	695b      	ldr	r3, [r3, #20]
 80017aa:	43da      	mvns	r2, r3
 80017ac:	68bb      	ldr	r3, [r7, #8]
 80017ae:	4013      	ands	r3, r2
 80017b0:	b29b      	uxth	r3, r3
 80017b2:	2b00      	cmp	r3, #0
 80017b4:	bf14      	ite	ne
 80017b6:	2301      	movne	r3, #1
 80017b8:	2300      	moveq	r3, #0
 80017ba:	b2db      	uxtb	r3, r3
 80017bc:	e00b      	b.n	80017d6 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf0>
 80017be:	68fb      	ldr	r3, [r7, #12]
 80017c0:	681b      	ldr	r3, [r3, #0]
 80017c2:	699b      	ldr	r3, [r3, #24]
 80017c4:	43da      	mvns	r2, r3
 80017c6:	68bb      	ldr	r3, [r7, #8]
 80017c8:	4013      	ands	r3, r2
 80017ca:	b29b      	uxth	r3, r3
 80017cc:	2b00      	cmp	r3, #0
 80017ce:	bf14      	ite	ne
 80017d0:	2301      	movne	r3, #1
 80017d2:	2300      	moveq	r3, #0
 80017d4:	b2db      	uxtb	r3, r3
 80017d6:	2b00      	cmp	r3, #0
 80017d8:	d18d      	bne.n	80016f6 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x10>
      }
    }
  }
  return HAL_OK;
 80017da:	2300      	movs	r3, #0
}
 80017dc:	4618      	mov	r0, r3
 80017de:	3710      	adds	r7, #16
 80017e0:	46bd      	mov	sp, r7
 80017e2:	bd80      	pop	{r7, pc}

080017e4 <I2C_WaitOnTXEFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnTXEFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 80017e4:	b580      	push	{r7, lr}
 80017e6:	b084      	sub	sp, #16
 80017e8:	af00      	add	r7, sp, #0
 80017ea:	60f8      	str	r0, [r7, #12]
 80017ec:	60b9      	str	r1, [r7, #8]
 80017ee:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 80017f0:	e02d      	b.n	800184e <I2C_WaitOnTXEFlagUntilTimeout+0x6a>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c) != HAL_OK)
 80017f2:	68f8      	ldr	r0, [r7, #12]
 80017f4:	f000 f8ce 	bl	8001994 <I2C_IsAcknowledgeFailed>
 80017f8:	4603      	mov	r3, r0
 80017fa:	2b00      	cmp	r3, #0
 80017fc:	d001      	beq.n	8001802 <I2C_WaitOnTXEFlagUntilTimeout+0x1e>
    {
      return HAL_ERROR;
 80017fe:	2301      	movs	r3, #1
 8001800:	e02d      	b.n	800185e <I2C_WaitOnTXEFlagUntilTimeout+0x7a>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8001802:	68bb      	ldr	r3, [r7, #8]
 8001804:	f1b3 3fff 	cmp.w	r3, #4294967295
 8001808:	d021      	beq.n	800184e <I2C_WaitOnTXEFlagUntilTimeout+0x6a>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800180a:	f7fe fec3 	bl	8000594 <HAL_GetTick>
 800180e:	4602      	mov	r2, r0
 8001810:	687b      	ldr	r3, [r7, #4]
 8001812:	1ad3      	subs	r3, r2, r3
 8001814:	68ba      	ldr	r2, [r7, #8]
 8001816:	429a      	cmp	r2, r3
 8001818:	d302      	bcc.n	8001820 <I2C_WaitOnTXEFlagUntilTimeout+0x3c>
 800181a:	68bb      	ldr	r3, [r7, #8]
 800181c:	2b00      	cmp	r3, #0
 800181e:	d116      	bne.n	800184e <I2C_WaitOnTXEFlagUntilTimeout+0x6a>
      {
        hi2c->PreviousState       = I2C_STATE_NONE;
 8001820:	68fb      	ldr	r3, [r7, #12]
 8001822:	2200      	movs	r2, #0
 8001824:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State               = HAL_I2C_STATE_READY;
 8001826:	68fb      	ldr	r3, [r7, #12]
 8001828:	2220      	movs	r2, #32
 800182a:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode                = HAL_I2C_MODE_NONE;
 800182e:	68fb      	ldr	r3, [r7, #12]
 8001830:	2200      	movs	r2, #0
 8001832:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8001836:	68fb      	ldr	r3, [r7, #12]
 8001838:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800183a:	f043 0220 	orr.w	r2, r3, #32
 800183e:	68fb      	ldr	r3, [r7, #12]
 8001840:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8001842:	68fb      	ldr	r3, [r7, #12]
 8001844:	2200      	movs	r2, #0
 8001846:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 800184a:	2301      	movs	r3, #1
 800184c:	e007      	b.n	800185e <I2C_WaitOnTXEFlagUntilTimeout+0x7a>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 800184e:	68fb      	ldr	r3, [r7, #12]
 8001850:	681b      	ldr	r3, [r3, #0]
 8001852:	695b      	ldr	r3, [r3, #20]
 8001854:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8001858:	2b80      	cmp	r3, #128	; 0x80
 800185a:	d1ca      	bne.n	80017f2 <I2C_WaitOnTXEFlagUntilTimeout+0xe>
      }
    }
  }
  return HAL_OK;
 800185c:	2300      	movs	r3, #0
}
 800185e:	4618      	mov	r0, r3
 8001860:	3710      	adds	r7, #16
 8001862:	46bd      	mov	sp, r7
 8001864:	bd80      	pop	{r7, pc}

08001866 <I2C_WaitOnBTFFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnBTFFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 8001866:	b580      	push	{r7, lr}
 8001868:	b084      	sub	sp, #16
 800186a:	af00      	add	r7, sp, #0
 800186c:	60f8      	str	r0, [r7, #12]
 800186e:	60b9      	str	r1, [r7, #8]
 8001870:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET)
 8001872:	e02d      	b.n	80018d0 <I2C_WaitOnBTFFlagUntilTimeout+0x6a>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c) != HAL_OK)
 8001874:	68f8      	ldr	r0, [r7, #12]
 8001876:	f000 f88d 	bl	8001994 <I2C_IsAcknowledgeFailed>
 800187a:	4603      	mov	r3, r0
 800187c:	2b00      	cmp	r3, #0
 800187e:	d001      	beq.n	8001884 <I2C_WaitOnBTFFlagUntilTimeout+0x1e>
    {
      return HAL_ERROR;
 8001880:	2301      	movs	r3, #1
 8001882:	e02d      	b.n	80018e0 <I2C_WaitOnBTFFlagUntilTimeout+0x7a>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8001884:	68bb      	ldr	r3, [r7, #8]
 8001886:	f1b3 3fff 	cmp.w	r3, #4294967295
 800188a:	d021      	beq.n	80018d0 <I2C_WaitOnBTFFlagUntilTimeout+0x6a>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800188c:	f7fe fe82 	bl	8000594 <HAL_GetTick>
 8001890:	4602      	mov	r2, r0
 8001892:	687b      	ldr	r3, [r7, #4]
 8001894:	1ad3      	subs	r3, r2, r3
 8001896:	68ba      	ldr	r2, [r7, #8]
 8001898:	429a      	cmp	r2, r3
 800189a:	d302      	bcc.n	80018a2 <I2C_WaitOnBTFFlagUntilTimeout+0x3c>
 800189c:	68bb      	ldr	r3, [r7, #8]
 800189e:	2b00      	cmp	r3, #0
 80018a0:	d116      	bne.n	80018d0 <I2C_WaitOnBTFFlagUntilTimeout+0x6a>
      {
        hi2c->PreviousState       = I2C_STATE_NONE;
 80018a2:	68fb      	ldr	r3, [r7, #12]
 80018a4:	2200      	movs	r2, #0
 80018a6:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State               = HAL_I2C_STATE_READY;
 80018a8:	68fb      	ldr	r3, [r7, #12]
 80018aa:	2220      	movs	r2, #32
 80018ac:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode                = HAL_I2C_MODE_NONE;
 80018b0:	68fb      	ldr	r3, [r7, #12]
 80018b2:	2200      	movs	r2, #0
 80018b4:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 80018b8:	68fb      	ldr	r3, [r7, #12]
 80018ba:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80018bc:	f043 0220 	orr.w	r2, r3, #32
 80018c0:	68fb      	ldr	r3, [r7, #12]
 80018c2:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 80018c4:	68fb      	ldr	r3, [r7, #12]
 80018c6:	2200      	movs	r2, #0
 80018c8:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 80018cc:	2301      	movs	r3, #1
 80018ce:	e007      	b.n	80018e0 <I2C_WaitOnBTFFlagUntilTimeout+0x7a>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET)
 80018d0:	68fb      	ldr	r3, [r7, #12]
 80018d2:	681b      	ldr	r3, [r3, #0]
 80018d4:	695b      	ldr	r3, [r3, #20]
 80018d6:	f003 0304 	and.w	r3, r3, #4
 80018da:	2b04      	cmp	r3, #4
 80018dc:	d1ca      	bne.n	8001874 <I2C_WaitOnBTFFlagUntilTimeout+0xe>
      }
    }
  }
  return HAL_OK;
 80018de:	2300      	movs	r3, #0
}
 80018e0:	4618      	mov	r0, r3
 80018e2:	3710      	adds	r7, #16
 80018e4:	46bd      	mov	sp, r7
 80018e6:	bd80      	pop	{r7, pc}

080018e8 <I2C_WaitOnRXNEFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnRXNEFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 80018e8:	b580      	push	{r7, lr}
 80018ea:	b084      	sub	sp, #16
 80018ec:	af00      	add	r7, sp, #0
 80018ee:	60f8      	str	r0, [r7, #12]
 80018f0:	60b9      	str	r1, [r7, #8]
 80018f2:	607a      	str	r2, [r7, #4]

  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET)
 80018f4:	e042      	b.n	800197c <I2C_WaitOnRXNEFlagUntilTimeout+0x94>
  {
    /* Check if a STOPF is detected */
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == SET)
 80018f6:	68fb      	ldr	r3, [r7, #12]
 80018f8:	681b      	ldr	r3, [r3, #0]
 80018fa:	695b      	ldr	r3, [r3, #20]
 80018fc:	f003 0310 	and.w	r3, r3, #16
 8001900:	2b10      	cmp	r3, #16
 8001902:	d119      	bne.n	8001938 <I2C_WaitOnRXNEFlagUntilTimeout+0x50>
    {
      /* Clear STOP Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8001904:	68fb      	ldr	r3, [r7, #12]
 8001906:	681b      	ldr	r3, [r3, #0]
 8001908:	f06f 0210 	mvn.w	r2, #16
 800190c:	615a      	str	r2, [r3, #20]

      hi2c->PreviousState       = I2C_STATE_NONE;
 800190e:	68fb      	ldr	r3, [r7, #12]
 8001910:	2200      	movs	r2, #0
 8001912:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State               = HAL_I2C_STATE_READY;
 8001914:	68fb      	ldr	r3, [r7, #12]
 8001916:	2220      	movs	r2, #32
 8001918:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      hi2c->Mode                = HAL_I2C_MODE_NONE;
 800191c:	68fb      	ldr	r3, [r7, #12]
 800191e:	2200      	movs	r2, #0
 8001920:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      hi2c->ErrorCode           |= HAL_I2C_ERROR_NONE;
 8001924:	68fb      	ldr	r3, [r7, #12]
 8001926:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8001928:	68fb      	ldr	r3, [r7, #12]
 800192a:	641a      	str	r2, [r3, #64]	; 0x40

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 800192c:	68fb      	ldr	r3, [r7, #12]
 800192e:	2200      	movs	r2, #0
 8001930:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

      return HAL_ERROR;
 8001934:	2301      	movs	r3, #1
 8001936:	e029      	b.n	800198c <I2C_WaitOnRXNEFlagUntilTimeout+0xa4>
    }

    /* Check for the Timeout */
    if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8001938:	f7fe fe2c 	bl	8000594 <HAL_GetTick>
 800193c:	4602      	mov	r2, r0
 800193e:	687b      	ldr	r3, [r7, #4]
 8001940:	1ad3      	subs	r3, r2, r3
 8001942:	68ba      	ldr	r2, [r7, #8]
 8001944:	429a      	cmp	r2, r3
 8001946:	d302      	bcc.n	800194e <I2C_WaitOnRXNEFlagUntilTimeout+0x66>
 8001948:	68bb      	ldr	r3, [r7, #8]
 800194a:	2b00      	cmp	r3, #0
 800194c:	d116      	bne.n	800197c <I2C_WaitOnRXNEFlagUntilTimeout+0x94>
    {
      hi2c->PreviousState       = I2C_STATE_NONE;
 800194e:	68fb      	ldr	r3, [r7, #12]
 8001950:	2200      	movs	r2, #0
 8001952:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State               = HAL_I2C_STATE_READY;
 8001954:	68fb      	ldr	r3, [r7, #12]
 8001956:	2220      	movs	r2, #32
 8001958:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      hi2c->Mode                = HAL_I2C_MODE_NONE;
 800195c:	68fb      	ldr	r3, [r7, #12]
 800195e:	2200      	movs	r2, #0
 8001960:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8001964:	68fb      	ldr	r3, [r7, #12]
 8001966:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001968:	f043 0220 	orr.w	r2, r3, #32
 800196c:	68fb      	ldr	r3, [r7, #12]
 800196e:	641a      	str	r2, [r3, #64]	; 0x40

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8001970:	68fb      	ldr	r3, [r7, #12]
 8001972:	2200      	movs	r2, #0
 8001974:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

      return HAL_ERROR;
 8001978:	2301      	movs	r3, #1
 800197a:	e007      	b.n	800198c <I2C_WaitOnRXNEFlagUntilTimeout+0xa4>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET)
 800197c:	68fb      	ldr	r3, [r7, #12]
 800197e:	681b      	ldr	r3, [r3, #0]
 8001980:	695b      	ldr	r3, [r3, #20]
 8001982:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8001986:	2b40      	cmp	r3, #64	; 0x40
 8001988:	d1b5      	bne.n	80018f6 <I2C_WaitOnRXNEFlagUntilTimeout+0xe>
    }
  }
  return HAL_OK;
 800198a:	2300      	movs	r3, #0
}
 800198c:	4618      	mov	r0, r3
 800198e:	3710      	adds	r7, #16
 8001990:	46bd      	mov	sp, r7
 8001992:	bd80      	pop	{r7, pc}

08001994 <I2C_IsAcknowledgeFailed>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_IsAcknowledgeFailed(I2C_HandleTypeDef *hi2c)
{
 8001994:	b480      	push	{r7}
 8001996:	b083      	sub	sp, #12
 8001998:	af00      	add	r7, sp, #0
 800199a:	6078      	str	r0, [r7, #4]
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 800199c:	687b      	ldr	r3, [r7, #4]
 800199e:	681b      	ldr	r3, [r3, #0]
 80019a0:	695b      	ldr	r3, [r3, #20]
 80019a2:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80019a6:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80019aa:	d11b      	bne.n	80019e4 <I2C_IsAcknowledgeFailed+0x50>
  {
    /* Clear NACKF Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 80019ac:	687b      	ldr	r3, [r7, #4]
 80019ae:	681b      	ldr	r3, [r3, #0]
 80019b0:	f46f 6280 	mvn.w	r2, #1024	; 0x400
 80019b4:	615a      	str	r2, [r3, #20]

    hi2c->PreviousState       = I2C_STATE_NONE;
 80019b6:	687b      	ldr	r3, [r7, #4]
 80019b8:	2200      	movs	r2, #0
 80019ba:	631a      	str	r2, [r3, #48]	; 0x30
    hi2c->State               = HAL_I2C_STATE_READY;
 80019bc:	687b      	ldr	r3, [r7, #4]
 80019be:	2220      	movs	r2, #32
 80019c0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode                = HAL_I2C_MODE_NONE;
 80019c4:	687b      	ldr	r3, [r7, #4]
 80019c6:	2200      	movs	r2, #0
 80019c8:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    hi2c->ErrorCode           |= HAL_I2C_ERROR_AF;
 80019cc:	687b      	ldr	r3, [r7, #4]
 80019ce:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80019d0:	f043 0204 	orr.w	r2, r3, #4
 80019d4:	687b      	ldr	r3, [r7, #4]
 80019d6:	641a      	str	r2, [r3, #64]	; 0x40

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 80019d8:	687b      	ldr	r3, [r7, #4]
 80019da:	2200      	movs	r2, #0
 80019dc:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    return HAL_ERROR;
 80019e0:	2301      	movs	r3, #1
 80019e2:	e000      	b.n	80019e6 <I2C_IsAcknowledgeFailed+0x52>
  }
  return HAL_OK;
 80019e4:	2300      	movs	r3, #0
}
 80019e6:	4618      	mov	r0, r3
 80019e8:	370c      	adds	r7, #12
 80019ea:	46bd      	mov	sp, r7
 80019ec:	f85d 7b04 	ldr.w	r7, [sp], #4
 80019f0:	4770      	bx	lr
	...

080019f4 <HAL_RCC_OscConfig>:
  *         supported by this API. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 80019f4:	b580      	push	{r7, lr}
 80019f6:	b086      	sub	sp, #24
 80019f8:	af00      	add	r7, sp, #0
 80019fa:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 80019fc:	687b      	ldr	r3, [r7, #4]
 80019fe:	2b00      	cmp	r3, #0
 8001a00:	d101      	bne.n	8001a06 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8001a02:	2301      	movs	r3, #1
 8001a04:	e22d      	b.n	8001e62 <HAL_RCC_OscConfig+0x46e>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8001a06:	687b      	ldr	r3, [r7, #4]
 8001a08:	681b      	ldr	r3, [r3, #0]
 8001a0a:	f003 0301 	and.w	r3, r3, #1
 8001a0e:	2b00      	cmp	r3, #0
 8001a10:	d075      	beq.n	8001afe <HAL_RCC_OscConfig+0x10a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 8001a12:	4ba3      	ldr	r3, [pc, #652]	; (8001ca0 <HAL_RCC_OscConfig+0x2ac>)
 8001a14:	689b      	ldr	r3, [r3, #8]
 8001a16:	f003 030c 	and.w	r3, r3, #12
 8001a1a:	2b04      	cmp	r3, #4
 8001a1c:	d00c      	beq.n	8001a38 <HAL_RCC_OscConfig+0x44>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8001a1e:	4ba0      	ldr	r3, [pc, #640]	; (8001ca0 <HAL_RCC_OscConfig+0x2ac>)
 8001a20:	689b      	ldr	r3, [r3, #8]
 8001a22:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 8001a26:	2b08      	cmp	r3, #8
 8001a28:	d112      	bne.n	8001a50 <HAL_RCC_OscConfig+0x5c>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8001a2a:	4b9d      	ldr	r3, [pc, #628]	; (8001ca0 <HAL_RCC_OscConfig+0x2ac>)
 8001a2c:	685b      	ldr	r3, [r3, #4]
 8001a2e:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8001a32:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8001a36:	d10b      	bne.n	8001a50 <HAL_RCC_OscConfig+0x5c>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8001a38:	4b99      	ldr	r3, [pc, #612]	; (8001ca0 <HAL_RCC_OscConfig+0x2ac>)
 8001a3a:	681b      	ldr	r3, [r3, #0]
 8001a3c:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001a40:	2b00      	cmp	r3, #0
 8001a42:	d05b      	beq.n	8001afc <HAL_RCC_OscConfig+0x108>
 8001a44:	687b      	ldr	r3, [r7, #4]
 8001a46:	685b      	ldr	r3, [r3, #4]
 8001a48:	2b00      	cmp	r3, #0
 8001a4a:	d157      	bne.n	8001afc <HAL_RCC_OscConfig+0x108>
      {
        return HAL_ERROR;
 8001a4c:	2301      	movs	r3, #1
 8001a4e:	e208      	b.n	8001e62 <HAL_RCC_OscConfig+0x46e>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8001a50:	687b      	ldr	r3, [r7, #4]
 8001a52:	685b      	ldr	r3, [r3, #4]
 8001a54:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8001a58:	d106      	bne.n	8001a68 <HAL_RCC_OscConfig+0x74>
 8001a5a:	4b91      	ldr	r3, [pc, #580]	; (8001ca0 <HAL_RCC_OscConfig+0x2ac>)
 8001a5c:	681b      	ldr	r3, [r3, #0]
 8001a5e:	4a90      	ldr	r2, [pc, #576]	; (8001ca0 <HAL_RCC_OscConfig+0x2ac>)
 8001a60:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8001a64:	6013      	str	r3, [r2, #0]
 8001a66:	e01d      	b.n	8001aa4 <HAL_RCC_OscConfig+0xb0>
 8001a68:	687b      	ldr	r3, [r7, #4]
 8001a6a:	685b      	ldr	r3, [r3, #4]
 8001a6c:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8001a70:	d10c      	bne.n	8001a8c <HAL_RCC_OscConfig+0x98>
 8001a72:	4b8b      	ldr	r3, [pc, #556]	; (8001ca0 <HAL_RCC_OscConfig+0x2ac>)
 8001a74:	681b      	ldr	r3, [r3, #0]
 8001a76:	4a8a      	ldr	r2, [pc, #552]	; (8001ca0 <HAL_RCC_OscConfig+0x2ac>)
 8001a78:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8001a7c:	6013      	str	r3, [r2, #0]
 8001a7e:	4b88      	ldr	r3, [pc, #544]	; (8001ca0 <HAL_RCC_OscConfig+0x2ac>)
 8001a80:	681b      	ldr	r3, [r3, #0]
 8001a82:	4a87      	ldr	r2, [pc, #540]	; (8001ca0 <HAL_RCC_OscConfig+0x2ac>)
 8001a84:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8001a88:	6013      	str	r3, [r2, #0]
 8001a8a:	e00b      	b.n	8001aa4 <HAL_RCC_OscConfig+0xb0>
 8001a8c:	4b84      	ldr	r3, [pc, #528]	; (8001ca0 <HAL_RCC_OscConfig+0x2ac>)
 8001a8e:	681b      	ldr	r3, [r3, #0]
 8001a90:	4a83      	ldr	r2, [pc, #524]	; (8001ca0 <HAL_RCC_OscConfig+0x2ac>)
 8001a92:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8001a96:	6013      	str	r3, [r2, #0]
 8001a98:	4b81      	ldr	r3, [pc, #516]	; (8001ca0 <HAL_RCC_OscConfig+0x2ac>)
 8001a9a:	681b      	ldr	r3, [r3, #0]
 8001a9c:	4a80      	ldr	r2, [pc, #512]	; (8001ca0 <HAL_RCC_OscConfig+0x2ac>)
 8001a9e:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8001aa2:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 8001aa4:	687b      	ldr	r3, [r7, #4]
 8001aa6:	685b      	ldr	r3, [r3, #4]
 8001aa8:	2b00      	cmp	r3, #0
 8001aaa:	d013      	beq.n	8001ad4 <HAL_RCC_OscConfig+0xe0>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001aac:	f7fe fd72 	bl	8000594 <HAL_GetTick>
 8001ab0:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8001ab2:	e008      	b.n	8001ac6 <HAL_RCC_OscConfig+0xd2>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8001ab4:	f7fe fd6e 	bl	8000594 <HAL_GetTick>
 8001ab8:	4602      	mov	r2, r0
 8001aba:	693b      	ldr	r3, [r7, #16]
 8001abc:	1ad3      	subs	r3, r2, r3
 8001abe:	2b64      	cmp	r3, #100	; 0x64
 8001ac0:	d901      	bls.n	8001ac6 <HAL_RCC_OscConfig+0xd2>
          {
            return HAL_TIMEOUT;
 8001ac2:	2303      	movs	r3, #3
 8001ac4:	e1cd      	b.n	8001e62 <HAL_RCC_OscConfig+0x46e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8001ac6:	4b76      	ldr	r3, [pc, #472]	; (8001ca0 <HAL_RCC_OscConfig+0x2ac>)
 8001ac8:	681b      	ldr	r3, [r3, #0]
 8001aca:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001ace:	2b00      	cmp	r3, #0
 8001ad0:	d0f0      	beq.n	8001ab4 <HAL_RCC_OscConfig+0xc0>
 8001ad2:	e014      	b.n	8001afe <HAL_RCC_OscConfig+0x10a>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001ad4:	f7fe fd5e 	bl	8000594 <HAL_GetTick>
 8001ad8:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8001ada:	e008      	b.n	8001aee <HAL_RCC_OscConfig+0xfa>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8001adc:	f7fe fd5a 	bl	8000594 <HAL_GetTick>
 8001ae0:	4602      	mov	r2, r0
 8001ae2:	693b      	ldr	r3, [r7, #16]
 8001ae4:	1ad3      	subs	r3, r2, r3
 8001ae6:	2b64      	cmp	r3, #100	; 0x64
 8001ae8:	d901      	bls.n	8001aee <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 8001aea:	2303      	movs	r3, #3
 8001aec:	e1b9      	b.n	8001e62 <HAL_RCC_OscConfig+0x46e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8001aee:	4b6c      	ldr	r3, [pc, #432]	; (8001ca0 <HAL_RCC_OscConfig+0x2ac>)
 8001af0:	681b      	ldr	r3, [r3, #0]
 8001af2:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001af6:	2b00      	cmp	r3, #0
 8001af8:	d1f0      	bne.n	8001adc <HAL_RCC_OscConfig+0xe8>
 8001afa:	e000      	b.n	8001afe <HAL_RCC_OscConfig+0x10a>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8001afc:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8001afe:	687b      	ldr	r3, [r7, #4]
 8001b00:	681b      	ldr	r3, [r3, #0]
 8001b02:	f003 0302 	and.w	r3, r3, #2
 8001b06:	2b00      	cmp	r3, #0
 8001b08:	d063      	beq.n	8001bd2 <HAL_RCC_OscConfig+0x1de>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 8001b0a:	4b65      	ldr	r3, [pc, #404]	; (8001ca0 <HAL_RCC_OscConfig+0x2ac>)
 8001b0c:	689b      	ldr	r3, [r3, #8]
 8001b0e:	f003 030c 	and.w	r3, r3, #12
 8001b12:	2b00      	cmp	r3, #0
 8001b14:	d00b      	beq.n	8001b2e <HAL_RCC_OscConfig+0x13a>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8001b16:	4b62      	ldr	r3, [pc, #392]	; (8001ca0 <HAL_RCC_OscConfig+0x2ac>)
 8001b18:	689b      	ldr	r3, [r3, #8]
 8001b1a:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 8001b1e:	2b08      	cmp	r3, #8
 8001b20:	d11c      	bne.n	8001b5c <HAL_RCC_OscConfig+0x168>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8001b22:	4b5f      	ldr	r3, [pc, #380]	; (8001ca0 <HAL_RCC_OscConfig+0x2ac>)
 8001b24:	685b      	ldr	r3, [r3, #4]
 8001b26:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8001b2a:	2b00      	cmp	r3, #0
 8001b2c:	d116      	bne.n	8001b5c <HAL_RCC_OscConfig+0x168>
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8001b2e:	4b5c      	ldr	r3, [pc, #368]	; (8001ca0 <HAL_RCC_OscConfig+0x2ac>)
 8001b30:	681b      	ldr	r3, [r3, #0]
 8001b32:	f003 0302 	and.w	r3, r3, #2
 8001b36:	2b00      	cmp	r3, #0
 8001b38:	d005      	beq.n	8001b46 <HAL_RCC_OscConfig+0x152>
 8001b3a:	687b      	ldr	r3, [r7, #4]
 8001b3c:	68db      	ldr	r3, [r3, #12]
 8001b3e:	2b01      	cmp	r3, #1
 8001b40:	d001      	beq.n	8001b46 <HAL_RCC_OscConfig+0x152>
      {
        return HAL_ERROR;
 8001b42:	2301      	movs	r3, #1
 8001b44:	e18d      	b.n	8001e62 <HAL_RCC_OscConfig+0x46e>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8001b46:	4b56      	ldr	r3, [pc, #344]	; (8001ca0 <HAL_RCC_OscConfig+0x2ac>)
 8001b48:	681b      	ldr	r3, [r3, #0]
 8001b4a:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8001b4e:	687b      	ldr	r3, [r7, #4]
 8001b50:	691b      	ldr	r3, [r3, #16]
 8001b52:	00db      	lsls	r3, r3, #3
 8001b54:	4952      	ldr	r1, [pc, #328]	; (8001ca0 <HAL_RCC_OscConfig+0x2ac>)
 8001b56:	4313      	orrs	r3, r2
 8001b58:	600b      	str	r3, [r1, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8001b5a:	e03a      	b.n	8001bd2 <HAL_RCC_OscConfig+0x1de>
      }
    }
    else
    {
      /* Check the HSI State */
      if((RCC_OscInitStruct->HSIState)!= RCC_HSI_OFF)
 8001b5c:	687b      	ldr	r3, [r7, #4]
 8001b5e:	68db      	ldr	r3, [r3, #12]
 8001b60:	2b00      	cmp	r3, #0
 8001b62:	d020      	beq.n	8001ba6 <HAL_RCC_OscConfig+0x1b2>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8001b64:	4b4f      	ldr	r3, [pc, #316]	; (8001ca4 <HAL_RCC_OscConfig+0x2b0>)
 8001b66:	2201      	movs	r2, #1
 8001b68:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001b6a:	f7fe fd13 	bl	8000594 <HAL_GetTick>
 8001b6e:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8001b70:	e008      	b.n	8001b84 <HAL_RCC_OscConfig+0x190>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8001b72:	f7fe fd0f 	bl	8000594 <HAL_GetTick>
 8001b76:	4602      	mov	r2, r0
 8001b78:	693b      	ldr	r3, [r7, #16]
 8001b7a:	1ad3      	subs	r3, r2, r3
 8001b7c:	2b02      	cmp	r3, #2
 8001b7e:	d901      	bls.n	8001b84 <HAL_RCC_OscConfig+0x190>
          {
            return HAL_TIMEOUT;
 8001b80:	2303      	movs	r3, #3
 8001b82:	e16e      	b.n	8001e62 <HAL_RCC_OscConfig+0x46e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8001b84:	4b46      	ldr	r3, [pc, #280]	; (8001ca0 <HAL_RCC_OscConfig+0x2ac>)
 8001b86:	681b      	ldr	r3, [r3, #0]
 8001b88:	f003 0302 	and.w	r3, r3, #2
 8001b8c:	2b00      	cmp	r3, #0
 8001b8e:	d0f0      	beq.n	8001b72 <HAL_RCC_OscConfig+0x17e>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value. */
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8001b90:	4b43      	ldr	r3, [pc, #268]	; (8001ca0 <HAL_RCC_OscConfig+0x2ac>)
 8001b92:	681b      	ldr	r3, [r3, #0]
 8001b94:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8001b98:	687b      	ldr	r3, [r7, #4]
 8001b9a:	691b      	ldr	r3, [r3, #16]
 8001b9c:	00db      	lsls	r3, r3, #3
 8001b9e:	4940      	ldr	r1, [pc, #256]	; (8001ca0 <HAL_RCC_OscConfig+0x2ac>)
 8001ba0:	4313      	orrs	r3, r2
 8001ba2:	600b      	str	r3, [r1, #0]
 8001ba4:	e015      	b.n	8001bd2 <HAL_RCC_OscConfig+0x1de>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8001ba6:	4b3f      	ldr	r3, [pc, #252]	; (8001ca4 <HAL_RCC_OscConfig+0x2b0>)
 8001ba8:	2200      	movs	r2, #0
 8001baa:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001bac:	f7fe fcf2 	bl	8000594 <HAL_GetTick>
 8001bb0:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8001bb2:	e008      	b.n	8001bc6 <HAL_RCC_OscConfig+0x1d2>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8001bb4:	f7fe fcee 	bl	8000594 <HAL_GetTick>
 8001bb8:	4602      	mov	r2, r0
 8001bba:	693b      	ldr	r3, [r7, #16]
 8001bbc:	1ad3      	subs	r3, r2, r3
 8001bbe:	2b02      	cmp	r3, #2
 8001bc0:	d901      	bls.n	8001bc6 <HAL_RCC_OscConfig+0x1d2>
          {
            return HAL_TIMEOUT;
 8001bc2:	2303      	movs	r3, #3
 8001bc4:	e14d      	b.n	8001e62 <HAL_RCC_OscConfig+0x46e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8001bc6:	4b36      	ldr	r3, [pc, #216]	; (8001ca0 <HAL_RCC_OscConfig+0x2ac>)
 8001bc8:	681b      	ldr	r3, [r3, #0]
 8001bca:	f003 0302 	and.w	r3, r3, #2
 8001bce:	2b00      	cmp	r3, #0
 8001bd0:	d1f0      	bne.n	8001bb4 <HAL_RCC_OscConfig+0x1c0>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8001bd2:	687b      	ldr	r3, [r7, #4]
 8001bd4:	681b      	ldr	r3, [r3, #0]
 8001bd6:	f003 0308 	and.w	r3, r3, #8
 8001bda:	2b00      	cmp	r3, #0
 8001bdc:	d030      	beq.n	8001c40 <HAL_RCC_OscConfig+0x24c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if((RCC_OscInitStruct->LSIState)!= RCC_LSI_OFF)
 8001bde:	687b      	ldr	r3, [r7, #4]
 8001be0:	695b      	ldr	r3, [r3, #20]
 8001be2:	2b00      	cmp	r3, #0
 8001be4:	d016      	beq.n	8001c14 <HAL_RCC_OscConfig+0x220>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8001be6:	4b30      	ldr	r3, [pc, #192]	; (8001ca8 <HAL_RCC_OscConfig+0x2b4>)
 8001be8:	2201      	movs	r2, #1
 8001bea:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8001bec:	f7fe fcd2 	bl	8000594 <HAL_GetTick>
 8001bf0:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8001bf2:	e008      	b.n	8001c06 <HAL_RCC_OscConfig+0x212>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8001bf4:	f7fe fcce 	bl	8000594 <HAL_GetTick>
 8001bf8:	4602      	mov	r2, r0
 8001bfa:	693b      	ldr	r3, [r7, #16]
 8001bfc:	1ad3      	subs	r3, r2, r3
 8001bfe:	2b02      	cmp	r3, #2
 8001c00:	d901      	bls.n	8001c06 <HAL_RCC_OscConfig+0x212>
        {
          return HAL_TIMEOUT;
 8001c02:	2303      	movs	r3, #3
 8001c04:	e12d      	b.n	8001e62 <HAL_RCC_OscConfig+0x46e>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8001c06:	4b26      	ldr	r3, [pc, #152]	; (8001ca0 <HAL_RCC_OscConfig+0x2ac>)
 8001c08:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8001c0a:	f003 0302 	and.w	r3, r3, #2
 8001c0e:	2b00      	cmp	r3, #0
 8001c10:	d0f0      	beq.n	8001bf4 <HAL_RCC_OscConfig+0x200>
 8001c12:	e015      	b.n	8001c40 <HAL_RCC_OscConfig+0x24c>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8001c14:	4b24      	ldr	r3, [pc, #144]	; (8001ca8 <HAL_RCC_OscConfig+0x2b4>)
 8001c16:	2200      	movs	r2, #0
 8001c18:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8001c1a:	f7fe fcbb 	bl	8000594 <HAL_GetTick>
 8001c1e:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8001c20:	e008      	b.n	8001c34 <HAL_RCC_OscConfig+0x240>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8001c22:	f7fe fcb7 	bl	8000594 <HAL_GetTick>
 8001c26:	4602      	mov	r2, r0
 8001c28:	693b      	ldr	r3, [r7, #16]
 8001c2a:	1ad3      	subs	r3, r2, r3
 8001c2c:	2b02      	cmp	r3, #2
 8001c2e:	d901      	bls.n	8001c34 <HAL_RCC_OscConfig+0x240>
        {
          return HAL_TIMEOUT;
 8001c30:	2303      	movs	r3, #3
 8001c32:	e116      	b.n	8001e62 <HAL_RCC_OscConfig+0x46e>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8001c34:	4b1a      	ldr	r3, [pc, #104]	; (8001ca0 <HAL_RCC_OscConfig+0x2ac>)
 8001c36:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8001c38:	f003 0302 	and.w	r3, r3, #2
 8001c3c:	2b00      	cmp	r3, #0
 8001c3e:	d1f0      	bne.n	8001c22 <HAL_RCC_OscConfig+0x22e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8001c40:	687b      	ldr	r3, [r7, #4]
 8001c42:	681b      	ldr	r3, [r3, #0]
 8001c44:	f003 0304 	and.w	r3, r3, #4
 8001c48:	2b00      	cmp	r3, #0
 8001c4a:	f000 80a0 	beq.w	8001d8e <HAL_RCC_OscConfig+0x39a>
  {
    FlagStatus       pwrclkchanged = RESET;
 8001c4e:	2300      	movs	r3, #0
 8001c50:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8001c52:	4b13      	ldr	r3, [pc, #76]	; (8001ca0 <HAL_RCC_OscConfig+0x2ac>)
 8001c54:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001c56:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001c5a:	2b00      	cmp	r3, #0
 8001c5c:	d10f      	bne.n	8001c7e <HAL_RCC_OscConfig+0x28a>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8001c5e:	2300      	movs	r3, #0
 8001c60:	60fb      	str	r3, [r7, #12]
 8001c62:	4b0f      	ldr	r3, [pc, #60]	; (8001ca0 <HAL_RCC_OscConfig+0x2ac>)
 8001c64:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001c66:	4a0e      	ldr	r2, [pc, #56]	; (8001ca0 <HAL_RCC_OscConfig+0x2ac>)
 8001c68:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8001c6c:	6413      	str	r3, [r2, #64]	; 0x40
 8001c6e:	4b0c      	ldr	r3, [pc, #48]	; (8001ca0 <HAL_RCC_OscConfig+0x2ac>)
 8001c70:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001c72:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001c76:	60fb      	str	r3, [r7, #12]
 8001c78:	68fb      	ldr	r3, [r7, #12]
      pwrclkchanged = SET;
 8001c7a:	2301      	movs	r3, #1
 8001c7c:	75fb      	strb	r3, [r7, #23]
    }

    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8001c7e:	4b0b      	ldr	r3, [pc, #44]	; (8001cac <HAL_RCC_OscConfig+0x2b8>)
 8001c80:	681b      	ldr	r3, [r3, #0]
 8001c82:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001c86:	2b00      	cmp	r3, #0
 8001c88:	d121      	bne.n	8001cce <HAL_RCC_OscConfig+0x2da>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8001c8a:	4b08      	ldr	r3, [pc, #32]	; (8001cac <HAL_RCC_OscConfig+0x2b8>)
 8001c8c:	681b      	ldr	r3, [r3, #0]
 8001c8e:	4a07      	ldr	r2, [pc, #28]	; (8001cac <HAL_RCC_OscConfig+0x2b8>)
 8001c90:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8001c94:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8001c96:	f7fe fc7d 	bl	8000594 <HAL_GetTick>
 8001c9a:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8001c9c:	e011      	b.n	8001cc2 <HAL_RCC_OscConfig+0x2ce>
 8001c9e:	bf00      	nop
 8001ca0:	40023800 	.word	0x40023800
 8001ca4:	42470000 	.word	0x42470000
 8001ca8:	42470e80 	.word	0x42470e80
 8001cac:	40007000 	.word	0x40007000
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8001cb0:	f7fe fc70 	bl	8000594 <HAL_GetTick>
 8001cb4:	4602      	mov	r2, r0
 8001cb6:	693b      	ldr	r3, [r7, #16]
 8001cb8:	1ad3      	subs	r3, r2, r3
 8001cba:	2b02      	cmp	r3, #2
 8001cbc:	d901      	bls.n	8001cc2 <HAL_RCC_OscConfig+0x2ce>
        {
          return HAL_TIMEOUT;
 8001cbe:	2303      	movs	r3, #3
 8001cc0:	e0cf      	b.n	8001e62 <HAL_RCC_OscConfig+0x46e>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8001cc2:	4b6a      	ldr	r3, [pc, #424]	; (8001e6c <HAL_RCC_OscConfig+0x478>)
 8001cc4:	681b      	ldr	r3, [r3, #0]
 8001cc6:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001cca:	2b00      	cmp	r3, #0
 8001ccc:	d0f0      	beq.n	8001cb0 <HAL_RCC_OscConfig+0x2bc>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8001cce:	687b      	ldr	r3, [r7, #4]
 8001cd0:	689b      	ldr	r3, [r3, #8]
 8001cd2:	2b01      	cmp	r3, #1
 8001cd4:	d106      	bne.n	8001ce4 <HAL_RCC_OscConfig+0x2f0>
 8001cd6:	4b66      	ldr	r3, [pc, #408]	; (8001e70 <HAL_RCC_OscConfig+0x47c>)
 8001cd8:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8001cda:	4a65      	ldr	r2, [pc, #404]	; (8001e70 <HAL_RCC_OscConfig+0x47c>)
 8001cdc:	f043 0301 	orr.w	r3, r3, #1
 8001ce0:	6713      	str	r3, [r2, #112]	; 0x70
 8001ce2:	e01c      	b.n	8001d1e <HAL_RCC_OscConfig+0x32a>
 8001ce4:	687b      	ldr	r3, [r7, #4]
 8001ce6:	689b      	ldr	r3, [r3, #8]
 8001ce8:	2b05      	cmp	r3, #5
 8001cea:	d10c      	bne.n	8001d06 <HAL_RCC_OscConfig+0x312>
 8001cec:	4b60      	ldr	r3, [pc, #384]	; (8001e70 <HAL_RCC_OscConfig+0x47c>)
 8001cee:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8001cf0:	4a5f      	ldr	r2, [pc, #380]	; (8001e70 <HAL_RCC_OscConfig+0x47c>)
 8001cf2:	f043 0304 	orr.w	r3, r3, #4
 8001cf6:	6713      	str	r3, [r2, #112]	; 0x70
 8001cf8:	4b5d      	ldr	r3, [pc, #372]	; (8001e70 <HAL_RCC_OscConfig+0x47c>)
 8001cfa:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8001cfc:	4a5c      	ldr	r2, [pc, #368]	; (8001e70 <HAL_RCC_OscConfig+0x47c>)
 8001cfe:	f043 0301 	orr.w	r3, r3, #1
 8001d02:	6713      	str	r3, [r2, #112]	; 0x70
 8001d04:	e00b      	b.n	8001d1e <HAL_RCC_OscConfig+0x32a>
 8001d06:	4b5a      	ldr	r3, [pc, #360]	; (8001e70 <HAL_RCC_OscConfig+0x47c>)
 8001d08:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8001d0a:	4a59      	ldr	r2, [pc, #356]	; (8001e70 <HAL_RCC_OscConfig+0x47c>)
 8001d0c:	f023 0301 	bic.w	r3, r3, #1
 8001d10:	6713      	str	r3, [r2, #112]	; 0x70
 8001d12:	4b57      	ldr	r3, [pc, #348]	; (8001e70 <HAL_RCC_OscConfig+0x47c>)
 8001d14:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8001d16:	4a56      	ldr	r2, [pc, #344]	; (8001e70 <HAL_RCC_OscConfig+0x47c>)
 8001d18:	f023 0304 	bic.w	r3, r3, #4
 8001d1c:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 8001d1e:	687b      	ldr	r3, [r7, #4]
 8001d20:	689b      	ldr	r3, [r3, #8]
 8001d22:	2b00      	cmp	r3, #0
 8001d24:	d015      	beq.n	8001d52 <HAL_RCC_OscConfig+0x35e>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8001d26:	f7fe fc35 	bl	8000594 <HAL_GetTick>
 8001d2a:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8001d2c:	e00a      	b.n	8001d44 <HAL_RCC_OscConfig+0x350>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8001d2e:	f7fe fc31 	bl	8000594 <HAL_GetTick>
 8001d32:	4602      	mov	r2, r0
 8001d34:	693b      	ldr	r3, [r7, #16]
 8001d36:	1ad3      	subs	r3, r2, r3
 8001d38:	f241 3288 	movw	r2, #5000	; 0x1388
 8001d3c:	4293      	cmp	r3, r2
 8001d3e:	d901      	bls.n	8001d44 <HAL_RCC_OscConfig+0x350>
        {
          return HAL_TIMEOUT;
 8001d40:	2303      	movs	r3, #3
 8001d42:	e08e      	b.n	8001e62 <HAL_RCC_OscConfig+0x46e>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8001d44:	4b4a      	ldr	r3, [pc, #296]	; (8001e70 <HAL_RCC_OscConfig+0x47c>)
 8001d46:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8001d48:	f003 0302 	and.w	r3, r3, #2
 8001d4c:	2b00      	cmp	r3, #0
 8001d4e:	d0ee      	beq.n	8001d2e <HAL_RCC_OscConfig+0x33a>
 8001d50:	e014      	b.n	8001d7c <HAL_RCC_OscConfig+0x388>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8001d52:	f7fe fc1f 	bl	8000594 <HAL_GetTick>
 8001d56:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8001d58:	e00a      	b.n	8001d70 <HAL_RCC_OscConfig+0x37c>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8001d5a:	f7fe fc1b 	bl	8000594 <HAL_GetTick>
 8001d5e:	4602      	mov	r2, r0
 8001d60:	693b      	ldr	r3, [r7, #16]
 8001d62:	1ad3      	subs	r3, r2, r3
 8001d64:	f241 3288 	movw	r2, #5000	; 0x1388
 8001d68:	4293      	cmp	r3, r2
 8001d6a:	d901      	bls.n	8001d70 <HAL_RCC_OscConfig+0x37c>
        {
          return HAL_TIMEOUT;
 8001d6c:	2303      	movs	r3, #3
 8001d6e:	e078      	b.n	8001e62 <HAL_RCC_OscConfig+0x46e>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8001d70:	4b3f      	ldr	r3, [pc, #252]	; (8001e70 <HAL_RCC_OscConfig+0x47c>)
 8001d72:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8001d74:	f003 0302 	and.w	r3, r3, #2
 8001d78:	2b00      	cmp	r3, #0
 8001d7a:	d1ee      	bne.n	8001d5a <HAL_RCC_OscConfig+0x366>
        }
      }
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 8001d7c:	7dfb      	ldrb	r3, [r7, #23]
 8001d7e:	2b01      	cmp	r3, #1
 8001d80:	d105      	bne.n	8001d8e <HAL_RCC_OscConfig+0x39a>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8001d82:	4b3b      	ldr	r3, [pc, #236]	; (8001e70 <HAL_RCC_OscConfig+0x47c>)
 8001d84:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001d86:	4a3a      	ldr	r2, [pc, #232]	; (8001e70 <HAL_RCC_OscConfig+0x47c>)
 8001d88:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8001d8c:	6413      	str	r3, [r2, #64]	; 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8001d8e:	687b      	ldr	r3, [r7, #4]
 8001d90:	699b      	ldr	r3, [r3, #24]
 8001d92:	2b00      	cmp	r3, #0
 8001d94:	d064      	beq.n	8001e60 <HAL_RCC_OscConfig+0x46c>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 8001d96:	4b36      	ldr	r3, [pc, #216]	; (8001e70 <HAL_RCC_OscConfig+0x47c>)
 8001d98:	689b      	ldr	r3, [r3, #8]
 8001d9a:	f003 030c 	and.w	r3, r3, #12
 8001d9e:	2b08      	cmp	r3, #8
 8001da0:	d05c      	beq.n	8001e5c <HAL_RCC_OscConfig+0x468>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8001da2:	687b      	ldr	r3, [r7, #4]
 8001da4:	699b      	ldr	r3, [r3, #24]
 8001da6:	2b02      	cmp	r3, #2
 8001da8:	d141      	bne.n	8001e2e <HAL_RCC_OscConfig+0x43a>
        assert_param(IS_RCC_PLLN_VALUE(RCC_OscInitStruct->PLL.PLLN));
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8001daa:	4b32      	ldr	r3, [pc, #200]	; (8001e74 <HAL_RCC_OscConfig+0x480>)
 8001dac:	2200      	movs	r2, #0
 8001dae:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001db0:	f7fe fbf0 	bl	8000594 <HAL_GetTick>
 8001db4:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8001db6:	e008      	b.n	8001dca <HAL_RCC_OscConfig+0x3d6>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8001db8:	f7fe fbec 	bl	8000594 <HAL_GetTick>
 8001dbc:	4602      	mov	r2, r0
 8001dbe:	693b      	ldr	r3, [r7, #16]
 8001dc0:	1ad3      	subs	r3, r2, r3
 8001dc2:	2b02      	cmp	r3, #2
 8001dc4:	d901      	bls.n	8001dca <HAL_RCC_OscConfig+0x3d6>
          {
            return HAL_TIMEOUT;
 8001dc6:	2303      	movs	r3, #3
 8001dc8:	e04b      	b.n	8001e62 <HAL_RCC_OscConfig+0x46e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8001dca:	4b29      	ldr	r3, [pc, #164]	; (8001e70 <HAL_RCC_OscConfig+0x47c>)
 8001dcc:	681b      	ldr	r3, [r3, #0]
 8001dce:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001dd2:	2b00      	cmp	r3, #0
 8001dd4:	d1f0      	bne.n	8001db8 <HAL_RCC_OscConfig+0x3c4>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 8001dd6:	687b      	ldr	r3, [r7, #4]
 8001dd8:	69da      	ldr	r2, [r3, #28]
 8001dda:	687b      	ldr	r3, [r7, #4]
 8001ddc:	6a1b      	ldr	r3, [r3, #32]
 8001dde:	431a      	orrs	r2, r3
 8001de0:	687b      	ldr	r3, [r7, #4]
 8001de2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001de4:	019b      	lsls	r3, r3, #6
 8001de6:	431a      	orrs	r2, r3
 8001de8:	687b      	ldr	r3, [r7, #4]
 8001dea:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001dec:	085b      	lsrs	r3, r3, #1
 8001dee:	3b01      	subs	r3, #1
 8001df0:	041b      	lsls	r3, r3, #16
 8001df2:	431a      	orrs	r2, r3
 8001df4:	687b      	ldr	r3, [r7, #4]
 8001df6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001df8:	061b      	lsls	r3, r3, #24
 8001dfa:	491d      	ldr	r1, [pc, #116]	; (8001e70 <HAL_RCC_OscConfig+0x47c>)
 8001dfc:	4313      	orrs	r3, r2
 8001dfe:	604b      	str	r3, [r1, #4]
                                 RCC_OscInitStruct->PLL.PLLM                                                 | \
                                 (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)             | \
                                 (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos) | \
                                 (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)));
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8001e00:	4b1c      	ldr	r3, [pc, #112]	; (8001e74 <HAL_RCC_OscConfig+0x480>)
 8001e02:	2201      	movs	r2, #1
 8001e04:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001e06:	f7fe fbc5 	bl	8000594 <HAL_GetTick>
 8001e0a:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8001e0c:	e008      	b.n	8001e20 <HAL_RCC_OscConfig+0x42c>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8001e0e:	f7fe fbc1 	bl	8000594 <HAL_GetTick>
 8001e12:	4602      	mov	r2, r0
 8001e14:	693b      	ldr	r3, [r7, #16]
 8001e16:	1ad3      	subs	r3, r2, r3
 8001e18:	2b02      	cmp	r3, #2
 8001e1a:	d901      	bls.n	8001e20 <HAL_RCC_OscConfig+0x42c>
          {
            return HAL_TIMEOUT;
 8001e1c:	2303      	movs	r3, #3
 8001e1e:	e020      	b.n	8001e62 <HAL_RCC_OscConfig+0x46e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8001e20:	4b13      	ldr	r3, [pc, #76]	; (8001e70 <HAL_RCC_OscConfig+0x47c>)
 8001e22:	681b      	ldr	r3, [r3, #0]
 8001e24:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001e28:	2b00      	cmp	r3, #0
 8001e2a:	d0f0      	beq.n	8001e0e <HAL_RCC_OscConfig+0x41a>
 8001e2c:	e018      	b.n	8001e60 <HAL_RCC_OscConfig+0x46c>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8001e2e:	4b11      	ldr	r3, [pc, #68]	; (8001e74 <HAL_RCC_OscConfig+0x480>)
 8001e30:	2200      	movs	r2, #0
 8001e32:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001e34:	f7fe fbae 	bl	8000594 <HAL_GetTick>
 8001e38:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8001e3a:	e008      	b.n	8001e4e <HAL_RCC_OscConfig+0x45a>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8001e3c:	f7fe fbaa 	bl	8000594 <HAL_GetTick>
 8001e40:	4602      	mov	r2, r0
 8001e42:	693b      	ldr	r3, [r7, #16]
 8001e44:	1ad3      	subs	r3, r2, r3
 8001e46:	2b02      	cmp	r3, #2
 8001e48:	d901      	bls.n	8001e4e <HAL_RCC_OscConfig+0x45a>
          {
            return HAL_TIMEOUT;
 8001e4a:	2303      	movs	r3, #3
 8001e4c:	e009      	b.n	8001e62 <HAL_RCC_OscConfig+0x46e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8001e4e:	4b08      	ldr	r3, [pc, #32]	; (8001e70 <HAL_RCC_OscConfig+0x47c>)
 8001e50:	681b      	ldr	r3, [r3, #0]
 8001e52:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001e56:	2b00      	cmp	r3, #0
 8001e58:	d1f0      	bne.n	8001e3c <HAL_RCC_OscConfig+0x448>
 8001e5a:	e001      	b.n	8001e60 <HAL_RCC_OscConfig+0x46c>
        }
      }
    }
    else
    {
      return HAL_ERROR;
 8001e5c:	2301      	movs	r3, #1
 8001e5e:	e000      	b.n	8001e62 <HAL_RCC_OscConfig+0x46e>
    }
  }
  return HAL_OK;
 8001e60:	2300      	movs	r3, #0
}
 8001e62:	4618      	mov	r0, r3
 8001e64:	3718      	adds	r7, #24
 8001e66:	46bd      	mov	sp, r7
 8001e68:	bd80      	pop	{r7, pc}
 8001e6a:	bf00      	nop
 8001e6c:	40007000 	.word	0x40007000
 8001e70:	40023800 	.word	0x40023800
 8001e74:	42470060 	.word	0x42470060

08001e78 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8001e78:	b580      	push	{r7, lr}
 8001e7a:	b084      	sub	sp, #16
 8001e7c:	af00      	add	r7, sp, #0
 8001e7e:	6078      	str	r0, [r7, #4]
 8001e80:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 8001e82:	687b      	ldr	r3, [r7, #4]
 8001e84:	2b00      	cmp	r3, #0
 8001e86:	d101      	bne.n	8001e8c <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8001e88:	2301      	movs	r3, #1
 8001e8a:	e0ca      	b.n	8002022 <HAL_RCC_ClockConfig+0x1aa>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8001e8c:	4b67      	ldr	r3, [pc, #412]	; (800202c <HAL_RCC_ClockConfig+0x1b4>)
 8001e8e:	681b      	ldr	r3, [r3, #0]
 8001e90:	f003 030f 	and.w	r3, r3, #15
 8001e94:	683a      	ldr	r2, [r7, #0]
 8001e96:	429a      	cmp	r2, r3
 8001e98:	d90c      	bls.n	8001eb4 <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8001e9a:	4b64      	ldr	r3, [pc, #400]	; (800202c <HAL_RCC_ClockConfig+0x1b4>)
 8001e9c:	683a      	ldr	r2, [r7, #0]
 8001e9e:	b2d2      	uxtb	r2, r2
 8001ea0:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8001ea2:	4b62      	ldr	r3, [pc, #392]	; (800202c <HAL_RCC_ClockConfig+0x1b4>)
 8001ea4:	681b      	ldr	r3, [r3, #0]
 8001ea6:	f003 030f 	and.w	r3, r3, #15
 8001eaa:	683a      	ldr	r2, [r7, #0]
 8001eac:	429a      	cmp	r2, r3
 8001eae:	d001      	beq.n	8001eb4 <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 8001eb0:	2301      	movs	r3, #1
 8001eb2:	e0b6      	b.n	8002022 <HAL_RCC_ClockConfig+0x1aa>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8001eb4:	687b      	ldr	r3, [r7, #4]
 8001eb6:	681b      	ldr	r3, [r3, #0]
 8001eb8:	f003 0302 	and.w	r3, r3, #2
 8001ebc:	2b00      	cmp	r3, #0
 8001ebe:	d020      	beq.n	8001f02 <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8001ec0:	687b      	ldr	r3, [r7, #4]
 8001ec2:	681b      	ldr	r3, [r3, #0]
 8001ec4:	f003 0304 	and.w	r3, r3, #4
 8001ec8:	2b00      	cmp	r3, #0
 8001eca:	d005      	beq.n	8001ed8 <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8001ecc:	4b58      	ldr	r3, [pc, #352]	; (8002030 <HAL_RCC_ClockConfig+0x1b8>)
 8001ece:	689b      	ldr	r3, [r3, #8]
 8001ed0:	4a57      	ldr	r2, [pc, #348]	; (8002030 <HAL_RCC_ClockConfig+0x1b8>)
 8001ed2:	f443 53e0 	orr.w	r3, r3, #7168	; 0x1c00
 8001ed6:	6093      	str	r3, [r2, #8]
    }

    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8001ed8:	687b      	ldr	r3, [r7, #4]
 8001eda:	681b      	ldr	r3, [r3, #0]
 8001edc:	f003 0308 	and.w	r3, r3, #8
 8001ee0:	2b00      	cmp	r3, #0
 8001ee2:	d005      	beq.n	8001ef0 <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8001ee4:	4b52      	ldr	r3, [pc, #328]	; (8002030 <HAL_RCC_ClockConfig+0x1b8>)
 8001ee6:	689b      	ldr	r3, [r3, #8]
 8001ee8:	4a51      	ldr	r2, [pc, #324]	; (8002030 <HAL_RCC_ClockConfig+0x1b8>)
 8001eea:	f443 4360 	orr.w	r3, r3, #57344	; 0xe000
 8001eee:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8001ef0:	4b4f      	ldr	r3, [pc, #316]	; (8002030 <HAL_RCC_ClockConfig+0x1b8>)
 8001ef2:	689b      	ldr	r3, [r3, #8]
 8001ef4:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8001ef8:	687b      	ldr	r3, [r7, #4]
 8001efa:	689b      	ldr	r3, [r3, #8]
 8001efc:	494c      	ldr	r1, [pc, #304]	; (8002030 <HAL_RCC_ClockConfig+0x1b8>)
 8001efe:	4313      	orrs	r3, r2
 8001f00:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8001f02:	687b      	ldr	r3, [r7, #4]
 8001f04:	681b      	ldr	r3, [r3, #0]
 8001f06:	f003 0301 	and.w	r3, r3, #1
 8001f0a:	2b00      	cmp	r3, #0
 8001f0c:	d044      	beq.n	8001f98 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8001f0e:	687b      	ldr	r3, [r7, #4]
 8001f10:	685b      	ldr	r3, [r3, #4]
 8001f12:	2b01      	cmp	r3, #1
 8001f14:	d107      	bne.n	8001f26 <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8001f16:	4b46      	ldr	r3, [pc, #280]	; (8002030 <HAL_RCC_ClockConfig+0x1b8>)
 8001f18:	681b      	ldr	r3, [r3, #0]
 8001f1a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001f1e:	2b00      	cmp	r3, #0
 8001f20:	d119      	bne.n	8001f56 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8001f22:	2301      	movs	r3, #1
 8001f24:	e07d      	b.n	8002022 <HAL_RCC_ClockConfig+0x1aa>
      }
    }
    /* PLL is selected as System Clock Source */
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8001f26:	687b      	ldr	r3, [r7, #4]
 8001f28:	685b      	ldr	r3, [r3, #4]
 8001f2a:	2b02      	cmp	r3, #2
 8001f2c:	d003      	beq.n	8001f36 <HAL_RCC_ClockConfig+0xbe>
            (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 8001f2e:	687b      	ldr	r3, [r7, #4]
 8001f30:	685b      	ldr	r3, [r3, #4]
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8001f32:	2b03      	cmp	r3, #3
 8001f34:	d107      	bne.n	8001f46 <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8001f36:	4b3e      	ldr	r3, [pc, #248]	; (8002030 <HAL_RCC_ClockConfig+0x1b8>)
 8001f38:	681b      	ldr	r3, [r3, #0]
 8001f3a:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001f3e:	2b00      	cmp	r3, #0
 8001f40:	d109      	bne.n	8001f56 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8001f42:	2301      	movs	r3, #1
 8001f44:	e06d      	b.n	8002022 <HAL_RCC_ClockConfig+0x1aa>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8001f46:	4b3a      	ldr	r3, [pc, #232]	; (8002030 <HAL_RCC_ClockConfig+0x1b8>)
 8001f48:	681b      	ldr	r3, [r3, #0]
 8001f4a:	f003 0302 	and.w	r3, r3, #2
 8001f4e:	2b00      	cmp	r3, #0
 8001f50:	d101      	bne.n	8001f56 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8001f52:	2301      	movs	r3, #1
 8001f54:	e065      	b.n	8002022 <HAL_RCC_ClockConfig+0x1aa>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8001f56:	4b36      	ldr	r3, [pc, #216]	; (8002030 <HAL_RCC_ClockConfig+0x1b8>)
 8001f58:	689b      	ldr	r3, [r3, #8]
 8001f5a:	f023 0203 	bic.w	r2, r3, #3
 8001f5e:	687b      	ldr	r3, [r7, #4]
 8001f60:	685b      	ldr	r3, [r3, #4]
 8001f62:	4933      	ldr	r1, [pc, #204]	; (8002030 <HAL_RCC_ClockConfig+0x1b8>)
 8001f64:	4313      	orrs	r3, r2
 8001f66:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8001f68:	f7fe fb14 	bl	8000594 <HAL_GetTick>
 8001f6c:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8001f6e:	e00a      	b.n	8001f86 <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8001f70:	f7fe fb10 	bl	8000594 <HAL_GetTick>
 8001f74:	4602      	mov	r2, r0
 8001f76:	68fb      	ldr	r3, [r7, #12]
 8001f78:	1ad3      	subs	r3, r2, r3
 8001f7a:	f241 3288 	movw	r2, #5000	; 0x1388
 8001f7e:	4293      	cmp	r3, r2
 8001f80:	d901      	bls.n	8001f86 <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 8001f82:	2303      	movs	r3, #3
 8001f84:	e04d      	b.n	8002022 <HAL_RCC_ClockConfig+0x1aa>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8001f86:	4b2a      	ldr	r3, [pc, #168]	; (8002030 <HAL_RCC_ClockConfig+0x1b8>)
 8001f88:	689b      	ldr	r3, [r3, #8]
 8001f8a:	f003 020c 	and.w	r2, r3, #12
 8001f8e:	687b      	ldr	r3, [r7, #4]
 8001f90:	685b      	ldr	r3, [r3, #4]
 8001f92:	009b      	lsls	r3, r3, #2
 8001f94:	429a      	cmp	r2, r3
 8001f96:	d1eb      	bne.n	8001f70 <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8001f98:	4b24      	ldr	r3, [pc, #144]	; (800202c <HAL_RCC_ClockConfig+0x1b4>)
 8001f9a:	681b      	ldr	r3, [r3, #0]
 8001f9c:	f003 030f 	and.w	r3, r3, #15
 8001fa0:	683a      	ldr	r2, [r7, #0]
 8001fa2:	429a      	cmp	r2, r3
 8001fa4:	d20c      	bcs.n	8001fc0 <HAL_RCC_ClockConfig+0x148>
  {
     /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8001fa6:	4b21      	ldr	r3, [pc, #132]	; (800202c <HAL_RCC_ClockConfig+0x1b4>)
 8001fa8:	683a      	ldr	r2, [r7, #0]
 8001faa:	b2d2      	uxtb	r2, r2
 8001fac:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8001fae:	4b1f      	ldr	r3, [pc, #124]	; (800202c <HAL_RCC_ClockConfig+0x1b4>)
 8001fb0:	681b      	ldr	r3, [r3, #0]
 8001fb2:	f003 030f 	and.w	r3, r3, #15
 8001fb6:	683a      	ldr	r2, [r7, #0]
 8001fb8:	429a      	cmp	r2, r3
 8001fba:	d001      	beq.n	8001fc0 <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 8001fbc:	2301      	movs	r3, #1
 8001fbe:	e030      	b.n	8002022 <HAL_RCC_ClockConfig+0x1aa>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8001fc0:	687b      	ldr	r3, [r7, #4]
 8001fc2:	681b      	ldr	r3, [r3, #0]
 8001fc4:	f003 0304 	and.w	r3, r3, #4
 8001fc8:	2b00      	cmp	r3, #0
 8001fca:	d008      	beq.n	8001fde <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8001fcc:	4b18      	ldr	r3, [pc, #96]	; (8002030 <HAL_RCC_ClockConfig+0x1b8>)
 8001fce:	689b      	ldr	r3, [r3, #8]
 8001fd0:	f423 52e0 	bic.w	r2, r3, #7168	; 0x1c00
 8001fd4:	687b      	ldr	r3, [r7, #4]
 8001fd6:	68db      	ldr	r3, [r3, #12]
 8001fd8:	4915      	ldr	r1, [pc, #84]	; (8002030 <HAL_RCC_ClockConfig+0x1b8>)
 8001fda:	4313      	orrs	r3, r2
 8001fdc:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8001fde:	687b      	ldr	r3, [r7, #4]
 8001fe0:	681b      	ldr	r3, [r3, #0]
 8001fe2:	f003 0308 	and.w	r3, r3, #8
 8001fe6:	2b00      	cmp	r3, #0
 8001fe8:	d009      	beq.n	8001ffe <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8001fea:	4b11      	ldr	r3, [pc, #68]	; (8002030 <HAL_RCC_ClockConfig+0x1b8>)
 8001fec:	689b      	ldr	r3, [r3, #8]
 8001fee:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 8001ff2:	687b      	ldr	r3, [r7, #4]
 8001ff4:	691b      	ldr	r3, [r3, #16]
 8001ff6:	00db      	lsls	r3, r3, #3
 8001ff8:	490d      	ldr	r1, [pc, #52]	; (8002030 <HAL_RCC_ClockConfig+0x1b8>)
 8001ffa:	4313      	orrs	r3, r2
 8001ffc:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 8001ffe:	f000 f81d 	bl	800203c <HAL_RCC_GetSysClockFreq>
 8002002:	4601      	mov	r1, r0
 8002004:	4b0a      	ldr	r3, [pc, #40]	; (8002030 <HAL_RCC_ClockConfig+0x1b8>)
 8002006:	689b      	ldr	r3, [r3, #8]
 8002008:	091b      	lsrs	r3, r3, #4
 800200a:	f003 030f 	and.w	r3, r3, #15
 800200e:	4a09      	ldr	r2, [pc, #36]	; (8002034 <HAL_RCC_ClockConfig+0x1bc>)
 8002010:	5cd3      	ldrb	r3, [r2, r3]
 8002012:	fa21 f303 	lsr.w	r3, r1, r3
 8002016:	4a08      	ldr	r2, [pc, #32]	; (8002038 <HAL_RCC_ClockConfig+0x1c0>)
 8002018:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick (TICK_INT_PRIORITY);
 800201a:	2000      	movs	r0, #0
 800201c:	f7fe fa76 	bl	800050c <HAL_InitTick>

  return HAL_OK;
 8002020:	2300      	movs	r3, #0
}
 8002022:	4618      	mov	r0, r3
 8002024:	3710      	adds	r7, #16
 8002026:	46bd      	mov	sp, r7
 8002028:	bd80      	pop	{r7, pc}
 800202a:	bf00      	nop
 800202c:	40023c00 	.word	0x40023c00
 8002030:	40023800 	.word	0x40023800
 8002034:	080027b0 	.word	0x080027b0
 8002038:	20000008 	.word	0x20000008

0800203c <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
__weak uint32_t HAL_RCC_GetSysClockFreq(void)
{
 800203c:	b5f0      	push	{r4, r5, r6, r7, lr}
 800203e:	b085      	sub	sp, #20
 8002040:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U, pllvco = 0U, pllp = 0U;
 8002042:	2300      	movs	r3, #0
 8002044:	607b      	str	r3, [r7, #4]
 8002046:	2300      	movs	r3, #0
 8002048:	60fb      	str	r3, [r7, #12]
 800204a:	2300      	movs	r3, #0
 800204c:	603b      	str	r3, [r7, #0]
  uint32_t sysclockfreq = 0U;
 800204e:	2300      	movs	r3, #0
 8002050:	60bb      	str	r3, [r7, #8]

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 8002052:	4b63      	ldr	r3, [pc, #396]	; (80021e0 <HAL_RCC_GetSysClockFreq+0x1a4>)
 8002054:	689b      	ldr	r3, [r3, #8]
 8002056:	f003 030c 	and.w	r3, r3, #12
 800205a:	2b04      	cmp	r3, #4
 800205c:	d007      	beq.n	800206e <HAL_RCC_GetSysClockFreq+0x32>
 800205e:	2b08      	cmp	r3, #8
 8002060:	d008      	beq.n	8002074 <HAL_RCC_GetSysClockFreq+0x38>
 8002062:	2b00      	cmp	r3, #0
 8002064:	f040 80b4 	bne.w	80021d0 <HAL_RCC_GetSysClockFreq+0x194>
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 8002068:	4b5e      	ldr	r3, [pc, #376]	; (80021e4 <HAL_RCC_GetSysClockFreq+0x1a8>)
 800206a:	60bb      	str	r3, [r7, #8]
       break;
 800206c:	e0b3      	b.n	80021d6 <HAL_RCC_GetSysClockFreq+0x19a>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 800206e:	4b5e      	ldr	r3, [pc, #376]	; (80021e8 <HAL_RCC_GetSysClockFreq+0x1ac>)
 8002070:	60bb      	str	r3, [r7, #8]
      break;
 8002072:	e0b0      	b.n	80021d6 <HAL_RCC_GetSysClockFreq+0x19a>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8002074:	4b5a      	ldr	r3, [pc, #360]	; (80021e0 <HAL_RCC_GetSysClockFreq+0x1a4>)
 8002076:	685b      	ldr	r3, [r3, #4]
 8002078:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 800207c:	607b      	str	r3, [r7, #4]
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 800207e:	4b58      	ldr	r3, [pc, #352]	; (80021e0 <HAL_RCC_GetSysClockFreq+0x1a4>)
 8002080:	685b      	ldr	r3, [r3, #4]
 8002082:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8002086:	2b00      	cmp	r3, #0
 8002088:	d04a      	beq.n	8002120 <HAL_RCC_GetSysClockFreq+0xe4>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 800208a:	4b55      	ldr	r3, [pc, #340]	; (80021e0 <HAL_RCC_GetSysClockFreq+0x1a4>)
 800208c:	685b      	ldr	r3, [r3, #4]
 800208e:	099b      	lsrs	r3, r3, #6
 8002090:	f04f 0400 	mov.w	r4, #0
 8002094:	f240 11ff 	movw	r1, #511	; 0x1ff
 8002098:	f04f 0200 	mov.w	r2, #0
 800209c:	ea03 0501 	and.w	r5, r3, r1
 80020a0:	ea04 0602 	and.w	r6, r4, r2
 80020a4:	4629      	mov	r1, r5
 80020a6:	4632      	mov	r2, r6
 80020a8:	f04f 0300 	mov.w	r3, #0
 80020ac:	f04f 0400 	mov.w	r4, #0
 80020b0:	0154      	lsls	r4, r2, #5
 80020b2:	ea44 64d1 	orr.w	r4, r4, r1, lsr #27
 80020b6:	014b      	lsls	r3, r1, #5
 80020b8:	4619      	mov	r1, r3
 80020ba:	4622      	mov	r2, r4
 80020bc:	1b49      	subs	r1, r1, r5
 80020be:	eb62 0206 	sbc.w	r2, r2, r6
 80020c2:	f04f 0300 	mov.w	r3, #0
 80020c6:	f04f 0400 	mov.w	r4, #0
 80020ca:	0194      	lsls	r4, r2, #6
 80020cc:	ea44 6491 	orr.w	r4, r4, r1, lsr #26
 80020d0:	018b      	lsls	r3, r1, #6
 80020d2:	1a5b      	subs	r3, r3, r1
 80020d4:	eb64 0402 	sbc.w	r4, r4, r2
 80020d8:	f04f 0100 	mov.w	r1, #0
 80020dc:	f04f 0200 	mov.w	r2, #0
 80020e0:	00e2      	lsls	r2, r4, #3
 80020e2:	ea42 7253 	orr.w	r2, r2, r3, lsr #29
 80020e6:	00d9      	lsls	r1, r3, #3
 80020e8:	460b      	mov	r3, r1
 80020ea:	4614      	mov	r4, r2
 80020ec:	195b      	adds	r3, r3, r5
 80020ee:	eb44 0406 	adc.w	r4, r4, r6
 80020f2:	f04f 0100 	mov.w	r1, #0
 80020f6:	f04f 0200 	mov.w	r2, #0
 80020fa:	0262      	lsls	r2, r4, #9
 80020fc:	ea42 52d3 	orr.w	r2, r2, r3, lsr #23
 8002100:	0259      	lsls	r1, r3, #9
 8002102:	460b      	mov	r3, r1
 8002104:	4614      	mov	r4, r2
 8002106:	4618      	mov	r0, r3
 8002108:	4621      	mov	r1, r4
 800210a:	687b      	ldr	r3, [r7, #4]
 800210c:	f04f 0400 	mov.w	r4, #0
 8002110:	461a      	mov	r2, r3
 8002112:	4623      	mov	r3, r4
 8002114:	f7fe f858 	bl	80001c8 <__aeabi_uldivmod>
 8002118:	4603      	mov	r3, r0
 800211a:	460c      	mov	r4, r1
 800211c:	60fb      	str	r3, [r7, #12]
 800211e:	e049      	b.n	80021b4 <HAL_RCC_GetSysClockFreq+0x178>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8002120:	4b2f      	ldr	r3, [pc, #188]	; (80021e0 <HAL_RCC_GetSysClockFreq+0x1a4>)
 8002122:	685b      	ldr	r3, [r3, #4]
 8002124:	099b      	lsrs	r3, r3, #6
 8002126:	f04f 0400 	mov.w	r4, #0
 800212a:	f240 11ff 	movw	r1, #511	; 0x1ff
 800212e:	f04f 0200 	mov.w	r2, #0
 8002132:	ea03 0501 	and.w	r5, r3, r1
 8002136:	ea04 0602 	and.w	r6, r4, r2
 800213a:	4629      	mov	r1, r5
 800213c:	4632      	mov	r2, r6
 800213e:	f04f 0300 	mov.w	r3, #0
 8002142:	f04f 0400 	mov.w	r4, #0
 8002146:	0154      	lsls	r4, r2, #5
 8002148:	ea44 64d1 	orr.w	r4, r4, r1, lsr #27
 800214c:	014b      	lsls	r3, r1, #5
 800214e:	4619      	mov	r1, r3
 8002150:	4622      	mov	r2, r4
 8002152:	1b49      	subs	r1, r1, r5
 8002154:	eb62 0206 	sbc.w	r2, r2, r6
 8002158:	f04f 0300 	mov.w	r3, #0
 800215c:	f04f 0400 	mov.w	r4, #0
 8002160:	0194      	lsls	r4, r2, #6
 8002162:	ea44 6491 	orr.w	r4, r4, r1, lsr #26
 8002166:	018b      	lsls	r3, r1, #6
 8002168:	1a5b      	subs	r3, r3, r1
 800216a:	eb64 0402 	sbc.w	r4, r4, r2
 800216e:	f04f 0100 	mov.w	r1, #0
 8002172:	f04f 0200 	mov.w	r2, #0
 8002176:	00e2      	lsls	r2, r4, #3
 8002178:	ea42 7253 	orr.w	r2, r2, r3, lsr #29
 800217c:	00d9      	lsls	r1, r3, #3
 800217e:	460b      	mov	r3, r1
 8002180:	4614      	mov	r4, r2
 8002182:	195b      	adds	r3, r3, r5
 8002184:	eb44 0406 	adc.w	r4, r4, r6
 8002188:	f04f 0100 	mov.w	r1, #0
 800218c:	f04f 0200 	mov.w	r2, #0
 8002190:	02a2      	lsls	r2, r4, #10
 8002192:	ea42 5293 	orr.w	r2, r2, r3, lsr #22
 8002196:	0299      	lsls	r1, r3, #10
 8002198:	460b      	mov	r3, r1
 800219a:	4614      	mov	r4, r2
 800219c:	4618      	mov	r0, r3
 800219e:	4621      	mov	r1, r4
 80021a0:	687b      	ldr	r3, [r7, #4]
 80021a2:	f04f 0400 	mov.w	r4, #0
 80021a6:	461a      	mov	r2, r3
 80021a8:	4623      	mov	r3, r4
 80021aa:	f7fe f80d 	bl	80001c8 <__aeabi_uldivmod>
 80021ae:	4603      	mov	r3, r0
 80021b0:	460c      	mov	r4, r1
 80021b2:	60fb      	str	r3, [r7, #12]
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) *2U);
 80021b4:	4b0a      	ldr	r3, [pc, #40]	; (80021e0 <HAL_RCC_GetSysClockFreq+0x1a4>)
 80021b6:	685b      	ldr	r3, [r3, #4]
 80021b8:	0c1b      	lsrs	r3, r3, #16
 80021ba:	f003 0303 	and.w	r3, r3, #3
 80021be:	3301      	adds	r3, #1
 80021c0:	005b      	lsls	r3, r3, #1
 80021c2:	603b      	str	r3, [r7, #0]

      sysclockfreq = pllvco/pllp;
 80021c4:	68fa      	ldr	r2, [r7, #12]
 80021c6:	683b      	ldr	r3, [r7, #0]
 80021c8:	fbb2 f3f3 	udiv	r3, r2, r3
 80021cc:	60bb      	str	r3, [r7, #8]
      break;
 80021ce:	e002      	b.n	80021d6 <HAL_RCC_GetSysClockFreq+0x19a>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 80021d0:	4b04      	ldr	r3, [pc, #16]	; (80021e4 <HAL_RCC_GetSysClockFreq+0x1a8>)
 80021d2:	60bb      	str	r3, [r7, #8]
      break;
 80021d4:	bf00      	nop
    }
  }
  return sysclockfreq;
 80021d6:	68bb      	ldr	r3, [r7, #8]
}
 80021d8:	4618      	mov	r0, r3
 80021da:	3714      	adds	r7, #20
 80021dc:	46bd      	mov	sp, r7
 80021de:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80021e0:	40023800 	.word	0x40023800
 80021e4:	00f42400 	.word	0x00f42400
 80021e8:	007a1200 	.word	0x007a1200

080021ec <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 80021ec:	b480      	push	{r7}
 80021ee:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 80021f0:	4b03      	ldr	r3, [pc, #12]	; (8002200 <HAL_RCC_GetHCLKFreq+0x14>)
 80021f2:	681b      	ldr	r3, [r3, #0]
}
 80021f4:	4618      	mov	r0, r3
 80021f6:	46bd      	mov	sp, r7
 80021f8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80021fc:	4770      	bx	lr
 80021fe:	bf00      	nop
 8002200:	20000008 	.word	0x20000008

08002204 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8002204:	b580      	push	{r7, lr}
 8002206:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1)>> RCC_CFGR_PPRE1_Pos]);
 8002208:	f7ff fff0 	bl	80021ec <HAL_RCC_GetHCLKFreq>
 800220c:	4601      	mov	r1, r0
 800220e:	4b05      	ldr	r3, [pc, #20]	; (8002224 <HAL_RCC_GetPCLK1Freq+0x20>)
 8002210:	689b      	ldr	r3, [r3, #8]
 8002212:	0a9b      	lsrs	r3, r3, #10
 8002214:	f003 0307 	and.w	r3, r3, #7
 8002218:	4a03      	ldr	r2, [pc, #12]	; (8002228 <HAL_RCC_GetPCLK1Freq+0x24>)
 800221a:	5cd3      	ldrb	r3, [r2, r3]
 800221c:	fa21 f303 	lsr.w	r3, r1, r3
}
 8002220:	4618      	mov	r0, r3
 8002222:	bd80      	pop	{r7, pc}
 8002224:	40023800 	.word	0x40023800
 8002228:	080027c0 	.word	0x080027c0

0800222c <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 800222c:	b580      	push	{r7, lr}
 800222e:	af00      	add	r7, sp, #0
  

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8002230:	f7fe f94a 	bl	80004c8 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8002234:	f000 f82e 	bl	8002294 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8002238:	f000 f8c4 	bl	80023c4 <MX_GPIO_Init>
  MX_I2C1_Init();
 800223c:	f000 f894 	bl	8002368 <MX_I2C1_Init>
  /* USER CODE BEGIN 2 */

  //SCAN_I2C_Slave_Address();

  ADXL_Init();
 8002240:	f000 f912 	bl	8002468 <ADXL_Init>
  while (1)
  {
    /* USER CODE END WHILE */

    /* USER CODE BEGIN 3 */
	  status = ADXL_Read(0x30, 1);	// interrupt source register(0x30)
 8002244:	2101      	movs	r1, #1
 8002246:	2030      	movs	r0, #48	; 0x30
 8002248:	f000 f936 	bl	80024b8 <ADXL_Read>
 800224c:	4603      	mov	r3, r0
 800224e:	461a      	mov	r2, r3
 8002250:	4b0e      	ldr	r3, [pc, #56]	; (800228c <main+0x60>)
 8002252:	701a      	strb	r2, [r3, #0]

	  if((status >> 5) & 0x01)
 8002254:	4b0d      	ldr	r3, [pc, #52]	; (800228c <main+0x60>)
 8002256:	781b      	ldrb	r3, [r3, #0]
 8002258:	095b      	lsrs	r3, r3, #5
 800225a:	b2db      	uxtb	r3, r3
 800225c:	f003 0301 	and.w	r3, r3, #1
 8002260:	2b00      	cmp	r3, #0
 8002262:	d005      	beq.n	8002270 <main+0x44>
	  {
		  // Double tap
		  HAL_GPIO_TogglePin(GPIOD, GPIO_PIN_13 | GPIO_PIN_15);
 8002264:	f44f 4120 	mov.w	r1, #40960	; 0xa000
 8002268:	4809      	ldr	r0, [pc, #36]	; (8002290 <main+0x64>)
 800226a:	f7fe fc38 	bl	8000ade <HAL_GPIO_TogglePin>
 800226e:	e7e9      	b.n	8002244 <main+0x18>
	  }
	  else if((status >> 6) & 0x01)
 8002270:	4b06      	ldr	r3, [pc, #24]	; (800228c <main+0x60>)
 8002272:	781b      	ldrb	r3, [r3, #0]
 8002274:	099b      	lsrs	r3, r3, #6
 8002276:	b2db      	uxtb	r3, r3
 8002278:	f003 0301 	and.w	r3, r3, #1
 800227c:	2b00      	cmp	r3, #0
 800227e:	d0e1      	beq.n	8002244 <main+0x18>
	  {
		  // Single tap
		  HAL_GPIO_TogglePin(GPIOD, GPIO_PIN_12 | GPIO_PIN_14);
 8002280:	f44f 41a0 	mov.w	r1, #20480	; 0x5000
 8002284:	4802      	ldr	r0, [pc, #8]	; (8002290 <main+0x64>)
 8002286:	f7fe fc2a 	bl	8000ade <HAL_GPIO_TogglePin>
	  status = ADXL_Read(0x30, 1);	// interrupt source register(0x30)
 800228a:	e7db      	b.n	8002244 <main+0x18>
 800228c:	20000082 	.word	0x20000082
 8002290:	40020c00 	.word	0x40020c00

08002294 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8002294:	b580      	push	{r7, lr}
 8002296:	b094      	sub	sp, #80	; 0x50
 8002298:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 800229a:	f107 0320 	add.w	r3, r7, #32
 800229e:	2230      	movs	r2, #48	; 0x30
 80022a0:	2100      	movs	r1, #0
 80022a2:	4618      	mov	r0, r3
 80022a4:	f000 fa70 	bl	8002788 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 80022a8:	f107 030c 	add.w	r3, r7, #12
 80022ac:	2200      	movs	r2, #0
 80022ae:	601a      	str	r2, [r3, #0]
 80022b0:	605a      	str	r2, [r3, #4]
 80022b2:	609a      	str	r2, [r3, #8]
 80022b4:	60da      	str	r2, [r3, #12]
 80022b6:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage 
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 80022b8:	2300      	movs	r3, #0
 80022ba:	60bb      	str	r3, [r7, #8]
 80022bc:	4b28      	ldr	r3, [pc, #160]	; (8002360 <SystemClock_Config+0xcc>)
 80022be:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80022c0:	4a27      	ldr	r2, [pc, #156]	; (8002360 <SystemClock_Config+0xcc>)
 80022c2:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80022c6:	6413      	str	r3, [r2, #64]	; 0x40
 80022c8:	4b25      	ldr	r3, [pc, #148]	; (8002360 <SystemClock_Config+0xcc>)
 80022ca:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80022cc:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80022d0:	60bb      	str	r3, [r7, #8]
 80022d2:	68bb      	ldr	r3, [r7, #8]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 80022d4:	2300      	movs	r3, #0
 80022d6:	607b      	str	r3, [r7, #4]
 80022d8:	4b22      	ldr	r3, [pc, #136]	; (8002364 <SystemClock_Config+0xd0>)
 80022da:	681b      	ldr	r3, [r3, #0]
 80022dc:	4a21      	ldr	r2, [pc, #132]	; (8002364 <SystemClock_Config+0xd0>)
 80022de:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 80022e2:	6013      	str	r3, [r2, #0]
 80022e4:	4b1f      	ldr	r3, [pc, #124]	; (8002364 <SystemClock_Config+0xd0>)
 80022e6:	681b      	ldr	r3, [r3, #0]
 80022e8:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80022ec:	607b      	str	r3, [r7, #4]
 80022ee:	687b      	ldr	r3, [r7, #4]
  /** Initializes the CPU, AHB and APB busses clocks 
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 80022f0:	2301      	movs	r3, #1
 80022f2:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 80022f4:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 80022f8:	627b      	str	r3, [r7, #36]	; 0x24
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 80022fa:	2302      	movs	r3, #2
 80022fc:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 80022fe:	f44f 0380 	mov.w	r3, #4194304	; 0x400000
 8002302:	63fb      	str	r3, [r7, #60]	; 0x3c
  RCC_OscInitStruct.PLL.PLLM = 4;
 8002304:	2304      	movs	r3, #4
 8002306:	643b      	str	r3, [r7, #64]	; 0x40
  RCC_OscInitStruct.PLL.PLLN = 168;
 8002308:	23a8      	movs	r3, #168	; 0xa8
 800230a:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 800230c:	2302      	movs	r3, #2
 800230e:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLQ = 4;
 8002310:	2304      	movs	r3, #4
 8002312:	64fb      	str	r3, [r7, #76]	; 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8002314:	f107 0320 	add.w	r3, r7, #32
 8002318:	4618      	mov	r0, r3
 800231a:	f7ff fb6b 	bl	80019f4 <HAL_RCC_OscConfig>
 800231e:	4603      	mov	r3, r0
 8002320:	2b00      	cmp	r3, #0
 8002322:	d001      	beq.n	8002328 <SystemClock_Config+0x94>
  {
    Error_Handler();
 8002324:	f000 f906 	bl	8002534 <Error_Handler>
  }
  /** Initializes the CPU, AHB and APB busses clocks 
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8002328:	230f      	movs	r3, #15
 800232a:	60fb      	str	r3, [r7, #12]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 800232c:	2302      	movs	r3, #2
 800232e:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8002330:	2300      	movs	r3, #0
 8002332:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV4;
 8002334:	f44f 53a0 	mov.w	r3, #5120	; 0x1400
 8002338:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV2;
 800233a:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 800233e:	61fb      	str	r3, [r7, #28]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_5) != HAL_OK)
 8002340:	f107 030c 	add.w	r3, r7, #12
 8002344:	2105      	movs	r1, #5
 8002346:	4618      	mov	r0, r3
 8002348:	f7ff fd96 	bl	8001e78 <HAL_RCC_ClockConfig>
 800234c:	4603      	mov	r3, r0
 800234e:	2b00      	cmp	r3, #0
 8002350:	d001      	beq.n	8002356 <SystemClock_Config+0xc2>
  {
    Error_Handler();
 8002352:	f000 f8ef 	bl	8002534 <Error_Handler>
  }
}
 8002356:	bf00      	nop
 8002358:	3750      	adds	r7, #80	; 0x50
 800235a:	46bd      	mov	sp, r7
 800235c:	bd80      	pop	{r7, pc}
 800235e:	bf00      	nop
 8002360:	40023800 	.word	0x40023800
 8002364:	40007000 	.word	0x40007000

08002368 <MX_I2C1_Init>:
  * @brief I2C1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_I2C1_Init(void)
{
 8002368:	b580      	push	{r7, lr}
 800236a:	af00      	add	r7, sp, #0
  /* USER CODE END I2C1_Init 0 */

  /* USER CODE BEGIN I2C1_Init 1 */

  /* USER CODE END I2C1_Init 1 */
  hi2c1.Instance = I2C1;
 800236c:	4b12      	ldr	r3, [pc, #72]	; (80023b8 <MX_I2C1_Init+0x50>)
 800236e:	4a13      	ldr	r2, [pc, #76]	; (80023bc <MX_I2C1_Init+0x54>)
 8002370:	601a      	str	r2, [r3, #0]
  hi2c1.Init.ClockSpeed = 100000;
 8002372:	4b11      	ldr	r3, [pc, #68]	; (80023b8 <MX_I2C1_Init+0x50>)
 8002374:	4a12      	ldr	r2, [pc, #72]	; (80023c0 <MX_I2C1_Init+0x58>)
 8002376:	605a      	str	r2, [r3, #4]
  hi2c1.Init.DutyCycle = I2C_DUTYCYCLE_2;
 8002378:	4b0f      	ldr	r3, [pc, #60]	; (80023b8 <MX_I2C1_Init+0x50>)
 800237a:	2200      	movs	r2, #0
 800237c:	609a      	str	r2, [r3, #8]
  hi2c1.Init.OwnAddress1 = 0;
 800237e:	4b0e      	ldr	r3, [pc, #56]	; (80023b8 <MX_I2C1_Init+0x50>)
 8002380:	2200      	movs	r2, #0
 8002382:	60da      	str	r2, [r3, #12]
  hi2c1.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 8002384:	4b0c      	ldr	r3, [pc, #48]	; (80023b8 <MX_I2C1_Init+0x50>)
 8002386:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 800238a:	611a      	str	r2, [r3, #16]
  hi2c1.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 800238c:	4b0a      	ldr	r3, [pc, #40]	; (80023b8 <MX_I2C1_Init+0x50>)
 800238e:	2200      	movs	r2, #0
 8002390:	615a      	str	r2, [r3, #20]
  hi2c1.Init.OwnAddress2 = 0;
 8002392:	4b09      	ldr	r3, [pc, #36]	; (80023b8 <MX_I2C1_Init+0x50>)
 8002394:	2200      	movs	r2, #0
 8002396:	619a      	str	r2, [r3, #24]
  hi2c1.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 8002398:	4b07      	ldr	r3, [pc, #28]	; (80023b8 <MX_I2C1_Init+0x50>)
 800239a:	2200      	movs	r2, #0
 800239c:	61da      	str	r2, [r3, #28]
  hi2c1.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 800239e:	4b06      	ldr	r3, [pc, #24]	; (80023b8 <MX_I2C1_Init+0x50>)
 80023a0:	2200      	movs	r2, #0
 80023a2:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c1) != HAL_OK)
 80023a4:	4804      	ldr	r0, [pc, #16]	; (80023b8 <MX_I2C1_Init+0x50>)
 80023a6:	f7fe fbb5 	bl	8000b14 <HAL_I2C_Init>
 80023aa:	4603      	mov	r3, r0
 80023ac:	2b00      	cmp	r3, #0
 80023ae:	d001      	beq.n	80023b4 <MX_I2C1_Init+0x4c>
  {
    Error_Handler();
 80023b0:	f000 f8c0 	bl	8002534 <Error_Handler>
  }
  /* USER CODE BEGIN I2C1_Init 2 */

  /* USER CODE END I2C1_Init 2 */

}
 80023b4:	bf00      	nop
 80023b6:	bd80      	pop	{r7, pc}
 80023b8:	2000002c 	.word	0x2000002c
 80023bc:	40005400 	.word	0x40005400
 80023c0:	000186a0 	.word	0x000186a0

080023c4 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 80023c4:	b580      	push	{r7, lr}
 80023c6:	b088      	sub	sp, #32
 80023c8:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80023ca:	f107 030c 	add.w	r3, r7, #12
 80023ce:	2200      	movs	r2, #0
 80023d0:	601a      	str	r2, [r3, #0]
 80023d2:	605a      	str	r2, [r3, #4]
 80023d4:	609a      	str	r2, [r3, #8]
 80023d6:	60da      	str	r2, [r3, #12]
 80023d8:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOH_CLK_ENABLE();
 80023da:	2300      	movs	r3, #0
 80023dc:	60bb      	str	r3, [r7, #8]
 80023de:	4b20      	ldr	r3, [pc, #128]	; (8002460 <MX_GPIO_Init+0x9c>)
 80023e0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80023e2:	4a1f      	ldr	r2, [pc, #124]	; (8002460 <MX_GPIO_Init+0x9c>)
 80023e4:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80023e8:	6313      	str	r3, [r2, #48]	; 0x30
 80023ea:	4b1d      	ldr	r3, [pc, #116]	; (8002460 <MX_GPIO_Init+0x9c>)
 80023ec:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80023ee:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80023f2:	60bb      	str	r3, [r7, #8]
 80023f4:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 80023f6:	2300      	movs	r3, #0
 80023f8:	607b      	str	r3, [r7, #4]
 80023fa:	4b19      	ldr	r3, [pc, #100]	; (8002460 <MX_GPIO_Init+0x9c>)
 80023fc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80023fe:	4a18      	ldr	r2, [pc, #96]	; (8002460 <MX_GPIO_Init+0x9c>)
 8002400:	f043 0308 	orr.w	r3, r3, #8
 8002404:	6313      	str	r3, [r2, #48]	; 0x30
 8002406:	4b16      	ldr	r3, [pc, #88]	; (8002460 <MX_GPIO_Init+0x9c>)
 8002408:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800240a:	f003 0308 	and.w	r3, r3, #8
 800240e:	607b      	str	r3, [r7, #4]
 8002410:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8002412:	2300      	movs	r3, #0
 8002414:	603b      	str	r3, [r7, #0]
 8002416:	4b12      	ldr	r3, [pc, #72]	; (8002460 <MX_GPIO_Init+0x9c>)
 8002418:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800241a:	4a11      	ldr	r2, [pc, #68]	; (8002460 <MX_GPIO_Init+0x9c>)
 800241c:	f043 0302 	orr.w	r3, r3, #2
 8002420:	6313      	str	r3, [r2, #48]	; 0x30
 8002422:	4b0f      	ldr	r3, [pc, #60]	; (8002460 <MX_GPIO_Init+0x9c>)
 8002424:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002426:	f003 0302 	and.w	r3, r3, #2
 800242a:	603b      	str	r3, [r7, #0]
 800242c:	683b      	ldr	r3, [r7, #0]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOD, GPIO_PIN_12|GPIO_PIN_13|GPIO_PIN_14|GPIO_PIN_15, GPIO_PIN_RESET);
 800242e:	2200      	movs	r2, #0
 8002430:	f44f 4170 	mov.w	r1, #61440	; 0xf000
 8002434:	480b      	ldr	r0, [pc, #44]	; (8002464 <MX_GPIO_Init+0xa0>)
 8002436:	f7fe fb39 	bl	8000aac <HAL_GPIO_WritePin>

  /*Configure GPIO pins : PD12 PD13 PD14 PD15 */
  GPIO_InitStruct.Pin = GPIO_PIN_12|GPIO_PIN_13|GPIO_PIN_14|GPIO_PIN_15;
 800243a:	f44f 4370 	mov.w	r3, #61440	; 0xf000
 800243e:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8002440:	2301      	movs	r3, #1
 8002442:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002444:	2300      	movs	r3, #0
 8002446:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002448:	2300      	movs	r3, #0
 800244a:	61bb      	str	r3, [r7, #24]
  HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 800244c:	f107 030c 	add.w	r3, r7, #12
 8002450:	4619      	mov	r1, r3
 8002452:	4804      	ldr	r0, [pc, #16]	; (8002464 <MX_GPIO_Init+0xa0>)
 8002454:	f7fe f990 	bl	8000778 <HAL_GPIO_Init>

}
 8002458:	bf00      	nop
 800245a:	3720      	adds	r7, #32
 800245c:	46bd      	mov	sp, r7
 800245e:	bd80      	pop	{r7, pc}
 8002460:	40023800 	.word	0x40023800
 8002464:	40020c00 	.word	0x40020c00

08002468 <ADXL_Init>:
		}
	}
}

void ADXL_Init()
{
 8002468:	b580      	push	{r7, lr}
 800246a:	af00      	add	r7, sp, #0
	// Sensör doğru çalışıyormu diye DEVID kontrol bitindeki veriyi çekip, normalde olması gerekn 0xE5 değerine eşit olup olmadığını kontol ediyorum.
	//uint8_t a = ADXL_Read(0x00, 1);

	// Sensörden değer okuma işlemini başlatmak için öncelikle Power_Ctrl bitlerini resetliyorum
	ADXL_Write(0x2D, 0);
 800246c:	2100      	movs	r1, #0
 800246e:	202d      	movs	r0, #45	; 0x2d
 8002470:	f000 f844 	bl	80024fc <ADXL_Write>

	// Sensörün ölçüm bitini set, wake up bitini reset ve frekansını 8Mhz'e ayarlayarak ölçüm yapmaya hazır hale getiriyorum
	ADXL_Write(0x2D, 0x08);
 8002474:	2108      	movs	r1, #8
 8002476:	202d      	movs	r0, #45	; 0x2d
 8002478:	f000 f840 	bl	80024fc <ADXL_Write>

	// Z eksenini basma algılama için etkinleştiriyorum
	ADXL_Write(0x2A, 0x01);
 800247c:	2101      	movs	r1, #1
 800247e:	202a      	movs	r0, #42	; 0x2a
 8002480:	f000 f83c 	bl	80024fc <ADXL_Write>

	// Tek basma eşiğini ayarlıyorum. Gireceğiniz değer ile 62.5mg/LSB çarpılarak g değeri hesaplanır. Örneğin 40*0.0625 = 2.5g
	ADXL_Write(0x1D, 40);
 8002484:	2128      	movs	r1, #40	; 0x28
 8002486:	201d      	movs	r0, #29
 8002488:	f000 f838 	bl	80024fc <ADXL_Write>

	// Tek basma süresini ayarlıyorum. Gireceğiniz değer ile 625uS/LSB çarpılarak eşik süresi ayarlanır. Örneğin 32*0.000625 = 0.02s
	// bu değer gelen bir etkileşimin dokunma etkileşimi olması için geçmesi gereken maksimum süreyi belirler. DUR register'a yazılır.
	ADXL_Write(0x21, 32);
 800248c:	2120      	movs	r1, #32
 800248e:	2021      	movs	r0, #33	; 0x21
 8002490:	f000 f834 	bl	80024fc <ADXL_Write>

	// Dokunma gecikmesini ayarlıyorum. 0.1sn'ye ayarlıyorum. Girilen değeri, 1.25ms/LSB ile çarparak gecikme süresi elde edilir. 80*0.00125
	ADXL_Write(0x22, 80);
 8002494:	2150      	movs	r1, #80	; 0x50
 8002496:	2022      	movs	r0, #34	; 0x22
 8002498:	f000 f830 	bl	80024fc <ADXL_Write>

	// Dokunma penceresi, WINDIW register'a 240 yazarak 0.3sn'ye ayarlıyorum. (.3 / .00125) Bu değer ikinci bir basmanın olabileceği, gecikme
	// süresinin sona ermesinden sonra geçen süreyi temsil eder.
	ADXL_Write(0x23, 240);
 800249c:	21f0      	movs	r1, #240	; 0xf0
 800249e:	2023      	movs	r0, #35	; 0x23
 80024a0:	f000 f82c 	bl	80024fc <ADXL_Write>

	// INT1 pinini INT_MAP Register'a 0 yazarak etkinleştiriyorum.
	ADXL_Write(0x2F, 0x00);
 80024a4:	2100      	movs	r1, #0
 80024a6:	202f      	movs	r0, #47	; 0x2f
 80024a8:	f000 f828 	bl	80024fc <ADXL_Write>

	// int enable reg
	ADXL_Write(0x2E, 0x60);	// Double Tap
 80024ac:	2160      	movs	r1, #96	; 0x60
 80024ae:	202e      	movs	r0, #46	; 0x2e
 80024b0:	f000 f824 	bl	80024fc <ADXL_Write>
}
 80024b4:	bf00      	nop
 80024b6:	bd80      	pop	{r7, pc}

080024b8 <ADXL_Read>:

uint8_t ADXL_Read(uint8_t reg, uint8_t numberOfBytes)
{
 80024b8:	b580      	push	{r7, lr}
 80024ba:	b086      	sub	sp, #24
 80024bc:	af04      	add	r7, sp, #16
 80024be:	4603      	mov	r3, r0
 80024c0:	460a      	mov	r2, r1
 80024c2:	71fb      	strb	r3, [r7, #7]
 80024c4:	4613      	mov	r3, r2
 80024c6:	71bb      	strb	r3, [r7, #6]
	HAL_I2C_Mem_Read(&hi2c1, ADXL_Address, reg, 1, &data_rec, numberOfBytes, 100);
 80024c8:	79fb      	ldrb	r3, [r7, #7]
 80024ca:	b299      	uxth	r1, r3
 80024cc:	79bb      	ldrb	r3, [r7, #6]
 80024ce:	b29b      	uxth	r3, r3
 80024d0:	2264      	movs	r2, #100	; 0x64
 80024d2:	9202      	str	r2, [sp, #8]
 80024d4:	9301      	str	r3, [sp, #4]
 80024d6:	4b07      	ldr	r3, [pc, #28]	; (80024f4 <ADXL_Read+0x3c>)
 80024d8:	9300      	str	r3, [sp, #0]
 80024da:	2301      	movs	r3, #1
 80024dc:	460a      	mov	r2, r1
 80024de:	21a6      	movs	r1, #166	; 0xa6
 80024e0:	4805      	ldr	r0, [pc, #20]	; (80024f8 <ADXL_Read+0x40>)
 80024e2:	f7fe fd3d 	bl	8000f60 <HAL_I2C_Mem_Read>
	return data_rec;
 80024e6:	4b03      	ldr	r3, [pc, #12]	; (80024f4 <ADXL_Read+0x3c>)
 80024e8:	781b      	ldrb	r3, [r3, #0]
}
 80024ea:	4618      	mov	r0, r3
 80024ec:	3708      	adds	r7, #8
 80024ee:	46bd      	mov	sp, r7
 80024f0:	bd80      	pop	{r7, pc}
 80024f2:	bf00      	nop
 80024f4:	20000081 	.word	0x20000081
 80024f8:	2000002c 	.word	0x2000002c

080024fc <ADXL_Write>:

void ADXL_Write(uint8_t reg, uint8_t value)
{
 80024fc:	b580      	push	{r7, lr}
 80024fe:	b086      	sub	sp, #24
 8002500:	af02      	add	r7, sp, #8
 8002502:	4603      	mov	r3, r0
 8002504:	460a      	mov	r2, r1
 8002506:	71fb      	strb	r3, [r7, #7]
 8002508:	4613      	mov	r3, r2
 800250a:	71bb      	strb	r3, [r7, #6]
	uint8_t data[2];
	data[0] = reg;
 800250c:	79fb      	ldrb	r3, [r7, #7]
 800250e:	733b      	strb	r3, [r7, #12]
	data[1] = value;
 8002510:	79bb      	ldrb	r3, [r7, #6]
 8002512:	737b      	strb	r3, [r7, #13]

	HAL_I2C_Master_Transmit(&hi2c1, ADXL_Address, data, 2, 10);
 8002514:	f107 020c 	add.w	r2, r7, #12
 8002518:	230a      	movs	r3, #10
 800251a:	9300      	str	r3, [sp, #0]
 800251c:	2302      	movs	r3, #2
 800251e:	21a6      	movs	r1, #166	; 0xa6
 8002520:	4803      	ldr	r0, [pc, #12]	; (8002530 <ADXL_Write+0x34>)
 8002522:	f7fe fc1f 	bl	8000d64 <HAL_I2C_Master_Transmit>
}
 8002526:	bf00      	nop
 8002528:	3710      	adds	r7, #16
 800252a:	46bd      	mov	sp, r7
 800252c:	bd80      	pop	{r7, pc}
 800252e:	bf00      	nop
 8002530:	2000002c 	.word	0x2000002c

08002534 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8002534:	b480      	push	{r7}
 8002536:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */

  /* USER CODE END Error_Handler_Debug */
}
 8002538:	bf00      	nop
 800253a:	46bd      	mov	sp, r7
 800253c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002540:	4770      	bx	lr
	...

08002544 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8002544:	b480      	push	{r7}
 8002546:	b083      	sub	sp, #12
 8002548:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 800254a:	2300      	movs	r3, #0
 800254c:	607b      	str	r3, [r7, #4]
 800254e:	4b10      	ldr	r3, [pc, #64]	; (8002590 <HAL_MspInit+0x4c>)
 8002550:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002552:	4a0f      	ldr	r2, [pc, #60]	; (8002590 <HAL_MspInit+0x4c>)
 8002554:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8002558:	6453      	str	r3, [r2, #68]	; 0x44
 800255a:	4b0d      	ldr	r3, [pc, #52]	; (8002590 <HAL_MspInit+0x4c>)
 800255c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800255e:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8002562:	607b      	str	r3, [r7, #4]
 8002564:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8002566:	2300      	movs	r3, #0
 8002568:	603b      	str	r3, [r7, #0]
 800256a:	4b09      	ldr	r3, [pc, #36]	; (8002590 <HAL_MspInit+0x4c>)
 800256c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800256e:	4a08      	ldr	r2, [pc, #32]	; (8002590 <HAL_MspInit+0x4c>)
 8002570:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8002574:	6413      	str	r3, [r2, #64]	; 0x40
 8002576:	4b06      	ldr	r3, [pc, #24]	; (8002590 <HAL_MspInit+0x4c>)
 8002578:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800257a:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800257e:	603b      	str	r3, [r7, #0]
 8002580:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8002582:	bf00      	nop
 8002584:	370c      	adds	r7, #12
 8002586:	46bd      	mov	sp, r7
 8002588:	f85d 7b04 	ldr.w	r7, [sp], #4
 800258c:	4770      	bx	lr
 800258e:	bf00      	nop
 8002590:	40023800 	.word	0x40023800

08002594 <HAL_I2C_MspInit>:
* This function configures the hardware resources used in this example
* @param hi2c: I2C handle pointer
* @retval None
*/
void HAL_I2C_MspInit(I2C_HandleTypeDef* hi2c)
{
 8002594:	b580      	push	{r7, lr}
 8002596:	b08a      	sub	sp, #40	; 0x28
 8002598:	af00      	add	r7, sp, #0
 800259a:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800259c:	f107 0314 	add.w	r3, r7, #20
 80025a0:	2200      	movs	r2, #0
 80025a2:	601a      	str	r2, [r3, #0]
 80025a4:	605a      	str	r2, [r3, #4]
 80025a6:	609a      	str	r2, [r3, #8]
 80025a8:	60da      	str	r2, [r3, #12]
 80025aa:	611a      	str	r2, [r3, #16]
  if(hi2c->Instance==I2C1)
 80025ac:	687b      	ldr	r3, [r7, #4]
 80025ae:	681b      	ldr	r3, [r3, #0]
 80025b0:	4a19      	ldr	r2, [pc, #100]	; (8002618 <HAL_I2C_MspInit+0x84>)
 80025b2:	4293      	cmp	r3, r2
 80025b4:	d12b      	bne.n	800260e <HAL_I2C_MspInit+0x7a>
  {
  /* USER CODE BEGIN I2C1_MspInit 0 */

  /* USER CODE END I2C1_MspInit 0 */
  
    __HAL_RCC_GPIOB_CLK_ENABLE();
 80025b6:	2300      	movs	r3, #0
 80025b8:	613b      	str	r3, [r7, #16]
 80025ba:	4b18      	ldr	r3, [pc, #96]	; (800261c <HAL_I2C_MspInit+0x88>)
 80025bc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80025be:	4a17      	ldr	r2, [pc, #92]	; (800261c <HAL_I2C_MspInit+0x88>)
 80025c0:	f043 0302 	orr.w	r3, r3, #2
 80025c4:	6313      	str	r3, [r2, #48]	; 0x30
 80025c6:	4b15      	ldr	r3, [pc, #84]	; (800261c <HAL_I2C_MspInit+0x88>)
 80025c8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80025ca:	f003 0302 	and.w	r3, r3, #2
 80025ce:	613b      	str	r3, [r7, #16]
 80025d0:	693b      	ldr	r3, [r7, #16]
    /**I2C1 GPIO Configuration    
    PB6     ------> I2C1_SCL
    PB7     ------> I2C1_SDA 
    */
    GPIO_InitStruct.Pin = GPIO_PIN_6|GPIO_PIN_7;
 80025d2:	23c0      	movs	r3, #192	; 0xc0
 80025d4:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 80025d6:	2312      	movs	r3, #18
 80025d8:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_PULLUP;
 80025da:	2301      	movs	r3, #1
 80025dc:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80025de:	2303      	movs	r3, #3
 80025e0:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C1;
 80025e2:	2304      	movs	r3, #4
 80025e4:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80025e6:	f107 0314 	add.w	r3, r7, #20
 80025ea:	4619      	mov	r1, r3
 80025ec:	480c      	ldr	r0, [pc, #48]	; (8002620 <HAL_I2C_MspInit+0x8c>)
 80025ee:	f7fe f8c3 	bl	8000778 <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_I2C1_CLK_ENABLE();
 80025f2:	2300      	movs	r3, #0
 80025f4:	60fb      	str	r3, [r7, #12]
 80025f6:	4b09      	ldr	r3, [pc, #36]	; (800261c <HAL_I2C_MspInit+0x88>)
 80025f8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80025fa:	4a08      	ldr	r2, [pc, #32]	; (800261c <HAL_I2C_MspInit+0x88>)
 80025fc:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 8002600:	6413      	str	r3, [r2, #64]	; 0x40
 8002602:	4b06      	ldr	r3, [pc, #24]	; (800261c <HAL_I2C_MspInit+0x88>)
 8002604:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002606:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 800260a:	60fb      	str	r3, [r7, #12]
 800260c:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN I2C1_MspInit 1 */

  /* USER CODE END I2C1_MspInit 1 */
  }

}
 800260e:	bf00      	nop
 8002610:	3728      	adds	r7, #40	; 0x28
 8002612:	46bd      	mov	sp, r7
 8002614:	bd80      	pop	{r7, pc}
 8002616:	bf00      	nop
 8002618:	40005400 	.word	0x40005400
 800261c:	40023800 	.word	0x40023800
 8002620:	40020400 	.word	0x40020400

08002624 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8002624:	b480      	push	{r7}
 8002626:	af00      	add	r7, sp, #0

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */

  /* USER CODE END NonMaskableInt_IRQn 1 */
}
 8002628:	bf00      	nop
 800262a:	46bd      	mov	sp, r7
 800262c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002630:	4770      	bx	lr

08002632 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8002632:	b480      	push	{r7}
 8002634:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8002636:	e7fe      	b.n	8002636 <HardFault_Handler+0x4>

08002638 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8002638:	b480      	push	{r7}
 800263a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 800263c:	e7fe      	b.n	800263c <MemManage_Handler+0x4>

0800263e <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 800263e:	b480      	push	{r7}
 8002640:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8002642:	e7fe      	b.n	8002642 <BusFault_Handler+0x4>

08002644 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8002644:	b480      	push	{r7}
 8002646:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8002648:	e7fe      	b.n	8002648 <UsageFault_Handler+0x4>

0800264a <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 800264a:	b480      	push	{r7}
 800264c:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 800264e:	bf00      	nop
 8002650:	46bd      	mov	sp, r7
 8002652:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002656:	4770      	bx	lr

08002658 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8002658:	b480      	push	{r7}
 800265a:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 800265c:	bf00      	nop
 800265e:	46bd      	mov	sp, r7
 8002660:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002664:	4770      	bx	lr

08002666 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8002666:	b480      	push	{r7}
 8002668:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 800266a:	bf00      	nop
 800266c:	46bd      	mov	sp, r7
 800266e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002672:	4770      	bx	lr

08002674 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8002674:	b580      	push	{r7, lr}
 8002676:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8002678:	f7fd ff78 	bl	800056c <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 800267c:	bf00      	nop
 800267e:	bd80      	pop	{r7, pc}

08002680 <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8002680:	b480      	push	{r7}
 8002682:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8002684:	4b16      	ldr	r3, [pc, #88]	; (80026e0 <SystemInit+0x60>)
 8002686:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800268a:	4a15      	ldr	r2, [pc, #84]	; (80026e0 <SystemInit+0x60>)
 800268c:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8002690:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88
  #endif
  /* Reset the RCC clock configuration to the default reset state ------------*/
  /* Set HSION bit */
  RCC->CR |= (uint32_t)0x00000001;
 8002694:	4b13      	ldr	r3, [pc, #76]	; (80026e4 <SystemInit+0x64>)
 8002696:	681b      	ldr	r3, [r3, #0]
 8002698:	4a12      	ldr	r2, [pc, #72]	; (80026e4 <SystemInit+0x64>)
 800269a:	f043 0301 	orr.w	r3, r3, #1
 800269e:	6013      	str	r3, [r2, #0]

  /* Reset CFGR register */
  RCC->CFGR = 0x00000000;
 80026a0:	4b10      	ldr	r3, [pc, #64]	; (80026e4 <SystemInit+0x64>)
 80026a2:	2200      	movs	r2, #0
 80026a4:	609a      	str	r2, [r3, #8]

  /* Reset HSEON, CSSON and PLLON bits */
  RCC->CR &= (uint32_t)0xFEF6FFFF;
 80026a6:	4b0f      	ldr	r3, [pc, #60]	; (80026e4 <SystemInit+0x64>)
 80026a8:	681b      	ldr	r3, [r3, #0]
 80026aa:	4a0e      	ldr	r2, [pc, #56]	; (80026e4 <SystemInit+0x64>)
 80026ac:	f023 7384 	bic.w	r3, r3, #17301504	; 0x1080000
 80026b0:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80026b4:	6013      	str	r3, [r2, #0]

  /* Reset PLLCFGR register */
  RCC->PLLCFGR = 0x24003010;
 80026b6:	4b0b      	ldr	r3, [pc, #44]	; (80026e4 <SystemInit+0x64>)
 80026b8:	4a0b      	ldr	r2, [pc, #44]	; (80026e8 <SystemInit+0x68>)
 80026ba:	605a      	str	r2, [r3, #4]

  /* Reset HSEBYP bit */
  RCC->CR &= (uint32_t)0xFFFBFFFF;
 80026bc:	4b09      	ldr	r3, [pc, #36]	; (80026e4 <SystemInit+0x64>)
 80026be:	681b      	ldr	r3, [r3, #0]
 80026c0:	4a08      	ldr	r2, [pc, #32]	; (80026e4 <SystemInit+0x64>)
 80026c2:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 80026c6:	6013      	str	r3, [r2, #0]

  /* Disable all interrupts */
  RCC->CIR = 0x00000000;
 80026c8:	4b06      	ldr	r3, [pc, #24]	; (80026e4 <SystemInit+0x64>)
 80026ca:	2200      	movs	r2, #0
 80026cc:	60da      	str	r2, [r3, #12]

  /* Configure the Vector Table location add offset address ------------------*/
#ifdef VECT_TAB_SRAM
  SCB->VTOR = SRAM_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#else
  SCB->VTOR = FLASH_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal FLASH */
 80026ce:	4b04      	ldr	r3, [pc, #16]	; (80026e0 <SystemInit+0x60>)
 80026d0:	f04f 6200 	mov.w	r2, #134217728	; 0x8000000
 80026d4:	609a      	str	r2, [r3, #8]
#endif
}
 80026d6:	bf00      	nop
 80026d8:	46bd      	mov	sp, r7
 80026da:	f85d 7b04 	ldr.w	r7, [sp], #4
 80026de:	4770      	bx	lr
 80026e0:	e000ed00 	.word	0xe000ed00
 80026e4:	40023800 	.word	0x40023800
 80026e8:	24003010 	.word	0x24003010

080026ec <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack     /* set stack pointer */
 80026ec:	f8df d034 	ldr.w	sp, [pc, #52]	; 8002724 <LoopFillZerobss+0x14>

/* Copy the data segment initializers from flash to SRAM */  
  movs  r1, #0
 80026f0:	2100      	movs	r1, #0
  b  LoopCopyDataInit
 80026f2:	e003      	b.n	80026fc <LoopCopyDataInit>

080026f4 <CopyDataInit>:

CopyDataInit:
  ldr  r3, =_sidata
 80026f4:	4b0c      	ldr	r3, [pc, #48]	; (8002728 <LoopFillZerobss+0x18>)
  ldr  r3, [r3, r1]
 80026f6:	585b      	ldr	r3, [r3, r1]
  str  r3, [r0, r1]
 80026f8:	5043      	str	r3, [r0, r1]
  adds  r1, r1, #4
 80026fa:	3104      	adds	r1, #4

080026fc <LoopCopyDataInit>:
    
LoopCopyDataInit:
  ldr  r0, =_sdata
 80026fc:	480b      	ldr	r0, [pc, #44]	; (800272c <LoopFillZerobss+0x1c>)
  ldr  r3, =_edata
 80026fe:	4b0c      	ldr	r3, [pc, #48]	; (8002730 <LoopFillZerobss+0x20>)
  adds  r2, r0, r1
 8002700:	1842      	adds	r2, r0, r1
  cmp  r2, r3
 8002702:	429a      	cmp	r2, r3
  bcc  CopyDataInit
 8002704:	d3f6      	bcc.n	80026f4 <CopyDataInit>
  ldr  r2, =_sbss
 8002706:	4a0b      	ldr	r2, [pc, #44]	; (8002734 <LoopFillZerobss+0x24>)
  b  LoopFillZerobss
 8002708:	e002      	b.n	8002710 <LoopFillZerobss>

0800270a <FillZerobss>:
/* Zero fill the bss segment. */  
FillZerobss:
  movs  r3, #0
 800270a:	2300      	movs	r3, #0
  str  r3, [r2], #4
 800270c:	f842 3b04 	str.w	r3, [r2], #4

08002710 <LoopFillZerobss>:
    
LoopFillZerobss:
  ldr  r3, = _ebss
 8002710:	4b09      	ldr	r3, [pc, #36]	; (8002738 <LoopFillZerobss+0x28>)
  cmp  r2, r3
 8002712:	429a      	cmp	r2, r3
  bcc  FillZerobss
 8002714:	d3f9      	bcc.n	800270a <FillZerobss>

/* Call the clock system intitialization function.*/
  bl  SystemInit   
 8002716:	f7ff ffb3 	bl	8002680 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 800271a:	f000 f811 	bl	8002740 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 800271e:	f7ff fd85 	bl	800222c <main>
  bx  lr    
 8002722:	4770      	bx	lr
  ldr   sp, =_estack     /* set stack pointer */
 8002724:	20020000 	.word	0x20020000
  ldr  r3, =_sidata
 8002728:	080027d8 	.word	0x080027d8
  ldr  r0, =_sdata
 800272c:	20000000 	.word	0x20000000
  ldr  r3, =_edata
 8002730:	2000000c 	.word	0x2000000c
  ldr  r2, =_sbss
 8002734:	2000000c 	.word	0x2000000c
  ldr  r3, = _ebss
 8002738:	20000084 	.word	0x20000084

0800273c <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 800273c:	e7fe      	b.n	800273c <ADC_IRQHandler>
	...

08002740 <__libc_init_array>:
 8002740:	b570      	push	{r4, r5, r6, lr}
 8002742:	4e0d      	ldr	r6, [pc, #52]	; (8002778 <__libc_init_array+0x38>)
 8002744:	4c0d      	ldr	r4, [pc, #52]	; (800277c <__libc_init_array+0x3c>)
 8002746:	1ba4      	subs	r4, r4, r6
 8002748:	10a4      	asrs	r4, r4, #2
 800274a:	2500      	movs	r5, #0
 800274c:	42a5      	cmp	r5, r4
 800274e:	d109      	bne.n	8002764 <__libc_init_array+0x24>
 8002750:	4e0b      	ldr	r6, [pc, #44]	; (8002780 <__libc_init_array+0x40>)
 8002752:	4c0c      	ldr	r4, [pc, #48]	; (8002784 <__libc_init_array+0x44>)
 8002754:	f000 f820 	bl	8002798 <_init>
 8002758:	1ba4      	subs	r4, r4, r6
 800275a:	10a4      	asrs	r4, r4, #2
 800275c:	2500      	movs	r5, #0
 800275e:	42a5      	cmp	r5, r4
 8002760:	d105      	bne.n	800276e <__libc_init_array+0x2e>
 8002762:	bd70      	pop	{r4, r5, r6, pc}
 8002764:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 8002768:	4798      	blx	r3
 800276a:	3501      	adds	r5, #1
 800276c:	e7ee      	b.n	800274c <__libc_init_array+0xc>
 800276e:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 8002772:	4798      	blx	r3
 8002774:	3501      	adds	r5, #1
 8002776:	e7f2      	b.n	800275e <__libc_init_array+0x1e>
 8002778:	080027d0 	.word	0x080027d0
 800277c:	080027d0 	.word	0x080027d0
 8002780:	080027d0 	.word	0x080027d0
 8002784:	080027d4 	.word	0x080027d4

08002788 <memset>:
 8002788:	4402      	add	r2, r0
 800278a:	4603      	mov	r3, r0
 800278c:	4293      	cmp	r3, r2
 800278e:	d100      	bne.n	8002792 <memset+0xa>
 8002790:	4770      	bx	lr
 8002792:	f803 1b01 	strb.w	r1, [r3], #1
 8002796:	e7f9      	b.n	800278c <memset+0x4>

08002798 <_init>:
 8002798:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800279a:	bf00      	nop
 800279c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800279e:	bc08      	pop	{r3}
 80027a0:	469e      	mov	lr, r3
 80027a2:	4770      	bx	lr

080027a4 <_fini>:
 80027a4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80027a6:	bf00      	nop
 80027a8:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80027aa:	bc08      	pop	{r3}
 80027ac:	469e      	mov	lr, r3
 80027ae:	4770      	bx	lr
